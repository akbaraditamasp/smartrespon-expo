var __getOwnPropNames = Object.getOwnPropertyNames;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});
var require_index_001 = __commonJS({
  "assets/index-f97DfSAu.js"(exports, module) {
    var _focused, _cleanup, _setup, _a, _online, _cleanup2, _setup2, _b, _gcTimeout, _c, _initialState, _revertState, _cache, _client, _retryer, _defaultOptions, _abortSignalConsumed, _Query_instances, dispatch_fn, _d, _queries, _e2, _observers, _mutationCache, _retryer2, _Mutation_instances, dispatch_fn2, _f, _mutations, _scopes, _mutationId, _g, _queryCache, _mutationCache2, _defaultOptions2, _queryDefaults, _mutationDefaults, _mountCount, _unsubscribeFocus, _unsubscribeOnline, _h, _client2, _currentQuery, _currentQueryInitialState, _currentResult, _currentResultState, _currentResultOptions, _currentThenable, _selectError, _selectFn, _selectResult, _lastQueryWithDefinedData, _staleTimeoutId, _refetchIntervalId, _currentRefetchInterval, _trackedProps, _QueryObserver_instances, executeFetch_fn, updateStaleTimeout_fn, computeRefetchInterval_fn, updateRefetchInterval_fn, updateTimers_fn, clearStaleTimeout_fn, clearRefetchInterval_fn, updateQuery_fn, notify_fn, _i, _client3, _currentResult2, _currentMutation, _mutateOptions, _MutationObserver_instances, updateResult_fn, notify_fn2, _j;
    function _mergeNamespaces(n2, m2) {
      for (var i2 = 0; i2 < m2.length; i2++) {
        const e = m2[i2];
        if (typeof e !== "string" && !Array.isArray(e)) {
          for (const k2 in e) {
            if (k2 !== "default" && !(k2 in n2)) {
              const d = Object.getOwnPropertyDescriptor(e, k2);
              if (d) {
                Object.defineProperty(n2, k2, d.get ? d : {
                  enumerable: true,
                  get: () => e[k2]
                });
              }
            }
          }
        }
      }
      return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
    }
    (function polyfill() {
      const relList = document.createElement("link").relList;
      if (relList && relList.supports && relList.supports("modulepreload")) {
        return;
      }
      for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
      }
      new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (mutation.type !== "childList") {
            continue;
          }
          for (const node of mutation.addedNodes) {
            if (node.tagName === "LINK" && node.rel === "modulepreload")
              processPreload(node);
          }
        }
      }).observe(document, { childList: true, subtree: true });
      function getFetchOpts(link) {
        const fetchOpts = {};
        if (link.integrity) fetchOpts.integrity = link.integrity;
        if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
        if (link.crossOrigin === "use-credentials")
          fetchOpts.credentials = "include";
        else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
        else fetchOpts.credentials = "same-origin";
        return fetchOpts;
      }
      function processPreload(link) {
        if (link.ep)
          return;
        link.ep = true;
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
      }
    })();
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x2) {
      return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
    }
    var jsxRuntime = { exports: {} };
    var reactJsxRuntime_production = {};
    /**
     * @license React
     * react-jsx-runtime.production.js
     *
     * Copyright (c) Meta Platforms, Inc. and affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var hasRequiredReactJsxRuntime_production;
    function requireReactJsxRuntime_production() {
      if (hasRequiredReactJsxRuntime_production) return reactJsxRuntime_production;
      hasRequiredReactJsxRuntime_production = 1;
      var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      function jsxProd(type, config2, maybeKey) {
        var key = null;
        void 0 !== maybeKey && (key = "" + maybeKey);
        void 0 !== config2.key && (key = "" + config2.key);
        if ("key" in config2) {
          maybeKey = {};
          for (var propName in config2)
            "key" !== propName && (maybeKey[propName] = config2[propName]);
        } else maybeKey = config2;
        config2 = maybeKey.ref;
        return {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref: void 0 !== config2 ? config2 : null,
          props: maybeKey
        };
      }
      reactJsxRuntime_production.Fragment = REACT_FRAGMENT_TYPE;
      reactJsxRuntime_production.jsx = jsxProd;
      reactJsxRuntime_production.jsxs = jsxProd;
      return reactJsxRuntime_production;
    }
    var hasRequiredJsxRuntime;
    function requireJsxRuntime() {
      if (hasRequiredJsxRuntime) return jsxRuntime.exports;
      hasRequiredJsxRuntime = 1;
      {
        jsxRuntime.exports = requireReactJsxRuntime_production();
      }
      return jsxRuntime.exports;
    }
    var jsxRuntimeExports = requireJsxRuntime();
    var react = { exports: {} };
    var react_production = {};
    /**
     * @license React
     * react.production.js
     *
     * Copyright (c) Meta Platforms, Inc. and affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var hasRequiredReact_production;
    function requireReact_production() {
      if (hasRequiredReact_production) return react_production;
      hasRequiredReact_production = 1;
      var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
        return "function" === typeof maybeIterable ? maybeIterable : null;
      }
      var ReactNoopUpdateQueue = {
        isMounted: function() {
          return false;
        },
        enqueueForceUpdate: function() {
        },
        enqueueReplaceState: function() {
        },
        enqueueSetState: function() {
        }
      }, assign2 = Object.assign, emptyObject = {};
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState)
          throw Error(
            "takes an object of state variables to update or a function which returns an object of state variables."
          );
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;
      assign2(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      var isArrayImpl = Array.isArray, ReactSharedInternals = { H: null, A: null, T: null, S: null, V: null }, hasOwnProperty2 = Object.prototype.hasOwnProperty;
      function ReactElement(type, key, self2, source, owner, props) {
        self2 = props.ref;
        return {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref: void 0 !== self2 ? self2 : null,
          props
        };
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        return ReactElement(
          oldElement.type,
          newKey,
          void 0,
          void 0,
          void 0,
          oldElement.props
        );
      }
      function isValidElement(object2) {
        return "object" === typeof object2 && null !== object2 && object2.$$typeof === REACT_ELEMENT_TYPE;
      }
      function escape(key) {
        var escaperLookup = { "=": "=0", ":": "=2" };
        return "$" + key.replace(/[=:]/g, function(match) {
          return escaperLookup[match];
        });
      }
      var userProvidedKeyEscapeRegex = /\/+/g;
      function getElementKey(element, index2) {
        return "object" === typeof element && null !== element && null != element.key ? escape("" + element.key) : index2.toString(36);
      }
      function noop$12() {
      }
      function resolveThenable(thenable) {
        switch (thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenable.reason;
          default:
            switch ("string" === typeof thenable.status ? thenable.then(noop$12, noop$12) : (thenable.status = "pending", thenable.then(
              function(fulfilledValue) {
                "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
              },
              function(error) {
                "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
              }
            )), thenable.status) {
              case "fulfilled":
                return thenable.value;
              case "rejected":
                throw thenable.reason;
            }
        }
        throw thenable;
      }
      function mapIntoArray(children, array2, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if ("undefined" === type || "boolean" === type) children = null;
        var invokeCallback = false;
        if (null === children) invokeCallback = true;
        else
          switch (type) {
            case "bigint":
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
                  break;
                case REACT_LAZY_TYPE:
                  return invokeCallback = children._init, mapIntoArray(
                    invokeCallback(children._payload),
                    array2,
                    escapedPrefix,
                    nameSoFar,
                    callback
                  );
              }
          }
        if (invokeCallback)
          return callback = callback(children), invokeCallback = "" === nameSoFar ? "." + getElementKey(children, 0) : nameSoFar, isArrayImpl(callback) ? (escapedPrefix = "", null != invokeCallback && (escapedPrefix = invokeCallback.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array2, escapedPrefix, "", function(c2) {
            return c2;
          })) : null != callback && (isValidElement(callback) && (callback = cloneAndReplaceKey(
            callback,
            escapedPrefix + (null == callback.key || children && children.key === callback.key ? "" : ("" + callback.key).replace(
              userProvidedKeyEscapeRegex,
              "$&/"
            ) + "/") + invokeCallback
          )), array2.push(callback)), 1;
        invokeCallback = 0;
        var nextNamePrefix = "" === nameSoFar ? "." : nameSoFar + ":";
        if (isArrayImpl(children))
          for (var i2 = 0; i2 < children.length; i2++)
            nameSoFar = children[i2], type = nextNamePrefix + getElementKey(nameSoFar, i2), invokeCallback += mapIntoArray(
              nameSoFar,
              array2,
              escapedPrefix,
              type,
              callback
            );
        else if (i2 = getIteratorFn(children), "function" === typeof i2)
          for (children = i2.call(children), i2 = 0; !(nameSoFar = children.next()).done; )
            nameSoFar = nameSoFar.value, type = nextNamePrefix + getElementKey(nameSoFar, i2++), invokeCallback += mapIntoArray(
              nameSoFar,
              array2,
              escapedPrefix,
              type,
              callback
            );
        else if ("object" === type) {
          if ("function" === typeof children.then)
            return mapIntoArray(
              resolveThenable(children),
              array2,
              escapedPrefix,
              nameSoFar,
              callback
            );
          array2 = String(children);
          throw Error(
            "Objects are not valid as a React child (found: " + ("[object Object]" === array2 ? "object with keys {" + Object.keys(children).join(", ") + "}" : array2) + "). If you meant to render a collection of children, use an array instead."
          );
        }
        return invokeCallback;
      }
      function mapChildren(children, func, context) {
        if (null == children) return children;
        var result = [], count2 = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count2++);
        });
        return result;
      }
      function lazyInitializer(payload) {
        if (-1 === payload._status) {
          var ctor = payload._result;
          ctor = ctor();
          ctor.then(
            function(moduleObject) {
              if (0 === payload._status || -1 === payload._status)
                payload._status = 1, payload._result = moduleObject;
            },
            function(error) {
              if (0 === payload._status || -1 === payload._status)
                payload._status = 2, payload._result = error;
            }
          );
          -1 === payload._status && (payload._status = 0, payload._result = ctor);
        }
        if (1 === payload._status) return payload._result.default;
        throw payload._result;
      }
      var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
        if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
          var event = new window.ErrorEvent("error", {
            bubbles: true,
            cancelable: true,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error
          });
          if (!window.dispatchEvent(event)) return;
        } else if ("object" === typeof process && "function" === typeof process.emit) {
          process.emit("uncaughtException", error);
          return;
        }
        console.error(error);
      };
      function noop2() {
      }
      react_production.Children = {
        map: mapChildren,
        forEach: function(children, forEachFunc, forEachContext) {
          mapChildren(
            children,
            function() {
              forEachFunc.apply(this, arguments);
            },
            forEachContext
          );
        },
        count: function(children) {
          var n2 = 0;
          mapChildren(children, function() {
            n2++;
          });
          return n2;
        },
        toArray: function(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        },
        only: function(children) {
          if (!isValidElement(children))
            throw Error(
              "React.Children.only expected to receive a single React element child."
            );
          return children;
        }
      };
      react_production.Component = Component;
      react_production.Fragment = REACT_FRAGMENT_TYPE;
      react_production.Profiler = REACT_PROFILER_TYPE;
      react_production.PureComponent = PureComponent;
      react_production.StrictMode = REACT_STRICT_MODE_TYPE;
      react_production.Suspense = REACT_SUSPENSE_TYPE;
      react_production.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
      react_production.__COMPILER_RUNTIME = {
        __proto__: null,
        c: function(size2) {
          return ReactSharedInternals.H.useMemoCache(size2);
        }
      };
      react_production.cache = function(fn) {
        return function() {
          return fn.apply(null, arguments);
        };
      };
      react_production.cloneElement = function(element, config2, children) {
        if (null === element || void 0 === element)
          throw Error(
            "The argument must be a React element, but you passed " + element + "."
          );
        var props = assign2({}, element.props), key = element.key, owner = void 0;
        if (null != config2)
          for (propName in void 0 !== config2.ref && (owner = void 0), void 0 !== config2.key && (key = "" + config2.key), config2)
            !hasOwnProperty2.call(config2, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config2.ref || (props[propName] = config2[propName]);
        var propName = arguments.length - 2;
        if (1 === propName) props.children = children;
        else if (1 < propName) {
          for (var childArray = Array(propName), i2 = 0; i2 < propName; i2++)
            childArray[i2] = arguments[i2 + 2];
          props.children = childArray;
        }
        return ReactElement(element.type, key, void 0, void 0, owner, props);
      };
      react_production.createContext = function(defaultValue) {
        defaultValue = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null
        };
        defaultValue.Provider = defaultValue;
        defaultValue.Consumer = {
          $$typeof: REACT_CONSUMER_TYPE,
          _context: defaultValue
        };
        return defaultValue;
      };
      react_production.createElement = function(type, config2, children) {
        var propName, props = {}, key = null;
        if (null != config2)
          for (propName in void 0 !== config2.key && (key = "" + config2.key), config2)
            hasOwnProperty2.call(config2, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (props[propName] = config2[propName]);
        var childrenLength = arguments.length - 2;
        if (1 === childrenLength) props.children = children;
        else if (1 < childrenLength) {
          for (var childArray = Array(childrenLength), i2 = 0; i2 < childrenLength; i2++)
            childArray[i2] = arguments[i2 + 2];
          props.children = childArray;
        }
        if (type && type.defaultProps)
          for (propName in childrenLength = type.defaultProps, childrenLength)
            void 0 === props[propName] && (props[propName] = childrenLength[propName]);
        return ReactElement(type, key, void 0, void 0, null, props);
      };
      react_production.createRef = function() {
        return { current: null };
      };
      react_production.forwardRef = function(render) {
        return { $$typeof: REACT_FORWARD_REF_TYPE, render };
      };
      react_production.isValidElement = isValidElement;
      react_production.lazy = function(ctor) {
        return {
          $$typeof: REACT_LAZY_TYPE,
          _payload: { _status: -1, _result: ctor },
          _init: lazyInitializer
        };
      };
      react_production.memo = function(type, compare) {
        return {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: void 0 === compare ? null : compare
        };
      };
      react_production.startTransition = function(scope) {
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        try {
          var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
          null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
          "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop2, reportGlobalError);
        } catch (error) {
          reportGlobalError(error);
        } finally {
          ReactSharedInternals.T = prevTransition;
        }
      };
      react_production.unstable_useCacheRefresh = function() {
        return ReactSharedInternals.H.useCacheRefresh();
      };
      react_production.use = function(usable) {
        return ReactSharedInternals.H.use(usable);
      };
      react_production.useActionState = function(action, initialState, permalink) {
        return ReactSharedInternals.H.useActionState(action, initialState, permalink);
      };
      react_production.useCallback = function(callback, deps) {
        return ReactSharedInternals.H.useCallback(callback, deps);
      };
      react_production.useContext = function(Context) {
        return ReactSharedInternals.H.useContext(Context);
      };
      react_production.useDebugValue = function() {
      };
      react_production.useDeferredValue = function(value, initialValue) {
        return ReactSharedInternals.H.useDeferredValue(value, initialValue);
      };
      react_production.useEffect = function(create2, createDeps, update) {
        var dispatcher = ReactSharedInternals.H;
        if ("function" === typeof update)
          throw Error(
            "useEffect CRUD overload is not enabled in this build of React."
          );
        return dispatcher.useEffect(create2, createDeps);
      };
      react_production.useId = function() {
        return ReactSharedInternals.H.useId();
      };
      react_production.useImperativeHandle = function(ref, create2, deps) {
        return ReactSharedInternals.H.useImperativeHandle(ref, create2, deps);
      };
      react_production.useInsertionEffect = function(create2, deps) {
        return ReactSharedInternals.H.useInsertionEffect(create2, deps);
      };
      react_production.useLayoutEffect = function(create2, deps) {
        return ReactSharedInternals.H.useLayoutEffect(create2, deps);
      };
      react_production.useMemo = function(create2, deps) {
        return ReactSharedInternals.H.useMemo(create2, deps);
      };
      react_production.useOptimistic = function(passthrough, reducer) {
        return ReactSharedInternals.H.useOptimistic(passthrough, reducer);
      };
      react_production.useReducer = function(reducer, initialArg, init) {
        return ReactSharedInternals.H.useReducer(reducer, initialArg, init);
      };
      react_production.useRef = function(initialValue) {
        return ReactSharedInternals.H.useRef(initialValue);
      };
      react_production.useState = function(initialState) {
        return ReactSharedInternals.H.useState(initialState);
      };
      react_production.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
        return ReactSharedInternals.H.useSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        );
      };
      react_production.useTransition = function() {
        return ReactSharedInternals.H.useTransition();
      };
      react_production.version = "19.1.0";
      return react_production;
    }
    var hasRequiredReact;
    function requireReact() {
      if (hasRequiredReact) return react.exports;
      hasRequiredReact = 1;
      {
        react.exports = requireReact_production();
      }
      return react.exports;
    }
    var reactExports = requireReact();
    const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
    const React$1 = /* @__PURE__ */ _mergeNamespaces({
      __proto__: null,
      default: React
    }, [reactExports]);
    var client$1 = { exports: {} };
    var reactDomClient_production = {};
    var scheduler = { exports: {} };
    var scheduler_production = {};
    /**
     * @license React
     * scheduler.production.js
     *
     * Copyright (c) Meta Platforms, Inc. and affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var hasRequiredScheduler_production;
    function requireScheduler_production() {
      if (hasRequiredScheduler_production) return scheduler_production;
      hasRequiredScheduler_production = 1;
      (function(exports2) {
        function push(heap, node) {
          var index2 = heap.length;
          heap.push(node);
          a: for (; 0 < index2; ) {
            var parentIndex = index2 - 1 >>> 1, parent = heap[parentIndex];
            if (0 < compare(parent, node))
              heap[parentIndex] = node, heap[index2] = parent, index2 = parentIndex;
            else break a;
          }
        }
        function peek(heap) {
          return 0 === heap.length ? null : heap[0];
        }
        function pop(heap) {
          if (0 === heap.length) return null;
          var first = heap[0], last2 = heap.pop();
          if (last2 !== first) {
            heap[0] = last2;
            a: for (var index2 = 0, length = heap.length, halfLength = length >>> 1; index2 < halfLength; ) {
              var leftIndex = 2 * (index2 + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
              if (0 > compare(left, last2))
                rightIndex < length && 0 > compare(right, left) ? (heap[index2] = right, heap[rightIndex] = last2, index2 = rightIndex) : (heap[index2] = left, heap[leftIndex] = last2, index2 = leftIndex);
              else if (rightIndex < length && 0 > compare(right, last2))
                heap[index2] = right, heap[rightIndex] = last2, index2 = rightIndex;
              else break a;
            }
          }
          return first;
        }
        function compare(a2, b) {
          var diff2 = a2.sortIndex - b.sortIndex;
          return 0 !== diff2 ? diff2 : a2.id - b.id;
        }
        exports2.unstable_now = void 0;
        if ("object" === typeof performance && "function" === typeof performance.now) {
          var localPerformance = performance;
          exports2.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate2 = Date, initialTime = localDate2.now();
          exports2.unstable_now = function() {
            return localDate2.now() - initialTime;
          };
        }
        var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = false, isHostCallbackScheduled = false, isHostTimeoutScheduled = false, needsPaint = false, localSetTimeout = "function" === typeof setTimeout ? setTimeout : null, localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null, localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
        function advanceTimers(currentTime) {
          for (var timer = peek(timerQueue); null !== timer; ) {
            if (null === timer.callback) pop(timerQueue);
            else if (timer.startTime <= currentTime)
              pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
            else break;
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled)
            if (null !== peek(taskQueue))
              isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());
            else {
              var firstTimer = peek(timerQueue);
              null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
        var isMessageLoopRunning = false, taskTimeoutID = -1, frameInterval = 5, startTime = -1;
        function shouldYieldToHost() {
          return needsPaint ? true : exports2.unstable_now() - startTime < frameInterval ? false : true;
        }
        function performWorkUntilDeadline() {
          needsPaint = false;
          if (isMessageLoopRunning) {
            var currentTime = exports2.unstable_now();
            startTime = currentTime;
            var hasMoreWork = true;
            try {
              a: {
                isHostCallbackScheduled = false;
                isHostTimeoutScheduled && (isHostTimeoutScheduled = false, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
                isPerformingWork = true;
                var previousPriorityLevel = currentPriorityLevel;
                try {
                  b: {
                    advanceTimers(currentTime);
                    for (currentTask = peek(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost()); ) {
                      var callback = currentTask.callback;
                      if ("function" === typeof callback) {
                        currentTask.callback = null;
                        currentPriorityLevel = currentTask.priorityLevel;
                        var continuationCallback = callback(
                          currentTask.expirationTime <= currentTime
                        );
                        currentTime = exports2.unstable_now();
                        if ("function" === typeof continuationCallback) {
                          currentTask.callback = continuationCallback;
                          advanceTimers(currentTime);
                          hasMoreWork = true;
                          break b;
                        }
                        currentTask === peek(taskQueue) && pop(taskQueue);
                        advanceTimers(currentTime);
                      } else pop(taskQueue);
                      currentTask = peek(taskQueue);
                    }
                    if (null !== currentTask) hasMoreWork = true;
                    else {
                      var firstTimer = peek(timerQueue);
                      null !== firstTimer && requestHostTimeout(
                        handleTimeout,
                        firstTimer.startTime - currentTime
                      );
                      hasMoreWork = false;
                    }
                  }
                  break a;
                } finally {
                  currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
                }
                hasMoreWork = void 0;
              }
            } finally {
              hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = false;
            }
          }
        }
        var schedulePerformWorkUntilDeadline;
        if ("function" === typeof localSetImmediate)
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        else if ("undefined" !== typeof MessageChannel) {
          var channel = new MessageChannel(), port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports2.unstable_now());
          }, ms);
        }
        exports2.unstable_IdlePriority = 5;
        exports2.unstable_ImmediatePriority = 1;
        exports2.unstable_LowPriority = 4;
        exports2.unstable_NormalPriority = 3;
        exports2.unstable_Profiling = null;
        exports2.unstable_UserBlockingPriority = 2;
        exports2.unstable_cancelCallback = function(task) {
          task.callback = null;
        };
        exports2.unstable_forceFrameRate = function(fps) {
          0 > fps || 125 < fps ? console.error(
            "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
          ) : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;
        };
        exports2.unstable_getCurrentPriorityLevel = function() {
          return currentPriorityLevel;
        };
        exports2.unstable_next = function(eventHandler) {
          switch (currentPriorityLevel) {
            case 1:
            case 2:
            case 3:
              var priorityLevel = 3;
              break;
            default:
              priorityLevel = currentPriorityLevel;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
        exports2.unstable_requestPaint = function() {
          needsPaint = true;
        };
        exports2.unstable_runWithPriority = function(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              break;
            default:
              priorityLevel = 3;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
        exports2.unstable_scheduleCallback = function(priorityLevel, callback, options2) {
          var currentTime = exports2.unstable_now();
          "object" === typeof options2 && null !== options2 ? (options2 = options2.delay, options2 = "number" === typeof options2 && 0 < options2 ? currentTime + options2 : currentTime) : options2 = currentTime;
          switch (priorityLevel) {
            case 1:
              var timeout = -1;
              break;
            case 2:
              timeout = 250;
              break;
            case 5:
              timeout = 1073741823;
              break;
            case 4:
              timeout = 1e4;
              break;
            default:
              timeout = 5e3;
          }
          timeout = options2 + timeout;
          priorityLevel = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: options2,
            expirationTime: timeout,
            sortIndex: -1
          };
          options2 > currentTime ? (priorityLevel.sortIndex = options2, push(timerQueue, priorityLevel), null === peek(taskQueue) && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, options2 - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline())));
          return priorityLevel;
        };
        exports2.unstable_shouldYield = shouldYieldToHost;
        exports2.unstable_wrapCallback = function(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        };
      })(scheduler_production);
      return scheduler_production;
    }
    var hasRequiredScheduler;
    function requireScheduler() {
      if (hasRequiredScheduler) return scheduler.exports;
      hasRequiredScheduler = 1;
      {
        scheduler.exports = requireScheduler_production();
      }
      return scheduler.exports;
    }
    var reactDom = { exports: {} };
    var reactDom_production = {};
    /**
     * @license React
     * react-dom.production.js
     *
     * Copyright (c) Meta Platforms, Inc. and affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var hasRequiredReactDom_production;
    function requireReactDom_production() {
      if (hasRequiredReactDom_production) return reactDom_production;
      hasRequiredReactDom_production = 1;
      var React2 = requireReact();
      function formatProdErrorMessage(code) {
        var url = "https://react.dev/errors/" + code;
        if (1 < arguments.length) {
          url += "?args[]=" + encodeURIComponent(arguments[1]);
          for (var i2 = 2; i2 < arguments.length; i2++)
            url += "&args[]=" + encodeURIComponent(arguments[i2]);
        }
        return "Minified React error #" + code + "; visit " + url + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      function noop2() {
      }
      var Internals = {
        d: {
          f: noop2,
          r: function() {
            throw Error(formatProdErrorMessage(522));
          },
          D: noop2,
          C: noop2,
          L: noop2,
          m: noop2,
          X: noop2,
          S: noop2,
          M: noop2
        },
        p: 0,
        findDOMNode: null
      }, REACT_PORTAL_TYPE = Symbol.for("react.portal");
      function createPortal$1(children, containerInfo, implementation) {
        var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: null == key ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var ReactSharedInternals = React2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
      function getCrossOriginStringAs(as2, input) {
        if ("font" === as2) return "";
        if ("string" === typeof input)
          return "use-credentials" === input ? input : "";
      }
      reactDom_production.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
      reactDom_production.createPortal = function(children, container) {
        var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
        if (!container || 1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType)
          throw Error(formatProdErrorMessage(299));
        return createPortal$1(children, container, null, key);
      };
      reactDom_production.flushSync = function(fn) {
        var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
        try {
          if (ReactSharedInternals.T = null, Internals.p = 2, fn) return fn();
        } finally {
          ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f();
        }
      };
      reactDom_production.preconnect = function(href, options2) {
        "string" === typeof href && (options2 ? (options2 = options2.crossOrigin, options2 = "string" === typeof options2 ? "use-credentials" === options2 ? options2 : "" : void 0) : options2 = null, Internals.d.C(href, options2));
      };
      reactDom_production.prefetchDNS = function(href) {
        "string" === typeof href && Internals.d.D(href);
      };
      reactDom_production.preinit = function(href, options2) {
        if ("string" === typeof href && options2 && "string" === typeof options2.as) {
          var as2 = options2.as, crossOrigin = getCrossOriginStringAs(as2, options2.crossOrigin), integrity = "string" === typeof options2.integrity ? options2.integrity : void 0, fetchPriority = "string" === typeof options2.fetchPriority ? options2.fetchPriority : void 0;
          "style" === as2 ? Internals.d.S(
            href,
            "string" === typeof options2.precedence ? options2.precedence : void 0,
            {
              crossOrigin,
              integrity,
              fetchPriority
            }
          ) : "script" === as2 && Internals.d.X(href, {
            crossOrigin,
            integrity,
            fetchPriority,
            nonce: "string" === typeof options2.nonce ? options2.nonce : void 0
          });
        }
      };
      reactDom_production.preinitModule = function(href, options2) {
        if ("string" === typeof href)
          if ("object" === typeof options2 && null !== options2) {
            if (null == options2.as || "script" === options2.as) {
              var crossOrigin = getCrossOriginStringAs(
                options2.as,
                options2.crossOrigin
              );
              Internals.d.M(href, {
                crossOrigin,
                integrity: "string" === typeof options2.integrity ? options2.integrity : void 0,
                nonce: "string" === typeof options2.nonce ? options2.nonce : void 0
              });
            }
          } else null == options2 && Internals.d.M(href);
      };
      reactDom_production.preload = function(href, options2) {
        if ("string" === typeof href && "object" === typeof options2 && null !== options2 && "string" === typeof options2.as) {
          var as2 = options2.as, crossOrigin = getCrossOriginStringAs(as2, options2.crossOrigin);
          Internals.d.L(href, as2, {
            crossOrigin,
            integrity: "string" === typeof options2.integrity ? options2.integrity : void 0,
            nonce: "string" === typeof options2.nonce ? options2.nonce : void 0,
            type: "string" === typeof options2.type ? options2.type : void 0,
            fetchPriority: "string" === typeof options2.fetchPriority ? options2.fetchPriority : void 0,
            referrerPolicy: "string" === typeof options2.referrerPolicy ? options2.referrerPolicy : void 0,
            imageSrcSet: "string" === typeof options2.imageSrcSet ? options2.imageSrcSet : void 0,
            imageSizes: "string" === typeof options2.imageSizes ? options2.imageSizes : void 0,
            media: "string" === typeof options2.media ? options2.media : void 0
          });
        }
      };
      reactDom_production.preloadModule = function(href, options2) {
        if ("string" === typeof href)
          if (options2) {
            var crossOrigin = getCrossOriginStringAs(options2.as, options2.crossOrigin);
            Internals.d.m(href, {
              as: "string" === typeof options2.as && "script" !== options2.as ? options2.as : void 0,
              crossOrigin,
              integrity: "string" === typeof options2.integrity ? options2.integrity : void 0
            });
          } else Internals.d.m(href);
      };
      reactDom_production.requestFormReset = function(form) {
        Internals.d.r(form);
      };
      reactDom_production.unstable_batchedUpdates = function(fn, a2) {
        return fn(a2);
      };
      reactDom_production.useFormState = function(action, initialState, permalink) {
        return ReactSharedInternals.H.useFormState(action, initialState, permalink);
      };
      reactDom_production.useFormStatus = function() {
        return ReactSharedInternals.H.useHostTransitionStatus();
      };
      reactDom_production.version = "19.1.0";
      return reactDom_production;
    }
    var hasRequiredReactDom;
    function requireReactDom() {
      if (hasRequiredReactDom) return reactDom.exports;
      hasRequiredReactDom = 1;
      function checkDCE() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
          return;
        }
        try {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
        } catch (err) {
          console.error(err);
        }
      }
      {
        checkDCE();
        reactDom.exports = requireReactDom_production();
      }
      return reactDom.exports;
    }
    /**
     * @license React
     * react-dom-client.production.js
     *
     * Copyright (c) Meta Platforms, Inc. and affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var hasRequiredReactDomClient_production;
    function requireReactDomClient_production() {
      if (hasRequiredReactDomClient_production) return reactDomClient_production;
      hasRequiredReactDomClient_production = 1;
      var Scheduler = requireScheduler(), React2 = requireReact(), ReactDOM2 = requireReactDom();
      function formatProdErrorMessage(code) {
        var url = "https://react.dev/errors/" + code;
        if (1 < arguments.length) {
          url += "?args[]=" + encodeURIComponent(arguments[1]);
          for (var i2 = 2; i2 < arguments.length; i2++)
            url += "&args[]=" + encodeURIComponent(arguments[i2]);
        }
        return "Minified React error #" + code + "; visit " + url + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      function isValidContainer(node) {
        return !(!node || 1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType);
      }
      function getNearestMountedFiber(fiber) {
        var node = fiber, nearestMounted = fiber;
        if (fiber.alternate) for (; node.return; ) node = node.return;
        else {
          fiber = node;
          do
            node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return;
          while (fiber);
        }
        return 3 === node.tag ? nearestMounted : null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (13 === fiber.tag) {
          var suspenseState = fiber.memoizedState;
          null === suspenseState && (fiber = fiber.alternate, null !== fiber && (suspenseState = fiber.memoizedState));
          if (null !== suspenseState) return suspenseState.dehydrated;
        }
        return null;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber)
          throw Error(formatProdErrorMessage(188));
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          alternate = getNearestMountedFiber(fiber);
          if (null === alternate) throw Error(formatProdErrorMessage(188));
          return alternate !== fiber ? null : fiber;
        }
        for (var a2 = fiber, b = alternate; ; ) {
          var parentA = a2.return;
          if (null === parentA) break;
          var parentB = parentA.alternate;
          if (null === parentB) {
            b = parentA.return;
            if (null !== b) {
              a2 = b;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            for (parentB = parentA.child; parentB; ) {
              if (parentB === a2) return assertIsMounted(parentA), fiber;
              if (parentB === b) return assertIsMounted(parentA), alternate;
              parentB = parentB.sibling;
            }
            throw Error(formatProdErrorMessage(188));
          }
          if (a2.return !== b.return) a2 = parentA, b = parentB;
          else {
            for (var didFindChild = false, child$0 = parentA.child; child$0; ) {
              if (child$0 === a2) {
                didFindChild = true;
                a2 = parentA;
                b = parentB;
                break;
              }
              if (child$0 === b) {
                didFindChild = true;
                b = parentA;
                a2 = parentB;
                break;
              }
              child$0 = child$0.sibling;
            }
            if (!didFindChild) {
              for (child$0 = parentB.child; child$0; ) {
                if (child$0 === a2) {
                  didFindChild = true;
                  a2 = parentB;
                  b = parentA;
                  break;
                }
                if (child$0 === b) {
                  didFindChild = true;
                  b = parentB;
                  a2 = parentA;
                  break;
                }
                child$0 = child$0.sibling;
              }
              if (!didFindChild) throw Error(formatProdErrorMessage(189));
            }
          }
          if (a2.alternate !== b) throw Error(formatProdErrorMessage(190));
        }
        if (3 !== a2.tag) throw Error(formatProdErrorMessage(188));
        return a2.stateNode.current === a2 ? fiber : alternate;
      }
      function findCurrentHostFiberImpl(node) {
        var tag = node.tag;
        if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
        for (node = node.child; null !== node; ) {
          tag = findCurrentHostFiberImpl(node);
          if (null !== tag) return tag;
          node = node.sibling;
        }
        return null;
      }
      var assign2 = Object.assign, REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
      var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
        return "function" === typeof maybeIterable ? maybeIterable : null;
      }
      var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
      function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type)
          return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
          case REACT_ACTIVITY_TYPE:
            return "Activity";
        }
        if ("object" === typeof type)
          switch (type.$$typeof) {
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_CONTEXT_TYPE:
              return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
              return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
              var innerType = type.render;
              type = type.displayName;
              type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
              return type;
            case REACT_MEMO_TYPE:
              return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
              innerType = type._payload;
              type = type._init;
              try {
                return getComponentNameFromType(type(innerType));
              } catch (x2) {
              }
          }
        return null;
      }
      var isArrayImpl = Array.isArray, ReactSharedInternals = React2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, ReactDOMSharedInternals = ReactDOM2.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, sharedNotPendingObject = {
        pending: false,
        data: null,
        method: null,
        action: null
      }, valueStack = [], index2 = -1;
      function createCursor(defaultValue) {
        return { current: defaultValue };
      }
      function pop(cursor) {
        0 > index2 || (cursor.current = valueStack[index2], valueStack[index2] = null, index2--);
      }
      function push(cursor, value) {
        index2++;
        valueStack[index2] = cursor.current;
        cursor.current = value;
      }
      var contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null);
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance);
        push(contextFiberStackCursor, fiber);
        push(contextStackCursor, null);
        switch (nextRootInstance.nodeType) {
          case 9:
          case 11:
            fiber = (fiber = nextRootInstance.documentElement) ? (fiber = fiber.namespaceURI) ? getOwnHostContext(fiber) : 0 : 0;
            break;
          default:
            if (fiber = nextRootInstance.tagName, nextRootInstance = nextRootInstance.namespaceURI)
              nextRootInstance = getOwnHostContext(nextRootInstance), fiber = getChildHostContextProd(nextRootInstance, fiber);
            else
              switch (fiber) {
                case "svg":
                  fiber = 1;
                  break;
                case "math":
                  fiber = 2;
                  break;
                default:
                  fiber = 0;
              }
        }
        pop(contextStackCursor);
        push(contextStackCursor, fiber);
      }
      function popHostContainer() {
        pop(contextStackCursor);
        pop(contextFiberStackCursor);
        pop(rootInstanceStackCursor);
      }
      function pushHostContext(fiber) {
        null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
        var context = contextStackCursor.current;
        var JSCompiler_inline_result = getChildHostContextProd(context, fiber.type);
        context !== JSCompiler_inline_result && (push(contextFiberStackCursor, fiber), push(contextStackCursor, JSCompiler_inline_result));
      }
      function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor), pop(contextFiberStackCursor));
        hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor), HostTransitionContext._currentValue = sharedNotPendingObject);
      }
      var hasOwnProperty2 = Object.prototype.hasOwnProperty, scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now2 = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null;
      function setIsStrictModeForDevtools(newIsStrictMode) {
        "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
        if (injectedHook && "function" === typeof injectedHook.setStrictMode)
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
          }
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log2 = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x2) {
        x2 >>>= 0;
        return 0 === x2 ? 32 : 31 - (log2(x2) / LN2 | 0) | 0;
      }
      var nextTransitionLane = 256, nextRetryLane = 4194304;
      function getHighestPriorityLanes(lanes) {
        var pendingSyncLanes = lanes & 42;
        if (0 !== pendingSyncLanes) return pendingSyncLanes;
        switch (lanes & -lanes) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
            return 64;
          case 128:
            return 128;
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return lanes & 4194048;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return lanes & 62914560;
          case 67108864:
            return 67108864;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 0;
          default:
            return lanes;
        }
      }
      function getNextLanes(root2, wipLanes, rootHasPendingCommit) {
        var pendingLanes = root2.pendingLanes;
        if (0 === pendingLanes) return 0;
        var nextLanes = 0, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes;
        root2 = root2.warmLanes;
        var nonIdlePendingLanes = pendingLanes & 134217727;
        0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = nonIdlePendingLanes & ~root2, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = pendingLanes & ~root2, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
        return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, rootHasPendingCommit = wipLanes & -wipLanes, suspendedLanes >= rootHasPendingCommit || 32 === suspendedLanes && 0 !== (rootHasPendingCommit & 4194048)) ? wipLanes : nextLanes;
      }
      function checkIfRootIsPrerendering(root2, renderLanes2) {
        return 0 === (root2.pendingLanes & ~(root2.suspendedLanes & ~root2.pingedLanes) & renderLanes2);
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case 1:
          case 2:
          case 4:
          case 8:
          case 64:
            return currentTime + 250;
          case 16:
          case 32:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return currentTime + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return -1;
          case 67108864:
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return -1;
        }
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        0 === (nextTransitionLane & 4194048) && (nextTransitionLane = 256);
        return lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
        return lane;
      }
      function createLaneMap(initial) {
        for (var laneMap = [], i2 = 0; 31 > i2; i2++) laneMap.push(initial);
        return laneMap;
      }
      function markRootUpdated$1(root2, updateLane) {
        root2.pendingLanes |= updateLane;
        268435456 !== updateLane && (root2.suspendedLanes = 0, root2.pingedLanes = 0, root2.warmLanes = 0);
      }
      function markRootFinished(root2, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
        var previouslyPendingLanes = root2.pendingLanes;
        root2.pendingLanes = remainingLanes;
        root2.suspendedLanes = 0;
        root2.pingedLanes = 0;
        root2.warmLanes = 0;
        root2.expiredLanes &= remainingLanes;
        root2.entangledLanes &= remainingLanes;
        root2.errorRecoveryDisabledLanes &= remainingLanes;
        root2.shellSuspendCounter = 0;
        var entanglements = root2.entanglements, expirationTimes = root2.expirationTimes, hiddenUpdates = root2.hiddenUpdates;
        for (remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes; ) {
          var index$5 = 31 - clz32(remainingLanes), lane = 1 << index$5;
          entanglements[index$5] = 0;
          expirationTimes[index$5] = -1;
          var hiddenUpdatesForLane = hiddenUpdates[index$5];
          if (null !== hiddenUpdatesForLane)
            for (hiddenUpdates[index$5] = null, index$5 = 0; index$5 < hiddenUpdatesForLane.length; index$5++) {
              var update = hiddenUpdatesForLane[index$5];
              null !== update && (update.lane &= -536870913);
            }
          remainingLanes &= ~lane;
        }
        0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, 0);
        0 !== suspendedRetryLanes && 0 === updatedLanes && 0 !== root2.tag && (root2.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
      }
      function markSpawnedDeferredLane(root2, spawnedLane, entangledLanes) {
        root2.pendingLanes |= spawnedLane;
        root2.suspendedLanes &= ~spawnedLane;
        var spawnedLaneIndex = 31 - clz32(spawnedLane);
        root2.entangledLanes |= spawnedLane;
        root2.entanglements[spawnedLaneIndex] = root2.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194090;
      }
      function markRootEntangled(root2, entangledLanes) {
        var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
        for (root2 = root2.entanglements; rootEntangledLanes; ) {
          var index$6 = 31 - clz32(rootEntangledLanes), lane = 1 << index$6;
          lane & entangledLanes | root2[index$6] & entangledLanes && (root2[index$6] |= entangledLanes);
          rootEntangledLanes &= ~lane;
        }
      }
      function getBumpedLaneForHydrationByLane(lane) {
        switch (lane) {
          case 2:
            lane = 1;
            break;
          case 8:
            lane = 4;
            break;
          case 32:
            lane = 16;
            break;
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            lane = 128;
            break;
          case 268435456:
            lane = 134217728;
            break;
          default:
            lane = 0;
        }
        return lane;
      }
      function lanesToEventPriority(lanes) {
        lanes &= -lanes;
        return 2 < lanes ? 8 < lanes ? 0 !== (lanes & 134217727) ? 32 : 268435456 : 8 : 2;
      }
      function resolveUpdatePriority() {
        var updatePriority = ReactDOMSharedInternals.p;
        if (0 !== updatePriority) return updatePriority;
        updatePriority = window.event;
        return void 0 === updatePriority ? 32 : getEventPriority(updatePriority.type);
      }
      function runWithPriority(priority, fn) {
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          return ReactDOMSharedInternals.p = priority, fn();
        } finally {
          ReactDOMSharedInternals.p = previousPriority;
        }
      }
      var randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey, internalRootNodeResourcesKey = "__reactResources$" + randomKey, internalHoistableMarker = "__reactMarker$" + randomKey;
      function detachDeletedInstance(node) {
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) return targetInst;
        for (var parentNode = targetNode.parentNode; parentNode; ) {
          if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
            parentNode = targetInst.alternate;
            if (null !== targetInst.child || null !== parentNode && null !== parentNode.child)
              for (targetNode = getParentSuspenseInstance(targetNode); null !== targetNode; ) {
                if (parentNode = targetNode[internalInstanceKey]) return parentNode;
                targetNode = getParentSuspenseInstance(targetNode);
              }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        if (node = node[internalInstanceKey] || node[internalContainerInstanceKey]) {
          var tag = node.tag;
          if (5 === tag || 6 === tag || 13 === tag || 26 === tag || 27 === tag || 3 === tag)
            return node;
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        var tag = inst.tag;
        if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return inst.stateNode;
        throw Error(formatProdErrorMessage(33));
      }
      function getResourcesFromRoot(root2) {
        var resources = root2[internalRootNodeResourcesKey];
        resources || (resources = root2[internalRootNodeResourcesKey] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() });
        return resources;
      }
      function markNodeAsHoistable(node) {
        node[internalHoistableMarker] = true;
      }
      var allNativeEvents = /* @__PURE__ */ new Set(), registrationNameDependencies = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        registrationNameDependencies[registrationName] = dependencies;
        for (registrationName = 0; registrationName < dependencies.length; registrationName++)
          allNativeEvents.add(dependencies[registrationName]);
      }
      var VALID_ATTRIBUTE_NAME_REGEX = RegExp(
        "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      ), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName))
          return true;
        if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
          return validatedAttributeNameCache[attributeName] = true;
        illegalAttributeNameCache[attributeName] = true;
        return false;
      }
      function setValueForAttribute(node, name, value) {
        if (isAttributeNameSafe(name))
          if (null === value) node.removeAttribute(name);
          else {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
                node.removeAttribute(name);
                return;
              case "boolean":
                var prefix$8 = name.toLowerCase().slice(0, 5);
                if ("data-" !== prefix$8 && "aria-" !== prefix$8) {
                  node.removeAttribute(name);
                  return;
                }
            }
            node.setAttribute(name, "" + value);
          }
      }
      function setValueForKnownAttribute(node, name, value) {
        if (null === value) node.removeAttribute(name);
        else {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              node.removeAttribute(name);
              return;
          }
          node.setAttribute(name, "" + value);
        }
      }
      function setValueForNamespacedAttribute(node, namespace, name, value) {
        if (null === value) node.removeAttribute(name);
        else {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              node.removeAttribute(name);
              return;
          }
          node.setAttributeNS(namespace, name, "" + value);
        }
      }
      var prefix2, suffix;
      function describeBuiltInComponentFrame(name) {
        if (void 0 === prefix2)
          try {
            throw Error();
          } catch (x2) {
            var match = x2.stack.trim().match(/\n( *(at )?)/);
            prefix2 = match && match[1] || "";
            suffix = -1 < x2.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x2.stack.indexOf("@") ? "@unknown:0:0" : "";
          }
        return "\n" + prefix2 + name + suffix;
      }
      var reentry = false;
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return "";
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
              try {
                if (construct) {
                  var Fake = function() {
                    throw Error();
                  };
                  Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  });
                  if ("object" === typeof Reflect && Reflect.construct) {
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x2) {
                      var control = x2;
                    }
                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x$9) {
                      control = x$9;
                    }
                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x$10) {
                    control = x$10;
                  }
                  (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {
                  });
                }
              } catch (sample) {
                if (sample && control && "string" === typeof sample.stack)
                  return [sample.stack, control.stack];
              }
              return [null, null];
            }
          };
          RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var namePropDescriptor = Object.getOwnPropertyDescriptor(
            RunInRootFrame.DetermineComponentFrameRoot,
            "name"
          );
          namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(
            RunInRootFrame.DetermineComponentFrameRoot,
            "name",
            { value: "DetermineComponentFrameRoot" }
          );
          var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
          if (sampleStack && controlStack) {
            var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
            for (namePropDescriptor = RunInRootFrame = 0; RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot"); )
              RunInRootFrame++;
            for (; namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes(
              "DetermineComponentFrameRoot"
            ); )
              namePropDescriptor++;
            if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length)
              for (RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1; 1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]; )
                namePropDescriptor--;
            for (; 1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--)
              if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
                  do
                    if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                      var frame = "\n" + sampleLines[RunInRootFrame].replace(" at new ", " at ");
                      fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
                      return frame;
                    }
                  while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
                }
                break;
              }
          }
        } finally {
          reentry = false, Error.prepareStackTrace = previousPrepareStackTrace;
        }
        return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
      }
      function describeFiber(fiber) {
        switch (fiber.tag) {
          case 26:
          case 27:
          case 5:
            return describeBuiltInComponentFrame(fiber.type);
          case 16:
            return describeBuiltInComponentFrame("Lazy");
          case 13:
            return describeBuiltInComponentFrame("Suspense");
          case 19:
            return describeBuiltInComponentFrame("SuspenseList");
          case 0:
          case 15:
            return describeNativeComponentFrame(fiber.type, false);
          case 11:
            return describeNativeComponentFrame(fiber.type.render, false);
          case 1:
            return describeNativeComponentFrame(fiber.type, true);
          case 31:
            return describeBuiltInComponentFrame("Activity");
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "";
          do
            info += describeFiber(workInProgress2), workInProgress2 = workInProgress2.return;
          while (workInProgress2);
          return info;
        } catch (x2) {
          return "\nError generating stack: " + x2.message + "\n" + x2.stack;
        }
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "bigint":
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            return value;
          default:
            return "";
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        return (elem = elem.nodeName) && "input" === elem.toLowerCase() && ("checkbox" === type || "radio" === type);
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(
          node.constructor.prototype,
          valueField
        ), currentValue = "" + node[valueField];
        if (!node.hasOwnProperty(valueField) && "undefined" !== typeof descriptor && "function" === typeof descriptor.get && "function" === typeof descriptor.set) {
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          return {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              currentValue = "" + value;
            },
            stopTracking: function() {
              node._valueTracker = null;
              delete node[valueField];
            }
          };
        }
      }
      function track(node) {
        node._valueTracker || (node._valueTracker = trackValueOnNode(node));
      }
      function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = node._valueTracker;
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var value = "";
        node && (value = isCheckable(node) ? node.checked ? "true" : "false" : node.value);
        node = value;
        return node !== lastValue ? (tracker.setValue(node), true) : false;
      }
      function getActiveElement(doc) {
        doc = doc || ("undefined" !== typeof document ? document : void 0);
        if ("undefined" === typeof doc) return null;
        try {
          return doc.activeElement || doc.body;
        } catch (e) {
          return doc.body;
        }
      }
      var escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g;
      function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
        return value.replace(
          escapeSelectorAttributeValueInsideDoubleQuotesRegex,
          function(ch) {
            return "\\" + ch.charCodeAt(0).toString(16) + " ";
          }
        );
      }
      function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
        element.name = "";
        null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type ? element.type = type : element.removeAttribute("type");
        if (null != value)
          if ("number" === type) {
            if (0 === value && "" === element.value || element.value != value)
              element.value = "" + getToStringValue(value);
          } else
            element.value !== "" + getToStringValue(value) && (element.value = "" + getToStringValue(value));
        else
          "submit" !== type && "reset" !== type || element.removeAttribute("value");
        null != value ? setDefaultValue(element, type, getToStringValue(value)) : null != defaultValue ? setDefaultValue(element, type, getToStringValue(defaultValue)) : null != lastDefaultValue && element.removeAttribute("value");
        null == checked && null != defaultChecked && (element.defaultChecked = !!defaultChecked);
        null != checked && (element.checked = checked && "function" !== typeof checked && "symbol" !== typeof checked);
        null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name ? element.name = "" + getToStringValue(name) : element.removeAttribute("name");
      }
      function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating2) {
        null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type && (element.type = type);
        if (null != value || null != defaultValue) {
          if (!("submit" !== type && "reset" !== type || void 0 !== value && null !== value))
            return;
          defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
          value = null != value ? "" + getToStringValue(value) : defaultValue;
          isHydrating2 || value === element.value || (element.value = value);
          element.defaultValue = value;
        }
        checked = null != checked ? checked : defaultChecked;
        checked = "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
        element.checked = isHydrating2 ? element.checked : !!checked;
        element.defaultChecked = !!checked;
        null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name && (element.name = name);
      }
      function setDefaultValue(node, type, value) {
        "number" === type && getActiveElement(node.ownerDocument) === node || node.defaultValue === "" + value || (node.defaultValue = "" + value);
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        node = node.options;
        if (multiple) {
          multiple = {};
          for (var i2 = 0; i2 < propValue.length; i2++)
            multiple["$" + propValue[i2]] = true;
          for (propValue = 0; propValue < node.length; propValue++)
            i2 = multiple.hasOwnProperty("$" + node[propValue].value), node[propValue].selected !== i2 && (node[propValue].selected = i2), i2 && setDefaultSelected && (node[propValue].defaultSelected = true);
        } else {
          propValue = "" + getToStringValue(propValue);
          multiple = null;
          for (i2 = 0; i2 < node.length; i2++) {
            if (node[i2].value === propValue) {
              node[i2].selected = true;
              setDefaultSelected && (node[i2].defaultSelected = true);
              return;
            }
            null !== multiple || node[i2].disabled || (multiple = node[i2]);
          }
          null !== multiple && (multiple.selected = true);
        }
      }
      function updateTextarea(element, value, defaultValue) {
        if (null != value && (value = "" + getToStringValue(value), value !== element.value && (element.value = value), null == defaultValue)) {
          element.defaultValue !== value && (element.defaultValue = value);
          return;
        }
        element.defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
      }
      function initTextarea(element, value, defaultValue, children) {
        if (null == value) {
          if (null != children) {
            if (null != defaultValue) throw Error(formatProdErrorMessage(92));
            if (isArrayImpl(children)) {
              if (1 < children.length) throw Error(formatProdErrorMessage(93));
              children = children[0];
            }
            defaultValue = children;
          }
          null == defaultValue && (defaultValue = "");
          value = defaultValue;
        }
        defaultValue = getToStringValue(value);
        element.defaultValue = defaultValue;
        children = element.textContent;
        children === defaultValue && "" !== children && null !== children && (element.value = children);
      }
      function setTextContent(node, text2) {
        if (text2) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && 3 === firstChild.nodeType) {
            firstChild.nodeValue = text2;
            return;
          }
        }
        node.textContent = text2;
      }
      var unitlessNumbers = new Set(
        "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
          " "
        )
      );
      function setValueForStyle(style2, styleName, value) {
        var isCustomProperty = 0 === styleName.indexOf("--");
        null == value || "boolean" === typeof value || "" === value ? isCustomProperty ? style2.setProperty(styleName, "") : "float" === styleName ? style2.cssFloat = "" : style2[styleName] = "" : isCustomProperty ? style2.setProperty(styleName, value) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? "float" === styleName ? style2.cssFloat = value : style2[styleName] = ("" + value).trim() : style2[styleName] = value + "px";
      }
      function setValueForStyles(node, styles, prevStyles) {
        if (null != styles && "object" !== typeof styles)
          throw Error(formatProdErrorMessage(62));
        node = node.style;
        if (null != prevStyles) {
          for (var styleName in prevStyles)
            !prevStyles.hasOwnProperty(styleName) || null != styles && styles.hasOwnProperty(styleName) || (0 === styleName.indexOf("--") ? node.setProperty(styleName, "") : "float" === styleName ? node.cssFloat = "" : node[styleName] = "");
          for (var styleName$16 in styles)
            styleName = styles[styleName$16], styles.hasOwnProperty(styleName$16) && prevStyles[styleName$16] !== styleName && setValueForStyle(node, styleName$16, styleName);
        } else
          for (var styleName$17 in styles)
            styles.hasOwnProperty(styleName$17) && setValueForStyle(node, styleName$17, styles[styleName$17]);
      }
      function isCustomElement(tagName) {
        if (-1 === tagName.indexOf("-")) return false;
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var aliases2 = /* @__PURE__ */ new Map([
        ["acceptCharset", "accept-charset"],
        ["htmlFor", "for"],
        ["httpEquiv", "http-equiv"],
        ["crossOrigin", "crossorigin"],
        ["accentHeight", "accent-height"],
        ["alignmentBaseline", "alignment-baseline"],
        ["arabicForm", "arabic-form"],
        ["baselineShift", "baseline-shift"],
        ["capHeight", "cap-height"],
        ["clipPath", "clip-path"],
        ["clipRule", "clip-rule"],
        ["colorInterpolation", "color-interpolation"],
        ["colorInterpolationFilters", "color-interpolation-filters"],
        ["colorProfile", "color-profile"],
        ["colorRendering", "color-rendering"],
        ["dominantBaseline", "dominant-baseline"],
        ["enableBackground", "enable-background"],
        ["fillOpacity", "fill-opacity"],
        ["fillRule", "fill-rule"],
        ["floodColor", "flood-color"],
        ["floodOpacity", "flood-opacity"],
        ["fontFamily", "font-family"],
        ["fontSize", "font-size"],
        ["fontSizeAdjust", "font-size-adjust"],
        ["fontStretch", "font-stretch"],
        ["fontStyle", "font-style"],
        ["fontVariant", "font-variant"],
        ["fontWeight", "font-weight"],
        ["glyphName", "glyph-name"],
        ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
        ["glyphOrientationVertical", "glyph-orientation-vertical"],
        ["horizAdvX", "horiz-adv-x"],
        ["horizOriginX", "horiz-origin-x"],
        ["imageRendering", "image-rendering"],
        ["letterSpacing", "letter-spacing"],
        ["lightingColor", "lighting-color"],
        ["markerEnd", "marker-end"],
        ["markerMid", "marker-mid"],
        ["markerStart", "marker-start"],
        ["overlinePosition", "overline-position"],
        ["overlineThickness", "overline-thickness"],
        ["paintOrder", "paint-order"],
        ["panose-1", "panose-1"],
        ["pointerEvents", "pointer-events"],
        ["renderingIntent", "rendering-intent"],
        ["shapeRendering", "shape-rendering"],
        ["stopColor", "stop-color"],
        ["stopOpacity", "stop-opacity"],
        ["strikethroughPosition", "strikethrough-position"],
        ["strikethroughThickness", "strikethrough-thickness"],
        ["strokeDasharray", "stroke-dasharray"],
        ["strokeDashoffset", "stroke-dashoffset"],
        ["strokeLinecap", "stroke-linecap"],
        ["strokeLinejoin", "stroke-linejoin"],
        ["strokeMiterlimit", "stroke-miterlimit"],
        ["strokeOpacity", "stroke-opacity"],
        ["strokeWidth", "stroke-width"],
        ["textAnchor", "text-anchor"],
        ["textDecoration", "text-decoration"],
        ["textRendering", "text-rendering"],
        ["transformOrigin", "transform-origin"],
        ["underlinePosition", "underline-position"],
        ["underlineThickness", "underline-thickness"],
        ["unicodeBidi", "unicode-bidi"],
        ["unicodeRange", "unicode-range"],
        ["unitsPerEm", "units-per-em"],
        ["vAlphabetic", "v-alphabetic"],
        ["vHanging", "v-hanging"],
        ["vIdeographic", "v-ideographic"],
        ["vMathematical", "v-mathematical"],
        ["vectorEffect", "vector-effect"],
        ["vertAdvY", "vert-adv-y"],
        ["vertOriginX", "vert-origin-x"],
        ["vertOriginY", "vert-origin-y"],
        ["wordSpacing", "word-spacing"],
        ["writingMode", "writing-mode"],
        ["xmlnsXlink", "xmlns:xlink"],
        ["xHeight", "x-height"]
      ]), isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
      function sanitizeURL(url) {
        return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
      }
      var currentReplayingEvent = null;
      function getEventTarget(nativeEvent) {
        nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
        nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
        return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
      }
      var restoreTarget = null, restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (internalInstance && (target = internalInstance.stateNode)) {
          var props = target[internalPropsKey] || null;
          a: switch (target = internalInstance.stateNode, internalInstance.type) {
            case "input":
              updateInput(
                target,
                props.value,
                props.defaultValue,
                props.defaultValue,
                props.checked,
                props.defaultChecked,
                props.type,
                props.name
              );
              internalInstance = props.name;
              if ("radio" === props.type && null != internalInstance) {
                for (props = target; props.parentNode; ) props = props.parentNode;
                props = props.querySelectorAll(
                  'input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                    "" + internalInstance
                  ) + '"][type="radio"]'
                );
                for (internalInstance = 0; internalInstance < props.length; internalInstance++) {
                  var otherNode = props[internalInstance];
                  if (otherNode !== target && otherNode.form === target.form) {
                    var otherProps = otherNode[internalPropsKey] || null;
                    if (!otherProps) throw Error(formatProdErrorMessage(90));
                    updateInput(
                      otherNode,
                      otherProps.value,
                      otherProps.defaultValue,
                      otherProps.defaultValue,
                      otherProps.checked,
                      otherProps.defaultChecked,
                      otherProps.type,
                      otherProps.name
                    );
                  }
                }
                for (internalInstance = 0; internalInstance < props.length; internalInstance++)
                  otherNode = props[internalInstance], otherNode.form === target.form && updateValueIfChanged(otherNode);
              }
              break a;
            case "textarea":
              updateTextarea(target, props.value, props.defaultValue);
              break a;
            case "select":
              internalInstance = props.value, null != internalInstance && updateOptions(target, !!props.multiple, internalInstance, false);
          }
        }
      }
      var isInsideEventHandler = false;
      function batchedUpdates$1(fn, a2, b) {
        if (isInsideEventHandler) return fn(a2, b);
        isInsideEventHandler = true;
        try {
          var JSCompiler_inline_result = fn(a2);
          return JSCompiler_inline_result;
        } finally {
          if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) {
            if (flushSyncWork$1(), restoreTarget && (a2 = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(a2), fn))
              for (a2 = 0; a2 < fn.length; a2++) restoreStateOfTarget(fn[a2]);
          }
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (null === stateNode) return null;
        var props = stateNode[internalPropsKey] || null;
        if (null === props) return null;
        stateNode = props[registrationName];
        a: switch (registrationName) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
            inst = !props;
            break a;
          default:
            inst = false;
        }
        if (inst) return null;
        if (stateNode && "function" !== typeof stateNode)
          throw Error(
            formatProdErrorMessage(231, registrationName, typeof stateNode)
          );
        return stateNode;
      }
      var canUseDOM = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), passiveBrowserEventsSupported = false;
      if (canUseDOM)
        try {
          var options2 = {};
          Object.defineProperty(options2, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options2, options2);
          window.removeEventListener("test", options2, options2);
        } catch (e) {
          passiveBrowserEventsSupported = false;
        }
      var root = null, startText = null, fallbackText = null;
      function getData() {
        if (fallbackText) return fallbackText;
        var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root ? root.value : root.textContent, endLength = endValue.length;
        for (start = 0; start < startLength && startValue[start] === endValue[start]; start++) ;
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++) ;
        return fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0);
      }
      function getEventCharCode(nativeEvent) {
        var keyCode = nativeEvent.keyCode;
        "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, 0 === nativeEvent && 13 === keyCode && (nativeEvent = 13)) : nativeEvent = keyCode;
        10 === nativeEvent && (nativeEvent = 13);
        return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var propName in Interface)
            Interface.hasOwnProperty(propName) && (reactName = Interface[propName], this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]);
          this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        assign2(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
          },
          persist: function() {
          },
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign2({}, EventInterface, { view: 0, detail: 0 }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent, MouseEventInterface = assign2({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          return void 0 === event.relatedTarget ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event) return event.movementX;
          event !== lastMouseEvent && (lastMouseEvent && "mousemove" === event.type ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
          return lastMovementX;
        },
        movementY: function(event) {
          return "movementY" in event ? event.movementY : lastMovementY;
        }
      }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign2({}, MouseEventInterface, { dataTransfer: 0 }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign2({}, UIEventInterface, { relatedTarget: 0 }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign2({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign2({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign2({}, EventInterface, { data: 0 }), SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface), normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      }, translateToKey = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      }, modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var nativeEvent = this.nativeEvent;
        return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : false;
      }
      function getEventModifierState() {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign2({}, UIEventInterface, {
        key: function(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if ("Unidentified" !== key) return key;
          }
          return "keypress" === nativeEvent.type ? (nativeEvent = getEventCharCode(nativeEvent), 13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent)) : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
        },
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
          return "keypress" === event.type ? getEventCharCode(event) : 0;
        },
        keyCode: function(event) {
          return "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
        },
        which: function(event) {
          return "keypress" === event.type ? getEventCharCode(event) : "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
        }
      }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign2({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign2({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign2({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign2({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), ToggleEventInterface = assign2({}, EventInterface, {
        newState: 0,
        oldState: 0
      }), SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface), END_KEYCODES = [9, 13, 27, 32], canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
      canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode), SPACEBAR_CHAR = String.fromCharCode(32), hasSpaceKeypress = false;
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
          case "keydown":
            return 229 !== nativeEvent.keyCode;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        nativeEvent = nativeEvent.detail;
        return "object" === typeof nativeEvent && "data" in nativeEvent ? nativeEvent.data : null;
      }
      var isComposing = false;
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            if (32 !== nativeEvent.which) return null;
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing)
          return "compositionend" === domEventName || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root = null, isComposing = false, domEventName) : null;
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
              if (nativeEvent.char && 1 < nativeEvent.char.length)
                return nativeEvent.char;
              if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && "ko" !== nativeEvent.locale ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return "input" === nodeName ? !!supportedInputTypes[elem.type] : "textarea" === nodeName ? true : false;
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
        inst = accumulateTwoPhaseListeners(inst, "onChange");
        0 < inst.length && (nativeEvent = new SyntheticEvent(
          "onChange",
          "change",
          null,
          nativeEvent,
          target
        ), dispatchQueue.push({ event: nativeEvent, listeners: inst }));
      }
      var activeElement$1 = null, activeElementInst$1 = null;
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if ("change" === domEventName) return targetInst;
      }
      var isInputEventSupported = false;
      if (canUseDOM) {
        var JSCompiler_inline_result$jscomp$282;
        if (canUseDOM) {
          var isSupported$jscomp$inline_417 = "oninput" in document;
          if (!isSupported$jscomp$inline_417) {
            var element$jscomp$inline_418 = document.createElement("div");
            element$jscomp$inline_418.setAttribute("oninput", "return;");
            isSupported$jscomp$inline_417 = "function" === typeof element$jscomp$inline_418.oninput;
          }
          JSCompiler_inline_result$jscomp$282 = isSupported$jscomp$inline_417;
        } else JSCompiler_inline_result$jscomp$282 = false;
        isInputEventSupported = JSCompiler_inline_result$jscomp$282 && (!document.documentMode || 9 < document.documentMode);
      }
      function stopWatchingForValueChange() {
        activeElement$1 && (activeElement$1.detachEvent("onpropertychange", handlePropertyChange), activeElementInst$1 = activeElement$1 = null);
      }
      function handlePropertyChange(nativeEvent) {
        if ("value" === nativeEvent.propertyName && getInstIfValueChanged(activeElementInst$1)) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(
            dispatchQueue,
            activeElementInst$1,
            nativeEvent,
            getEventTarget(nativeEvent)
          );
          batchedUpdates$1(runEventInBatch, dispatchQueue);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        "focusin" === domEventName ? (stopWatchingForValueChange(), activeElement$1 = target, activeElementInst$1 = targetInst, activeElement$1.attachEvent("onpropertychange", handlePropertyChange)) : "focusout" === domEventName && stopWatchingForValueChange();
      }
      function getTargetInstForInputEventPolyfill(domEventName) {
        if ("selectionchange" === domEventName || "keyup" === domEventName || "keydown" === domEventName)
          return getInstIfValueChanged(activeElementInst$1);
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if ("click" === domEventName) return getInstIfValueChanged(targetInst);
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if ("input" === domEventName || "change" === domEventName)
          return getInstIfValueChanged(targetInst);
      }
      function is(x2, y2) {
        return x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
      }
      var objectIs = "function" === typeof Object.is ? Object.is : is;
      function shallowEqual2(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB)
          return false;
        var keysA = Object.keys(objA), keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
        for (keysB = 0; keysB < keysA.length; keysB++) {
          var currentKey = keysA[keysB];
          if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
            return false;
        }
        return true;
      }
      function getLeafNode(node) {
        for (; node && node.firstChild; ) node = node.firstChild;
        return node;
      }
      function getNodeForCharacterOffset(root2, offset2) {
        var node = getLeafNode(root2);
        root2 = 0;
        for (var nodeEnd; node; ) {
          if (3 === node.nodeType) {
            nodeEnd = root2 + node.textContent.length;
            if (root2 <= offset2 && nodeEnd >= offset2)
              return { node, offset: offset2 - root2 };
            root2 = nodeEnd;
          }
          a: {
            for (; node; ) {
              if (node.nextSibling) {
                node = node.nextSibling;
                break a;
              }
              node = node.parentNode;
            }
            node = void 0;
          }
          node = getLeafNode(node);
        }
      }
      function containsNode(outerNode, innerNode) {
        return outerNode && innerNode ? outerNode === innerNode ? true : outerNode && 3 === outerNode.nodeType ? false : innerNode && 3 === innerNode.nodeType ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : false : false;
      }
      function getActiveElementDeep(containerInfo) {
        containerInfo = null != containerInfo && null != containerInfo.ownerDocument && null != containerInfo.ownerDocument.defaultView ? containerInfo.ownerDocument.defaultView : window;
        for (var element = getActiveElement(containerInfo.document); element instanceof containerInfo.HTMLIFrameElement; ) {
          try {
            var JSCompiler_inline_result = "string" === typeof element.contentWindow.location.href;
          } catch (err) {
            JSCompiler_inline_result = false;
          }
          if (JSCompiler_inline_result) containerInfo = element.contentWindow;
          else break;
          element = getActiveElement(containerInfo.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && ("input" === nodeName && ("text" === elem.type || "search" === elem.type || "tel" === elem.type || "url" === elem.type || "password" === elem.type) || "textarea" === nodeName || "true" === elem.contentEditable);
      }
      var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && 11 >= document.documentMode, activeElement = null, activeElementInst = null, lastSelection = null, mouseDown = false;
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : 9 === nativeEventTarget.nodeType ? nativeEventTarget : nativeEventTarget.ownerDocument;
        mouseDown || null == activeElement || activeElement !== getActiveElement(doc) || (doc = activeElement, "selectionStart" in doc && hasSelectionCapabilities(doc) ? doc = { start: doc.selectionStart, end: doc.selectionEnd } : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {
          anchorNode: doc.anchorNode,
          anchorOffset: doc.anchorOffset,
          focusNode: doc.focusNode,
          focusOffset: doc.focusOffset
        }), lastSelection && shallowEqual2(lastSelection, doc) || (lastSelection = doc, doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent(
          "onSelect",
          "select",
          null,
          nativeEvent,
          nativeEventTarget
        ), dispatchQueue.push({ event: nativeEvent, listeners: doc }), nativeEvent.target = activeElement)));
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes2["Webkit" + styleProp] = "webkit" + eventName;
        prefixes2["Moz" + styleProp] = "moz" + eventName;
        return prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionrun: makePrefixMap("Transition", "TransitionRun"),
        transitionstart: makePrefixMap("Transition", "TransitionStart"),
        transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      }, prefixedEventNames = {}, style = {};
      canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName], styleProp;
        for (styleProp in prefixMap)
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
            return prefixedEventNames[eventName] = prefixMap[styleProp];
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"), TRANSITION_START = getVendorPrefixedEventName("transitionstart"), TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = /* @__PURE__ */ new Map(), simpleEventPluginEvents = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
        " "
      );
      simpleEventPluginEvents.push("scrollEnd");
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [domEventName]);
      }
      var CapturedStacks = /* @__PURE__ */ new WeakMap();
      function createCapturedValueAtFiber(value, source) {
        if ("object" === typeof value && null !== value) {
          var existing = CapturedStacks.get(value);
          if (void 0 !== existing) return existing;
          source = {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
          CapturedStacks.set(value, source);
          return source;
        }
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source)
        };
      }
      var concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0;
      function finishQueueingConcurrentUpdates() {
        for (var endIndex = concurrentQueuesIndex, i2 = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i2 < endIndex; ) {
          var fiber = concurrentQueues[i2];
          concurrentQueues[i2++] = null;
          var queue = concurrentQueues[i2];
          concurrentQueues[i2++] = null;
          var update = concurrentQueues[i2];
          concurrentQueues[i2++] = null;
          var lane = concurrentQueues[i2];
          concurrentQueues[i2++] = null;
          if (null !== queue && null !== update) {
            var pending = queue.pending;
            null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
            queue.pending = update;
          }
          0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
        }
      }
      function enqueueUpdate$1(fiber, queue, update, lane) {
        concurrentQueues[concurrentQueuesIndex++] = fiber;
        concurrentQueues[concurrentQueuesIndex++] = queue;
        concurrentQueues[concurrentQueuesIndex++] = update;
        concurrentQueues[concurrentQueuesIndex++] = lane;
        concurrentlyUpdatedLanes |= lane;
        fiber.lanes |= lane;
        fiber = fiber.alternate;
        null !== fiber && (fiber.lanes |= lane);
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        enqueueUpdate$1(fiber, queue, update, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        enqueueUpdate$1(fiber, null, null, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
        sourceFiber.lanes |= lane;
        var alternate = sourceFiber.alternate;
        null !== alternate && (alternate.lanes |= lane);
        for (var isHidden2 = false, parent = sourceFiber.return; null !== parent; )
          parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & 1 || (isHidden2 = true)), sourceFiber = parent, parent = parent.return;
        return 3 === sourceFiber.tag ? (parent = sourceFiber.stateNode, isHidden2 && null !== update && (isHidden2 = 31 - clz32(lane), sourceFiber = parent.hiddenUpdates, alternate = sourceFiber[isHidden2], null === alternate ? sourceFiber[isHidden2] = [update] : alternate.push(update), update.lane = lane | 536870912), parent) : null;
      }
      function getRootForUpdatedFiber(sourceFiber) {
        if (50 < nestedUpdateCount)
          throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error(formatProdErrorMessage(185));
        for (var parent = sourceFiber.return; null !== parent; )
          sourceFiber = parent, parent = sourceFiber.return;
        return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
      }
      var emptyContextObject = {};
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.refCleanup = this.ref = null;
        this.pendingProps = pendingProps;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = mode;
        this.subtreeFlags = this.flags = 0;
        this.deletions = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
      }
      function createFiberImplClass(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      }
      function shouldConstruct(Component) {
        Component = Component.prototype;
        return !(!Component || !Component.isReactComponent);
      }
      function createWorkInProgress(current, pendingProps) {
        var workInProgress2 = current.alternate;
        null === workInProgress2 ? (workInProgress2 = createFiberImplClass(
          current.tag,
          pendingProps,
          current.key,
          current.mode
        ), workInProgress2.elementType = current.elementType, workInProgress2.type = current.type, workInProgress2.stateNode = current.stateNode, workInProgress2.alternate = current, current.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current.type, workInProgress2.flags = 0, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null);
        workInProgress2.flags = current.flags & 65011712;
        workInProgress2.childLanes = current.childLanes;
        workInProgress2.lanes = current.lanes;
        workInProgress2.child = current.child;
        workInProgress2.memoizedProps = current.memoizedProps;
        workInProgress2.memoizedState = current.memoizedState;
        workInProgress2.updateQueue = current.updateQueue;
        pendingProps = current.dependencies;
        workInProgress2.dependencies = null === pendingProps ? null : { lanes: pendingProps.lanes, firstContext: pendingProps.firstContext };
        workInProgress2.sibling = current.sibling;
        workInProgress2.index = current.index;
        workInProgress2.ref = current.ref;
        workInProgress2.refCleanup = current.refCleanup;
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= 65011714;
        var current = workInProgress2.alternate;
        null === current ? (workInProgress2.childLanes = 0, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = 0, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null) : (workInProgress2.childLanes = current.childLanes, workInProgress2.lanes = current.lanes, workInProgress2.child = current.child, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.memoizedProps = current.memoizedProps, workInProgress2.memoizedState = current.memoizedState, workInProgress2.updateQueue = current.updateQueue, workInProgress2.type = current.type, renderLanes2 = current.dependencies, workInProgress2.dependencies = null === renderLanes2 ? null : {
          lanes: renderLanes2.lanes,
          firstContext: renderLanes2.firstContext
        });
        return workInProgress2;
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = 0;
        owner = type;
        if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
        else if ("string" === typeof type)
          fiberTag = isHostHoistableType(
            type,
            pendingProps,
            contextStackCursor.current
          ) ? 26 : "html" === type || "head" === type || "body" === type ? 27 : 5;
        else
          a: switch (type) {
            case REACT_ACTIVITY_TYPE:
              return type = createFiberImplClass(31, pendingProps, key, mode), type.elementType = REACT_ACTIVITY_TYPE, type.lanes = lanes, type;
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
              fiberTag = 8;
              mode |= 24;
              break;
            case REACT_PROFILER_TYPE:
              return type = createFiberImplClass(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
            case REACT_SUSPENSE_TYPE:
              return type = createFiberImplClass(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
            case REACT_SUSPENSE_LIST_TYPE:
              return type = createFiberImplClass(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
            default:
              if ("object" === typeof type && null !== type)
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                  case REACT_CONTEXT_TYPE:
                    fiberTag = 10;
                    break a;
                  case REACT_CONSUMER_TYPE:
                    fiberTag = 9;
                    break a;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = 11;
                    break a;
                  case REACT_MEMO_TYPE:
                    fiberTag = 14;
                    break a;
                  case REACT_LAZY_TYPE:
                    fiberTag = 16;
                    owner = null;
                    break a;
                }
              fiberTag = 29;
              pendingProps = Error(
                formatProdErrorMessage(130, null === type ? "null" : typeof type, "")
              );
              owner = null;
          }
        key = createFiberImplClass(fiberTag, pendingProps, key, mode);
        key.elementType = type;
        key.type = owner;
        key.lanes = lanes;
        return key;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        elements = createFiberImplClass(7, elements, key, mode);
        elements.lanes = lanes;
        return elements;
      }
      function createFiberFromText(content, mode, lanes) {
        content = createFiberImplClass(6, content, null, mode);
        content.lanes = lanes;
        return content;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        mode = createFiberImplClass(
          4,
          null !== portal.children ? portal.children : [],
          portal.key,
          mode
        );
        mode.lanes = lanes;
        mode.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return mode;
      }
      var forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "";
      function pushTreeFork(workInProgress2, totalChildren) {
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress2;
        treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index3) {
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId;
        workInProgress2 = treeContextOverflow;
        var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
        baseIdWithLeadingBit &= ~(1 << baseLength);
        index3 += 1;
        var length = 32 - clz32(totalChildren) + baseLength;
        if (30 < length) {
          var numberOfOverflowBits = baseLength - baseLength % 5;
          length = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
          baseIdWithLeadingBit >>= numberOfOverflowBits;
          baseLength -= numberOfOverflowBits;
          treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index3 << baseLength | baseIdWithLeadingBit;
          treeContextOverflow = length + workInProgress2;
        } else
          treeContextId = 1 << length | index3 << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress2;
      }
      function pushMaterializedTreeId(workInProgress2) {
        null !== workInProgress2.return && (pushTreeFork(workInProgress2, 1), pushTreeId(workInProgress2, 1, 0));
      }
      function popTreeContext(workInProgress2) {
        for (; workInProgress2 === treeForkProvider; )
          treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
        for (; workInProgress2 === treeContextProvider; )
          treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
      }
      var hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = false, hydrationErrors = null, rootOrSingletonContext = false, HydrationMismatchException = Error(formatProdErrorMessage(519));
      function throwOnHydrationMismatch(fiber) {
        var error = Error(formatProdErrorMessage(418, ""));
        queueHydrationError(createCapturedValueAtFiber(error, fiber));
        throw HydrationMismatchException;
      }
      function prepareToHydrateHostInstance(fiber) {
        var instance = fiber.stateNode, type = fiber.type, props = fiber.memoizedProps;
        instance[internalInstanceKey] = fiber;
        instance[internalPropsKey] = props;
        switch (type) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", instance);
            listenToNonDelegatedEvent("close", instance);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", instance);
            break;
          case "video":
          case "audio":
            for (type = 0; type < mediaEventTypes.length; type++)
              listenToNonDelegatedEvent(mediaEventTypes[type], instance);
            break;
          case "source":
            listenToNonDelegatedEvent("error", instance);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", instance);
            listenToNonDelegatedEvent("load", instance);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", instance);
            break;
          case "input":
            listenToNonDelegatedEvent("invalid", instance);
            initInput(
              instance,
              props.value,
              props.defaultValue,
              props.checked,
              props.defaultChecked,
              props.type,
              props.name,
              true
            );
            track(instance);
            break;
          case "select":
            listenToNonDelegatedEvent("invalid", instance);
            break;
          case "textarea":
            listenToNonDelegatedEvent("invalid", instance), initTextarea(instance, props.value, props.defaultValue, props.children), track(instance);
        }
        type = props.children;
        "string" !== typeof type && "number" !== typeof type && "bigint" !== typeof type || instance.textContent === "" + type || true === props.suppressHydrationWarning || checkForUnmatchedText(instance.textContent, type) ? (null != props.popover && (listenToNonDelegatedEvent("beforetoggle", instance), listenToNonDelegatedEvent("toggle", instance)), null != props.onScroll && listenToNonDelegatedEvent("scroll", instance), null != props.onScrollEnd && listenToNonDelegatedEvent("scrollend", instance), null != props.onClick && (instance.onclick = noop$12), instance = true) : instance = false;
        instance || throwOnHydrationMismatch(fiber);
      }
      function popToNextHostParent(fiber) {
        for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
          switch (hydrationParentFiber.tag) {
            case 5:
            case 13:
              rootOrSingletonContext = false;
              return;
            case 27:
            case 3:
              rootOrSingletonContext = true;
              return;
            default:
              hydrationParentFiber = hydrationParentFiber.return;
          }
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return false;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = true, false;
        var tag = fiber.tag, JSCompiler_temp;
        if (JSCompiler_temp = 3 !== tag && 27 !== tag) {
          if (JSCompiler_temp = 5 === tag)
            JSCompiler_temp = fiber.type, JSCompiler_temp = !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) || shouldSetTextContent(fiber.type, fiber.memoizedProps);
          JSCompiler_temp = !JSCompiler_temp;
        }
        JSCompiler_temp && nextHydratableInstance && throwOnHydrationMismatch(fiber);
        popToNextHostParent(fiber);
        if (13 === tag) {
          fiber = fiber.memoizedState;
          fiber = null !== fiber ? fiber.dehydrated : null;
          if (!fiber) throw Error(formatProdErrorMessage(317));
          a: {
            fiber = fiber.nextSibling;
            for (tag = 0; fiber; ) {
              if (8 === fiber.nodeType)
                if (JSCompiler_temp = fiber.data, "/$" === JSCompiler_temp) {
                  if (0 === tag) {
                    nextHydratableInstance = getNextHydratable(fiber.nextSibling);
                    break a;
                  }
                  tag--;
                } else
                  "$" !== JSCompiler_temp && "$!" !== JSCompiler_temp && "$?" !== JSCompiler_temp || tag++;
              fiber = fiber.nextSibling;
            }
            nextHydratableInstance = null;
          }
        } else
          27 === tag ? (tag = nextHydratableInstance, isSingletonScope(fiber.type) ? (fiber = previousHydratableOnEnteringScopedSingleton, previousHydratableOnEnteringScopedSingleton = null, nextHydratableInstance = fiber) : nextHydratableInstance = tag) : nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
        return true;
      }
      function resetHydrationState() {
        nextHydratableInstance = hydrationParentFiber = null;
        isHydrating = false;
      }
      function upgradeHydrationErrorsToRecoverable() {
        var queuedErrors = hydrationErrors;
        null !== queuedErrors && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = queuedErrors : workInProgressRootRecoverableErrors.push.apply(
          workInProgressRootRecoverableErrors,
          queuedErrors
        ), hydrationErrors = null);
        return queuedErrors;
      }
      function queueHydrationError(error) {
        null === hydrationErrors ? hydrationErrors = [error] : hydrationErrors.push(error);
      }
      var valueCursor = createCursor(null), currentlyRenderingFiber$1 = null, lastContextDependency = null;
      function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue);
        context._currentValue = nextValue;
      }
      function popProvider(context) {
        context._currentValue = valueCursor.current;
        pop(valueCursor);
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        for (; null !== parent; ) {
          var alternate = parent.alternate;
          (parent.childLanes & renderLanes2) !== renderLanes2 ? (parent.childLanes |= renderLanes2, null !== alternate && (alternate.childLanes |= renderLanes2)) : null !== alternate && (alternate.childLanes & renderLanes2) !== renderLanes2 && (alternate.childLanes |= renderLanes2);
          if (parent === propagationRoot) break;
          parent = parent.return;
        }
      }
      function propagateContextChanges(workInProgress2, contexts, renderLanes2, forcePropagateEntireTree) {
        var fiber = workInProgress2.child;
        null !== fiber && (fiber.return = workInProgress2);
        for (; null !== fiber; ) {
          var list = fiber.dependencies;
          if (null !== list) {
            var nextFiber = fiber.child;
            list = list.firstContext;
            a: for (; null !== list; ) {
              var dependency = list;
              list = fiber;
              for (var i2 = 0; i2 < contexts.length; i2++)
                if (dependency.context === contexts[i2]) {
                  list.lanes |= renderLanes2;
                  dependency = list.alternate;
                  null !== dependency && (dependency.lanes |= renderLanes2);
                  scheduleContextWorkOnParentPath(
                    list.return,
                    renderLanes2,
                    workInProgress2
                  );
                  forcePropagateEntireTree || (nextFiber = null);
                  break a;
                }
              list = dependency.next;
            }
          } else if (18 === fiber.tag) {
            nextFiber = fiber.return;
            if (null === nextFiber) throw Error(formatProdErrorMessage(341));
            nextFiber.lanes |= renderLanes2;
            list = nextFiber.alternate;
            null !== list && (list.lanes |= renderLanes2);
            scheduleContextWorkOnParentPath(nextFiber, renderLanes2, workInProgress2);
            nextFiber = null;
          } else nextFiber = fiber.child;
          if (null !== nextFiber) nextFiber.return = fiber;
          else
            for (nextFiber = fiber; null !== nextFiber; ) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              fiber = nextFiber.sibling;
              if (null !== fiber) {
                fiber.return = nextFiber.return;
                nextFiber = fiber;
                break;
              }
              nextFiber = nextFiber.return;
            }
          fiber = nextFiber;
        }
      }
      function propagateParentContextChanges(current, workInProgress2, renderLanes2, forcePropagateEntireTree) {
        current = null;
        for (var parent = workInProgress2, isInsidePropagationBailout = false; null !== parent; ) {
          if (!isInsidePropagationBailout) {
            if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;
            else if (0 !== (parent.flags & 262144)) break;
          }
          if (10 === parent.tag) {
            var currentParent = parent.alternate;
            if (null === currentParent) throw Error(formatProdErrorMessage(387));
            currentParent = currentParent.memoizedProps;
            if (null !== currentParent) {
              var context = parent.type;
              objectIs(parent.pendingProps.value, currentParent.value) || (null !== current ? current.push(context) : current = [context]);
            }
          } else if (parent === hostTransitionProviderCursor.current) {
            currentParent = parent.alternate;
            if (null === currentParent) throw Error(formatProdErrorMessage(387));
            currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current ? current.push(HostTransitionContext) : current = [HostTransitionContext]);
          }
          parent = parent.return;
        }
        null !== current && propagateContextChanges(
          workInProgress2,
          current,
          renderLanes2,
          forcePropagateEntireTree
        );
        workInProgress2.flags |= 262144;
      }
      function checkIfContextChanged(currentDependencies) {
        for (currentDependencies = currentDependencies.firstContext; null !== currentDependencies; ) {
          if (!objectIs(
            currentDependencies.context._currentValue,
            currentDependencies.memoizedValue
          ))
            return true;
          currentDependencies = currentDependencies.next;
        }
        return false;
      }
      function prepareToReadContext(workInProgress2) {
        currentlyRenderingFiber$1 = workInProgress2;
        lastContextDependency = null;
        workInProgress2 = workInProgress2.dependencies;
        null !== workInProgress2 && (workInProgress2.firstContext = null);
      }
      function readContext(context) {
        return readContextForConsumer(currentlyRenderingFiber$1, context);
      }
      function readContextDuringReconciliation(consumer, context) {
        null === currentlyRenderingFiber$1 && prepareToReadContext(consumer);
        return readContextForConsumer(consumer, context);
      }
      function readContextForConsumer(consumer, context) {
        var value = context._currentValue;
        context = { context, memoizedValue: value, next: null };
        if (null === lastContextDependency) {
          if (null === consumer) throw Error(formatProdErrorMessage(308));
          lastContextDependency = context;
          consumer.dependencies = { lanes: 0, firstContext: context };
          consumer.flags |= 524288;
        } else lastContextDependency = lastContextDependency.next = context;
        return value;
      }
      var AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
        var listeners = [], signal = this.signal = {
          aborted: false,
          addEventListener: function(type, listener) {
            listeners.push(listener);
          }
        };
        this.abort = function() {
          signal.aborted = true;
          listeners.forEach(function(listener) {
            return listener();
          });
        };
      }, scheduleCallback$2 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Consumer: null,
        Provider: null,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0
      };
      function createCache() {
        return {
          controller: new AbortControllerLocal(),
          data: /* @__PURE__ */ new Map(),
          refCount: 0
        };
      }
      function releaseCache(cache) {
        cache.refCount--;
        0 === cache.refCount && scheduleCallback$2(NormalPriority, function() {
          cache.controller.abort();
        });
      }
      var currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null;
      function entangleAsyncAction(transition, thenable) {
        if (null === currentEntangledListeners) {
          var entangledListeners = currentEntangledListeners = [];
          currentEntangledPendingCount = 0;
          currentEntangledLane = requestTransitionLane();
          currentEntangledActionThenable = {
            status: "pending",
            value: void 0,
            then: function(resolve) {
              entangledListeners.push(resolve);
            }
          };
        }
        currentEntangledPendingCount++;
        thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
        return thenable;
      }
      function pingEngtangledActionScope() {
        if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
          null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
          var listeners = currentEntangledListeners;
          currentEntangledListeners = null;
          currentEntangledLane = 0;
          currentEntangledActionThenable = null;
          for (var i2 = 0; i2 < listeners.length; i2++) (0, listeners[i2])();
        }
      }
      function chainThenableValue(thenable, result) {
        var listeners = [], thenableWithOverride = {
          status: "pending",
          value: null,
          reason: null,
          then: function(resolve) {
            listeners.push(resolve);
          }
        };
        thenable.then(
          function() {
            thenableWithOverride.status = "fulfilled";
            thenableWithOverride.value = result;
            for (var i2 = 0; i2 < listeners.length; i2++) (0, listeners[i2])(result);
          },
          function(error) {
            thenableWithOverride.status = "rejected";
            thenableWithOverride.reason = error;
            for (error = 0; error < listeners.length; error++)
              (0, listeners[error])(void 0);
          }
        );
        return thenableWithOverride;
      }
      var prevOnStartTransitionFinish = ReactSharedInternals.S;
      ReactSharedInternals.S = function(transition, returnValue) {
        "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
        null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
      };
      var resumedCache = createCursor(null);
      function peekCacheFromPool() {
        var cacheResumedFromPreviousRender = resumedCache.current;
        return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
      }
      function pushTransition(offscreenWorkInProgress, prevCachePool) {
        null === prevCachePool ? push(resumedCache, resumedCache.current) : push(resumedCache, prevCachePool.pool);
      }
      function getSuspendedCache() {
        var cacheFromPool = peekCacheFromPool();
        return null === cacheFromPool ? null : { parent: CacheContext._currentValue, pool: cacheFromPool };
      }
      var SuspenseException = Error(formatProdErrorMessage(460)), SuspenseyCommitException = Error(formatProdErrorMessage(474)), SuspenseActionException = Error(formatProdErrorMessage(542)), noopSuspenseyCommitThenable = { then: function() {
      } };
      function isThenableResolved(thenable) {
        thenable = thenable.status;
        return "fulfilled" === thenable || "rejected" === thenable;
      }
      function noop$3() {
      }
      function trackUsedThenable(thenableState2, thenable, index3) {
        index3 = thenableState2[index3];
        void 0 === index3 ? thenableState2.push(thenable) : index3 !== thenable && (thenable.then(noop$3, noop$3), thenable = index3);
        switch (thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
          default:
            if ("string" === typeof thenable.status) thenable.then(noop$3, noop$3);
            else {
              thenableState2 = workInProgressRoot;
              if (null !== thenableState2 && 100 < thenableState2.shellSuspendCounter)
                throw Error(formatProdErrorMessage(482));
              thenableState2 = thenable;
              thenableState2.status = "pending";
              thenableState2.then(
                function(fulfilledValue) {
                  if ("pending" === thenable.status) {
                    var fulfilledThenable = thenable;
                    fulfilledThenable.status = "fulfilled";
                    fulfilledThenable.value = fulfilledValue;
                  }
                },
                function(error) {
                  if ("pending" === thenable.status) {
                    var rejectedThenable = thenable;
                    rejectedThenable.status = "rejected";
                    rejectedThenable.reason = error;
                  }
                }
              );
            }
            switch (thenable.status) {
              case "fulfilled":
                return thenable.value;
              case "rejected":
                throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
            }
            suspendedThenable = thenable;
            throw SuspenseException;
        }
      }
      var suspendedThenable = null;
      function getSuspendedThenable() {
        if (null === suspendedThenable) throw Error(formatProdErrorMessage(459));
        var thenable = suspendedThenable;
        suspendedThenable = null;
        return thenable;
      }
      function checkIfUseWrappedInAsyncCatch(rejectedReason) {
        if (rejectedReason === SuspenseException || rejectedReason === SuspenseActionException)
          throw Error(formatProdErrorMessage(483));
      }
      var hasForceUpdate = false;
      function initializeUpdateQueue(fiber) {
        fiber.updateQueue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: { pending: null, lanes: 0, hiddenCallbacks: null },
          callbacks: null
        };
      }
      function cloneUpdateQueue(current, workInProgress2) {
        current = current.updateQueue;
        workInProgress2.updateQueue === current && (workInProgress2.updateQueue = {
          baseState: current.baseState,
          firstBaseUpdate: current.firstBaseUpdate,
          lastBaseUpdate: current.lastBaseUpdate,
          shared: current.shared,
          callbacks: null
        });
      }
      function createUpdate(lane) {
        return { lane, tag: 0, payload: null, callback: null, next: null };
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (null === updateQueue) return null;
        updateQueue = updateQueue.shared;
        if (0 !== (executionContext & 2)) {
          var pending = updateQueue.pending;
          null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
          updateQueue.pending = update;
          update = getRootForUpdatedFiber(fiber);
          markUpdateLaneFromFiberToRoot(fiber, null, lane);
          return update;
        }
        enqueueUpdate$1(fiber, updateQueue, update, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function entangleTransitions(root2, fiber, lane) {
        fiber = fiber.updateQueue;
        if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194048))) {
          var queueLanes = fiber.lanes;
          queueLanes &= root2.pendingLanes;
          lane |= queueLanes;
          fiber.lanes = lane;
          markRootEntangled(root2, lane);
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue, current = workInProgress2.alternate;
        if (null !== current && (current = current.updateQueue, queue === current)) {
          var newFirst = null, newLast = null;
          queue = queue.firstBaseUpdate;
          if (null !== queue) {
            do {
              var clone2 = {
                lane: queue.lane,
                tag: queue.tag,
                payload: queue.payload,
                callback: null,
                next: null
              };
              null === newLast ? newFirst = newLast = clone2 : newLast = newLast.next = clone2;
              queue = queue.next;
            } while (null !== queue);
            null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
          } else newFirst = newLast = capturedUpdate;
          queue = {
            baseState: current.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: current.shared,
            callbacks: current.callbacks
          };
          workInProgress2.updateQueue = queue;
          return;
        }
        workInProgress2 = queue.lastBaseUpdate;
        null === workInProgress2 ? queue.firstBaseUpdate = capturedUpdate : workInProgress2.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
      }
      var didReadFromEntangledAsyncAction = false;
      function suspendIfUpdateReadFromEntangledAsyncAction() {
        if (didReadFromEntangledAsyncAction) {
          var entangledActionThenable = currentEntangledActionThenable;
          if (null !== entangledActionThenable) throw entangledActionThenable;
        }
      }
      function processUpdateQueue(workInProgress$jscomp$0, props, instance$jscomp$0, renderLanes2) {
        didReadFromEntangledAsyncAction = false;
        var queue = workInProgress$jscomp$0.updateQueue;
        hasForceUpdate = false;
        var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
        if (null !== pendingQueue) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
          lastBaseUpdate = lastPendingUpdate;
          var current = workInProgress$jscomp$0.alternate;
          null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
        }
        if (null !== firstBaseUpdate) {
          var newState = queue.baseState;
          lastBaseUpdate = 0;
          current = firstPendingUpdate = lastPendingUpdate = null;
          pendingQueue = firstBaseUpdate;
          do {
            var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
            if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes2 & updateLane) === updateLane) {
              0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
              null !== current && (current = current.next = {
                lane: 0,
                tag: pendingQueue.tag,
                payload: pendingQueue.payload,
                callback: null,
                next: null
              });
              a: {
                var workInProgress2 = workInProgress$jscomp$0, update = pendingQueue;
                updateLane = props;
                var instance = instance$jscomp$0;
                switch (update.tag) {
                  case 1:
                    workInProgress2 = update.payload;
                    if ("function" === typeof workInProgress2) {
                      newState = workInProgress2.call(instance, newState, updateLane);
                      break a;
                    }
                    newState = workInProgress2;
                    break a;
                  case 3:
                    workInProgress2.flags = workInProgress2.flags & -65537 | 128;
                  case 0:
                    workInProgress2 = update.payload;
                    updateLane = "function" === typeof workInProgress2 ? workInProgress2.call(instance, newState, updateLane) : workInProgress2;
                    if (null === updateLane || void 0 === updateLane) break a;
                    newState = assign2({}, newState, updateLane);
                    break a;
                  case 2:
                    hasForceUpdate = true;
                }
              }
              updateLane = pendingQueue.callback;
              null !== updateLane && (workInProgress$jscomp$0.flags |= 64, isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
            } else
              isHiddenUpdate = {
                lane: updateLane,
                tag: pendingQueue.tag,
                payload: pendingQueue.payload,
                callback: pendingQueue.callback,
                next: null
              }, null === current ? (firstPendingUpdate = current = isHiddenUpdate, lastPendingUpdate = newState) : current = current.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
            pendingQueue = pendingQueue.next;
            if (null === pendingQueue)
              if (pendingQueue = queue.shared.pending, null === pendingQueue)
                break;
              else
                isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
          } while (1);
          null === current && (lastPendingUpdate = newState);
          queue.baseState = lastPendingUpdate;
          queue.firstBaseUpdate = firstPendingUpdate;
          queue.lastBaseUpdate = current;
          null === firstBaseUpdate && (queue.shared.lanes = 0);
          workInProgressRootSkippedLanes |= lastBaseUpdate;
          workInProgress$jscomp$0.lanes = lastBaseUpdate;
          workInProgress$jscomp$0.memoizedState = newState;
        }
      }
      function callCallback(callback, context) {
        if ("function" !== typeof callback)
          throw Error(formatProdErrorMessage(191, callback));
        callback.call(context);
      }
      function commitCallbacks(updateQueue, context) {
        var callbacks = updateQueue.callbacks;
        if (null !== callbacks)
          for (updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)
            callCallback(callbacks[updateQueue], context);
      }
      var currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0);
      function pushHiddenContext(fiber, context) {
        fiber = entangledRenderLanes;
        push(prevEntangledRenderLanesCursor, fiber);
        push(currentTreeHiddenStackCursor, context);
        entangledRenderLanes = fiber | context.baseLanes;
      }
      function reuseHiddenContextOnStack() {
        push(prevEntangledRenderLanesCursor, entangledRenderLanes);
        push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
      }
      function popHiddenContext() {
        entangledRenderLanes = prevEntangledRenderLanesCursor.current;
        pop(currentTreeHiddenStackCursor);
        pop(prevEntangledRenderLanesCursor);
      }
      var renderLanes = 0, currentlyRenderingFiber = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = false, didScheduleRenderPhaseUpdateDuringThisPass = false, shouldDoubleInvokeUserFnsInHooksDEV = false, localIdCounter = 0, thenableIndexCounter$1 = 0, thenableState$1 = null, globalClientIdCounter = 0;
      function throwInvalidHookError() {
        throw Error(formatProdErrorMessage(321));
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (null === prevDeps) return false;
        for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++)
          if (!objectIs(nextDeps[i2], prevDeps[i2])) return false;
        return true;
      }
      function renderWithHooks(current, workInProgress2, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber = workInProgress2;
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = 0;
        ReactSharedInternals.H = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
        shouldDoubleInvokeUserFnsInHooksDEV = false;
        nextRenderLanes = Component(props, secondArg);
        shouldDoubleInvokeUserFnsInHooksDEV = false;
        didScheduleRenderPhaseUpdateDuringThisPass && (nextRenderLanes = renderWithHooksAgain(
          workInProgress2,
          Component,
          props,
          secondArg
        ));
        finishRenderingHooks(current);
        return nextRenderLanes;
      }
      function finishRenderingHooks(current) {
        ReactSharedInternals.H = ContextOnlyDispatcher;
        var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
        renderLanes = 0;
        workInProgressHook = currentHook = currentlyRenderingFiber = null;
        didScheduleRenderPhaseUpdate = false;
        thenableIndexCounter$1 = 0;
        thenableState$1 = null;
        if (didRenderTooFewHooks) throw Error(formatProdErrorMessage(300));
        null === current || didReceiveUpdate || (current = current.dependencies, null !== current && checkIfContextChanged(current) && (didReceiveUpdate = true));
      }
      function renderWithHooksAgain(workInProgress2, Component, props, secondArg) {
        currentlyRenderingFiber = workInProgress2;
        var numberOfReRenders = 0;
        do {
          didScheduleRenderPhaseUpdateDuringThisPass && (thenableState$1 = null);
          thenableIndexCounter$1 = 0;
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          if (25 <= numberOfReRenders) throw Error(formatProdErrorMessage(301));
          numberOfReRenders += 1;
          workInProgressHook = currentHook = null;
          if (null != workInProgress2.updateQueue) {
            var children = workInProgress2.updateQueue;
            children.lastEffect = null;
            children.events = null;
            children.stores = null;
            null != children.memoCache && (children.memoCache.index = 0);
          }
          ReactSharedInternals.H = HooksDispatcherOnRerender;
          children = Component(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
        return children;
      }
      function TransitionAwareHostComponent() {
        var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
        maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
        dispatcher = dispatcher.useState()[0];
        (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber.flags |= 1024);
        return maybeThenable;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = 0 !== localIdCounter;
        localIdCounter = 0;
        return didRenderIdHook;
      }
      function bailoutHooks(current, workInProgress2, lanes) {
        workInProgress2.updateQueue = current.updateQueue;
        workInProgress2.flags &= -2053;
        current.lanes &= ~lanes;
      }
      function resetHooksOnUnwind(workInProgress2) {
        if (didScheduleRenderPhaseUpdate) {
          for (workInProgress2 = workInProgress2.memoizedState; null !== workInProgress2; ) {
            var queue = workInProgress2.queue;
            null !== queue && (queue.pending = null);
            workInProgress2 = workInProgress2.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = 0;
        workInProgressHook = currentHook = currentlyRenderingFiber = null;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        thenableIndexCounter$1 = localIdCounter = 0;
        thenableState$1 = null;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        if (null === currentHook) {
          var nextCurrentHook = currentlyRenderingFiber.alternate;
          nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber.memoizedState : workInProgressHook.next;
        if (null !== nextWorkInProgressHook)
          workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
        else {
          if (null === nextCurrentHook) {
            if (null === currentlyRenderingFiber.alternate)
              throw Error(formatProdErrorMessage(467));
            throw Error(formatProdErrorMessage(310));
          }
          currentHook = nextCurrentHook;
          nextCurrentHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return { lastEffect: null, events: null, stores: null, memoCache: null };
      }
      function useThenable(thenable) {
        var index3 = thenableIndexCounter$1;
        thenableIndexCounter$1 += 1;
        null === thenableState$1 && (thenableState$1 = []);
        thenable = trackUsedThenable(thenableState$1, thenable, index3);
        index3 = currentlyRenderingFiber;
        null === (null === workInProgressHook ? index3.memoizedState : workInProgressHook.next) && (index3 = index3.alternate, ReactSharedInternals.H = null === index3 || null === index3.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate);
        return thenable;
      }
      function use(usable) {
        if (null !== usable && "object" === typeof usable) {
          if ("function" === typeof usable.then) return useThenable(usable);
          if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
        }
        throw Error(formatProdErrorMessage(438, String(usable)));
      }
      function useMemoCache(size2) {
        var memoCache = null, updateQueue = currentlyRenderingFiber.updateQueue;
        null !== updateQueue && (memoCache = updateQueue.memoCache);
        if (null == memoCache) {
          var current = currentlyRenderingFiber.alternate;
          null !== current && (current = current.updateQueue, null !== current && (current = current.memoCache, null != current && (memoCache = {
            data: current.data.map(function(array2) {
              return array2.slice();
            }),
            index: 0
          })));
        }
        null == memoCache && (memoCache = { data: [], index: 0 });
        null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = updateQueue);
        updateQueue.memoCache = memoCache;
        updateQueue = memoCache.data[memoCache.index];
        if (void 0 === updateQueue)
          for (updateQueue = memoCache.data[memoCache.index] = Array(size2), current = 0; current < size2; current++)
            updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
        memoCache.index++;
        return updateQueue;
      }
      function basicStateReducer(state, action) {
        return "function" === typeof action ? action(state) : action;
      }
      function updateReducer(reducer) {
        var hook = updateWorkInProgressHook();
        return updateReducerImpl(hook, currentHook, reducer);
      }
      function updateReducerImpl(hook, current, reducer) {
        var queue = hook.queue;
        if (null === queue) throw Error(formatProdErrorMessage(311));
        queue.lastRenderedReducer = reducer;
        var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
        if (null !== pendingQueue) {
          if (null !== baseQueue) {
            var baseFirst = baseQueue.next;
            baseQueue.next = pendingQueue.next;
            pendingQueue.next = baseFirst;
          }
          current.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }
        pendingQueue = hook.baseState;
        if (null === baseQueue) hook.memoizedState = pendingQueue;
        else {
          current = baseQueue.next;
          var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current, didReadFromEntangledAsyncAction$32 = false;
          do {
            var updateLane = update.lane & -536870913;
            if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
              var revertLane = update.revertLane;
              if (0 === revertLane)
                null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                  lane: 0,
                  revertLane: 0,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction$32 = true);
              else if ((renderLanes & revertLane) === revertLane) {
                update = update.next;
                revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction$32 = true);
                continue;
              } else
                updateLane = {
                  lane: 0,
                  revertLane: update.revertLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
              updateLane = update.action;
              shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
              pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
            } else
              revertLane = {
                lane: updateLane,
                revertLane: update.revertLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
            update = update.next;
          } while (null !== update && update !== current);
          null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
          if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction$32 && (reducer = currentEntangledActionThenable, null !== reducer)))
            throw reducer;
          hook.memoizedState = pendingQueue;
          hook.baseState = baseFirst;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = pendingQueue;
        }
        null === baseQueue && (queue.lanes = 0);
        return [hook.memoizedState, queue.dispatch];
      }
      function rerenderReducer(reducer) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (null === queue) throw Error(formatProdErrorMessage(311));
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
        if (null !== lastRenderPhaseUpdate) {
          queue.pending = null;
          var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          do
            newState = reducer(newState, update.action), update = update.next;
          while (update !== lastRenderPhaseUpdate);
          objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
          hook.memoizedState = newState;
          null === hook.baseQueue && (hook.baseState = newState);
          queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber, hook = updateWorkInProgressHook(), isHydrating$jscomp$0 = isHydrating;
        if (isHydrating$jscomp$0) {
          if (void 0 === getServerSnapshot) throw Error(formatProdErrorMessage(407));
          getServerSnapshot = getServerSnapshot();
        } else getServerSnapshot = getSnapshot();
        var snapshotChanged = !objectIs(
          (currentHook || hook).memoizedState,
          getServerSnapshot
        );
        snapshotChanged && (hook.memoizedState = getServerSnapshot, didReceiveUpdate = true);
        hook = hook.queue;
        var create2 = subscribeToStore.bind(null, fiber, hook, subscribe);
        updateEffectImpl(2048, 8, create2, [subscribe]);
        if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
          fiber.flags |= 2048;
          pushSimpleEffect(
            9,
            createEffectInstance(),
            updateStoreInstance.bind(
              null,
              fiber,
              hook,
              getServerSnapshot,
              getSnapshot
            ),
            null
          );
          if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349));
          isHydrating$jscomp$0 || 0 !== (renderLanes & 124) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
        }
        return getServerSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= 16384;
        fiber = { getSnapshot, value: renderedSnapshot };
        getSnapshot = currentlyRenderingFiber.updateQueue;
        null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
      }
      function subscribeToStore(fiber, inst, subscribe) {
        return subscribe(function() {
          checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
        });
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(inst, nextValue);
        } catch (error) {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, 2);
        null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2);
      }
      function mountStateImpl(initialState) {
        var hook = mountWorkInProgressHook();
        if ("function" === typeof initialState) {
          var initialStateInitializer = initialState;
          initialState = initialStateInitializer();
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              initialStateInitializer();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        hook.memoizedState = hook.baseState = initialState;
        hook.queue = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        return hook;
      }
      function updateOptimisticImpl(hook, current, passthrough, reducer) {
        hook.baseState = passthrough;
        return updateReducerImpl(
          hook,
          currentHook,
          "function" === typeof reducer ? reducer : basicStateReducer
        );
      }
      function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
        if (isRenderPhaseUpdate(fiber)) throw Error(formatProdErrorMessage(485));
        fiber = actionQueue.action;
        if (null !== fiber) {
          var actionNode = {
            payload,
            action: fiber,
            next: null,
            isTransition: true,
            status: "pending",
            value: null,
            reason: null,
            listeners: [],
            then: function(listener) {
              actionNode.listeners.push(listener);
            }
          };
          null !== ReactSharedInternals.T ? setPendingState(true) : actionNode.isTransition = false;
          setState(actionNode);
          setPendingState = actionQueue.pending;
          null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
        }
      }
      function runActionStateAction(actionQueue, node) {
        var action = node.action, payload = node.payload, prevState = actionQueue.state;
        if (node.isTransition) {
          var prevTransition = ReactSharedInternals.T, currentTransition = {};
          ReactSharedInternals.T = currentTransition;
          try {
            var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            handleActionReturnValue(actionQueue, node, returnValue);
          } catch (error) {
            onActionError(actionQueue, node, error);
          } finally {
            ReactSharedInternals.T = prevTransition;
          }
        } else
          try {
            prevTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, prevTransition);
          } catch (error$38) {
            onActionError(actionQueue, node, error$38);
          }
      }
      function handleActionReturnValue(actionQueue, node, returnValue) {
        null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? returnValue.then(
          function(nextState) {
            onActionSuccess(actionQueue, node, nextState);
          },
          function(error) {
            return onActionError(actionQueue, node, error);
          }
        ) : onActionSuccess(actionQueue, node, returnValue);
      }
      function onActionSuccess(actionQueue, actionNode, nextState) {
        actionNode.status = "fulfilled";
        actionNode.value = nextState;
        notifyActionListeners(actionNode);
        actionQueue.state = nextState;
        actionNode = actionQueue.pending;
        null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
      }
      function onActionError(actionQueue, actionNode, error) {
        var last2 = actionQueue.pending;
        actionQueue.pending = null;
        if (null !== last2) {
          last2 = last2.next;
          do
            actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
          while (actionNode !== last2);
        }
        actionQueue.action = null;
      }
      function notifyActionListeners(actionNode) {
        actionNode = actionNode.listeners;
        for (var i2 = 0; i2 < actionNode.length; i2++) (0, actionNode[i2])();
      }
      function actionStateReducer(oldState, newState) {
        return newState;
      }
      function mountActionState(action, initialStateProp) {
        if (isHydrating) {
          var ssrFormState = workInProgressRoot.formState;
          if (null !== ssrFormState) {
            a: {
              var JSCompiler_inline_result = currentlyRenderingFiber;
              if (isHydrating) {
                if (nextHydratableInstance) {
                  b: {
                    var JSCompiler_inline_result$jscomp$0 = nextHydratableInstance;
                    for (var inRootOrSingleton = rootOrSingletonContext; 8 !== JSCompiler_inline_result$jscomp$0.nodeType; ) {
                      if (!inRootOrSingleton) {
                        JSCompiler_inline_result$jscomp$0 = null;
                        break b;
                      }
                      JSCompiler_inline_result$jscomp$0 = getNextHydratable(
                        JSCompiler_inline_result$jscomp$0.nextSibling
                      );
                      if (null === JSCompiler_inline_result$jscomp$0) {
                        JSCompiler_inline_result$jscomp$0 = null;
                        break b;
                      }
                    }
                    inRootOrSingleton = JSCompiler_inline_result$jscomp$0.data;
                    JSCompiler_inline_result$jscomp$0 = "F!" === inRootOrSingleton || "F" === inRootOrSingleton ? JSCompiler_inline_result$jscomp$0 : null;
                  }
                  if (JSCompiler_inline_result$jscomp$0) {
                    nextHydratableInstance = getNextHydratable(
                      JSCompiler_inline_result$jscomp$0.nextSibling
                    );
                    JSCompiler_inline_result = "F!" === JSCompiler_inline_result$jscomp$0.data;
                    break a;
                  }
                }
                throwOnHydrationMismatch(JSCompiler_inline_result);
              }
              JSCompiler_inline_result = false;
            }
            JSCompiler_inline_result && (initialStateProp = ssrFormState[0]);
          }
        }
        ssrFormState = mountWorkInProgressHook();
        ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
        JSCompiler_inline_result = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: actionStateReducer,
          lastRenderedState: initialStateProp
        };
        ssrFormState.queue = JSCompiler_inline_result;
        ssrFormState = dispatchSetState.bind(
          null,
          currentlyRenderingFiber,
          JSCompiler_inline_result
        );
        JSCompiler_inline_result.dispatch = ssrFormState;
        JSCompiler_inline_result = mountStateImpl(false);
        inRootOrSingleton = dispatchOptimisticSetState.bind(
          null,
          currentlyRenderingFiber,
          false,
          JSCompiler_inline_result.queue
        );
        JSCompiler_inline_result = mountWorkInProgressHook();
        JSCompiler_inline_result$jscomp$0 = {
          state: initialStateProp,
          dispatch: null,
          action,
          pending: null
        };
        JSCompiler_inline_result.queue = JSCompiler_inline_result$jscomp$0;
        ssrFormState = dispatchActionState.bind(
          null,
          currentlyRenderingFiber,
          JSCompiler_inline_result$jscomp$0,
          inRootOrSingleton,
          ssrFormState
        );
        JSCompiler_inline_result$jscomp$0.dispatch = ssrFormState;
        JSCompiler_inline_result.memoizedState = action;
        return [initialStateProp, ssrFormState, false];
      }
      function updateActionState(action) {
        var stateHook = updateWorkInProgressHook();
        return updateActionStateImpl(stateHook, currentHook, action);
      }
      function updateActionStateImpl(stateHook, currentStateHook, action) {
        currentStateHook = updateReducerImpl(
          stateHook,
          currentStateHook,
          actionStateReducer
        )[0];
        stateHook = updateReducer(basicStateReducer)[0];
        if ("object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then)
          try {
            var state = useThenable(currentStateHook);
          } catch (x2) {
            if (x2 === SuspenseException) throw SuspenseActionException;
            throw x2;
          }
        else state = currentStateHook;
        currentStateHook = updateWorkInProgressHook();
        var actionQueue = currentStateHook.queue, dispatch = actionQueue.dispatch;
        action !== currentStateHook.memoizedState && (currentlyRenderingFiber.flags |= 2048, pushSimpleEffect(
          9,
          createEffectInstance(),
          actionStateActionEffect.bind(null, actionQueue, action),
          null
        ));
        return [state, dispatch, stateHook];
      }
      function actionStateActionEffect(actionQueue, action) {
        actionQueue.action = action;
      }
      function rerenderActionState(action) {
        var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
        if (null !== currentStateHook)
          return updateActionStateImpl(stateHook, currentStateHook, action);
        updateWorkInProgressHook();
        stateHook = stateHook.memoizedState;
        currentStateHook = updateWorkInProgressHook();
        var dispatch = currentStateHook.queue.dispatch;
        currentStateHook.memoizedState = action;
        return [stateHook, dispatch, false];
      }
      function pushSimpleEffect(tag, inst, create2, createDeps) {
        tag = { tag, create: create2, deps: createDeps, inst, next: null };
        inst = currentlyRenderingFiber.updateQueue;
        null === inst && (inst = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = inst);
        create2 = inst.lastEffect;
        null === create2 ? inst.lastEffect = tag.next = tag : (createDeps = create2.next, create2.next = tag, tag.next = createDeps, inst.lastEffect = tag);
        return tag;
      }
      function createEffectInstance() {
        return { destroy: void 0, resource: void 0 };
      }
      function updateRef() {
        return updateWorkInProgressHook().memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create2, createDeps) {
        var hook = mountWorkInProgressHook();
        createDeps = void 0 === createDeps ? null : createDeps;
        currentlyRenderingFiber.flags |= fiberFlags;
        hook.memoizedState = pushSimpleEffect(
          1 | hookFlags,
          createEffectInstance(),
          create2,
          createDeps
        );
      }
      function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var inst = hook.memoizedState.inst;
        null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushSimpleEffect(hookFlags, inst, create2, deps) : (currentlyRenderingFiber.flags |= fiberFlags, hook.memoizedState = pushSimpleEffect(
          1 | hookFlags,
          inst,
          create2,
          deps
        ));
      }
      function mountEffect(create2, createDeps) {
        mountEffectImpl(8390656, 8, create2, createDeps);
      }
      function updateEffect(create2, createDeps) {
        updateEffectImpl(2048, 8, create2, createDeps);
      }
      function updateInsertionEffect(create2, deps) {
        return updateEffectImpl(4, 2, create2, deps);
      }
      function updateLayoutEffect(create2, deps) {
        return updateEffectImpl(4, 4, create2, deps);
      }
      function imperativeHandleEffect(create2, ref) {
        if ("function" === typeof ref) {
          create2 = create2();
          var refCleanup = ref(create2);
          return function() {
            "function" === typeof refCleanup ? refCleanup() : ref(null);
          };
        }
        if (null !== ref && void 0 !== ref)
          return create2 = create2(), ref.current = create2, function() {
            ref.current = null;
          };
      }
      function updateImperativeHandle(ref, create2, deps) {
        deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
        updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create2, ref), deps);
      }
      function mountDebugValue() {
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var prevState = hook.memoizedState;
        if (null !== deps && areHookInputsEqual(deps, prevState[1]))
          return prevState[0];
        hook.memoizedState = [callback, deps];
        return callback;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var prevState = hook.memoizedState;
        if (null !== deps && areHookInputsEqual(deps, prevState[1]))
          return prevState[0];
        prevState = nextCreate();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(true);
          try {
            nextCreate();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        hook.memoizedState = [prevState, deps];
        return prevState;
      }
      function mountDeferredValueImpl(hook, value, initialValue) {
        if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
          return hook.memoizedState = value;
        hook.memoizedState = initialValue;
        hook = requestDeferredLane();
        currentlyRenderingFiber.lanes |= hook;
        workInProgressRootSkippedLanes |= hook;
        return initialValue;
      }
      function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
        if (objectIs(value, prevValue)) return value;
        if (null !== currentTreeHiddenStackCursor.current)
          return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
        if (0 === (renderLanes & 42))
          return didReceiveUpdate = true, hook.memoizedState = value;
        hook = requestDeferredLane();
        currentlyRenderingFiber.lanes |= hook;
        workInProgressRootSkippedLanes |= hook;
        return prevValue;
      }
      function startTransition(fiber, queue, pendingState, finishedState, callback) {
        var previousPriority = ReactDOMSharedInternals.p;
        ReactDOMSharedInternals.p = 0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        dispatchOptimisticSetState(fiber, false, queue, pendingState);
        try {
          var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
          null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
          if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
            var thenableForFinishedState = chainThenableValue(
              returnValue,
              finishedState
            );
            dispatchSetStateInternal(
              fiber,
              queue,
              thenableForFinishedState,
              requestUpdateLane(fiber)
            );
          } else
            dispatchSetStateInternal(
              fiber,
              queue,
              finishedState,
              requestUpdateLane(fiber)
            );
        } catch (error) {
          dispatchSetStateInternal(
            fiber,
            queue,
            { then: function() {
            }, status: "rejected", reason: error },
            requestUpdateLane()
          );
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
        }
      }
      function noop$22() {
      }
      function startHostTransition(formFiber, pendingState, action, formData) {
        if (5 !== formFiber.tag) throw Error(formatProdErrorMessage(476));
        var queue = ensureFormComponentIsStateful(formFiber).queue;
        startTransition(
          formFiber,
          queue,
          pendingState,
          sharedNotPendingObject,
          null === action ? noop$22 : function() {
            requestFormReset$1(formFiber);
            return action(formData);
          }
        );
      }
      function ensureFormComponentIsStateful(formFiber) {
        var existingStateHook = formFiber.memoizedState;
        if (null !== existingStateHook) return existingStateHook;
        existingStateHook = {
          memoizedState: sharedNotPendingObject,
          baseState: sharedNotPendingObject,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: sharedNotPendingObject
          },
          next: null
        };
        var initialResetState = {};
        existingStateHook.next = {
          memoizedState: initialResetState,
          baseState: initialResetState,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialResetState
          },
          next: null
        };
        formFiber.memoizedState = existingStateHook;
        formFiber = formFiber.alternate;
        null !== formFiber && (formFiber.memoizedState = existingStateHook);
        return existingStateHook;
      }
      function requestFormReset$1(formFiber) {
        var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
        dispatchSetStateInternal(formFiber, resetStateQueue, {}, requestUpdateLane());
      }
      function useHostTransitionStatus() {
        return readContext(HostTransitionContext);
      }
      function updateId() {
        return updateWorkInProgressHook().memoizedState;
      }
      function updateRefresh() {
        return updateWorkInProgressHook().memoizedState;
      }
      function refreshCache(fiber) {
        for (var provider = fiber.return; null !== provider; ) {
          switch (provider.tag) {
            case 24:
            case 3:
              var lane = requestUpdateLane();
              fiber = createUpdate(lane);
              var root$41 = enqueueUpdate(provider, fiber, lane);
              null !== root$41 && (scheduleUpdateOnFiber(root$41, provider, lane), entangleTransitions(root$41, provider, lane));
              provider = { cache: createCache() };
              fiber.payload = provider;
              return;
          }
          provider = provider.return;
        }
      }
      function dispatchReducerAction(fiber, queue, action) {
        var lane = requestUpdateLane();
        action = {
          lane,
          revertLane: 0,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action && (scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane)));
      }
      function dispatchSetState(fiber, queue, action) {
        var lane = requestUpdateLane();
        dispatchSetStateInternal(fiber, queue, action, lane);
      }
      function dispatchSetStateInternal(fiber, queue, action, lane) {
        var update = {
          lane,
          revertLane: 0,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
          var alternate = fiber.alternate;
          if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate))
            try {
              var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
              update.hasEagerState = true;
              update.eagerState = eagerState;
              if (objectIs(eagerState, currentState))
                return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), false;
            } catch (error) {
            } finally {
            }
          action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (null !== action)
            return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), true;
        }
        return false;
      }
      function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
        action = {
          lane: 2,
          revertLane: requestTransitionLane(),
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          if (throwIfDuringRender) throw Error(formatProdErrorMessage(479));
        } else
          throwIfDuringRender = enqueueConcurrentHookUpdate(
            fiber,
            queue,
            action,
            2
          ), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber || null !== alternate && alternate === currentlyRenderingFiber;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (0 !== (lane & 4194048)) {
          var queueLanes = queue.lanes;
          queueLanes &= root2.pendingLanes;
          lane |= queueLanes;
          queue.lanes = lane;
          markRootEntangled(root2, lane);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        use,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        useHostTransitionStatus: throwInvalidHookError,
        useFormState: throwInvalidHookError,
        useActionState: throwInvalidHookError,
        useOptimistic: throwInvalidHookError,
        useMemoCache: throwInvalidHookError,
        useCacheRefresh: throwInvalidHookError
      }, HooksDispatcherOnMount = {
        readContext,
        use,
        useCallback: function(callback, deps) {
          mountWorkInProgressHook().memoizedState = [
            callback,
            void 0 === deps ? null : deps
          ];
          return callback;
        },
        useContext: readContext,
        useEffect: mountEffect,
        useImperativeHandle: function(ref, create2, deps) {
          deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
          mountEffectImpl(
            4194308,
            4,
            imperativeHandleEffect.bind(null, create2, ref),
            deps
          );
        },
        useLayoutEffect: function(create2, deps) {
          return mountEffectImpl(4194308, 4, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          mountEffectImpl(4, 2, create2, deps);
        },
        useMemo: function(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var nextValue = nextCreate();
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              nextCreate();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          hook.memoizedState = [nextValue, deps];
          return nextValue;
        },
        useReducer: function(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          if (void 0 !== init) {
            var initialState = init(initialArg);
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
              setIsStrictModeForDevtools(true);
              try {
                init(initialArg);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          } else initialState = initialArg;
          hook.memoizedState = hook.baseState = initialState;
          reducer = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = reducer;
          reducer = reducer.dispatch = dispatchReducerAction.bind(
            null,
            currentlyRenderingFiber,
            reducer
          );
          return [hook.memoizedState, reducer];
        },
        useRef: function(initialValue) {
          var hook = mountWorkInProgressHook();
          initialValue = { current: initialValue };
          return hook.memoizedState = initialValue;
        },
        useState: function(initialState) {
          initialState = mountStateImpl(initialState);
          var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
          queue.dispatch = dispatch;
          return [initialState.memoizedState, dispatch];
        },
        useDebugValue: mountDebugValue,
        useDeferredValue: function(value, initialValue) {
          var hook = mountWorkInProgressHook();
          return mountDeferredValueImpl(hook, value, initialValue);
        },
        useTransition: function() {
          var stateHook = mountStateImpl(false);
          stateHook = startTransition.bind(
            null,
            currentlyRenderingFiber,
            stateHook.queue,
            true,
            false
          );
          mountWorkInProgressHook().memoizedState = stateHook;
          return [false, stateHook];
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber, hook = mountWorkInProgressHook();
          if (isHydrating) {
            if (void 0 === getServerSnapshot)
              throw Error(formatProdErrorMessage(407));
            getServerSnapshot = getServerSnapshot();
          } else {
            getServerSnapshot = getSnapshot();
            if (null === workInProgressRoot)
              throw Error(formatProdErrorMessage(349));
            0 !== (workInProgressRootRenderLanes & 124) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
          }
          hook.memoizedState = getServerSnapshot;
          var inst = { value: getServerSnapshot, getSnapshot };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
          ]);
          fiber.flags |= 2048;
          pushSimpleEffect(
            9,
            createEffectInstance(),
            updateStoreInstance.bind(
              null,
              fiber,
              inst,
              getServerSnapshot,
              getSnapshot
            ),
            null
          );
          return getServerSnapshot;
        },
        useId: function() {
          var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
          if (isHydrating) {
            var JSCompiler_inline_result = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            JSCompiler_inline_result = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + JSCompiler_inline_result;
            identifierPrefix = "«" + identifierPrefix + "R" + JSCompiler_inline_result;
            JSCompiler_inline_result = localIdCounter++;
            0 < JSCompiler_inline_result && (identifierPrefix += "H" + JSCompiler_inline_result.toString(32));
            identifierPrefix += "»";
          } else
            JSCompiler_inline_result = globalClientIdCounter++, identifierPrefix = "«" + identifierPrefix + "r" + JSCompiler_inline_result.toString(32) + "»";
          return hook.memoizedState = identifierPrefix;
        },
        useHostTransitionStatus,
        useFormState: mountActionState,
        useActionState: mountActionState,
        useOptimistic: function(passthrough) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = hook.baseState = passthrough;
          var queue = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: null,
            lastRenderedState: null
          };
          hook.queue = queue;
          hook = dispatchOptimisticSetState.bind(
            null,
            currentlyRenderingFiber,
            true,
            queue
          );
          queue.dispatch = hook;
          return [passthrough, hook];
        },
        useMemoCache,
        useCacheRefresh: function() {
          return mountWorkInProgressHook().memoizedState = refreshCache.bind(
            null,
            currentlyRenderingFiber
          );
        }
      }, HooksDispatcherOnUpdate = {
        readContext,
        use,
        useCallback: updateCallback,
        useContext: readContext,
        useEffect: updateEffect,
        useImperativeHandle: updateImperativeHandle,
        useInsertionEffect: updateInsertionEffect,
        useLayoutEffect: updateLayoutEffect,
        useMemo: updateMemo,
        useReducer: updateReducer,
        useRef: updateRef,
        useState: function() {
          return updateReducer(basicStateReducer);
        },
        useDebugValue: mountDebugValue,
        useDeferredValue: function(value, initialValue) {
          var hook = updateWorkInProgressHook();
          return updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value,
            initialValue
          );
        },
        useTransition: function() {
          var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
          return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
          ];
        },
        useSyncExternalStore: updateSyncExternalStore,
        useId: updateId,
        useHostTransitionStatus,
        useFormState: updateActionState,
        useActionState: updateActionState,
        useOptimistic: function(passthrough, reducer) {
          var hook = updateWorkInProgressHook();
          return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
        },
        useMemoCache,
        useCacheRefresh: updateRefresh
      }, HooksDispatcherOnRerender = {
        readContext,
        use,
        useCallback: updateCallback,
        useContext: readContext,
        useEffect: updateEffect,
        useImperativeHandle: updateImperativeHandle,
        useInsertionEffect: updateInsertionEffect,
        useLayoutEffect: updateLayoutEffect,
        useMemo: updateMemo,
        useReducer: rerenderReducer,
        useRef: updateRef,
        useState: function() {
          return rerenderReducer(basicStateReducer);
        },
        useDebugValue: mountDebugValue,
        useDeferredValue: function(value, initialValue) {
          var hook = updateWorkInProgressHook();
          return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value,
            initialValue
          );
        },
        useTransition: function() {
          var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
          return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
          ];
        },
        useSyncExternalStore: updateSyncExternalStore,
        useId: updateId,
        useHostTransitionStatus,
        useFormState: rerenderActionState,
        useActionState: rerenderActionState,
        useOptimistic: function(passthrough, reducer) {
          var hook = updateWorkInProgressHook();
          if (null !== currentHook)
            return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
          hook.baseState = passthrough;
          return [passthrough, hook.queue.dispatch];
        },
        useMemoCache,
        useCacheRefresh: updateRefresh
      }, thenableState = null, thenableIndexCounter = 0;
      function unwrapThenable(thenable) {
        var index3 = thenableIndexCounter;
        thenableIndexCounter += 1;
        null === thenableState && (thenableState = []);
        return trackUsedThenable(thenableState, thenable, index3);
      }
      function coerceRef(workInProgress2, element) {
        element = element.props.ref;
        workInProgress2.ref = void 0 !== element ? element : null;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
          throw Error(formatProdErrorMessage(525));
        returnFiber = Object.prototype.toString.call(newChild);
        throw Error(
          formatProdErrorMessage(
            31,
            "[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber
          )
        );
      }
      function resolveLazy(lazyType) {
        var init = lazyType._init;
        return init(lazyType._payload);
      }
      function createChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (shouldTrackSideEffects) {
            var deletions = returnFiber.deletions;
            null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) return null;
          for (; null !== currentFirstChild; )
            deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
          return null;
        }
        function mapRemainingChildren(currentFirstChild) {
          for (var existingChildren = /* @__PURE__ */ new Map(); null !== currentFirstChild; )
            null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          fiber = createWorkInProgress(fiber, pendingProps);
          fiber.index = 0;
          fiber.sibling = null;
          return fiber;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects)
            return newFiber.flags |= 1048576, lastPlacedIndex;
          newIndex = newFiber.alternate;
          if (null !== newIndex)
            return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 67108866, lastPlacedIndex) : newIndex;
          newFiber.flags |= 67108866;
          return lastPlacedIndex;
        }
        function placeSingleChild(newFiber) {
          shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 67108866);
          return newFiber;
        }
        function updateTextNode(returnFiber, current, textContent, lanes) {
          if (null === current || 6 !== current.tag)
            return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
          current = useFiber(current, textContent);
          current.return = returnFiber;
          return current;
        }
        function updateElement(returnFiber, current, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE)
            return updateFragment(
              returnFiber,
              current,
              element.props.children,
              lanes,
              element.key
            );
          if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type))
            return current = useFiber(current, element.props), coerceRef(current, element), current.return = returnFiber, current;
          current = createFiberFromTypeAndProps(
            element.type,
            element.key,
            element.props,
            null,
            returnFiber.mode,
            lanes
          );
          coerceRef(current, element);
          current.return = returnFiber;
          return current;
        }
        function updatePortal(returnFiber, current, portal, lanes) {
          if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation)
            return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
          current = useFiber(current, portal.children || []);
          current.return = returnFiber;
          return current;
        }
        function updateFragment(returnFiber, current, fragment, lanes, key) {
          if (null === current || 7 !== current.tag)
            return current = createFiberFromFragment(
              fragment,
              returnFiber.mode,
              lanes,
              key
            ), current.return = returnFiber, current;
          current = useFiber(current, fragment);
          current.return = returnFiber;
          return current;
        }
        function createChild(returnFiber, newChild, lanes) {
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return newChild = createFiberFromText(
              "" + newChild,
              returnFiber.mode,
              lanes
            ), newChild.return = returnFiber, newChild;
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return lanes = createFiberFromTypeAndProps(
                  newChild.type,
                  newChild.key,
                  newChild.props,
                  null,
                  returnFiber.mode,
                  lanes
                ), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes;
              case REACT_PORTAL_TYPE:
                return newChild = createFiberFromPortal(
                  newChild,
                  returnFiber.mode,
                  lanes
                ), newChild.return = returnFiber, newChild;
              case REACT_LAZY_TYPE:
                var init = newChild._init;
                newChild = init(newChild._payload);
                return createChild(returnFiber, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild))
              return newChild = createFiberFromFragment(
                newChild,
                returnFiber.mode,
                lanes,
                null
              ), newChild.return = returnFiber, newChild;
            if ("function" === typeof newChild.then)
              return createChild(returnFiber, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return createChild(
                returnFiber,
                readContextDuringReconciliation(returnFiber, newChild),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = null !== oldFiber ? oldFiber.key : null;
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_PORTAL_TYPE:
                return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_LAZY_TYPE:
                return key = newChild._init, newChild = key(newChild._payload), updateSlot(returnFiber, oldFiber, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild))
              return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
            if ("function" === typeof newChild.then)
              return updateSlot(
                returnFiber,
                oldFiber,
                unwrapThenable(newChild),
                lanes
              );
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return updateSlot(
                returnFiber,
                oldFiber,
                readContextDuringReconciliation(returnFiber, newChild),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return existingChildren = existingChildren.get(
                  null === newChild.key ? newIdx : newChild.key
                ) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
              case REACT_PORTAL_TYPE:
                return existingChildren = existingChildren.get(
                  null === newChild.key ? newIdx : newChild.key
                ) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
              case REACT_LAZY_TYPE:
                var init = newChild._init;
                newChild = init(newChild._payload);
                return updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  newChild,
                  lanes
                );
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild))
              return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
            if ("function" === typeof newChild.then)
              return updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                unwrapThenable(newChild),
                lanes
              );
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                readContextDuringReconciliation(returnFiber, newChild),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return null;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(
              returnFiber,
              oldFiber,
              newChildren[newIdx],
              lanes
            );
            if (null === newFiber) {
              null === oldFiber && (oldFiber = nextOldFiber);
              break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length)
            return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
          if (null === oldFiber) {
            for (; newIdx < newChildren.length; newIdx++)
              oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(
                oldFiber,
                currentFirstChild,
                newIdx
              ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          for (oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)
            nextOldFiber = updateFromMap(
              oldFiber,
              returnFiber,
              newIdx,
              newChildren[newIdx],
              lanes
            ), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
              null === nextOldFiber.key ? newIdx : nextOldFiber.key
            ), currentFirstChild = placeChild(
              nextOldFiber,
              currentFirstChild,
              newIdx
            ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
          shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
          });
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
          if (null == newChildren) throw Error(formatProdErrorMessage(151));
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (null === newFiber) {
              null === oldFiber && (oldFiber = nextOldFiber);
              break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done)
            return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
          if (null === oldFiber) {
            for (; !step.done; newIdx++, step = newChildren.next())
              step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          for (oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())
            step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
          shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
          });
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
          "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                a: {
                  for (var key = newChild.key; null !== currentFirstChild; ) {
                    if (currentFirstChild.key === key) {
                      key = newChild.type;
                      if (key === REACT_FRAGMENT_TYPE) {
                        if (7 === currentFirstChild.tag) {
                          deleteRemainingChildren(
                            returnFiber,
                            currentFirstChild.sibling
                          );
                          lanes = useFiber(
                            currentFirstChild,
                            newChild.props.children
                          );
                          lanes.return = returnFiber;
                          returnFiber = lanes;
                          break a;
                        }
                      } else if (currentFirstChild.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === currentFirstChild.type) {
                        deleteRemainingChildren(
                          returnFiber,
                          currentFirstChild.sibling
                        );
                        lanes = useFiber(currentFirstChild, newChild.props);
                        coerceRef(lanes, newChild);
                        lanes.return = returnFiber;
                        returnFiber = lanes;
                        break a;
                      }
                      deleteRemainingChildren(returnFiber, currentFirstChild);
                      break;
                    } else deleteChild(returnFiber, currentFirstChild);
                    currentFirstChild = currentFirstChild.sibling;
                  }
                  newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(
                    newChild.props.children,
                    returnFiber.mode,
                    lanes,
                    newChild.key
                  ), lanes.return = returnFiber, returnFiber = lanes) : (lanes = createFiberFromTypeAndProps(
                    newChild.type,
                    newChild.key,
                    newChild.props,
                    null,
                    returnFiber.mode,
                    lanes
                  ), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = lanes);
                }
                return placeSingleChild(returnFiber);
              case REACT_PORTAL_TYPE:
                a: {
                  for (key = newChild.key; null !== currentFirstChild; ) {
                    if (currentFirstChild.key === key)
                      if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                        deleteRemainingChildren(
                          returnFiber,
                          currentFirstChild.sibling
                        );
                        lanes = useFiber(currentFirstChild, newChild.children || []);
                        lanes.return = returnFiber;
                        returnFiber = lanes;
                        break a;
                      } else {
                        deleteRemainingChildren(returnFiber, currentFirstChild);
                        break;
                      }
                    else deleteChild(returnFiber, currentFirstChild);
                    currentFirstChild = currentFirstChild.sibling;
                  }
                  lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  lanes.return = returnFiber;
                  returnFiber = lanes;
                }
                return placeSingleChild(returnFiber);
              case REACT_LAZY_TYPE:
                return key = newChild._init, newChild = key(newChild._payload), reconcileChildFibersImpl(
                  returnFiber,
                  currentFirstChild,
                  newChild,
                  lanes
                );
            }
            if (isArrayImpl(newChild))
              return reconcileChildrenArray(
                returnFiber,
                currentFirstChild,
                newChild,
                lanes
              );
            if (getIteratorFn(newChild)) {
              key = getIteratorFn(newChild);
              if ("function" !== typeof key) throw Error(formatProdErrorMessage(150));
              newChild = key.call(newChild);
              return reconcileChildrenIterator(
                returnFiber,
                currentFirstChild,
                newChild,
                lanes
              );
            }
            if ("function" === typeof newChild.then)
              return reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                unwrapThenable(newChild),
                lanes
              );
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                readContextDuringReconciliation(returnFiber, newChild),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(newChild, returnFiber.mode, lanes), lanes.return = returnFiber, returnFiber = lanes), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return function(returnFiber, currentFirstChild, newChild, lanes) {
          try {
            thenableIndexCounter = 0;
            var firstChildFiber = reconcileChildFibersImpl(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            );
            thenableState = null;
            return firstChildFiber;
          } catch (x2) {
            if (x2 === SuspenseException || x2 === SuspenseActionException) throw x2;
            var fiber = createFiberImplClass(29, x2, null, returnFiber.mode);
            fiber.lanes = lanes;
            fiber.return = returnFiber;
            return fiber;
          } finally {
          }
        };
      }
      var reconcileChildFibers = createChildReconciler(true), mountChildFibers = createChildReconciler(false), suspenseHandlerStackCursor = createCursor(null), shellBoundary = null;
      function pushPrimaryTreeSuspenseHandler(handler) {
        var current = handler.alternate;
        push(suspenseStackCursor, suspenseStackCursor.current & 1);
        push(suspenseHandlerStackCursor, handler);
        null === shellBoundary && (null === current || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current.memoizedState && (shellBoundary = handler));
      }
      function pushOffscreenSuspenseHandler(fiber) {
        if (22 === fiber.tag) {
          if (push(suspenseStackCursor, suspenseStackCursor.current), push(suspenseHandlerStackCursor, fiber), null === shellBoundary) {
            var current = fiber.alternate;
            null !== current && null !== current.memoizedState && (shellBoundary = fiber);
          }
        } else reuseSuspenseHandlerOnStack();
      }
      function reuseSuspenseHandlerOnStack() {
        push(suspenseStackCursor, suspenseStackCursor.current);
        push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
      }
      function popSuspenseHandler(fiber) {
        pop(suspenseHandlerStackCursor);
        shellBoundary === fiber && (shellBoundary = null);
        pop(suspenseStackCursor);
      }
      var suspenseStackCursor = createCursor(0);
      function findFirstSuspended(row) {
        for (var node = row; null !== node; ) {
          if (13 === node.tag) {
            var state = node.memoizedState;
            if (null !== state && (state = state.dehydrated, null === state || "$?" === state.data || isSuspenseInstanceFallback(state)))
              return node;
          } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
            if (0 !== (node.flags & 128)) return node;
          } else if (null !== node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === row) break;
          for (; null === node.sibling; ) {
            if (null === node.return || node.return === row) return null;
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        ctor = workInProgress2.memoizedState;
        getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
        getDerivedStateFromProps = null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps ? ctor : assign2({}, ctor, getDerivedStateFromProps);
        workInProgress2.memoizedState = getDerivedStateFromProps;
        0 === workInProgress2.lanes && (workInProgress2.updateQueue.baseState = getDerivedStateFromProps);
      }
      var classComponentUpdater = {
        enqueueSetState: function(inst, payload, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(), update = createUpdate(lane);
          update.payload = payload;
          void 0 !== callback && null !== callback && (update.callback = callback);
          payload = enqueueUpdate(inst, update, lane);
          null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
        },
        enqueueReplaceState: function(inst, payload, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(), update = createUpdate(lane);
          update.tag = 1;
          update.payload = payload;
          void 0 !== callback && null !== callback && (update.callback = callback);
          payload = enqueueUpdate(inst, update, lane);
          null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
        },
        enqueueForceUpdate: function(inst, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(), update = createUpdate(lane);
          update.tag = 2;
          void 0 !== callback && null !== callback && (update.callback = callback);
          callback = enqueueUpdate(inst, update, lane);
          null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        workInProgress2 = workInProgress2.stateNode;
        return "function" === typeof workInProgress2.shouldComponentUpdate ? workInProgress2.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState) : true;
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        workInProgress2 = instance.state;
        "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
        "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        instance.state !== workInProgress2 && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
      function resolveClassComponentProps(Component, baseProps) {
        var newProps = baseProps;
        if ("ref" in baseProps) {
          newProps = {};
          for (var propName in baseProps)
            "ref" !== propName && (newProps[propName] = baseProps[propName]);
        }
        if (Component = Component.defaultProps) {
          newProps === baseProps && (newProps = assign2({}, newProps));
          for (var propName$73 in Component)
            void 0 === newProps[propName$73] && (newProps[propName$73] = Component[propName$73]);
        }
        return newProps;
      }
      var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
        if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
          var event = new window.ErrorEvent("error", {
            bubbles: true,
            cancelable: true,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error
          });
          if (!window.dispatchEvent(event)) return;
        } else if ("object" === typeof process && "function" === typeof process.emit) {
          process.emit("uncaughtException", error);
          return;
        }
        console.error(error);
      };
      function defaultOnUncaughtError(error) {
        reportGlobalError(error);
      }
      function defaultOnCaughtError(error) {
        console.error(error);
      }
      function defaultOnRecoverableError(error) {
        reportGlobalError(error);
      }
      function logUncaughtError(root2, errorInfo) {
        try {
          var onUncaughtError = root2.onUncaughtError;
          onUncaughtError(errorInfo.value, { componentStack: errorInfo.stack });
        } catch (e$74) {
          setTimeout(function() {
            throw e$74;
          });
        }
      }
      function logCaughtError(root2, boundary, errorInfo) {
        try {
          var onCaughtError = root2.onCaughtError;
          onCaughtError(errorInfo.value, {
            componentStack: errorInfo.stack,
            errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
          });
        } catch (e$75) {
          setTimeout(function() {
            throw e$75;
          });
        }
      }
      function createRootErrorUpdate(root2, errorInfo, lane) {
        lane = createUpdate(lane);
        lane.tag = 3;
        lane.payload = { element: null };
        lane.callback = function() {
          logUncaughtError(root2, errorInfo);
        };
        return lane;
      }
      function createClassErrorUpdate(lane) {
        lane = createUpdate(lane);
        lane.tag = 3;
        return lane;
      }
      function initializeClassErrorUpdate(update, root2, fiber, errorInfo) {
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if ("function" === typeof getDerivedStateFromError) {
          var error = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error);
          };
          update.callback = function() {
            logCaughtError(root2, fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
          logCaughtError(root2, fiber, errorInfo);
          "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
          var stack = errorInfo.stack;
          this.componentDidCatch(errorInfo.value, {
            componentStack: null !== stack ? stack : ""
          });
        });
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= 32768;
        if (null !== value && "object" === typeof value && "function" === typeof value.then) {
          returnFiber = sourceFiber.alternate;
          null !== returnFiber && propagateParentContextChanges(
            returnFiber,
            sourceFiber,
            rootRenderLanes,
            true
          );
          sourceFiber = suspenseHandlerStackCursor.current;
          if (null !== sourceFiber) {
            switch (sourceFiber.tag) {
              case 13:
                return null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === sourceFiber.alternate && 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3), sourceFiber.flags &= -257, sourceFiber.flags |= 65536, sourceFiber.lanes = rootRenderLanes, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? sourceFiber.updateQueue = /* @__PURE__ */ new Set([value]) : returnFiber.add(value), attachPingListener(root2, value, rootRenderLanes)), false;
              case 22:
                return sourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
                  transitions: null,
                  markerInstances: null,
                  retryQueue: /* @__PURE__ */ new Set([value])
                }, sourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = /* @__PURE__ */ new Set([value]) : sourceFiber.add(value)), attachPingListener(root2, value, rootRenderLanes)), false;
            }
            throw Error(formatProdErrorMessage(435, sourceFiber.tag));
          }
          attachPingListener(root2, value, rootRenderLanes);
          renderDidSuspendDelayIfPossible();
          return false;
        }
        if (isHydrating)
          return returnFiber = suspenseHandlerStackCursor.current, null !== returnFiber ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256), returnFiber.flags |= 65536, returnFiber.lanes = rootRenderLanes, value !== HydrationMismatchException && (root2 = Error(formatProdErrorMessage(422), { cause: value }), queueHydrationError(createCapturedValueAtFiber(root2, sourceFiber)))) : (value !== HydrationMismatchException && (returnFiber = Error(formatProdErrorMessage(423), {
            cause: value
          }), queueHydrationError(
            createCapturedValueAtFiber(returnFiber, sourceFiber)
          )), root2 = root2.current.alternate, root2.flags |= 65536, rootRenderLanes &= -rootRenderLanes, root2.lanes |= rootRenderLanes, value = createCapturedValueAtFiber(value, sourceFiber), rootRenderLanes = createRootErrorUpdate(
            root2.stateNode,
            value,
            rootRenderLanes
          ), enqueueCapturedUpdate(root2, rootRenderLanes), 4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2)), false;
        var wrapperError = Error(formatProdErrorMessage(520), { cause: value });
        wrapperError = createCapturedValueAtFiber(wrapperError, sourceFiber);
        null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [wrapperError] : workInProgressRootConcurrentErrors.push(wrapperError);
        4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
        if (null === returnFiber) return true;
        value = createCapturedValueAtFiber(value, sourceFiber);
        sourceFiber = returnFiber;
        do {
          switch (sourceFiber.tag) {
            case 3:
              return sourceFiber.flags |= 65536, root2 = rootRenderLanes & -rootRenderLanes, sourceFiber.lanes |= root2, root2 = createRootErrorUpdate(sourceFiber.stateNode, value, root2), enqueueCapturedUpdate(sourceFiber, root2), false;
            case 1:
              if (returnFiber = sourceFiber.type, wrapperError = sourceFiber.stateNode, 0 === (sourceFiber.flags & 128) && ("function" === typeof returnFiber.getDerivedStateFromError || null !== wrapperError && "function" === typeof wrapperError.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(wrapperError))))
                return sourceFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, sourceFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(
                  rootRenderLanes,
                  root2,
                  sourceFiber,
                  value
                ), enqueueCapturedUpdate(sourceFiber, rootRenderLanes), false;
          }
          sourceFiber = sourceFiber.return;
        } while (null !== sourceFiber);
        return false;
      }
      var SelectiveHydrationException = Error(formatProdErrorMessage(461)), didReceiveUpdate = false;
      function reconcileChildren(current, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = null === current ? mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildFibers(
          workInProgress2,
          current.child,
          nextChildren,
          renderLanes2
        );
      }
      function updateForwardRef(current, workInProgress2, Component, nextProps, renderLanes2) {
        Component = Component.render;
        var ref = workInProgress2.ref;
        if ("ref" in nextProps) {
          var propsWithoutRef = {};
          for (var key in nextProps)
            "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
        } else propsWithoutRef = nextProps;
        prepareToReadContext(workInProgress2);
        nextProps = renderWithHooks(
          current,
          workInProgress2,
          Component,
          propsWithoutRef,
          ref,
          renderLanes2
        );
        key = checkDidRenderIdHook();
        if (null !== current && !didReceiveUpdate)
          return bailoutHooks(current, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
        isHydrating && key && pushMaterializedTreeId(workInProgress2);
        workInProgress2.flags |= 1;
        reconcileChildren(current, workInProgress2, nextProps, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
        if (null === current) {
          var type = Component.type;
          if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare)
            return workInProgress2.tag = 15, workInProgress2.type = type, updateSimpleMemoComponent(
              current,
              workInProgress2,
              type,
              nextProps,
              renderLanes2
            );
          current = createFiberFromTypeAndProps(
            Component.type,
            null,
            nextProps,
            workInProgress2,
            workInProgress2.mode,
            renderLanes2
          );
          current.ref = workInProgress2.ref;
          current.return = workInProgress2;
          return workInProgress2.child = current;
        }
        type = current.child;
        if (!checkScheduledUpdateOrContext(current, renderLanes2)) {
          var prevProps = type.memoizedProps;
          Component = Component.compare;
          Component = null !== Component ? Component : shallowEqual2;
          if (Component(prevProps, nextProps) && current.ref === workInProgress2.ref)
            return bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
        }
        workInProgress2.flags |= 1;
        current = createWorkInProgress(type, nextProps);
        current.ref = workInProgress2.ref;
        current.return = workInProgress2;
        return workInProgress2.child = current;
      }
      function updateSimpleMemoComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
        if (null !== current) {
          var prevProps = current.memoizedProps;
          if (shallowEqual2(prevProps, nextProps) && current.ref === workInProgress2.ref)
            if (didReceiveUpdate = false, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current, renderLanes2))
              0 !== (current.flags & 131072) && (didReceiveUpdate = true);
            else
              return workInProgress2.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
        }
        return updateFunctionComponent(
          current,
          workInProgress2,
          Component,
          nextProps,
          renderLanes2
        );
      }
      function updateOffscreenComponent(current, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, prevState = null !== current ? current.memoizedState : null;
        if ("hidden" === nextProps.mode) {
          if (0 !== (workInProgress2.flags & 128)) {
            nextProps = null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2;
            if (null !== current) {
              nextChildren = workInProgress2.child = current.child;
              for (prevState = 0; null !== nextChildren; )
                prevState = prevState | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
              workInProgress2.childLanes = prevState & ~nextProps;
            } else workInProgress2.childLanes = 0, workInProgress2.child = null;
            return deferHiddenOffscreenComponent(
              current,
              workInProgress2,
              nextProps,
              renderLanes2
            );
          }
          if (0 !== (renderLanes2 & 536870912))
            workInProgress2.memoizedState = { baseLanes: 0, cachePool: null }, null !== current && pushTransition(
              workInProgress2,
              null !== prevState ? prevState.cachePool : null
            ), null !== prevState ? pushHiddenContext(workInProgress2, prevState) : reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress2);
          else
            return workInProgress2.lanes = workInProgress2.childLanes = 536870912, deferHiddenOffscreenComponent(
              current,
              workInProgress2,
              null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2,
              renderLanes2
            );
        } else
          null !== prevState ? (pushTransition(workInProgress2, prevState.cachePool), pushHiddenContext(workInProgress2, prevState), reuseSuspenseHandlerOnStack(), workInProgress2.memoizedState = null) : (null !== current && pushTransition(workInProgress2, null), reuseHiddenContextOnStack(), reuseSuspenseHandlerOnStack());
        reconcileChildren(current, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function deferHiddenOffscreenComponent(current, workInProgress2, nextBaseLanes, renderLanes2) {
        var JSCompiler_inline_result = peekCacheFromPool();
        JSCompiler_inline_result = null === JSCompiler_inline_result ? null : { parent: CacheContext._currentValue, pool: JSCompiler_inline_result };
        workInProgress2.memoizedState = {
          baseLanes: nextBaseLanes,
          cachePool: JSCompiler_inline_result
        };
        null !== current && pushTransition(workInProgress2, null);
        reuseHiddenContextOnStack();
        pushOffscreenSuspenseHandler(workInProgress2);
        null !== current && propagateParentContextChanges(current, workInProgress2, renderLanes2, true);
        return null;
      }
      function markRef(current, workInProgress2) {
        var ref = workInProgress2.ref;
        if (null === ref)
          null !== current && null !== current.ref && (workInProgress2.flags |= 4194816);
        else {
          if ("function" !== typeof ref && "object" !== typeof ref)
            throw Error(formatProdErrorMessage(284));
          if (null === current || current.ref !== ref)
            workInProgress2.flags |= 4194816;
        }
      }
      function updateFunctionComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
        prepareToReadContext(workInProgress2);
        Component = renderWithHooks(
          current,
          workInProgress2,
          Component,
          nextProps,
          void 0,
          renderLanes2
        );
        nextProps = checkDidRenderIdHook();
        if (null !== current && !didReceiveUpdate)
          return bailoutHooks(current, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
        isHydrating && nextProps && pushMaterializedTreeId(workInProgress2);
        workInProgress2.flags |= 1;
        reconcileChildren(current, workInProgress2, Component, renderLanes2);
        return workInProgress2.child;
      }
      function replayFunctionComponent(current, workInProgress2, nextProps, Component, secondArg, renderLanes2) {
        prepareToReadContext(workInProgress2);
        workInProgress2.updateQueue = null;
        nextProps = renderWithHooksAgain(
          workInProgress2,
          Component,
          nextProps,
          secondArg
        );
        finishRenderingHooks(current);
        Component = checkDidRenderIdHook();
        if (null !== current && !didReceiveUpdate)
          return bailoutHooks(current, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
        isHydrating && Component && pushMaterializedTreeId(workInProgress2);
        workInProgress2.flags |= 1;
        reconcileChildren(current, workInProgress2, nextProps, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current, workInProgress2, Component, nextProps, renderLanes2) {
        prepareToReadContext(workInProgress2);
        if (null === workInProgress2.stateNode) {
          var context = emptyContextObject, contextType = Component.contextType;
          "object" === typeof contextType && null !== contextType && (context = readContext(contextType));
          context = new Component(nextProps, context);
          workInProgress2.memoizedState = null !== context.state && void 0 !== context.state ? context.state : null;
          context.updater = classComponentUpdater;
          workInProgress2.stateNode = context;
          context._reactInternals = workInProgress2;
          context = workInProgress2.stateNode;
          context.props = nextProps;
          context.state = workInProgress2.memoizedState;
          context.refs = {};
          initializeUpdateQueue(workInProgress2);
          contextType = Component.contextType;
          context.context = "object" === typeof contextType && null !== contextType ? readContext(contextType) : emptyContextObject;
          context.state = workInProgress2.memoizedState;
          contextType = Component.getDerivedStateFromProps;
          "function" === typeof contextType && (applyDerivedStateFromProps(
            workInProgress2,
            Component,
            contextType,
            nextProps
          ), context.state = workInProgress2.memoizedState);
          "function" === typeof Component.getDerivedStateFromProps || "function" === typeof context.getSnapshotBeforeUpdate || "function" !== typeof context.UNSAFE_componentWillMount && "function" !== typeof context.componentWillMount || (contextType = context.state, "function" === typeof context.componentWillMount && context.componentWillMount(), "function" === typeof context.UNSAFE_componentWillMount && context.UNSAFE_componentWillMount(), contextType !== context.state && classComponentUpdater.enqueueReplaceState(context, context.state, null), processUpdateQueue(workInProgress2, nextProps, context, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction(), context.state = workInProgress2.memoizedState);
          "function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308);
          nextProps = true;
        } else if (null === current) {
          context = workInProgress2.stateNode;
          var unresolvedOldProps = workInProgress2.memoizedProps, oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
          context.props = oldProps;
          var oldContext = context.context, contextType$jscomp$0 = Component.contextType;
          contextType = emptyContextObject;
          "object" === typeof contextType$jscomp$0 && null !== contextType$jscomp$0 && (contextType = readContext(contextType$jscomp$0));
          var getDerivedStateFromProps = Component.getDerivedStateFromProps;
          contextType$jscomp$0 = "function" === typeof getDerivedStateFromProps || "function" === typeof context.getSnapshotBeforeUpdate;
          unresolvedOldProps = workInProgress2.pendingProps !== unresolvedOldProps;
          contextType$jscomp$0 || "function" !== typeof context.UNSAFE_componentWillReceiveProps && "function" !== typeof context.componentWillReceiveProps || (unresolvedOldProps || oldContext !== contextType) && callComponentWillReceiveProps(
            workInProgress2,
            context,
            nextProps,
            contextType
          );
          hasForceUpdate = false;
          var oldState = workInProgress2.memoizedState;
          context.state = oldState;
          processUpdateQueue(workInProgress2, nextProps, context, renderLanes2);
          suspendIfUpdateReadFromEntangledAsyncAction();
          oldContext = workInProgress2.memoizedState;
          unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(
            workInProgress2,
            Component,
            getDerivedStateFromProps,
            nextProps
          ), oldContext = workInProgress2.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(
            workInProgress2,
            Component,
            oldProps,
            nextProps,
            oldState,
            oldContext,
            contextType
          )) ? (contextType$jscomp$0 || "function" !== typeof context.UNSAFE_componentWillMount && "function" !== typeof context.componentWillMount || ("function" === typeof context.componentWillMount && context.componentWillMount(), "function" === typeof context.UNSAFE_componentWillMount && context.UNSAFE_componentWillMount()), "function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308)) : ("function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = oldContext), context.props = nextProps, context.state = oldContext, context.context = contextType, nextProps = oldProps) : ("function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308), nextProps = false);
        } else {
          context = workInProgress2.stateNode;
          cloneUpdateQueue(current, workInProgress2);
          contextType = workInProgress2.memoizedProps;
          contextType$jscomp$0 = resolveClassComponentProps(Component, contextType);
          context.props = contextType$jscomp$0;
          getDerivedStateFromProps = workInProgress2.pendingProps;
          oldState = context.context;
          oldContext = Component.contextType;
          oldProps = emptyContextObject;
          "object" === typeof oldContext && null !== oldContext && (oldProps = readContext(oldContext));
          unresolvedOldProps = Component.getDerivedStateFromProps;
          (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof context.getSnapshotBeforeUpdate) || "function" !== typeof context.UNSAFE_componentWillReceiveProps && "function" !== typeof context.componentWillReceiveProps || (contextType !== getDerivedStateFromProps || oldState !== oldProps) && callComponentWillReceiveProps(
            workInProgress2,
            context,
            nextProps,
            oldProps
          );
          hasForceUpdate = false;
          oldState = workInProgress2.memoizedState;
          context.state = oldState;
          processUpdateQueue(workInProgress2, nextProps, context, renderLanes2);
          suspendIfUpdateReadFromEntangledAsyncAction();
          var newState = workInProgress2.memoizedState;
          contextType !== getDerivedStateFromProps || oldState !== newState || hasForceUpdate || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(
            workInProgress2,
            Component,
            unresolvedOldProps,
            nextProps
          ), newState = workInProgress2.memoizedState), (contextType$jscomp$0 = hasForceUpdate || checkShouldComponentUpdate(
            workInProgress2,
            Component,
            contextType$jscomp$0,
            nextProps,
            oldState,
            newState,
            oldProps
          ) || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies)) ? (oldContext || "function" !== typeof context.UNSAFE_componentWillUpdate && "function" !== typeof context.componentWillUpdate || ("function" === typeof context.componentWillUpdate && context.componentWillUpdate(nextProps, newState, oldProps), "function" === typeof context.UNSAFE_componentWillUpdate && context.UNSAFE_componentWillUpdate(
            nextProps,
            newState,
            oldProps
          )), "function" === typeof context.componentDidUpdate && (workInProgress2.flags |= 4), "function" === typeof context.getSnapshotBeforeUpdate && (workInProgress2.flags |= 1024)) : ("function" !== typeof context.componentDidUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof context.getSnapshotBeforeUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress2.flags |= 1024), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = newState), context.props = nextProps, context.state = newState, context.context = oldProps, nextProps = contextType$jscomp$0) : ("function" !== typeof context.componentDidUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof context.getSnapshotBeforeUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress2.flags |= 1024), nextProps = false);
        }
        context = nextProps;
        markRef(current, workInProgress2);
        nextProps = 0 !== (workInProgress2.flags & 128);
        context || nextProps ? (context = workInProgress2.stateNode, Component = nextProps && "function" !== typeof Component.getDerivedStateFromError ? null : context.render(), workInProgress2.flags |= 1, null !== current && nextProps ? (workInProgress2.child = reconcileChildFibers(
          workInProgress2,
          current.child,
          null,
          renderLanes2
        ), workInProgress2.child = reconcileChildFibers(
          workInProgress2,
          null,
          Component,
          renderLanes2
        )) : reconcileChildren(current, workInProgress2, Component, renderLanes2), workInProgress2.memoizedState = context.state, current = workInProgress2.child) : current = bailoutOnAlreadyFinishedWork(
          current,
          workInProgress2,
          renderLanes2
        );
        return current;
      }
      function mountHostRootWithoutHydrating(current, workInProgress2, nextChildren, renderLanes2) {
        resetHydrationState();
        workInProgress2.flags |= 256;
        reconcileChildren(current, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: 0,
        hydrationErrors: null
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return { baseLanes: renderLanes2, cachePool: getSuspendedCache() };
      }
      function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes2) {
        current = null !== current ? current.childLanes & ~renderLanes2 : 0;
        primaryTreeDidDefer && (current |= workInProgressDeferredLane);
        return current;
      }
      function updateSuspenseComponent(current, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, showFallback = false, didSuspend = 0 !== (workInProgress2.flags & 128), JSCompiler_temp;
        (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? false : 0 !== (suspenseStackCursor.current & 2));
        JSCompiler_temp && (showFallback = true, workInProgress2.flags &= -129);
        JSCompiler_temp = 0 !== (workInProgress2.flags & 32);
        workInProgress2.flags &= -33;
        if (null === current) {
          if (isHydrating) {
            showFallback ? pushPrimaryTreeSuspenseHandler(workInProgress2) : reuseSuspenseHandlerOnStack();
            if (isHydrating) {
              var nextInstance = nextHydratableInstance, JSCompiler_temp$jscomp$0;
              if (JSCompiler_temp$jscomp$0 = nextInstance) {
                c: {
                  JSCompiler_temp$jscomp$0 = nextInstance;
                  for (nextInstance = rootOrSingletonContext; 8 !== JSCompiler_temp$jscomp$0.nodeType; ) {
                    if (!nextInstance) {
                      nextInstance = null;
                      break c;
                    }
                    JSCompiler_temp$jscomp$0 = getNextHydratable(
                      JSCompiler_temp$jscomp$0.nextSibling
                    );
                    if (null === JSCompiler_temp$jscomp$0) {
                      nextInstance = null;
                      break c;
                    }
                  }
                  nextInstance = JSCompiler_temp$jscomp$0;
                }
                null !== nextInstance ? (workInProgress2.memoizedState = {
                  dehydrated: nextInstance,
                  treeContext: null !== treeContextProvider ? { id: treeContextId, overflow: treeContextOverflow } : null,
                  retryLane: 536870912,
                  hydrationErrors: null
                }, JSCompiler_temp$jscomp$0 = createFiberImplClass(
                  18,
                  null,
                  null,
                  0
                ), JSCompiler_temp$jscomp$0.stateNode = nextInstance, JSCompiler_temp$jscomp$0.return = workInProgress2, workInProgress2.child = JSCompiler_temp$jscomp$0, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, JSCompiler_temp$jscomp$0 = true) : JSCompiler_temp$jscomp$0 = false;
              }
              JSCompiler_temp$jscomp$0 || throwOnHydrationMismatch(workInProgress2);
            }
            nextInstance = workInProgress2.memoizedState;
            if (null !== nextInstance && (nextInstance = nextInstance.dehydrated, null !== nextInstance))
              return isSuspenseInstanceFallback(nextInstance) ? workInProgress2.lanes = 32 : workInProgress2.lanes = 536870912, null;
            popSuspenseHandler(workInProgress2);
          }
          nextInstance = nextProps.children;
          nextProps = nextProps.fallback;
          if (showFallback)
            return reuseSuspenseHandlerOnStack(), showFallback = workInProgress2.mode, nextInstance = mountWorkInProgressOffscreenFiber(
              { mode: "hidden", children: nextInstance },
              showFallback
            ), nextProps = createFiberFromFragment(
              nextProps,
              showFallback,
              renderLanes2,
              null
            ), nextInstance.return = workInProgress2, nextProps.return = workInProgress2, nextInstance.sibling = nextProps, workInProgress2.child = nextInstance, showFallback = workInProgress2.child, showFallback.memoizedState = mountSuspenseOffscreenState(renderLanes2), showFallback.childLanes = getRemainingWorkInPrimaryTree(
              current,
              JSCompiler_temp,
              renderLanes2
            ), workInProgress2.memoizedState = SUSPENDED_MARKER, nextProps;
          pushPrimaryTreeSuspenseHandler(workInProgress2);
          return mountSuspensePrimaryChildren(workInProgress2, nextInstance);
        }
        JSCompiler_temp$jscomp$0 = current.memoizedState;
        if (null !== JSCompiler_temp$jscomp$0 && (nextInstance = JSCompiler_temp$jscomp$0.dehydrated, null !== nextInstance)) {
          if (didSuspend)
            workInProgress2.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags &= -257, workInProgress2 = retrySuspenseComponentWithoutHydrating(
              current,
              workInProgress2,
              renderLanes2
            )) : null !== workInProgress2.memoizedState ? (reuseSuspenseHandlerOnStack(), workInProgress2.child = current.child, workInProgress2.flags |= 128, workInProgress2 = null) : (reuseSuspenseHandlerOnStack(), showFallback = nextProps.fallback, nextInstance = workInProgress2.mode, nextProps = mountWorkInProgressOffscreenFiber(
              { mode: "visible", children: nextProps.children },
              nextInstance
            ), showFallback = createFiberFromFragment(
              showFallback,
              nextInstance,
              renderLanes2,
              null
            ), showFallback.flags |= 2, nextProps.return = workInProgress2, showFallback.return = workInProgress2, nextProps.sibling = showFallback, workInProgress2.child = nextProps, reconcileChildFibers(
              workInProgress2,
              current.child,
              null,
              renderLanes2
            ), nextProps = workInProgress2.child, nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes2), nextProps.childLanes = getRemainingWorkInPrimaryTree(
              current,
              JSCompiler_temp,
              renderLanes2
            ), workInProgress2.memoizedState = SUSPENDED_MARKER, workInProgress2 = showFallback);
          else if (pushPrimaryTreeSuspenseHandler(workInProgress2), isSuspenseInstanceFallback(nextInstance)) {
            JSCompiler_temp = nextInstance.nextSibling && nextInstance.nextSibling.dataset;
            if (JSCompiler_temp) var digest = JSCompiler_temp.dgst;
            JSCompiler_temp = digest;
            nextProps = Error(formatProdErrorMessage(419));
            nextProps.stack = "";
            nextProps.digest = JSCompiler_temp;
            queueHydrationError({ value: nextProps, source: null, stack: null });
            workInProgress2 = retrySuspenseComponentWithoutHydrating(
              current,
              workInProgress2,
              renderLanes2
            );
          } else if (didReceiveUpdate || propagateParentContextChanges(current, workInProgress2, renderLanes2, false), JSCompiler_temp = 0 !== (renderLanes2 & current.childLanes), didReceiveUpdate || JSCompiler_temp) {
            JSCompiler_temp = workInProgressRoot;
            if (null !== JSCompiler_temp && (nextProps = renderLanes2 & -renderLanes2, nextProps = 0 !== (nextProps & 42) ? 1 : getBumpedLaneForHydrationByLane(nextProps), nextProps = 0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes2)) ? 0 : nextProps, 0 !== nextProps && nextProps !== JSCompiler_temp$jscomp$0.retryLane))
              throw JSCompiler_temp$jscomp$0.retryLane = nextProps, enqueueConcurrentRenderForLane(current, nextProps), scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps), SelectiveHydrationException;
            "$?" === nextInstance.data || renderDidSuspendDelayIfPossible();
            workInProgress2 = retrySuspenseComponentWithoutHydrating(
              current,
              workInProgress2,
              renderLanes2
            );
          } else
            "$?" === nextInstance.data ? (workInProgress2.flags |= 192, workInProgress2.child = current.child, workInProgress2 = null) : (current = JSCompiler_temp$jscomp$0.treeContext, nextHydratableInstance = getNextHydratable(
              nextInstance.nextSibling
            ), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, rootOrSingletonContext = false, null !== current && (idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = current.id, treeContextOverflow = current.overflow, treeContextProvider = workInProgress2), workInProgress2 = mountSuspensePrimaryChildren(
              workInProgress2,
              nextProps.children
            ), workInProgress2.flags |= 4096);
          return workInProgress2;
        }
        if (showFallback)
          return reuseSuspenseHandlerOnStack(), showFallback = nextProps.fallback, nextInstance = workInProgress2.mode, JSCompiler_temp$jscomp$0 = current.child, digest = JSCompiler_temp$jscomp$0.sibling, nextProps = createWorkInProgress(JSCompiler_temp$jscomp$0, {
            mode: "hidden",
            children: nextProps.children
          }), nextProps.subtreeFlags = JSCompiler_temp$jscomp$0.subtreeFlags & 65011712, null !== digest ? showFallback = createWorkInProgress(digest, showFallback) : (showFallback = createFiberFromFragment(
            showFallback,
            nextInstance,
            renderLanes2,
            null
          ), showFallback.flags |= 2), showFallback.return = workInProgress2, nextProps.return = workInProgress2, nextProps.sibling = showFallback, workInProgress2.child = nextProps, nextProps = showFallback, showFallback = workInProgress2.child, nextInstance = current.child.memoizedState, null === nextInstance ? nextInstance = mountSuspenseOffscreenState(renderLanes2) : (JSCompiler_temp$jscomp$0 = nextInstance.cachePool, null !== JSCompiler_temp$jscomp$0 ? (digest = CacheContext._currentValue, JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0.parent !== digest ? { parent: digest, pool: digest } : JSCompiler_temp$jscomp$0) : JSCompiler_temp$jscomp$0 = getSuspendedCache(), nextInstance = {
            baseLanes: nextInstance.baseLanes | renderLanes2,
            cachePool: JSCompiler_temp$jscomp$0
          }), showFallback.memoizedState = nextInstance, showFallback.childLanes = getRemainingWorkInPrimaryTree(
            current,
            JSCompiler_temp,
            renderLanes2
          ), workInProgress2.memoizedState = SUSPENDED_MARKER, nextProps;
        pushPrimaryTreeSuspenseHandler(workInProgress2);
        renderLanes2 = current.child;
        current = renderLanes2.sibling;
        renderLanes2 = createWorkInProgress(renderLanes2, {
          mode: "visible",
          children: nextProps.children
        });
        renderLanes2.return = workInProgress2;
        renderLanes2.sibling = null;
        null !== current && (JSCompiler_temp = workInProgress2.deletions, null === JSCompiler_temp ? (workInProgress2.deletions = [current], workInProgress2.flags |= 16) : JSCompiler_temp.push(current));
        workInProgress2.child = renderLanes2;
        workInProgress2.memoizedState = null;
        return renderLanes2;
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren) {
        primaryChildren = mountWorkInProgressOffscreenFiber(
          { mode: "visible", children: primaryChildren },
          workInProgress2.mode
        );
        primaryChildren.return = workInProgress2;
        return workInProgress2.child = primaryChildren;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
        offscreenProps = createFiberImplClass(22, offscreenProps, null, mode);
        offscreenProps.lanes = 0;
        offscreenProps.stateNode = {
          _visibility: 1,
          _pendingMarkers: null,
          _retryCache: null,
          _transitions: null
        };
        return offscreenProps;
      }
      function retrySuspenseComponentWithoutHydrating(current, workInProgress2, renderLanes2) {
        reconcileChildFibers(workInProgress2, current.child, null, renderLanes2);
        current = mountSuspensePrimaryChildren(
          workInProgress2,
          workInProgress2.pendingProps.children
        );
        current.flags |= 2;
        workInProgress2.memoizedState = null;
        return current;
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes |= renderLanes2;
        var alternate = fiber.alternate;
        null !== alternate && (alternate.lanes |= renderLanes2);
        scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        null === renderState ? workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
      }
      function updateSuspenseListComponent(current, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
        reconcileChildren(current, workInProgress2, nextProps.children, renderLanes2);
        nextProps = suspenseStackCursor.current;
        if (0 !== (nextProps & 2))
          nextProps = nextProps & 1 | 2, workInProgress2.flags |= 128;
        else {
          if (null !== current && 0 !== (current.flags & 128))
            a: for (current = workInProgress2.child; null !== current; ) {
              if (13 === current.tag)
                null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes2, workInProgress2);
              else if (19 === current.tag)
                scheduleSuspenseWorkOnFiber(current, renderLanes2, workInProgress2);
              else if (null !== current.child) {
                current.child.return = current;
                current = current.child;
                continue;
              }
              if (current === workInProgress2) break a;
              for (; null === current.sibling; ) {
                if (null === current.return || current.return === workInProgress2)
                  break a;
                current = current.return;
              }
              current.sibling.return = current.return;
              current = current.sibling;
            }
          nextProps &= 1;
        }
        push(suspenseStackCursor, nextProps);
        switch (revealOrder) {
          case "forwards":
            renderLanes2 = workInProgress2.child;
            for (revealOrder = null; null !== renderLanes2; )
              current = renderLanes2.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes2), renderLanes2 = renderLanes2.sibling;
            renderLanes2 = revealOrder;
            null === renderLanes2 ? (revealOrder = workInProgress2.child, workInProgress2.child = null) : (revealOrder = renderLanes2.sibling, renderLanes2.sibling = null);
            initSuspenseListRenderState(
              workInProgress2,
              false,
              revealOrder,
              renderLanes2,
              tailMode
            );
            break;
          case "backwards":
            renderLanes2 = null;
            revealOrder = workInProgress2.child;
            for (workInProgress2.child = null; null !== revealOrder; ) {
              current = revealOrder.alternate;
              if (null !== current && null === findFirstSuspended(current)) {
                workInProgress2.child = revealOrder;
                break;
              }
              current = revealOrder.sibling;
              revealOrder.sibling = renderLanes2;
              renderLanes2 = revealOrder;
              revealOrder = current;
            }
            initSuspenseListRenderState(
              workInProgress2,
              true,
              renderLanes2,
              null,
              tailMode
            );
            break;
          case "together":
            initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
            break;
          default:
            workInProgress2.memoizedState = null;
        }
        return workInProgress2.child;
      }
      function bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2) {
        null !== current && (workInProgress2.dependencies = current.dependencies);
        workInProgressRootSkippedLanes |= workInProgress2.lanes;
        if (0 === (renderLanes2 & workInProgress2.childLanes))
          if (null !== current) {
            if (propagateParentContextChanges(
              current,
              workInProgress2,
              renderLanes2,
              false
            ), 0 === (renderLanes2 & workInProgress2.childLanes))
              return null;
          } else return null;
        if (null !== current && workInProgress2.child !== current.child)
          throw Error(formatProdErrorMessage(153));
        if (null !== workInProgress2.child) {
          current = workInProgress2.child;
          renderLanes2 = createWorkInProgress(current, current.pendingProps);
          workInProgress2.child = renderLanes2;
          for (renderLanes2.return = workInProgress2; null !== current.sibling; )
            current = current.sibling, renderLanes2 = renderLanes2.sibling = createWorkInProgress(current, current.pendingProps), renderLanes2.return = workInProgress2;
          renderLanes2.sibling = null;
        }
        return workInProgress2.child;
      }
      function checkScheduledUpdateOrContext(current, renderLanes2) {
        if (0 !== (current.lanes & renderLanes2)) return true;
        current = current.dependencies;
        return null !== current && checkIfContextChanged(current) ? true : false;
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case 3:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            pushProvider(workInProgress2, CacheContext, current.memoizedState.cache);
            resetHydrationState();
            break;
          case 27:
          case 5:
            pushHostContext(workInProgress2);
            break;
          case 4:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case 10:
            pushProvider(
              workInProgress2,
              workInProgress2.type,
              workInProgress2.memoizedProps.value
            );
            break;
          case 13:
            var state = workInProgress2.memoizedState;
            if (null !== state) {
              if (null !== state.dehydrated)
                return pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags |= 128, null;
              if (0 !== (renderLanes2 & workInProgress2.child.childLanes))
                return updateSuspenseComponent(current, workInProgress2, renderLanes2);
              pushPrimaryTreeSuspenseHandler(workInProgress2);
              current = bailoutOnAlreadyFinishedWork(
                current,
                workInProgress2,
                renderLanes2
              );
              return null !== current ? current.sibling : null;
            }
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            break;
          case 19:
            var didSuspendBefore = 0 !== (current.flags & 128);
            state = 0 !== (renderLanes2 & workInProgress2.childLanes);
            state || (propagateParentContextChanges(
              current,
              workInProgress2,
              renderLanes2,
              false
            ), state = 0 !== (renderLanes2 & workInProgress2.childLanes));
            if (didSuspendBefore) {
              if (state)
                return updateSuspenseListComponent(
                  current,
                  workInProgress2,
                  renderLanes2
                );
              workInProgress2.flags |= 128;
            }
            didSuspendBefore = workInProgress2.memoizedState;
            null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
            push(suspenseStackCursor, suspenseStackCursor.current);
            if (state) break;
            else return null;
          case 22:
          case 23:
            return workInProgress2.lanes = 0, updateOffscreenComponent(current, workInProgress2, renderLanes2);
          case 24:
            pushProvider(workInProgress2, CacheContext, current.memoizedState.cache);
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress2, renderLanes2);
      }
      function beginWork(current, workInProgress2, renderLanes2) {
        if (null !== current)
          if (current.memoizedProps !== workInProgress2.pendingProps)
            didReceiveUpdate = true;
          else {
            if (!checkScheduledUpdateOrContext(current, renderLanes2) && 0 === (workInProgress2.flags & 128))
              return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(
                current,
                workInProgress2,
                renderLanes2
              );
            didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
          }
        else
          didReceiveUpdate = false, isHydrating && 0 !== (workInProgress2.flags & 1048576) && pushTreeId(workInProgress2, treeForkCount, workInProgress2.index);
        workInProgress2.lanes = 0;
        switch (workInProgress2.tag) {
          case 16:
            a: {
              current = workInProgress2.pendingProps;
              var lazyComponent = workInProgress2.elementType, init = lazyComponent._init;
              lazyComponent = init(lazyComponent._payload);
              workInProgress2.type = lazyComponent;
              if ("function" === typeof lazyComponent)
                shouldConstruct(lazyComponent) ? (current = resolveClassComponentProps(lazyComponent, current), workInProgress2.tag = 1, workInProgress2 = updateClassComponent(
                  null,
                  workInProgress2,
                  lazyComponent,
                  current,
                  renderLanes2
                )) : (workInProgress2.tag = 0, workInProgress2 = updateFunctionComponent(
                  null,
                  workInProgress2,
                  lazyComponent,
                  current,
                  renderLanes2
                ));
              else {
                if (void 0 !== lazyComponent && null !== lazyComponent) {
                  if (init = lazyComponent.$$typeof, init === REACT_FORWARD_REF_TYPE) {
                    workInProgress2.tag = 11;
                    workInProgress2 = updateForwardRef(
                      null,
                      workInProgress2,
                      lazyComponent,
                      current,
                      renderLanes2
                    );
                    break a;
                  } else if (init === REACT_MEMO_TYPE) {
                    workInProgress2.tag = 14;
                    workInProgress2 = updateMemoComponent(
                      null,
                      workInProgress2,
                      lazyComponent,
                      current,
                      renderLanes2
                    );
                    break a;
                  }
                }
                workInProgress2 = getComponentNameFromType(lazyComponent) || lazyComponent;
                throw Error(formatProdErrorMessage(306, workInProgress2, ""));
              }
            }
            return workInProgress2;
          case 0:
            return updateFunctionComponent(
              current,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 1:
            return lazyComponent = workInProgress2.type, init = resolveClassComponentProps(
              lazyComponent,
              workInProgress2.pendingProps
            ), updateClassComponent(
              current,
              workInProgress2,
              lazyComponent,
              init,
              renderLanes2
            );
          case 3:
            a: {
              pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              );
              if (null === current) throw Error(formatProdErrorMessage(387));
              lazyComponent = workInProgress2.pendingProps;
              var prevState = workInProgress2.memoizedState;
              init = prevState.element;
              cloneUpdateQueue(current, workInProgress2);
              processUpdateQueue(workInProgress2, lazyComponent, null, renderLanes2);
              var nextState = workInProgress2.memoizedState;
              lazyComponent = nextState.cache;
              pushProvider(workInProgress2, CacheContext, lazyComponent);
              lazyComponent !== prevState.cache && propagateContextChanges(
                workInProgress2,
                [CacheContext],
                renderLanes2,
                true
              );
              suspendIfUpdateReadFromEntangledAsyncAction();
              lazyComponent = nextState.element;
              if (prevState.isDehydrated)
                if (prevState = {
                  element: lazyComponent,
                  isDehydrated: false,
                  cache: nextState.cache
                }, workInProgress2.updateQueue.baseState = prevState, workInProgress2.memoizedState = prevState, workInProgress2.flags & 256) {
                  workInProgress2 = mountHostRootWithoutHydrating(
                    current,
                    workInProgress2,
                    lazyComponent,
                    renderLanes2
                  );
                  break a;
                } else if (lazyComponent !== init) {
                  init = createCapturedValueAtFiber(
                    Error(formatProdErrorMessage(424)),
                    workInProgress2
                  );
                  queueHydrationError(init);
                  workInProgress2 = mountHostRootWithoutHydrating(
                    current,
                    workInProgress2,
                    lazyComponent,
                    renderLanes2
                  );
                  break a;
                } else {
                  current = workInProgress2.stateNode.containerInfo;
                  switch (current.nodeType) {
                    case 9:
                      current = current.body;
                      break;
                    default:
                      current = "HTML" === current.nodeName ? current.ownerDocument.body : current;
                  }
                  nextHydratableInstance = getNextHydratable(current.firstChild);
                  hydrationParentFiber = workInProgress2;
                  isHydrating = true;
                  hydrationErrors = null;
                  rootOrSingletonContext = true;
                  renderLanes2 = mountChildFibers(
                    workInProgress2,
                    null,
                    lazyComponent,
                    renderLanes2
                  );
                  for (workInProgress2.child = renderLanes2; renderLanes2; )
                    renderLanes2.flags = renderLanes2.flags & -3 | 4096, renderLanes2 = renderLanes2.sibling;
                }
              else {
                resetHydrationState();
                if (lazyComponent === init) {
                  workInProgress2 = bailoutOnAlreadyFinishedWork(
                    current,
                    workInProgress2,
                    renderLanes2
                  );
                  break a;
                }
                reconcileChildren(
                  current,
                  workInProgress2,
                  lazyComponent,
                  renderLanes2
                );
              }
              workInProgress2 = workInProgress2.child;
            }
            return workInProgress2;
          case 26:
            return markRef(current, workInProgress2), null === current ? (renderLanes2 = getResource(
              workInProgress2.type,
              null,
              workInProgress2.pendingProps,
              null
            )) ? workInProgress2.memoizedState = renderLanes2 : isHydrating || (renderLanes2 = workInProgress2.type, current = workInProgress2.pendingProps, lazyComponent = getOwnerDocumentFromRootContainer(
              rootInstanceStackCursor.current
            ).createElement(renderLanes2), lazyComponent[internalInstanceKey] = workInProgress2, lazyComponent[internalPropsKey] = current, setInitialProperties(lazyComponent, renderLanes2, current), markNodeAsHoistable(lazyComponent), workInProgress2.stateNode = lazyComponent) : workInProgress2.memoizedState = getResource(
              workInProgress2.type,
              current.memoizedProps,
              workInProgress2.pendingProps,
              current.memoizedState
            ), null;
          case 27:
            return pushHostContext(workInProgress2), null === current && isHydrating && (lazyComponent = workInProgress2.stateNode = resolveSingletonInstance(
              workInProgress2.type,
              workInProgress2.pendingProps,
              rootInstanceStackCursor.current
            ), hydrationParentFiber = workInProgress2, rootOrSingletonContext = true, init = nextHydratableInstance, isSingletonScope(workInProgress2.type) ? (previousHydratableOnEnteringScopedSingleton = init, nextHydratableInstance = getNextHydratable(
              lazyComponent.firstChild
            )) : nextHydratableInstance = init), reconcileChildren(
              current,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), markRef(current, workInProgress2), null === current && (workInProgress2.flags |= 4194304), workInProgress2.child;
          case 5:
            if (null === current && isHydrating) {
              if (init = lazyComponent = nextHydratableInstance)
                lazyComponent = canHydrateInstance(
                  lazyComponent,
                  workInProgress2.type,
                  workInProgress2.pendingProps,
                  rootOrSingletonContext
                ), null !== lazyComponent ? (workInProgress2.stateNode = lazyComponent, hydrationParentFiber = workInProgress2, nextHydratableInstance = getNextHydratable(
                  lazyComponent.firstChild
                ), rootOrSingletonContext = false, init = true) : init = false;
              init || throwOnHydrationMismatch(workInProgress2);
            }
            pushHostContext(workInProgress2);
            init = workInProgress2.type;
            prevState = workInProgress2.pendingProps;
            nextState = null !== current ? current.memoizedProps : null;
            lazyComponent = prevState.children;
            shouldSetTextContent(init, prevState) ? lazyComponent = null : null !== nextState && shouldSetTextContent(init, nextState) && (workInProgress2.flags |= 32);
            null !== workInProgress2.memoizedState && (init = renderWithHooks(
              current,
              workInProgress2,
              TransitionAwareHostComponent,
              null,
              null,
              renderLanes2
            ), HostTransitionContext._currentValue = init);
            markRef(current, workInProgress2);
            reconcileChildren(current, workInProgress2, lazyComponent, renderLanes2);
            return workInProgress2.child;
          case 6:
            if (null === current && isHydrating) {
              if (current = renderLanes2 = nextHydratableInstance)
                renderLanes2 = canHydrateTextInstance(
                  renderLanes2,
                  workInProgress2.pendingProps,
                  rootOrSingletonContext
                ), null !== renderLanes2 ? (workInProgress2.stateNode = renderLanes2, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, current = true) : current = false;
              current || throwOnHydrationMismatch(workInProgress2);
            }
            return null;
          case 13:
            return updateSuspenseComponent(current, workInProgress2, renderLanes2);
          case 4:
            return pushHostContainer(
              workInProgress2,
              workInProgress2.stateNode.containerInfo
            ), lazyComponent = workInProgress2.pendingProps, null === current ? workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              null,
              lazyComponent,
              renderLanes2
            ) : reconcileChildren(
              current,
              workInProgress2,
              lazyComponent,
              renderLanes2
            ), workInProgress2.child;
          case 11:
            return updateForwardRef(
              current,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 7:
            return reconcileChildren(
              current,
              workInProgress2,
              workInProgress2.pendingProps,
              renderLanes2
            ), workInProgress2.child;
          case 8:
            return reconcileChildren(
              current,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), workInProgress2.child;
          case 12:
            return reconcileChildren(
              current,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), workInProgress2.child;
          case 10:
            return lazyComponent = workInProgress2.pendingProps, pushProvider(workInProgress2, workInProgress2.type, lazyComponent.value), reconcileChildren(
              current,
              workInProgress2,
              lazyComponent.children,
              renderLanes2
            ), workInProgress2.child;
          case 9:
            return init = workInProgress2.type._context, lazyComponent = workInProgress2.pendingProps.children, prepareToReadContext(workInProgress2), init = readContext(init), lazyComponent = lazyComponent(init), workInProgress2.flags |= 1, reconcileChildren(current, workInProgress2, lazyComponent, renderLanes2), workInProgress2.child;
          case 14:
            return updateMemoComponent(
              current,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 15:
            return updateSimpleMemoComponent(
              current,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 19:
            return updateSuspenseListComponent(current, workInProgress2, renderLanes2);
          case 31:
            return lazyComponent = workInProgress2.pendingProps, renderLanes2 = workInProgress2.mode, lazyComponent = {
              mode: lazyComponent.mode,
              children: lazyComponent.children
            }, null === current ? (renderLanes2 = mountWorkInProgressOffscreenFiber(
              lazyComponent,
              renderLanes2
            ), renderLanes2.ref = workInProgress2.ref, workInProgress2.child = renderLanes2, renderLanes2.return = workInProgress2, workInProgress2 = renderLanes2) : (renderLanes2 = createWorkInProgress(current.child, lazyComponent), renderLanes2.ref = workInProgress2.ref, workInProgress2.child = renderLanes2, renderLanes2.return = workInProgress2, workInProgress2 = renderLanes2), workInProgress2;
          case 22:
            return updateOffscreenComponent(current, workInProgress2, renderLanes2);
          case 24:
            return prepareToReadContext(workInProgress2), lazyComponent = readContext(CacheContext), null === current ? (init = peekCacheFromPool(), null === init && (init = workInProgressRoot, prevState = createCache(), init.pooledCache = prevState, prevState.refCount++, null !== prevState && (init.pooledCacheLanes |= renderLanes2), init = prevState), workInProgress2.memoizedState = {
              parent: lazyComponent,
              cache: init
            }, initializeUpdateQueue(workInProgress2), pushProvider(workInProgress2, CacheContext, init)) : (0 !== (current.lanes & renderLanes2) && (cloneUpdateQueue(current, workInProgress2), processUpdateQueue(workInProgress2, null, null, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction()), init = current.memoizedState, prevState = workInProgress2.memoizedState, init.parent !== lazyComponent ? (init = { parent: lazyComponent, cache: lazyComponent }, workInProgress2.memoizedState = init, 0 === workInProgress2.lanes && (workInProgress2.memoizedState = workInProgress2.updateQueue.baseState = init), pushProvider(workInProgress2, CacheContext, lazyComponent)) : (lazyComponent = prevState.cache, pushProvider(workInProgress2, CacheContext, lazyComponent), lazyComponent !== init.cache && propagateContextChanges(
              workInProgress2,
              [CacheContext],
              renderLanes2,
              true
            ))), reconcileChildren(
              current,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), workInProgress2.child;
          case 29:
            throw workInProgress2.pendingProps;
        }
        throw Error(formatProdErrorMessage(156, workInProgress2.tag));
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= 4;
      }
      function preloadResourceAndSuspendIfNeeded(workInProgress2, resource) {
        if ("stylesheet" !== resource.type || 0 !== (resource.state.loading & 4))
          workInProgress2.flags &= -16777217;
        else if (workInProgress2.flags |= 16777216, !preloadResource(resource)) {
          resource = suspenseHandlerStackCursor.current;
          if (null !== resource && ((workInProgressRootRenderLanes & 4194048) === workInProgressRootRenderLanes ? null !== shellBoundary : (workInProgressRootRenderLanes & 62914560) !== workInProgressRootRenderLanes && 0 === (workInProgressRootRenderLanes & 536870912) || resource !== shellBoundary))
            throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
          workInProgress2.flags |= 8192;
        }
      }
      function scheduleRetryEffect(workInProgress2, retryQueue) {
        null !== retryQueue && (workInProgress2.flags |= 4);
        workInProgress2.flags & 16384 && (retryQueue = 22 !== workInProgress2.tag ? claimNextRetryLane() : 536870912, workInProgress2.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (!isHydrating)
          switch (renderState.tailMode) {
            case "hidden":
              hasRenderedATailFallback = renderState.tail;
              for (var lastTailNode = null; null !== hasRenderedATailFallback; )
                null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
              null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
              break;
            case "collapsed":
              lastTailNode = renderState.tail;
              for (var lastTailNode$113 = null; null !== lastTailNode; )
                null !== lastTailNode.alternate && (lastTailNode$113 = lastTailNode), lastTailNode = lastTailNode.sibling;
              null === lastTailNode$113 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$113.sibling = null;
          }
      }
      function bubbleProperties(completedWork) {
        var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
        if (didBailout)
          for (var child$114 = completedWork.child; null !== child$114; )
            newChildLanes |= child$114.lanes | child$114.childLanes, subtreeFlags |= child$114.subtreeFlags & 65011712, subtreeFlags |= child$114.flags & 65011712, child$114.return = completedWork, child$114 = child$114.sibling;
        else
          for (child$114 = completedWork.child; null !== child$114; )
            newChildLanes |= child$114.lanes | child$114.childLanes, subtreeFlags |= child$114.subtreeFlags, subtreeFlags |= child$114.flags, child$114.return = completedWork, child$114 = child$114.sibling;
        completedWork.subtreeFlags |= subtreeFlags;
        completedWork.childLanes = newChildLanes;
        return didBailout;
      }
      function completeWork(current, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case 31:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return bubbleProperties(workInProgress2), null;
          case 1:
            return bubbleProperties(workInProgress2), null;
          case 3:
            renderLanes2 = workInProgress2.stateNode;
            newProps = null;
            null !== current && (newProps = current.memoizedState.cache);
            workInProgress2.memoizedState.cache !== newProps && (workInProgress2.flags |= 2048);
            popProvider(CacheContext);
            popHostContainer();
            renderLanes2.pendingContext && (renderLanes2.context = renderLanes2.pendingContext, renderLanes2.pendingContext = null);
            if (null === current || null === current.child)
              popHydrationState(workInProgress2) ? markUpdate(workInProgress2) : null === current || current.memoizedState.isDehydrated && 0 === (workInProgress2.flags & 256) || (workInProgress2.flags |= 1024, upgradeHydrationErrorsToRecoverable());
            bubbleProperties(workInProgress2);
            return null;
          case 26:
            return renderLanes2 = workInProgress2.memoizedState, null === current ? (markUpdate(workInProgress2), null !== renderLanes2 ? (bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(workInProgress2, renderLanes2)) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217)) : renderLanes2 ? renderLanes2 !== current.memoizedState ? (markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(workInProgress2, renderLanes2)) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217) : (current.memoizedProps !== newProps && markUpdate(workInProgress2), bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217), null;
          case 27:
            popHostContext(workInProgress2);
            renderLanes2 = rootInstanceStackCursor.current;
            var type = workInProgress2.type;
            if (null !== current && null != workInProgress2.stateNode)
              current.memoizedProps !== newProps && markUpdate(workInProgress2);
            else {
              if (!newProps) {
                if (null === workInProgress2.stateNode)
                  throw Error(formatProdErrorMessage(166));
                bubbleProperties(workInProgress2);
                return null;
              }
              current = contextStackCursor.current;
              popHydrationState(workInProgress2) ? prepareToHydrateHostInstance(workInProgress2) : (current = resolveSingletonInstance(type, newProps, renderLanes2), workInProgress2.stateNode = current, markUpdate(workInProgress2));
            }
            bubbleProperties(workInProgress2);
            return null;
          case 5:
            popHostContext(workInProgress2);
            renderLanes2 = workInProgress2.type;
            if (null !== current && null != workInProgress2.stateNode)
              current.memoizedProps !== newProps && markUpdate(workInProgress2);
            else {
              if (!newProps) {
                if (null === workInProgress2.stateNode)
                  throw Error(formatProdErrorMessage(166));
                bubbleProperties(workInProgress2);
                return null;
              }
              current = contextStackCursor.current;
              if (popHydrationState(workInProgress2))
                prepareToHydrateHostInstance(workInProgress2);
              else {
                type = getOwnerDocumentFromRootContainer(
                  rootInstanceStackCursor.current
                );
                switch (current) {
                  case 1:
                    current = type.createElementNS(
                      "http://www.w3.org/2000/svg",
                      renderLanes2
                    );
                    break;
                  case 2:
                    current = type.createElementNS(
                      "http://www.w3.org/1998/Math/MathML",
                      renderLanes2
                    );
                    break;
                  default:
                    switch (renderLanes2) {
                      case "svg":
                        current = type.createElementNS(
                          "http://www.w3.org/2000/svg",
                          renderLanes2
                        );
                        break;
                      case "math":
                        current = type.createElementNS(
                          "http://www.w3.org/1998/Math/MathML",
                          renderLanes2
                        );
                        break;
                      case "script":
                        current = type.createElement("div");
                        current.innerHTML = "<script><\/script>";
                        current = current.removeChild(current.firstChild);
                        break;
                      case "select":
                        current = "string" === typeof newProps.is ? type.createElement("select", { is: newProps.is }) : type.createElement("select");
                        newProps.multiple ? current.multiple = true : newProps.size && (current.size = newProps.size);
                        break;
                      default:
                        current = "string" === typeof newProps.is ? type.createElement(renderLanes2, { is: newProps.is }) : type.createElement(renderLanes2);
                    }
                }
                current[internalInstanceKey] = workInProgress2;
                current[internalPropsKey] = newProps;
                a: for (type = workInProgress2.child; null !== type; ) {
                  if (5 === type.tag || 6 === type.tag)
                    current.appendChild(type.stateNode);
                  else if (4 !== type.tag && 27 !== type.tag && null !== type.child) {
                    type.child.return = type;
                    type = type.child;
                    continue;
                  }
                  if (type === workInProgress2) break a;
                  for (; null === type.sibling; ) {
                    if (null === type.return || type.return === workInProgress2)
                      break a;
                    type = type.return;
                  }
                  type.sibling.return = type.return;
                  type = type.sibling;
                }
                workInProgress2.stateNode = current;
                a: switch (setInitialProperties(current, renderLanes2, newProps), renderLanes2) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    current = !!newProps.autoFocus;
                    break a;
                  case "img":
                    current = true;
                    break a;
                  default:
                    current = false;
                }
                current && markUpdate(workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            workInProgress2.flags &= -16777217;
            return null;
          case 6:
            if (current && null != workInProgress2.stateNode)
              current.memoizedProps !== newProps && markUpdate(workInProgress2);
            else {
              if ("string" !== typeof newProps && null === workInProgress2.stateNode)
                throw Error(formatProdErrorMessage(166));
              current = rootInstanceStackCursor.current;
              if (popHydrationState(workInProgress2)) {
                current = workInProgress2.stateNode;
                renderLanes2 = workInProgress2.memoizedProps;
                newProps = null;
                type = hydrationParentFiber;
                if (null !== type)
                  switch (type.tag) {
                    case 27:
                    case 5:
                      newProps = type.memoizedProps;
                  }
                current[internalInstanceKey] = workInProgress2;
                current = current.nodeValue === renderLanes2 || null !== newProps && true === newProps.suppressHydrationWarning || checkForUnmatchedText(current.nodeValue, renderLanes2) ? true : false;
                current || throwOnHydrationMismatch(workInProgress2);
              } else
                current = getOwnerDocumentFromRootContainer(current).createTextNode(
                  newProps
                ), current[internalInstanceKey] = workInProgress2, workInProgress2.stateNode = current;
            }
            bubbleProperties(workInProgress2);
            return null;
          case 13:
            newProps = workInProgress2.memoizedState;
            if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
              type = popHydrationState(workInProgress2);
              if (null !== newProps && null !== newProps.dehydrated) {
                if (null === current) {
                  if (!type) throw Error(formatProdErrorMessage(318));
                  type = workInProgress2.memoizedState;
                  type = null !== type ? type.dehydrated : null;
                  if (!type) throw Error(formatProdErrorMessage(317));
                  type[internalInstanceKey] = workInProgress2;
                } else
                  resetHydrationState(), 0 === (workInProgress2.flags & 128) && (workInProgress2.memoizedState = null), workInProgress2.flags |= 4;
                bubbleProperties(workInProgress2);
                type = false;
              } else
                type = upgradeHydrationErrorsToRecoverable(), null !== current && null !== current.memoizedState && (current.memoizedState.hydrationErrors = type), type = true;
              if (!type) {
                if (workInProgress2.flags & 256)
                  return popSuspenseHandler(workInProgress2), workInProgress2;
                popSuspenseHandler(workInProgress2);
                return null;
              }
            }
            popSuspenseHandler(workInProgress2);
            if (0 !== (workInProgress2.flags & 128))
              return workInProgress2.lanes = renderLanes2, workInProgress2;
            renderLanes2 = null !== newProps;
            current = null !== current && null !== current.memoizedState;
            if (renderLanes2) {
              newProps = workInProgress2.child;
              type = null;
              null !== newProps.alternate && null !== newProps.alternate.memoizedState && null !== newProps.alternate.memoizedState.cachePool && (type = newProps.alternate.memoizedState.cachePool.pool);
              var cache$127 = null;
              null !== newProps.memoizedState && null !== newProps.memoizedState.cachePool && (cache$127 = newProps.memoizedState.cachePool.pool);
              cache$127 !== type && (newProps.flags |= 2048);
            }
            renderLanes2 !== current && renderLanes2 && (workInProgress2.child.flags |= 8192);
            scheduleRetryEffect(workInProgress2, workInProgress2.updateQueue);
            bubbleProperties(workInProgress2);
            return null;
          case 4:
            return popHostContainer(), null === current && listenToAllSupportedEvents(workInProgress2.stateNode.containerInfo), bubbleProperties(workInProgress2), null;
          case 10:
            return popProvider(workInProgress2.type), bubbleProperties(workInProgress2), null;
          case 19:
            pop(suspenseStackCursor);
            type = workInProgress2.memoizedState;
            if (null === type) return bubbleProperties(workInProgress2), null;
            newProps = 0 !== (workInProgress2.flags & 128);
            cache$127 = type.rendering;
            if (null === cache$127)
              if (newProps) cutOffTailIfNeeded(type, false);
              else {
                if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128))
                  for (current = workInProgress2.child; null !== current; ) {
                    cache$127 = findFirstSuspended(current);
                    if (null !== cache$127) {
                      workInProgress2.flags |= 128;
                      cutOffTailIfNeeded(type, false);
                      current = cache$127.updateQueue;
                      workInProgress2.updateQueue = current;
                      scheduleRetryEffect(workInProgress2, current);
                      workInProgress2.subtreeFlags = 0;
                      current = renderLanes2;
                      for (renderLanes2 = workInProgress2.child; null !== renderLanes2; )
                        resetWorkInProgress(renderLanes2, current), renderLanes2 = renderLanes2.sibling;
                      push(
                        suspenseStackCursor,
                        suspenseStackCursor.current & 1 | 2
                      );
                      return workInProgress2.child;
                    }
                    current = current.sibling;
                  }
                null !== type.tail && now2() > workInProgressRootRenderTargetTime && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress2.lanes = 4194304);
              }
            else {
              if (!newProps)
                if (current = findFirstSuspended(cache$127), null !== current) {
                  if (workInProgress2.flags |= 128, newProps = true, current = current.updateQueue, workInProgress2.updateQueue = current, scheduleRetryEffect(workInProgress2, current), cutOffTailIfNeeded(type, true), null === type.tail && "hidden" === type.tailMode && !cache$127.alternate && !isHydrating)
                    return bubbleProperties(workInProgress2), null;
                } else
                  2 * now2() - type.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes2 && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress2.lanes = 4194304);
              type.isBackwards ? (cache$127.sibling = workInProgress2.child, workInProgress2.child = cache$127) : (current = type.last, null !== current ? current.sibling = cache$127 : workInProgress2.child = cache$127, type.last = cache$127);
            }
            if (null !== type.tail)
              return workInProgress2 = type.tail, type.rendering = workInProgress2, type.tail = workInProgress2.sibling, type.renderingStartTime = now2(), workInProgress2.sibling = null, current = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress2;
            bubbleProperties(workInProgress2);
            return null;
          case 22:
          case 23:
            return popSuspenseHandler(workInProgress2), popHiddenContext(), newProps = null !== workInProgress2.memoizedState, null !== current ? null !== current.memoizedState !== newProps && (workInProgress2.flags |= 8192) : newProps && (workInProgress2.flags |= 8192), newProps ? 0 !== (renderLanes2 & 536870912) && 0 === (workInProgress2.flags & 128) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & 6 && (workInProgress2.flags |= 8192)) : bubbleProperties(workInProgress2), renderLanes2 = workInProgress2.updateQueue, null !== renderLanes2 && scheduleRetryEffect(workInProgress2, renderLanes2.retryQueue), renderLanes2 = null, null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (renderLanes2 = current.memoizedState.cachePool.pool), newProps = null, null !== workInProgress2.memoizedState && null !== workInProgress2.memoizedState.cachePool && (newProps = workInProgress2.memoizedState.cachePool.pool), newProps !== renderLanes2 && (workInProgress2.flags |= 2048), null !== current && pop(resumedCache), null;
          case 24:
            return renderLanes2 = null, null !== current && (renderLanes2 = current.memoizedState.cache), workInProgress2.memoizedState.cache !== renderLanes2 && (workInProgress2.flags |= 2048), popProvider(CacheContext), bubbleProperties(workInProgress2), null;
          case 25:
            return null;
          case 30:
            return null;
        }
        throw Error(formatProdErrorMessage(156, workInProgress2.tag));
      }
      function unwindWork(current, workInProgress2) {
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case 1:
            return current = workInProgress2.flags, current & 65536 ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
          case 3:
            return popProvider(CacheContext), popHostContainer(), current = workInProgress2.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
          case 26:
          case 27:
          case 5:
            return popHostContext(workInProgress2), null;
          case 13:
            popSuspenseHandler(workInProgress2);
            current = workInProgress2.memoizedState;
            if (null !== current && null !== current.dehydrated) {
              if (null === workInProgress2.alternate)
                throw Error(formatProdErrorMessage(340));
              resetHydrationState();
            }
            current = workInProgress2.flags;
            return current & 65536 ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
          case 19:
            return pop(suspenseStackCursor), null;
          case 4:
            return popHostContainer(), null;
          case 10:
            return popProvider(workInProgress2.type), null;
          case 22:
          case 23:
            return popSuspenseHandler(workInProgress2), popHiddenContext(), null !== current && pop(resumedCache), current = workInProgress2.flags, current & 65536 ? (workInProgress2.flags = current & -65537 | 128, workInProgress2) : null;
          case 24:
            return popProvider(CacheContext), null;
          case 25:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current, interruptedWork) {
        popTreeContext(interruptedWork);
        switch (interruptedWork.tag) {
          case 3:
            popProvider(CacheContext);
            popHostContainer();
            break;
          case 26:
          case 27:
          case 5:
            popHostContext(interruptedWork);
            break;
          case 4:
            popHostContainer();
            break;
          case 13:
            popSuspenseHandler(interruptedWork);
            break;
          case 19:
            pop(suspenseStackCursor);
            break;
          case 10:
            popProvider(interruptedWork.type);
            break;
          case 22:
          case 23:
            popSuspenseHandler(interruptedWork);
            popHiddenContext();
            null !== current && pop(resumedCache);
            break;
          case 24:
            popProvider(CacheContext);
        }
      }
      function commitHookEffectListMount(flags, finishedWork) {
        try {
          var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
          if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
              if ((updateQueue.tag & flags) === flags) {
                lastEffect = void 0;
                var create2 = updateQueue.create, inst = updateQueue.inst;
                lastEffect = create2();
                inst.destroy = lastEffect;
              }
              updateQueue = updateQueue.next;
            } while (updateQueue !== firstEffect);
          }
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor$jscomp$0) {
        try {
          var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
          if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
              if ((updateQueue.tag & flags) === flags) {
                var inst = updateQueue.inst, destroy = inst.destroy;
                if (void 0 !== destroy) {
                  inst.destroy = void 0;
                  lastEffect = finishedWork;
                  var nearestMountedAncestor = nearestMountedAncestor$jscomp$0, destroy_ = destroy;
                  try {
                    destroy_();
                  } catch (error) {
                    captureCommitPhaseError(
                      lastEffect,
                      nearestMountedAncestor,
                      error
                    );
                  }
                }
              }
              updateQueue = updateQueue.next;
            } while (updateQueue !== firstEffect);
          }
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function commitClassCallbacks(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        if (null !== updateQueue) {
          var instance = finishedWork.stateNode;
          try {
            commitCallbacks(updateQueue, instance);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      }
      function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
        instance.props = resolveClassComponentProps(
          current.type,
          current.memoizedProps
        );
        instance.state = current.memoizedState;
        try {
          instance.componentWillUnmount();
        } catch (error) {
          captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
      }
      function safelyAttachRef(current, nearestMountedAncestor) {
        try {
          var ref = current.ref;
          if (null !== ref) {
            switch (current.tag) {
              case 26:
              case 27:
              case 5:
                var instanceToUse = current.stateNode;
                break;
              case 30:
                instanceToUse = current.stateNode;
                break;
              default:
                instanceToUse = current.stateNode;
            }
            "function" === typeof ref ? current.refCleanup = ref(instanceToUse) : ref.current = instanceToUse;
          }
        } catch (error) {
          captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
      }
      function safelyDetachRef(current, nearestMountedAncestor) {
        var ref = current.ref, refCleanup = current.refCleanup;
        if (null !== ref)
          if ("function" === typeof refCleanup)
            try {
              refCleanup();
            } catch (error) {
              captureCommitPhaseError(current, nearestMountedAncestor, error);
            } finally {
              current.refCleanup = null, current = current.alternate, null != current && (current.refCleanup = null);
            }
          else if ("function" === typeof ref)
            try {
              ref(null);
            } catch (error$143) {
              captureCommitPhaseError(current, nearestMountedAncestor, error$143);
            }
          else ref.current = null;
      }
      function commitHostMount(finishedWork) {
        var type = finishedWork.type, props = finishedWork.memoizedProps, instance = finishedWork.stateNode;
        try {
          a: switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              props.autoFocus && instance.focus();
              break a;
            case "img":
              props.src ? instance.src = props.src : props.srcSet && (instance.srcset = props.srcSet);
          }
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function commitHostUpdate(finishedWork, newProps, oldProps) {
        try {
          var domElement = finishedWork.stateNode;
          updateProperties(domElement, finishedWork.type, oldProps, newProps);
          domElement[internalPropsKey] = newProps;
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function isHostParent(fiber) {
        return 5 === fiber.tag || 3 === fiber.tag || 26 === fiber.tag || 27 === fiber.tag && isSingletonScope(fiber.type) || 4 === fiber.tag;
      }
      function getHostSibling(fiber) {
        a: for (; ; ) {
          for (; null === fiber.sibling; ) {
            if (null === fiber.return || isHostParent(fiber.return)) return null;
            fiber = fiber.return;
          }
          fiber.sibling.return = fiber.return;
          for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag; ) {
            if (27 === fiber.tag && isSingletonScope(fiber.type)) continue a;
            if (fiber.flags & 2) continue a;
            if (null === fiber.child || 4 === fiber.tag) continue a;
            else fiber.child.return = fiber, fiber = fiber.child;
          }
          if (!(fiber.flags & 2)) return fiber.stateNode;
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        if (5 === tag || 6 === tag)
          node = node.stateNode, before ? (9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent).insertBefore(node, before) : (before = 9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent, before.appendChild(node), parent = parent._reactRootContainer, null !== parent && void 0 !== parent || null !== before.onclick || (before.onclick = noop$12));
        else if (4 !== tag && (27 === tag && isSingletonScope(node.type) && (parent = node.stateNode, before = null), node = node.child, null !== node))
          for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node; )
            insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        if (5 === tag || 6 === tag)
          node = node.stateNode, before ? parent.insertBefore(node, before) : parent.appendChild(node);
        else if (4 !== tag && (27 === tag && isSingletonScope(node.type) && (parent = node.stateNode), node = node.child, null !== node))
          for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node; )
            insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
      }
      function commitHostSingletonAcquisition(finishedWork) {
        var singleton = finishedWork.stateNode, props = finishedWork.memoizedProps;
        try {
          for (var type = finishedWork.type, attributes = singleton.attributes; attributes.length; )
            singleton.removeAttributeNode(attributes[0]);
          setInitialProperties(singleton, type, props);
          singleton[internalInstanceKey] = finishedWork;
          singleton[internalPropsKey] = props;
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      var offscreenSubtreeIsHidden = false, offscreenSubtreeWasHidden = false, needsFormReset = false, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null;
      function commitBeforeMutationEffects(root2, firstChild) {
        root2 = root2.containerInfo;
        eventsEnabled = _enabled;
        root2 = getActiveElementDeep(root2);
        if (hasSelectionCapabilities(root2)) {
          if ("selectionStart" in root2)
            var JSCompiler_temp = {
              start: root2.selectionStart,
              end: root2.selectionEnd
            };
          else
            a: {
              JSCompiler_temp = (JSCompiler_temp = root2.ownerDocument) && JSCompiler_temp.defaultView || window;
              var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
              if (selection && 0 !== selection.rangeCount) {
                JSCompiler_temp = selection.anchorNode;
                var anchorOffset = selection.anchorOffset, focusNode = selection.focusNode;
                selection = selection.focusOffset;
                try {
                  JSCompiler_temp.nodeType, focusNode.nodeType;
                } catch (e$20) {
                  JSCompiler_temp = null;
                  break a;
                }
                var length = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = root2, parentNode = null;
                b: for (; ; ) {
                  for (var next; ; ) {
                    node !== JSCompiler_temp || 0 !== anchorOffset && 3 !== node.nodeType || (start = length + anchorOffset);
                    node !== focusNode || 0 !== selection && 3 !== node.nodeType || (end = length + selection);
                    3 === node.nodeType && (length += node.nodeValue.length);
                    if (null === (next = node.firstChild)) break;
                    parentNode = node;
                    node = next;
                  }
                  for (; ; ) {
                    if (node === root2) break b;
                    parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length);
                    parentNode === focusNode && ++indexWithinFocus === selection && (end = length);
                    if (null !== (next = node.nextSibling)) break;
                    node = parentNode;
                    parentNode = node.parentNode;
                  }
                  node = next;
                }
                JSCompiler_temp = -1 === start || -1 === end ? null : { start, end };
              } else JSCompiler_temp = null;
            }
          JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
        } else JSCompiler_temp = null;
        selectionInformation = { focusedElem: root2, selectionRange: JSCompiler_temp };
        _enabled = false;
        for (nextEffect = firstChild; null !== nextEffect; )
          if (firstChild = nextEffect, root2 = firstChild.child, 0 !== (firstChild.subtreeFlags & 1024) && null !== root2)
            root2.return = firstChild, nextEffect = root2;
          else
            for (; null !== nextEffect; ) {
              firstChild = nextEffect;
              focusNode = firstChild.alternate;
              root2 = firstChild.flags;
              switch (firstChild.tag) {
                case 0:
                  break;
                case 11:
                case 15:
                  break;
                case 1:
                  if (0 !== (root2 & 1024) && null !== focusNode) {
                    root2 = void 0;
                    JSCompiler_temp = firstChild;
                    anchorOffset = focusNode.memoizedProps;
                    focusNode = focusNode.memoizedState;
                    selection = JSCompiler_temp.stateNode;
                    try {
                      var resolvedPrevProps = resolveClassComponentProps(
                        JSCompiler_temp.type,
                        anchorOffset,
                        JSCompiler_temp.elementType === JSCompiler_temp.type
                      );
                      root2 = selection.getSnapshotBeforeUpdate(
                        resolvedPrevProps,
                        focusNode
                      );
                      selection.__reactInternalSnapshotBeforeUpdate = root2;
                    } catch (error) {
                      captureCommitPhaseError(
                        JSCompiler_temp,
                        JSCompiler_temp.return,
                        error
                      );
                    }
                  }
                  break;
                case 3:
                  if (0 !== (root2 & 1024)) {
                    if (root2 = firstChild.stateNode.containerInfo, JSCompiler_temp = root2.nodeType, 9 === JSCompiler_temp)
                      clearContainerSparingly(root2);
                    else if (1 === JSCompiler_temp)
                      switch (root2.nodeName) {
                        case "HEAD":
                        case "HTML":
                        case "BODY":
                          clearContainerSparingly(root2);
                          break;
                        default:
                          root2.textContent = "";
                      }
                  }
                  break;
                case 5:
                case 26:
                case 27:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  if (0 !== (root2 & 1024)) throw Error(formatProdErrorMessage(163));
              }
              root2 = firstChild.sibling;
              if (null !== root2) {
                root2.return = firstChild.return;
                nextEffect = root2;
                break;
              }
              nextEffect = firstChild.return;
            }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 4 && commitHookEffectListMount(5, finishedWork);
            break;
          case 1:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 4)
              if (finishedRoot = finishedWork.stateNode, null === current)
                try {
                  finishedRoot.componentDidMount();
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              else {
                var prevProps = resolveClassComponentProps(
                  finishedWork.type,
                  current.memoizedProps
                );
                current = current.memoizedState;
                try {
                  finishedRoot.componentDidUpdate(
                    prevProps,
                    current,
                    finishedRoot.__reactInternalSnapshotBeforeUpdate
                  );
                } catch (error$142) {
                  captureCommitPhaseError(
                    finishedWork,
                    finishedWork.return,
                    error$142
                  );
                }
              }
            flags & 64 && commitClassCallbacks(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 3:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 64 && (finishedRoot = finishedWork.updateQueue, null !== finishedRoot)) {
              current = null;
              if (null !== finishedWork.child)
                switch (finishedWork.child.tag) {
                  case 27:
                  case 5:
                    current = finishedWork.child.stateNode;
                    break;
                  case 1:
                    current = finishedWork.child.stateNode;
                }
              try {
                commitCallbacks(finishedRoot, current);
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
            break;
          case 27:
            null === current && flags & 4 && commitHostSingletonAcquisition(finishedWork);
          case 26:
          case 5:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            null === current && flags & 4 && commitHostMount(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 12:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            break;
          case 13:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            flags & 64 && (finishedRoot = finishedWork.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot && (finishedWork = retryDehydratedSuspenseBoundary.bind(
              null,
              finishedWork
            ), registerSuspenseInstanceRetry(finishedRoot, finishedWork))));
            break;
          case 22:
            flags = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
            if (!flags) {
              current = null !== current && null !== current.memoizedState || offscreenSubtreeWasHidden;
              prevProps = offscreenSubtreeIsHidden;
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = flags;
              (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                0 !== (finishedWork.subtreeFlags & 8772)
              ) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              offscreenSubtreeIsHidden = prevProps;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            }
            break;
          case 30:
            break;
          default:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        }
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null;
        5 === fiber.tag && (alternate = fiber.stateNode, null !== alternate && detachDeletedInstance(alternate));
        fiber.stateNode = null;
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null;
        fiber.updateQueue = null;
      }
      var hostParent = null, hostParentIsContainer = false;
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        for (parent = parent.child; null !== parent; )
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
          try {
            injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
          } catch (err) {
          }
        switch (deletedFiber.tag) {
          case 26:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            deletedFiber.memoizedState ? deletedFiber.memoizedState.count-- : deletedFiber.stateNode && (deletedFiber = deletedFiber.stateNode, deletedFiber.parentNode.removeChild(deletedFiber));
            break;
          case 27:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
            isSingletonScope(deletedFiber.type) && (hostParent = deletedFiber.stateNode, hostParentIsContainer = false);
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            releaseSingletonInstance(deletedFiber.stateNode);
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            break;
          case 5:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
          case 6:
            prevHostParent = hostParent;
            prevHostParentIsContainer = hostParentIsContainer;
            hostParent = null;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            if (null !== hostParent)
              if (hostParentIsContainer)
                try {
                  (9 === hostParent.nodeType ? hostParent.body : "HTML" === hostParent.nodeName ? hostParent.ownerDocument.body : hostParent).removeChild(deletedFiber.stateNode);
                } catch (error) {
                  captureCommitPhaseError(
                    deletedFiber,
                    nearestMountedAncestor,
                    error
                  );
                }
              else
                try {
                  hostParent.removeChild(deletedFiber.stateNode);
                } catch (error) {
                  captureCommitPhaseError(
                    deletedFiber,
                    nearestMountedAncestor,
                    error
                  );
                }
            break;
          case 18:
            null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, clearSuspenseBoundary(
              9 === finishedRoot.nodeType ? finishedRoot.body : "HTML" === finishedRoot.nodeName ? finishedRoot.ownerDocument.body : finishedRoot,
              deletedFiber.stateNode
            ), retryIfBlockedOn(finishedRoot)) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
            break;
          case 4:
            prevHostParent = hostParent;
            prevHostParentIsContainer = hostParentIsContainer;
            hostParent = deletedFiber.stateNode.containerInfo;
            hostParentIsContainer = true;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            break;
          case 1:
            offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, "function" === typeof prevHostParent.componentWillUnmount && safelyCallComponentWillUnmount(
              deletedFiber,
              nearestMountedAncestor,
              prevHostParent
            ));
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            break;
          case 21:
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            break;
          case 22:
            offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            offscreenSubtreeWasHidden = prevHostParent;
            break;
          default:
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
        }
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        if (null === finishedWork.memoizedState && (finishedRoot = finishedWork.alternate, null !== finishedRoot && (finishedRoot = finishedRoot.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot))))
          try {
            retryIfBlockedOn(finishedRoot);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
      }
      function getRetryCache(finishedWork) {
        switch (finishedWork.tag) {
          case 13:
          case 19:
            var retryCache = finishedWork.stateNode;
            null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
            return retryCache;
          case 22:
            return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
          default:
            throw Error(formatProdErrorMessage(435, finishedWork.tag));
        }
      }
      function attachSuspenseRetryListeners(finishedWork, wakeables) {
        var retryCache = getRetryCache(finishedWork);
        wakeables.forEach(function(wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
        });
      }
      function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
        var deletions = parentFiber.deletions;
        if (null !== deletions)
          for (var i2 = 0; i2 < deletions.length; i2++) {
            var childToDelete = deletions[i2], root2 = root$jscomp$0, returnFiber = parentFiber, parent = returnFiber;
            a: for (; null !== parent; ) {
              switch (parent.tag) {
                case 27:
                  if (isSingletonScope(parent.type)) {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break a;
                  }
                  break;
                case 5:
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break a;
                case 3:
                case 4:
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break a;
              }
              parent = parent.return;
            }
            if (null === hostParent) throw Error(formatProdErrorMessage(160));
            commitDeletionEffectsOnFiber(root2, returnFiber, childToDelete);
            hostParent = null;
            hostParentIsContainer = false;
            root2 = childToDelete.alternate;
            null !== root2 && (root2.return = null);
            childToDelete.return = null;
          }
        if (parentFiber.subtreeFlags & 13878)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
      }
      var currentHoistableRoot = null;
      function commitMutationEffectsOnFiber(finishedWork, root2) {
        var current = finishedWork.alternate, flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork), commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
            break;
          case 1:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags && (current = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = null === current ? flags : current.concat(flags))));
            break;
          case 26:
            var hoistableRoot = currentHoistableRoot;
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            if (flags & 4) {
              var currentResource = null !== current ? current.memoizedState : null;
              flags = finishedWork.memoizedState;
              if (null === current)
                if (null === flags)
                  if (null === finishedWork.stateNode) {
                    a: {
                      flags = finishedWork.type;
                      current = finishedWork.memoizedProps;
                      hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
                      b: switch (flags) {
                        case "title":
                          currentResource = hoistableRoot.getElementsByTagName("title")[0];
                          if (!currentResource || currentResource[internalHoistableMarker] || currentResource[internalInstanceKey] || "http://www.w3.org/2000/svg" === currentResource.namespaceURI || currentResource.hasAttribute("itemprop"))
                            currentResource = hoistableRoot.createElement(flags), hoistableRoot.head.insertBefore(
                              currentResource,
                              hoistableRoot.querySelector("head > title")
                            );
                          setInitialProperties(currentResource, flags, current);
                          currentResource[internalInstanceKey] = finishedWork;
                          markNodeAsHoistable(currentResource);
                          flags = currentResource;
                          break a;
                        case "link":
                          var maybeNodes = getHydratableHoistableCache(
                            "link",
                            "href",
                            hoistableRoot
                          ).get(flags + (current.href || ""));
                          if (maybeNodes) {
                            for (var i2 = 0; i2 < maybeNodes.length; i2++)
                              if (currentResource = maybeNodes[i2], currentResource.getAttribute("href") === (null == current.href || "" === current.href ? null : current.href) && currentResource.getAttribute("rel") === (null == current.rel ? null : current.rel) && currentResource.getAttribute("title") === (null == current.title ? null : current.title) && currentResource.getAttribute("crossorigin") === (null == current.crossOrigin ? null : current.crossOrigin)) {
                                maybeNodes.splice(i2, 1);
                                break b;
                              }
                          }
                          currentResource = hoistableRoot.createElement(flags);
                          setInitialProperties(currentResource, flags, current);
                          hoistableRoot.head.appendChild(currentResource);
                          break;
                        case "meta":
                          if (maybeNodes = getHydratableHoistableCache(
                            "meta",
                            "content",
                            hoistableRoot
                          ).get(flags + (current.content || ""))) {
                            for (i2 = 0; i2 < maybeNodes.length; i2++)
                              if (currentResource = maybeNodes[i2], currentResource.getAttribute("content") === (null == current.content ? null : "" + current.content) && currentResource.getAttribute("name") === (null == current.name ? null : current.name) && currentResource.getAttribute("property") === (null == current.property ? null : current.property) && currentResource.getAttribute("http-equiv") === (null == current.httpEquiv ? null : current.httpEquiv) && currentResource.getAttribute("charset") === (null == current.charSet ? null : current.charSet)) {
                                maybeNodes.splice(i2, 1);
                                break b;
                              }
                          }
                          currentResource = hoistableRoot.createElement(flags);
                          setInitialProperties(currentResource, flags, current);
                          hoistableRoot.head.appendChild(currentResource);
                          break;
                        default:
                          throw Error(formatProdErrorMessage(468, flags));
                      }
                      currentResource[internalInstanceKey] = finishedWork;
                      markNodeAsHoistable(currentResource);
                      flags = currentResource;
                    }
                    finishedWork.stateNode = flags;
                  } else
                    mountHoistable(
                      hoistableRoot,
                      finishedWork.type,
                      finishedWork.stateNode
                    );
                else
                  finishedWork.stateNode = acquireResource(
                    hoistableRoot,
                    flags,
                    finishedWork.memoizedProps
                  );
              else
                currentResource !== flags ? (null === currentResource ? null !== current.stateNode && (current = current.stateNode, current.parentNode.removeChild(current)) : currentResource.count--, null === flags ? mountHoistable(
                  hoistableRoot,
                  finishedWork.type,
                  finishedWork.stateNode
                ) : acquireResource(
                  hoistableRoot,
                  flags,
                  finishedWork.memoizedProps
                )) : null === flags && null !== finishedWork.stateNode && commitHostUpdate(
                  finishedWork,
                  finishedWork.memoizedProps,
                  current.memoizedProps
                );
            }
            break;
          case 27:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            null !== current && flags & 4 && commitHostUpdate(
              finishedWork,
              finishedWork.memoizedProps,
              current.memoizedProps
            );
            break;
          case 5:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
            if (finishedWork.flags & 32) {
              hoistableRoot = finishedWork.stateNode;
              try {
                setTextContent(hoistableRoot, "");
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
            flags & 4 && null != finishedWork.stateNode && (hoistableRoot = finishedWork.memoizedProps, commitHostUpdate(
              finishedWork,
              hoistableRoot,
              null !== current ? current.memoizedProps : hoistableRoot
            ));
            flags & 1024 && (needsFormReset = true);
            break;
          case 6:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & 4) {
              if (null === finishedWork.stateNode)
                throw Error(formatProdErrorMessage(162));
              flags = finishedWork.memoizedProps;
              current = finishedWork.stateNode;
              try {
                current.nodeValue = flags;
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
            break;
          case 3:
            tagCaches = null;
            hoistableRoot = currentHoistableRoot;
            currentHoistableRoot = getHoistableRoot(root2.containerInfo);
            recursivelyTraverseMutationEffects(root2, finishedWork);
            currentHoistableRoot = hoistableRoot;
            commitReconciliationEffects(finishedWork);
            if (flags & 4 && null !== current && current.memoizedState.isDehydrated)
              try {
                retryIfBlockedOn(root2.containerInfo);
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            needsFormReset && (needsFormReset = false, recursivelyResetForms(finishedWork));
            break;
          case 4:
            flags = currentHoistableRoot;
            currentHoistableRoot = getHoistableRoot(
              finishedWork.stateNode.containerInfo
            );
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            currentHoistableRoot = flags;
            break;
          case 12:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
          case 13:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            finishedWork.child.flags & 8192 && null !== finishedWork.memoizedState !== (null !== current && null !== current.memoizedState) && (globalMostRecentFallbackTime = now2());
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
          case 22:
            hoistableRoot = null !== finishedWork.memoizedState;
            var wasHidden = null !== current && null !== current.memoizedState, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || hoistableRoot;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
            recursivelyTraverseMutationEffects(root2, finishedWork);
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            commitReconciliationEffects(finishedWork);
            if (flags & 8192)
              a: for (root2 = finishedWork.stateNode, root2._visibility = hoistableRoot ? root2._visibility & -2 : root2._visibility | 1, hoistableRoot && (null === current || wasHidden || offscreenSubtreeIsHidden || offscreenSubtreeWasHidden || recursivelyTraverseDisappearLayoutEffects(finishedWork)), current = null, root2 = finishedWork; ; ) {
                if (5 === root2.tag || 26 === root2.tag) {
                  if (null === current) {
                    wasHidden = current = root2;
                    try {
                      if (currentResource = wasHidden.stateNode, hoistableRoot)
                        maybeNodes = currentResource.style, "function" === typeof maybeNodes.setProperty ? maybeNodes.setProperty("display", "none", "important") : maybeNodes.display = "none";
                      else {
                        i2 = wasHidden.stateNode;
                        var styleProp = wasHidden.memoizedProps.style, display = void 0 !== styleProp && null !== styleProp && styleProp.hasOwnProperty("display") ? styleProp.display : null;
                        i2.style.display = null == display || "boolean" === typeof display ? "" : ("" + display).trim();
                      }
                    } catch (error) {
                      captureCommitPhaseError(wasHidden, wasHidden.return, error);
                    }
                  }
                } else if (6 === root2.tag) {
                  if (null === current) {
                    wasHidden = root2;
                    try {
                      wasHidden.stateNode.nodeValue = hoistableRoot ? "" : wasHidden.memoizedProps;
                    } catch (error) {
                      captureCommitPhaseError(wasHidden, wasHidden.return, error);
                    }
                  }
                } else if ((22 !== root2.tag && 23 !== root2.tag || null === root2.memoizedState || root2 === finishedWork) && null !== root2.child) {
                  root2.child.return = root2;
                  root2 = root2.child;
                  continue;
                }
                if (root2 === finishedWork) break a;
                for (; null === root2.sibling; ) {
                  if (null === root2.return || root2.return === finishedWork) break a;
                  current === root2 && (current = null);
                  root2 = root2.return;
                }
                current === root2 && (current = null);
                root2.sibling.return = root2.return;
                root2 = root2.sibling;
              }
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current = flags.retryQueue, null !== current && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current))));
            break;
          case 19:
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
          case 30:
            break;
          case 21:
            break;
          default:
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & 2) {
          try {
            for (var hostParentFiber, parentFiber = finishedWork.return; null !== parentFiber; ) {
              if (isHostParent(parentFiber)) {
                hostParentFiber = parentFiber;
                break;
              }
              parentFiber = parentFiber.return;
            }
            if (null == hostParentFiber) throw Error(formatProdErrorMessage(160));
            switch (hostParentFiber.tag) {
              case 27:
                var parent = hostParentFiber.stateNode, before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              case 5:
                var parent$144 = hostParentFiber.stateNode;
                hostParentFiber.flags & 32 && (setTextContent(parent$144, ""), hostParentFiber.flags &= -33);
                var before$145 = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before$145, parent$144);
                break;
              case 3:
              case 4:
                var parent$146 = hostParentFiber.stateNode.containerInfo, before$147 = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(
                  finishedWork,
                  before$147,
                  parent$146
                );
                break;
              default:
                throw Error(formatProdErrorMessage(161));
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
          finishedWork.flags &= -3;
        }
        flags & 4096 && (finishedWork.flags &= -4097);
      }
      function recursivelyResetForms(parentFiber) {
        if (parentFiber.subtreeFlags & 1024)
          for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var fiber = parentFiber;
            recursivelyResetForms(fiber);
            5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
            parentFiber = parentFiber.sibling;
          }
      }
      function recursivelyTraverseLayoutEffects(root2, parentFiber) {
        if (parentFiber.subtreeFlags & 8772)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            commitLayoutEffectOnFiber(root2, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
      }
      function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          var finishedWork = parentFiber;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 1:
              safelyDetachRef(finishedWork, finishedWork.return);
              var instance = finishedWork.stateNode;
              "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(
                finishedWork,
                finishedWork.return,
                instance
              );
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 27:
              releaseSingletonInstance(finishedWork.stateNode);
            case 26:
            case 5:
              safelyDetachRef(finishedWork, finishedWork.return);
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 22:
              null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 30:
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            default:
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
          }
          parentFiber = parentFiber.sibling;
        }
      }
      function recursivelyTraverseReappearLayoutEffects(finishedRoot$jscomp$0, parentFiber, includeWorkInProgressEffects) {
        includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          var current = parentFiber.alternate, finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              commitHookEffectListMount(4, finishedWork);
              break;
            case 1:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              current = finishedWork;
              finishedRoot = current.stateNode;
              if ("function" === typeof finishedRoot.componentDidMount)
                try {
                  finishedRoot.componentDidMount();
                } catch (error) {
                  captureCommitPhaseError(current, current.return, error);
                }
              current = finishedWork;
              finishedRoot = current.updateQueue;
              if (null !== finishedRoot) {
                var instance = current.stateNode;
                try {
                  var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;
                  if (null !== hiddenCallbacks)
                    for (finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0; finishedRoot < hiddenCallbacks.length; finishedRoot++)
                      callCallback(hiddenCallbacks[finishedRoot], instance);
                } catch (error) {
                  captureCommitPhaseError(current, current.return, error);
                }
              }
              includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 27:
              commitHostSingletonAcquisition(finishedWork);
            case 26:
            case 5:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && null === current && flags & 4 && commitHostMount(finishedWork);
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 12:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              break;
            case 13:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            case 22:
              null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 30:
              break;
            default:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
          }
          parentFiber = parentFiber.sibling;
        }
      }
      function commitOffscreenPassiveMountEffects(current, finishedWork) {
        var previousCache = null;
        null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (previousCache = current.memoizedState.cachePool.pool);
        current = null;
        null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current = finishedWork.memoizedState.cachePool.pool);
        current !== previousCache && (null != current && current.refCount++, null != previousCache && releaseCache(previousCache));
      }
      function commitCachePassiveMountEffect(current, finishedWork) {
        current = null;
        null !== finishedWork.alternate && (current = finishedWork.alternate.memoizedState.cache);
        finishedWork = finishedWork.memoizedState.cache;
        finishedWork !== current && (finishedWork.refCount++, null != current && releaseCache(current));
      }
      function recursivelyTraversePassiveMountEffects(root2, parentFiber, committedLanes, committedTransitions) {
        if (parentFiber.subtreeFlags & 10256)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            commitPassiveMountOnFiber(
              root2,
              parentFiber,
              committedLanes,
              committedTransitions
            ), parentFiber = parentFiber.sibling;
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && commitHookEffectListMount(9, finishedWork);
            break;
          case 1:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            break;
          case 3:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && (finishedRoot = null, null !== finishedWork.alternate && (finishedRoot = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== finishedRoot && (finishedWork.refCount++, null != finishedRoot && releaseCache(finishedRoot)));
            break;
          case 12:
            if (flags & 2048) {
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              finishedRoot = finishedWork.stateNode;
              try {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, id = _finishedWork$memoize2.id, onPostCommit = _finishedWork$memoize2.onPostCommit;
                "function" === typeof onPostCommit && onPostCommit(
                  id,
                  null === finishedWork.alternate ? "mount" : "update",
                  finishedRoot.passiveEffectDuration,
                  -0
                );
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            } else
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
            break;
          case 13:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            break;
          case 23:
            break;
          case 22:
            _finishedWork$memoize2 = finishedWork.stateNode;
            id = finishedWork.alternate;
            null !== finishedWork.memoizedState ? _finishedWork$memoize2._visibility & 2 ? recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            ) : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : _finishedWork$memoize2._visibility & 2 ? recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            ) : (_finishedWork$memoize2._visibility |= 2, recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              0 !== (finishedWork.subtreeFlags & 10256)
            ));
            flags & 2048 && commitOffscreenPassiveMountEffects(id, finishedWork);
            break;
          case 24:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
          default:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
        }
      }
      function recursivelyTraverseReconnectPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, includeWorkInProgressEffects) {
        includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, committedLanes = committedLanes$jscomp$0, committedTransitions = committedTransitions$jscomp$0, flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              );
              commitHookEffectListMount(8, finishedWork);
              break;
            case 23:
              break;
            case 22:
              var instance = finishedWork.stateNode;
              null !== finishedWork.memoizedState ? instance._visibility & 2 ? recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              ) : recursivelyTraverseAtomicPassiveEffects(
                finishedRoot,
                finishedWork
              ) : (instance._visibility |= 2, recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              ));
              includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(
                finishedWork.alternate,
                finishedWork
              );
              break;
            case 24:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
              break;
            default:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              );
          }
          parentFiber = parentFiber.sibling;
        }
      }
      function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
        if (parentFiber.subtreeFlags & 10256)
          for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case 22:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                flags & 2048 && commitOffscreenPassiveMountEffects(
                  finishedWork.alternate,
                  finishedWork
                );
                break;
              case 24:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                break;
              default:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
            }
            parentFiber = parentFiber.sibling;
          }
      }
      var suspenseyCommitFlag = 8192;
      function recursivelyAccumulateSuspenseyCommit(parentFiber) {
        if (parentFiber.subtreeFlags & suspenseyCommitFlag)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
      }
      function accumulateSuspenseyCommitOnFiber(fiber) {
        switch (fiber.tag) {
          case 26:
            recursivelyAccumulateSuspenseyCommit(fiber);
            fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && suspendResource(
              currentHoistableRoot,
              fiber.memoizedState,
              fiber.memoizedProps
            );
            break;
          case 5:
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
          case 3:
          case 4:
            var previousHoistableRoot = currentHoistableRoot;
            currentHoistableRoot = getHoistableRoot(fiber.stateNode.containerInfo);
            recursivelyAccumulateSuspenseyCommit(fiber);
            currentHoistableRoot = previousHoistableRoot;
            break;
          case 22:
            null === fiber.memoizedState && (previousHoistableRoot = fiber.alternate, null !== previousHoistableRoot && null !== previousHoistableRoot.memoizedState ? (previousHoistableRoot = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = previousHoistableRoot) : recursivelyAccumulateSuspenseyCommit(fiber));
            break;
          default:
            recursivelyAccumulateSuspenseyCommit(fiber);
        }
      }
      function detachAlternateSiblings(parentFiber) {
        var previousFiber = parentFiber.alternate;
        if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
          previousFiber.child = null;
          do
            previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
          while (null !== parentFiber);
        }
      }
      function recursivelyTraversePassiveUnmountEffects(parentFiber) {
        var deletions = parentFiber.deletions;
        if (0 !== (parentFiber.flags & 16)) {
          if (null !== deletions)
            for (var i2 = 0; i2 < deletions.length; i2++) {
              var childToDelete = deletions[i2];
              nextEffect = childToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                childToDelete,
                parentFiber
              );
            }
          detachAlternateSiblings(parentFiber);
        }
        if (parentFiber.subtreeFlags & 10256)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            finishedWork.flags & 2048 && commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
            break;
          case 3:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
          case 12:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
          case 22:
            var instance = finishedWork.stateNode;
            null !== finishedWork.memoizedState && instance._visibility & 2 && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (instance._visibility &= -3, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
          default:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
        }
      }
      function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
        var deletions = parentFiber.deletions;
        if (0 !== (parentFiber.flags & 16)) {
          if (null !== deletions)
            for (var i2 = 0; i2 < deletions.length; i2++) {
              var childToDelete = deletions[i2];
              nextEffect = childToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                childToDelete,
                parentFiber
              );
            }
          detachAlternateSiblings(parentFiber);
        }
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          deletions = parentFiber;
          switch (deletions.tag) {
            case 0:
            case 11:
            case 15:
              commitHookEffectListUnmount(8, deletions, deletions.return);
              recursivelyTraverseDisconnectPassiveEffects(deletions);
              break;
            case 22:
              i2 = deletions.stateNode;
              i2._visibility & 2 && (i2._visibility &= -3, recursivelyTraverseDisconnectPassiveEffects(deletions));
              break;
            default:
              recursivelyTraverseDisconnectPassiveEffects(deletions);
          }
          parentFiber = parentFiber.sibling;
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        for (; null !== nextEffect; ) {
          var fiber = nextEffect;
          switch (fiber.tag) {
            case 0:
            case 11:
            case 15:
              commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
              break;
            case 23:
            case 22:
              if (null !== fiber.memoizedState && null !== fiber.memoizedState.cachePool) {
                var cache = fiber.memoizedState.cachePool.pool;
                null != cache && cache.refCount++;
              }
              break;
            case 24:
              releaseCache(fiber.memoizedState.cache);
          }
          cache = fiber.child;
          if (null !== cache) cache.return = fiber, nextEffect = cache;
          else
            a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
              cache = nextEffect;
              var sibling = cache.sibling, returnFiber = cache.return;
              detachFiberAfterEffects(cache);
              if (cache === fiber) {
                nextEffect = null;
                break a;
              }
              if (null !== sibling) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                break a;
              }
              nextEffect = returnFiber;
            }
        }
      }
      var DefaultAsyncDispatcher = {
        getCacheForType: function(resourceType) {
          var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
          void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
          return cacheForType;
        }
      }, PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, executionContext = 0, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = false, workInProgressRootIsPrerendering = false, workInProgressRootDidAttachPingListener = false, entangledRenderLanes = 0, workInProgressRootExitStatus = 0, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = false, globalMostRecentFallbackTime = 0, workInProgressRootRenderTargetTime = Infinity, workInProgressTransitions = null, legacyErrorBoundariesThatAlreadyFailed = null, pendingEffectsStatus = 0, pendingEffectsRoot = null, pendingFinishedWork = null, pendingEffectsLanes = 0, pendingEffectsRemainingLanes = 0, pendingPassiveTransitions = null, pendingRecoverableErrors = null, nestedUpdateCount = 0, rootWithNestedUpdates = null;
      function requestUpdateLane() {
        if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes)
          return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
        if (null !== ReactSharedInternals.T) {
          var actionScopeLane = currentEntangledLane;
          return 0 !== actionScopeLane ? actionScopeLane : requestTransitionLane();
        }
        return resolveUpdatePriority();
      }
      function requestDeferredLane() {
        0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 === (workInProgressRootRenderLanes & 536870912) || isHydrating ? claimNextTransitionLane() : 536870912);
        var suspenseHandler = suspenseHandlerStackCursor.current;
        null !== suspenseHandler && (suspenseHandler.flags |= 32);
        return workInProgressDeferredLane;
      }
      function scheduleUpdateOnFiber(root2, fiber, lane) {
        if (root2 === workInProgressRoot && (2 === workInProgressSuspendedReason || 9 === workInProgressSuspendedReason) || null !== root2.cancelPendingCommit)
          prepareFreshStack(root2, 0), markRootSuspended(
            root2,
            workInProgressRootRenderLanes,
            workInProgressDeferredLane,
            false
          );
        markRootUpdated$1(root2, lane);
        if (0 === (executionContext & 2) || root2 !== workInProgressRoot)
          root2 === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended(
            root2,
            workInProgressRootRenderLanes,
            workInProgressDeferredLane,
            false
          )), ensureRootIsScheduled(root2);
      }
      function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
        if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
        var shouldTimeSlice = !forceSync && 0 === (lanes & 124) && 0 === (lanes & root$jscomp$0.expiredLanes) || checkIfRootIsPrerendering(root$jscomp$0, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root$jscomp$0, lanes) : renderRootSync(root$jscomp$0, lanes, true), renderWasConcurrent = shouldTimeSlice;
        do {
          if (0 === exitStatus) {
            workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root$jscomp$0, lanes, 0, false);
            break;
          } else {
            forceSync = root$jscomp$0.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
              exitStatus = renderRootSync(root$jscomp$0, lanes, false);
              renderWasConcurrent = false;
              continue;
            }
            if (2 === exitStatus) {
              renderWasConcurrent = lanes;
              if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent)
                var JSCompiler_inline_result = 0;
              else
                JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913, JSCompiler_inline_result = 0 !== JSCompiler_inline_result ? JSCompiler_inline_result : JSCompiler_inline_result & 536870912 ? 536870912 : 0;
              if (0 !== JSCompiler_inline_result) {
                lanes = JSCompiler_inline_result;
                a: {
                  var root2 = root$jscomp$0;
                  exitStatus = workInProgressRootConcurrentErrors;
                  var wasRootDehydrated = root2.current.memoizedState.isDehydrated;
                  wasRootDehydrated && (prepareFreshStack(root2, JSCompiler_inline_result).flags |= 256);
                  JSCompiler_inline_result = renderRootSync(
                    root2,
                    JSCompiler_inline_result,
                    false
                  );
                  if (2 !== JSCompiler_inline_result) {
                    if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
                      root2.errorRecoveryDisabledLanes |= renderWasConcurrent;
                      workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                      exitStatus = 4;
                      break a;
                    }
                    renderWasConcurrent = workInProgressRootRecoverableErrors;
                    workInProgressRootRecoverableErrors = exitStatus;
                    null !== renderWasConcurrent && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = renderWasConcurrent : workInProgressRootRecoverableErrors.push.apply(
                      workInProgressRootRecoverableErrors,
                      renderWasConcurrent
                    ));
                  }
                  exitStatus = JSCompiler_inline_result;
                }
                renderWasConcurrent = false;
                if (2 !== exitStatus) continue;
              }
            }
            if (1 === exitStatus) {
              prepareFreshStack(root$jscomp$0, 0);
              markRootSuspended(root$jscomp$0, lanes, 0, true);
              break;
            }
            a: {
              shouldTimeSlice = root$jscomp$0;
              renderWasConcurrent = exitStatus;
              switch (renderWasConcurrent) {
                case 0:
                case 1:
                  throw Error(formatProdErrorMessage(345));
                case 4:
                  if ((lanes & 4194048) !== lanes) break;
                case 6:
                  markRootSuspended(
                    shouldTimeSlice,
                    lanes,
                    workInProgressDeferredLane,
                    !workInProgressRootDidSkipSuspendedSiblings
                  );
                  break a;
                case 2:
                  workInProgressRootRecoverableErrors = null;
                  break;
                case 3:
                case 5:
                  break;
                default:
                  throw Error(formatProdErrorMessage(329));
              }
              if ((lanes & 62914560) === lanes && (exitStatus = globalMostRecentFallbackTime + 300 - now2(), 10 < exitStatus)) {
                markRootSuspended(
                  shouldTimeSlice,
                  lanes,
                  workInProgressDeferredLane,
                  !workInProgressRootDidSkipSuspendedSiblings
                );
                if (0 !== getNextLanes(shouldTimeSlice, 0, true)) break a;
                shouldTimeSlice.timeoutHandle = scheduleTimeout(
                  commitRootWhenReady.bind(
                    null,
                    shouldTimeSlice,
                    forceSync,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions,
                    workInProgressRootDidIncludeRecursiveRenderUpdate,
                    lanes,
                    workInProgressDeferredLane,
                    workInProgressRootInterleavedUpdatedLanes,
                    workInProgressSuspendedRetryLanes,
                    workInProgressRootDidSkipSuspendedSiblings,
                    renderWasConcurrent,
                    2,
                    -0,
                    0
                  ),
                  exitStatus
                );
                break a;
              }
              commitRootWhenReady(
                shouldTimeSlice,
                forceSync,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions,
                workInProgressRootDidIncludeRecursiveRenderUpdate,
                lanes,
                workInProgressDeferredLane,
                workInProgressRootInterleavedUpdatedLanes,
                workInProgressSuspendedRetryLanes,
                workInProgressRootDidSkipSuspendedSiblings,
                renderWasConcurrent,
                0,
                -0,
                0
              );
            }
          }
          break;
        } while (1);
        ensureRootIsScheduled(root$jscomp$0);
      }
      function commitRootWhenReady(root2, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, exitStatus, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
        root2.timeoutHandle = -1;
        suspendedCommitReason = finishedWork.subtreeFlags;
        if (suspendedCommitReason & 8192 || 16785408 === (suspendedCommitReason & 16785408)) {
          if (suspendedState = { stylesheets: null, count: 0, unsuspend: noop2 }, accumulateSuspenseyCommitOnFiber(finishedWork), suspendedCommitReason = waitForCommitToBeReady(), null !== suspendedCommitReason) {
            root2.cancelPendingCommit = suspendedCommitReason(
              commitRoot.bind(
                null,
                root2,
                finishedWork,
                lanes,
                recoverableErrors,
                transitions,
                didIncludeRenderPhaseUpdate,
                spawnedLane,
                updatedLanes,
                suspendedRetryLanes,
                exitStatus,
                1,
                completedRenderStartTime,
                completedRenderEndTime
              )
            );
            markRootSuspended(root2, lanes, spawnedLane, !didSkipSuspendedSiblings);
            return;
          }
        }
        commitRoot(
          root2,
          finishedWork,
          lanes,
          recoverableErrors,
          transitions,
          didIncludeRenderPhaseUpdate,
          spawnedLane,
          updatedLanes,
          suspendedRetryLanes
        );
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        for (var node = finishedWork; ; ) {
          var tag = node.tag;
          if ((0 === tag || 11 === tag || 15 === tag) && node.flags & 16384 && (tag = node.updateQueue, null !== tag && (tag = tag.stores, null !== tag)))
            for (var i2 = 0; i2 < tag.length; i2++) {
              var check = tag[i2], getSnapshot = check.getSnapshot;
              check = check.value;
              try {
                if (!objectIs(getSnapshot(), check)) return false;
              } catch (error) {
                return false;
              }
            }
          tag = node.child;
          if (node.subtreeFlags & 16384 && null !== tag)
            tag.return = node, node = tag;
          else {
            if (node === finishedWork) break;
            for (; null === node.sibling; ) {
              if (null === node.return || node.return === finishedWork) return true;
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return true;
      }
      function markRootSuspended(root2, suspendedLanes, spawnedLane, didAttemptEntireTree) {
        suspendedLanes &= ~workInProgressRootPingedLanes;
        suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
        root2.suspendedLanes |= suspendedLanes;
        root2.pingedLanes &= ~suspendedLanes;
        didAttemptEntireTree && (root2.warmLanes |= suspendedLanes);
        didAttemptEntireTree = root2.expirationTimes;
        for (var lanes = suspendedLanes; 0 < lanes; ) {
          var index$4 = 31 - clz32(lanes), lane = 1 << index$4;
          didAttemptEntireTree[index$4] = -1;
          lanes &= ~lane;
        }
        0 !== spawnedLane && markSpawnedDeferredLane(root2, spawnedLane, suspendedLanes);
      }
      function flushSyncWork$1() {
        return 0 === (executionContext & 6) ? (flushSyncWorkAcrossRoots_impl(0), false) : true;
      }
      function resetWorkInProgressStack() {
        if (null !== workInProgress) {
          if (0 === workInProgressSuspendedReason)
            var interruptedWork = workInProgress.return;
          else
            interruptedWork = workInProgress, lastContextDependency = currentlyRenderingFiber$1 = null, resetHooksOnUnwind(interruptedWork), thenableState = null, thenableIndexCounter = 0, interruptedWork = workInProgress;
          for (; null !== interruptedWork; )
            unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
          workInProgress = null;
        }
      }
      function prepareFreshStack(root2, lanes) {
        var timeoutHandle = root2.timeoutHandle;
        -1 !== timeoutHandle && (root2.timeoutHandle = -1, cancelTimeout(timeoutHandle));
        timeoutHandle = root2.cancelPendingCommit;
        null !== timeoutHandle && (root2.cancelPendingCommit = null, timeoutHandle());
        resetWorkInProgressStack();
        workInProgressRoot = root2;
        workInProgress = timeoutHandle = createWorkInProgress(root2.current, null);
        workInProgressRootRenderLanes = lanes;
        workInProgressSuspendedReason = 0;
        workInProgressThrownValue = null;
        workInProgressRootDidSkipSuspendedSiblings = false;
        workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root2, lanes);
        workInProgressRootDidAttachPingListener = false;
        workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = workInProgressRootExitStatus = 0;
        workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
        workInProgressRootDidIncludeRecursiveRenderUpdate = false;
        0 !== (lanes & 8) && (lanes |= lanes & 32);
        var allEntangledLanes = root2.entangledLanes;
        if (0 !== allEntangledLanes)
          for (root2 = root2.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes; ) {
            var index$2 = 31 - clz32(allEntangledLanes), lane = 1 << index$2;
            lanes |= root2[index$2];
            allEntangledLanes &= ~lane;
          }
        entangledRenderLanes = lanes;
        finishQueueingConcurrentUpdates();
        return timeoutHandle;
      }
      function handleThrow(root2, thrownValue) {
        currentlyRenderingFiber = null;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        thrownValue === SuspenseException || thrownValue === SuspenseActionException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 3) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 4) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? 8 : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? 6 : 1;
        workInProgressThrownValue = thrownValue;
        null === workInProgress && (workInProgressRootExitStatus = 1, logUncaughtError(
          root2,
          createCapturedValueAtFiber(thrownValue, root2.current)
        ));
      }
      function pushDispatcher() {
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
      }
      function pushAsyncDispatcher() {
        var prevAsyncDispatcher = ReactSharedInternals.A;
        ReactSharedInternals.A = DefaultAsyncDispatcher;
        return prevAsyncDispatcher;
      }
      function renderDidSuspendDelayIfPossible() {
        workInProgressRootExitStatus = 4;
        workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194048) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = true);
        0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(
          workInProgressRoot,
          workInProgressRootRenderLanes,
          workInProgressDeferredLane,
          false
        );
      }
      function renderRootSync(root2, lanes, shouldYieldForPrerendering) {
        var prevExecutionContext = executionContext;
        executionContext |= 2;
        var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes)
          workInProgressTransitions = null, prepareFreshStack(root2, lanes);
        lanes = false;
        var exitStatus = workInProgressRootExitStatus;
        a: do
          try {
            if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
              var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
              switch (workInProgressSuspendedReason) {
                case 8:
                  resetWorkInProgressStack();
                  exitStatus = 6;
                  break a;
                case 3:
                case 2:
                case 9:
                case 6:
                  null === suspenseHandlerStackCursor.current && (lanes = true);
                  var reason = workInProgressSuspendedReason;
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
                  if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                    exitStatus = 0;
                    break a;
                  }
                  break;
                default:
                  reason = workInProgressSuspendedReason, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
              }
            }
            workLoopSync();
            exitStatus = workInProgressRootExitStatus;
            break;
          } catch (thrownValue$167) {
            handleThrow(root2, thrownValue$167);
          }
        while (1);
        lanes && root2.shellSuspendCounter++;
        lastContextDependency = currentlyRenderingFiber$1 = null;
        executionContext = prevExecutionContext;
        ReactSharedInternals.H = prevDispatcher;
        ReactSharedInternals.A = prevAsyncDispatcher;
        null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
        return exitStatus;
      }
      function workLoopSync() {
        for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= 2;
        var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
        workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes ? (workInProgressTransitions = null, workInProgressRootRenderTargetTime = now2() + 500, prepareFreshStack(root2, lanes)) : workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
          root2,
          lanes
        );
        a: do
          try {
            if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
              lanes = workInProgress;
              var thrownValue = workInProgressThrownValue;
              b: switch (workInProgressSuspendedReason) {
                case 1:
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(root2, lanes, thrownValue, 1);
                  break;
                case 2:
                case 9:
                  if (isThenableResolved(thrownValue)) {
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    replaySuspendedUnitOfWork(lanes);
                    break;
                  }
                  lanes = function() {
                    2 !== workInProgressSuspendedReason && 9 !== workInProgressSuspendedReason || workInProgressRoot !== root2 || (workInProgressSuspendedReason = 7);
                    ensureRootIsScheduled(root2);
                  };
                  thrownValue.then(lanes, lanes);
                  break a;
                case 3:
                  workInProgressSuspendedReason = 7;
                  break a;
                case 4:
                  workInProgressSuspendedReason = 5;
                  break a;
                case 7:
                  isThenableResolved(thrownValue) ? (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, lanes, thrownValue, 7));
                  break;
                case 5:
                  var resource = null;
                  switch (workInProgress.tag) {
                    case 26:
                      resource = workInProgress.memoizedState;
                    case 5:
                    case 27:
                      var hostFiber = workInProgress;
                      if (resource ? preloadResource(resource) : 1) {
                        workInProgressSuspendedReason = 0;
                        workInProgressThrownValue = null;
                        var sibling = hostFiber.sibling;
                        if (null !== sibling) workInProgress = sibling;
                        else {
                          var returnFiber = hostFiber.return;
                          null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                        }
                        break b;
                      }
                  }
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(root2, lanes, thrownValue, 5);
                  break;
                case 6:
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(root2, lanes, thrownValue, 6);
                  break;
                case 8:
                  resetWorkInProgressStack();
                  workInProgressRootExitStatus = 6;
                  break a;
                default:
                  throw Error(formatProdErrorMessage(462));
              }
            }
            workLoopConcurrentByScheduler();
            break;
          } catch (thrownValue$169) {
            handleThrow(root2, thrownValue$169);
          }
        while (1);
        lastContextDependency = currentlyRenderingFiber$1 = null;
        ReactSharedInternals.H = prevDispatcher;
        ReactSharedInternals.A = prevAsyncDispatcher;
        executionContext = prevExecutionContext;
        if (null !== workInProgress) return 0;
        workInProgressRoot = null;
        workInProgressRootRenderLanes = 0;
        finishQueueingConcurrentUpdates();
        return workInProgressRootExitStatus;
      }
      function workLoopConcurrentByScheduler() {
        for (; null !== workInProgress && !shouldYield(); )
          performUnitOfWork(workInProgress);
      }
      function performUnitOfWork(unitOfWork) {
        var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
      }
      function replaySuspendedUnitOfWork(unitOfWork) {
        var next = unitOfWork;
        var current = next.alternate;
        switch (next.tag) {
          case 15:
          case 0:
            next = replayFunctionComponent(
              current,
              next,
              next.pendingProps,
              next.type,
              void 0,
              workInProgressRootRenderLanes
            );
            break;
          case 11:
            next = replayFunctionComponent(
              current,
              next,
              next.pendingProps,
              next.type.render,
              next.ref,
              workInProgressRootRenderLanes
            );
            break;
          case 5:
            resetHooksOnUnwind(next);
          default:
            unwindInterruptedWork(current, next), next = workInProgress = resetWorkInProgress(next, entangledRenderLanes), next = beginWork(current, next, entangledRenderLanes);
        }
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
      }
      function throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, suspendedReason) {
        lastContextDependency = currentlyRenderingFiber$1 = null;
        resetHooksOnUnwind(unitOfWork);
        thenableState = null;
        thenableIndexCounter = 0;
        var returnFiber = unitOfWork.return;
        try {
          if (throwException(
            root2,
            returnFiber,
            unitOfWork,
            thrownValue,
            workInProgressRootRenderLanes
          )) {
            workInProgressRootExitStatus = 1;
            logUncaughtError(
              root2,
              createCapturedValueAtFiber(thrownValue, root2.current)
            );
            workInProgress = null;
            return;
          }
        } catch (error) {
          if (null !== returnFiber) throw workInProgress = returnFiber, error;
          workInProgressRootExitStatus = 1;
          logUncaughtError(
            root2,
            createCapturedValueAtFiber(thrownValue, root2.current)
          );
          workInProgress = null;
          return;
        }
        if (unitOfWork.flags & 32768) {
          if (isHydrating || 1 === suspendedReason) root2 = true;
          else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912))
            root2 = false;
          else if (workInProgressRootDidSkipSuspendedSiblings = root2 = true, 2 === suspendedReason || 9 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason)
            suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
          unwindUnitOfWork(unitOfWork, root2);
        } else completeUnitOfWork(unitOfWork);
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          if (0 !== (completedWork.flags & 32768)) {
            unwindUnitOfWork(
              completedWork,
              workInProgressRootDidSkipSuspendedSiblings
            );
            return;
          }
          unitOfWork = completedWork.return;
          var next = completeWork(
            completedWork.alternate,
            completedWork,
            entangledRenderLanes
          );
          if (null !== next) {
            workInProgress = next;
            return;
          }
          completedWork = completedWork.sibling;
          if (null !== completedWork) {
            workInProgress = completedWork;
            return;
          }
          workInProgress = completedWork = unitOfWork;
        } while (null !== completedWork);
        0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
      }
      function unwindUnitOfWork(unitOfWork, skipSiblings) {
        do {
          var next = unwindWork(unitOfWork.alternate, unitOfWork);
          if (null !== next) {
            next.flags &= 32767;
            workInProgress = next;
            return;
          }
          next = unitOfWork.return;
          null !== next && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
          if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
            workInProgress = unitOfWork;
            return;
          }
          workInProgress = unitOfWork = next;
        } while (null !== unitOfWork);
        workInProgressRootExitStatus = 6;
        workInProgress = null;
      }
      function commitRoot(root2, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes) {
        root2.cancelPendingCommit = null;
        do
          flushPendingEffects();
        while (0 !== pendingEffectsStatus);
        if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
        if (null !== finishedWork) {
          if (finishedWork === root2.current) throw Error(formatProdErrorMessage(177));
          didIncludeRenderPhaseUpdate = finishedWork.lanes | finishedWork.childLanes;
          didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
          markRootFinished(
            root2,
            lanes,
            didIncludeRenderPhaseUpdate,
            spawnedLane,
            updatedLanes,
            suspendedRetryLanes
          );
          root2 === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
          pendingFinishedWork = finishedWork;
          pendingEffectsRoot = root2;
          pendingEffectsLanes = lanes;
          pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
          pendingPassiveTransitions = transitions;
          pendingRecoverableErrors = recoverableErrors;
          0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256) ? (root2.callbackNode = null, root2.callbackPriority = 0, scheduleCallback$1(NormalPriority$1, function() {
            flushPassiveEffects();
            return null;
          })) : (root2.callbackNode = null, root2.callbackPriority = 0);
          recoverableErrors = 0 !== (finishedWork.flags & 13878);
          if (0 !== (finishedWork.subtreeFlags & 13878) || recoverableErrors) {
            recoverableErrors = ReactSharedInternals.T;
            ReactSharedInternals.T = null;
            transitions = ReactDOMSharedInternals.p;
            ReactDOMSharedInternals.p = 2;
            spawnedLane = executionContext;
            executionContext |= 4;
            try {
              commitBeforeMutationEffects(root2, finishedWork, lanes);
            } finally {
              executionContext = spawnedLane, ReactDOMSharedInternals.p = transitions, ReactSharedInternals.T = recoverableErrors;
            }
          }
          pendingEffectsStatus = 1;
          flushMutationEffects();
          flushLayoutEffects();
          flushSpawnedWork();
        }
      }
      function flushMutationEffects() {
        if (1 === pendingEffectsStatus) {
          pendingEffectsStatus = 0;
          var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, rootMutationHasEffect = 0 !== (finishedWork.flags & 13878);
          if (0 !== (finishedWork.subtreeFlags & 13878) || rootMutationHasEffect) {
            rootMutationHasEffect = ReactSharedInternals.T;
            ReactSharedInternals.T = null;
            var previousPriority = ReactDOMSharedInternals.p;
            ReactDOMSharedInternals.p = 2;
            var prevExecutionContext = executionContext;
            executionContext |= 4;
            try {
              commitMutationEffectsOnFiber(finishedWork, root2);
              var priorSelectionInformation = selectionInformation, curFocusedElem = getActiveElementDeep(root2.containerInfo), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
              if (curFocusedElem !== priorFocusedElem && priorFocusedElem && priorFocusedElem.ownerDocument && containsNode(
                priorFocusedElem.ownerDocument.documentElement,
                priorFocusedElem
              )) {
                if (null !== priorSelectionRange && hasSelectionCapabilities(priorFocusedElem)) {
                  var start = priorSelectionRange.start, end = priorSelectionRange.end;
                  void 0 === end && (end = start);
                  if ("selectionStart" in priorFocusedElem)
                    priorFocusedElem.selectionStart = start, priorFocusedElem.selectionEnd = Math.min(
                      end,
                      priorFocusedElem.value.length
                    );
                  else {
                    var doc = priorFocusedElem.ownerDocument || document, win = doc && doc.defaultView || window;
                    if (win.getSelection) {
                      var selection = win.getSelection(), length = priorFocusedElem.textContent.length, start$jscomp$0 = Math.min(priorSelectionRange.start, length), end$jscomp$0 = void 0 === priorSelectionRange.end ? start$jscomp$0 : Math.min(priorSelectionRange.end, length);
                      !selection.extend && start$jscomp$0 > end$jscomp$0 && (curFocusedElem = end$jscomp$0, end$jscomp$0 = start$jscomp$0, start$jscomp$0 = curFocusedElem);
                      var startMarker = getNodeForCharacterOffset(
                        priorFocusedElem,
                        start$jscomp$0
                      ), endMarker = getNodeForCharacterOffset(
                        priorFocusedElem,
                        end$jscomp$0
                      );
                      if (startMarker && endMarker && (1 !== selection.rangeCount || selection.anchorNode !== startMarker.node || selection.anchorOffset !== startMarker.offset || selection.focusNode !== endMarker.node || selection.focusOffset !== endMarker.offset)) {
                        var range2 = doc.createRange();
                        range2.setStart(startMarker.node, startMarker.offset);
                        selection.removeAllRanges();
                        start$jscomp$0 > end$jscomp$0 ? (selection.addRange(range2), selection.extend(endMarker.node, endMarker.offset)) : (range2.setEnd(endMarker.node, endMarker.offset), selection.addRange(range2));
                      }
                    }
                  }
                }
                doc = [];
                for (selection = priorFocusedElem; selection = selection.parentNode; )
                  1 === selection.nodeType && doc.push({
                    element: selection,
                    left: selection.scrollLeft,
                    top: selection.scrollTop
                  });
                "function" === typeof priorFocusedElem.focus && priorFocusedElem.focus();
                for (priorFocusedElem = 0; priorFocusedElem < doc.length; priorFocusedElem++) {
                  var info = doc[priorFocusedElem];
                  info.element.scrollLeft = info.left;
                  info.element.scrollTop = info.top;
                }
              }
              _enabled = !!eventsEnabled;
              selectionInformation = eventsEnabled = null;
            } finally {
              executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootMutationHasEffect;
            }
          }
          root2.current = finishedWork;
          pendingEffectsStatus = 2;
        }
      }
      function flushLayoutEffects() {
        if (2 === pendingEffectsStatus) {
          pendingEffectsStatus = 0;
          var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, rootHasLayoutEffect = 0 !== (finishedWork.flags & 8772);
          if (0 !== (finishedWork.subtreeFlags & 8772) || rootHasLayoutEffect) {
            rootHasLayoutEffect = ReactSharedInternals.T;
            ReactSharedInternals.T = null;
            var previousPriority = ReactDOMSharedInternals.p;
            ReactDOMSharedInternals.p = 2;
            var prevExecutionContext = executionContext;
            executionContext |= 4;
            try {
              commitLayoutEffectOnFiber(root2, finishedWork.alternate, finishedWork);
            } finally {
              executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootHasLayoutEffect;
            }
          }
          pendingEffectsStatus = 3;
        }
      }
      function flushSpawnedWork() {
        if (4 === pendingEffectsStatus || 3 === pendingEffectsStatus) {
          pendingEffectsStatus = 0;
          requestPaint();
          var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, recoverableErrors = pendingRecoverableErrors;
          0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256) ? pendingEffectsStatus = 5 : (pendingEffectsStatus = 0, pendingFinishedWork = pendingEffectsRoot = null, releaseRootPooledCache(root2, root2.pendingLanes));
          var remainingLanes = root2.pendingLanes;
          0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
          lanesToEventPriority(lanes);
          finishedWork = finishedWork.stateNode;
          if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
            try {
              injectedHook.onCommitFiberRoot(
                rendererID,
                finishedWork,
                void 0,
                128 === (finishedWork.current.flags & 128)
              );
            } catch (err) {
            }
          if (null !== recoverableErrors) {
            finishedWork = ReactSharedInternals.T;
            remainingLanes = ReactDOMSharedInternals.p;
            ReactDOMSharedInternals.p = 2;
            ReactSharedInternals.T = null;
            try {
              for (var onRecoverableError = root2.onRecoverableError, i2 = 0; i2 < recoverableErrors.length; i2++) {
                var recoverableError = recoverableErrors[i2];
                onRecoverableError(recoverableError.value, {
                  componentStack: recoverableError.stack
                });
              }
            } finally {
              ReactSharedInternals.T = finishedWork, ReactDOMSharedInternals.p = remainingLanes;
            }
          }
          0 !== (pendingEffectsLanes & 3) && flushPendingEffects();
          ensureRootIsScheduled(root2);
          remainingLanes = root2.pendingLanes;
          0 !== (lanes & 4194090) && 0 !== (remainingLanes & 42) ? root2 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root2) : nestedUpdateCount = 0;
          flushSyncWorkAcrossRoots_impl(0);
        }
      }
      function releaseRootPooledCache(root2, remainingLanes) {
        0 === (root2.pooledCacheLanes &= remainingLanes) && (remainingLanes = root2.pooledCache, null != remainingLanes && (root2.pooledCache = null, releaseCache(remainingLanes)));
      }
      function flushPendingEffects(wasDelayedCommit) {
        flushMutationEffects();
        flushLayoutEffects();
        flushSpawnedWork();
        return flushPassiveEffects();
      }
      function flushPassiveEffects() {
        if (5 !== pendingEffectsStatus) return false;
        var root2 = pendingEffectsRoot, remainingLanes = pendingEffectsRemainingLanes;
        pendingEffectsRemainingLanes = 0;
        var renderPriority = lanesToEventPriority(pendingEffectsLanes), prevTransition = ReactSharedInternals.T, previousPriority = ReactDOMSharedInternals.p;
        try {
          ReactDOMSharedInternals.p = 32 > renderPriority ? 32 : renderPriority;
          ReactSharedInternals.T = null;
          renderPriority = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root$jscomp$0 = pendingEffectsRoot, lanes = pendingEffectsLanes;
          pendingEffectsStatus = 0;
          pendingFinishedWork = pendingEffectsRoot = null;
          pendingEffectsLanes = 0;
          if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(331));
          var prevExecutionContext = executionContext;
          executionContext |= 4;
          commitPassiveUnmountOnFiber(root$jscomp$0.current);
          commitPassiveMountOnFiber(
            root$jscomp$0,
            root$jscomp$0.current,
            lanes,
            renderPriority
          );
          executionContext = prevExecutionContext;
          flushSyncWorkAcrossRoots_impl(0, false);
          if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot)
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
            } catch (err) {
            }
          return true;
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition, releaseRootPooledCache(root2, remainingLanes);
        }
      }
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
        sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
        rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
        null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
        if (3 === sourceFiber.tag)
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
        else
          for (; null !== nearestMountedAncestor; ) {
            if (3 === nearestMountedAncestor.tag) {
              captureCommitPhaseErrorOnRoot(
                nearestMountedAncestor,
                sourceFiber,
                error
              );
              break;
            } else if (1 === nearestMountedAncestor.tag) {
              var instance = nearestMountedAncestor.stateNode;
              if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
                error = createClassErrorUpdate(2);
                instance = enqueueUpdate(nearestMountedAncestor, error, 2);
                null !== instance && (initializeClassErrorUpdate(
                  error,
                  instance,
                  nearestMountedAncestor,
                  sourceFiber
                ), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
                break;
              }
            }
            nearestMountedAncestor = nearestMountedAncestor.return;
          }
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache;
        if (null === pingCache) {
          pingCache = root2.pingCache = new PossiblyWeakMap();
          var threadIDs = /* @__PURE__ */ new Set();
          pingCache.set(wakeable, threadIDs);
        } else
          threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs));
        threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), root2 = pingSuspendedRoot.bind(null, root2, wakeable, lanes), wakeable.then(root2, root2));
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        null !== pingCache && pingCache.delete(wakeable);
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        root2.warmLanes &= ~pingedLanes;
        workInProgressRoot === root2 && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && 300 > now2() - globalMostRecentFallbackTime ? 0 === (executionContext & 2) && prepareFreshStack(root2, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
        ensureRootIsScheduled(root2);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        0 === retryLane && (retryLane = claimNextRetryLane());
        boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
        null !== suspenseState && (retryLane = suspenseState.retryLane);
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = 0;
        switch (boundaryFiber.tag) {
          case 13:
            var retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            null !== suspenseState && (retryLane = suspenseState.retryLane);
            break;
          case 19:
            retryCache = boundaryFiber.stateNode;
            break;
          case 22:
            retryCache = boundaryFiber.stateNode._retryCache;
            break;
          default:
            throw Error(formatProdErrorMessage(314));
        }
        null !== retryCache && retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function scheduleCallback$1(priorityLevel, callback) {
        return scheduleCallback$3(priorityLevel, callback);
      }
      var firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = false, mightHavePendingSyncWork = false, isFlushingWork = false, currentEventTransitionLane = 0;
      function ensureRootIsScheduled(root2) {
        root2 !== lastScheduledRoot && null === root2.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root2 : lastScheduledRoot = lastScheduledRoot.next = root2);
        mightHavePendingSyncWork = true;
        didScheduleMicrotask || (didScheduleMicrotask = true, scheduleImmediateRootScheduleTask());
      }
      function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
        if (!isFlushingWork && mightHavePendingSyncWork) {
          isFlushingWork = true;
          do {
            var didPerformSomeWork = false;
            for (var root$174 = firstScheduledRoot; null !== root$174; ) {
              if (0 !== syncTransitionLanes) {
                var pendingLanes = root$174.pendingLanes;
                if (0 === pendingLanes) var JSCompiler_inline_result = 0;
                else {
                  var suspendedLanes = root$174.suspendedLanes, pingedLanes = root$174.pingedLanes;
                  JSCompiler_inline_result = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                  JSCompiler_inline_result &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                  JSCompiler_inline_result = JSCompiler_inline_result & 201326741 ? JSCompiler_inline_result & 201326741 | 1 : JSCompiler_inline_result ? JSCompiler_inline_result | 2 : 0;
                }
                0 !== JSCompiler_inline_result && (didPerformSomeWork = true, performSyncWorkOnRoot(root$174, JSCompiler_inline_result));
              } else
                JSCompiler_inline_result = workInProgressRootRenderLanes, JSCompiler_inline_result = getNextLanes(
                  root$174,
                  root$174 === workInProgressRoot ? JSCompiler_inline_result : 0,
                  null !== root$174.cancelPendingCommit || -1 !== root$174.timeoutHandle
                ), 0 === (JSCompiler_inline_result & 3) || checkIfRootIsPrerendering(root$174, JSCompiler_inline_result) || (didPerformSomeWork = true, performSyncWorkOnRoot(root$174, JSCompiler_inline_result));
              root$174 = root$174.next;
            }
          } while (didPerformSomeWork);
          isFlushingWork = false;
        }
      }
      function processRootScheduleInImmediateTask() {
        processRootScheduleInMicrotask();
      }
      function processRootScheduleInMicrotask() {
        mightHavePendingSyncWork = didScheduleMicrotask = false;
        var syncTransitionLanes = 0;
        0 !== currentEventTransitionLane && (shouldAttemptEagerTransition() && (syncTransitionLanes = currentEventTransitionLane), currentEventTransitionLane = 0);
        for (var currentTime = now2(), prev = null, root2 = firstScheduledRoot; null !== root2; ) {
          var next = root2.next, nextLanes = scheduleTaskForRootDuringMicrotask(root2, currentTime);
          if (0 === nextLanes)
            root2.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev);
          else if (prev = root2, 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
            mightHavePendingSyncWork = true;
          root2 = next;
        }
        flushSyncWorkAcrossRoots_impl(syncTransitionLanes);
      }
      function scheduleTaskForRootDuringMicrotask(root2, currentTime) {
        for (var suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, expirationTimes = root2.expirationTimes, lanes = root2.pendingLanes & -62914561; 0 < lanes; ) {
          var index$3 = 31 - clz32(lanes), lane = 1 << index$3, expirationTime = expirationTimes[index$3];
          if (-1 === expirationTime) {
            if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
              expirationTimes[index$3] = computeExpirationTime(lane, currentTime);
          } else expirationTime <= currentTime && (root2.expiredLanes |= lane);
          lanes &= ~lane;
        }
        currentTime = workInProgressRoot;
        suspendedLanes = workInProgressRootRenderLanes;
        suspendedLanes = getNextLanes(
          root2,
          root2 === currentTime ? suspendedLanes : 0,
          null !== root2.cancelPendingCommit || -1 !== root2.timeoutHandle
        );
        pingedLanes = root2.callbackNode;
        if (0 === suspendedLanes || root2 === currentTime && (2 === workInProgressSuspendedReason || 9 === workInProgressSuspendedReason) || null !== root2.cancelPendingCommit)
          return null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes), root2.callbackNode = null, root2.callbackPriority = 0;
        if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root2, suspendedLanes)) {
          currentTime = suspendedLanes & -suspendedLanes;
          if (currentTime === root2.callbackPriority) return currentTime;
          null !== pingedLanes && cancelCallback$1(pingedLanes);
          switch (lanesToEventPriority(suspendedLanes)) {
            case 2:
            case 8:
              suspendedLanes = UserBlockingPriority;
              break;
            case 32:
              suspendedLanes = NormalPriority$1;
              break;
            case 268435456:
              suspendedLanes = IdlePriority;
              break;
            default:
              suspendedLanes = NormalPriority$1;
          }
          pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root2);
          suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
          root2.callbackPriority = currentTime;
          root2.callbackNode = suspendedLanes;
          return currentTime;
        }
        null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
        root2.callbackPriority = 2;
        root2.callbackNode = null;
        return 2;
      }
      function performWorkOnRootViaSchedulerTask(root2, didTimeout) {
        if (0 !== pendingEffectsStatus && 5 !== pendingEffectsStatus)
          return root2.callbackNode = null, root2.callbackPriority = 0, null;
        var originalCallbackNode = root2.callbackNode;
        if (flushPendingEffects() && root2.callbackNode !== originalCallbackNode)
          return null;
        var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
        workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
          root2,
          root2 === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0,
          null !== root2.cancelPendingCommit || -1 !== root2.timeoutHandle
        );
        if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
        performWorkOnRoot(root2, workInProgressRootRenderLanes$jscomp$0, didTimeout);
        scheduleTaskForRootDuringMicrotask(root2, now2());
        return null != root2.callbackNode && root2.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root2) : null;
      }
      function performSyncWorkOnRoot(root2, lanes) {
        if (flushPendingEffects()) return null;
        performWorkOnRoot(root2, lanes, true);
      }
      function scheduleImmediateRootScheduleTask() {
        scheduleMicrotask(function() {
          0 !== (executionContext & 6) ? scheduleCallback$3(
            ImmediatePriority,
            processRootScheduleInImmediateTask
          ) : processRootScheduleInMicrotask();
        });
      }
      function requestTransitionLane() {
        0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
        return currentEventTransitionLane;
      }
      function coerceFormActionProp(actionProp) {
        return null == actionProp || "symbol" === typeof actionProp || "boolean" === typeof actionProp ? null : "function" === typeof actionProp ? actionProp : sanitizeURL("" + actionProp);
      }
      function createFormDataWithSubmitter(form, submitter) {
        var temp = submitter.ownerDocument.createElement("input");
        temp.name = submitter.name;
        temp.value = submitter.value;
        form.id && temp.setAttribute("form", form.id);
        submitter.parentNode.insertBefore(temp, submitter);
        form = new FormData(form);
        temp.parentNode.removeChild(temp);
        return form;
      }
      function extractEvents$1(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget) {
        if ("submit" === domEventName && maybeTargetInst && maybeTargetInst.stateNode === nativeEventTarget) {
          var action = coerceFormActionProp(
            (nativeEventTarget[internalPropsKey] || null).action
          ), submitter = nativeEvent.submitter;
          submitter && (domEventName = (domEventName = submitter[internalPropsKey] || null) ? coerceFormActionProp(domEventName.formAction) : submitter.getAttribute("formAction"), null !== domEventName && (action = domEventName, submitter = null));
          var event = new SyntheticEvent(
            "action",
            "action",
            null,
            nativeEvent,
            nativeEventTarget
          );
          dispatchQueue.push({
            event,
            listeners: [
              {
                instance: null,
                listener: function() {
                  if (nativeEvent.defaultPrevented) {
                    if (0 !== currentEventTransitionLane) {
                      var formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget);
                      startHostTransition(
                        maybeTargetInst,
                        {
                          pending: true,
                          data: formData,
                          method: nativeEventTarget.method,
                          action
                        },
                        null,
                        formData
                      );
                    }
                  } else
                    "function" === typeof action && (event.preventDefault(), formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget), startHostTransition(
                      maybeTargetInst,
                      {
                        pending: true,
                        data: formData,
                        method: nativeEventTarget.method,
                        action
                      },
                      action,
                      formData
                    ));
                },
                currentTarget: nativeEventTarget
              }
            ]
          });
        }
      }
      for (var i$jscomp$inline_1528 = 0; i$jscomp$inline_1528 < simpleEventPluginEvents.length; i$jscomp$inline_1528++) {
        var eventName$jscomp$inline_1529 = simpleEventPluginEvents[i$jscomp$inline_1528], domEventName$jscomp$inline_1530 = eventName$jscomp$inline_1529.toLowerCase(), capitalizedEvent$jscomp$inline_1531 = eventName$jscomp$inline_1529[0].toUpperCase() + eventName$jscomp$inline_1529.slice(1);
        registerSimpleEvent(
          domEventName$jscomp$inline_1530,
          "on" + capitalizedEvent$jscomp$inline_1531
        );
      }
      registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
      registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
      registerSimpleEvent(ANIMATION_START, "onAnimationStart");
      registerSimpleEvent("dblclick", "onDoubleClick");
      registerSimpleEvent("focusin", "onFocus");
      registerSimpleEvent("focusout", "onBlur");
      registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
      registerSimpleEvent(TRANSITION_START, "onTransitionStart");
      registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
      registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
      registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
      registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
      registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      registerTwoPhaseEvent(
        "onChange",
        "change click focusin focusout input keydown keyup selectionchange".split(" ")
      );
      registerTwoPhaseEvent(
        "onSelect",
        "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
          " "
        )
      );
      registerTwoPhaseEvent("onBeforeInput", [
        "compositionend",
        "keypress",
        "textInput",
        "paste"
      ]);
      registerTwoPhaseEvent(
        "onCompositionEnd",
        "compositionend focusout keydown keypress keyup mousedown".split(" ")
      );
      registerTwoPhaseEvent(
        "onCompositionStart",
        "compositionstart focusout keydown keypress keyup mousedown".split(" ")
      );
      registerTwoPhaseEvent(
        "onCompositionUpdate",
        "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
      );
      var mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
        " "
      ), nonDelegatedEvents = new Set(
        "beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes)
      );
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        eventSystemFlags = 0 !== (eventSystemFlags & 4);
        for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
          var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event;
          _dispatchQueue$i = _dispatchQueue$i.listeners;
          a: {
            var previousInstance = void 0;
            if (eventSystemFlags)
              for (var i$jscomp$0 = _dispatchQueue$i.length - 1; 0 <= i$jscomp$0; i$jscomp$0--) {
                var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
                _dispatchListeners$i = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped())
                  break a;
                previousInstance = _dispatchListeners$i;
                event.currentTarget = currentTarget;
                try {
                  previousInstance(event);
                } catch (error) {
                  reportGlobalError(error);
                }
                event.currentTarget = null;
                previousInstance = instance;
              }
            else
              for (i$jscomp$0 = 0; i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
                _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
                instance = _dispatchListeners$i.instance;
                currentTarget = _dispatchListeners$i.currentTarget;
                _dispatchListeners$i = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped())
                  break a;
                previousInstance = _dispatchListeners$i;
                event.currentTarget = currentTarget;
                try {
                  previousInstance(event);
                } catch (error) {
                  reportGlobalError(error);
                }
                event.currentTarget = null;
                previousInstance = instance;
              }
          }
        }
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        var JSCompiler_inline_result = targetElement[internalEventHandlersKey];
        void 0 === JSCompiler_inline_result && (JSCompiler_inline_result = targetElement[internalEventHandlersKey] = /* @__PURE__ */ new Set());
        var listenerSetKey = domEventName + "__bubble";
        JSCompiler_inline_result.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, false), JSCompiler_inline_result.add(listenerSetKey));
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        var eventSystemFlags = 0;
        isCapturePhaseListener && (eventSystemFlags |= 4);
        addTrappedEventListener(
          target,
          domEventName,
          eventSystemFlags,
          isCapturePhaseListener
        );
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            "selectionchange" !== domEventName && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, false, rootContainerElement), listenToNativeEvent(domEventName, true, rootContainerElement));
          });
          var ownerDocument = 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
          null === ownerDocument || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = true, listenToNativeEvent("selectionchange", false, ownerDocument));
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener) {
        switch (getEventPriority(domEventName)) {
          case 2:
            var listenerWrapper = dispatchDiscreteEvent;
            break;
          case 8:
            listenerWrapper = dispatchContinuousEvent;
            break;
          default:
            listenerWrapper = dispatchEvent;
        }
        eventSystemFlags = listenerWrapper.bind(
          null,
          domEventName,
          eventSystemFlags,
          targetContainer
        );
        listenerWrapper = void 0;
        !passiveBrowserEventsSupported || "touchstart" !== domEventName && "touchmove" !== domEventName && "wheel" !== domEventName || (listenerWrapper = true);
        isCapturePhaseListener ? void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
          capture: true,
          passive: listenerWrapper
        }) : targetContainer.addEventListener(domEventName, eventSystemFlags, true) : void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
          passive: listenerWrapper
        }) : targetContainer.addEventListener(domEventName, eventSystemFlags, false);
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst$jscomp$0, targetContainer) {
        var ancestorInst = targetInst$jscomp$0;
        if (0 === (eventSystemFlags & 1) && 0 === (eventSystemFlags & 2) && null !== targetInst$jscomp$0)
          a: for (; ; ) {
            if (null === targetInst$jscomp$0) return;
            var nodeTag = targetInst$jscomp$0.tag;
            if (3 === nodeTag || 4 === nodeTag) {
              var container = targetInst$jscomp$0.stateNode.containerInfo;
              if (container === targetContainer) break;
              if (4 === nodeTag)
                for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
                  var grandTag = nodeTag.tag;
                  if ((3 === grandTag || 4 === grandTag) && nodeTag.stateNode.containerInfo === targetContainer)
                    return;
                  nodeTag = nodeTag.return;
                }
              for (; null !== container; ) {
                nodeTag = getClosestInstanceFromNode(container);
                if (null === nodeTag) return;
                grandTag = nodeTag.tag;
                if (5 === grandTag || 6 === grandTag || 26 === grandTag || 27 === grandTag) {
                  targetInst$jscomp$0 = ancestorInst = nodeTag;
                  continue a;
                }
                container = container.parentNode;
              }
            }
            targetInst$jscomp$0 = targetInst$jscomp$0.return;
          }
        batchedUpdates$1(function() {
          var targetInst = ancestorInst, nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
          a: {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (void 0 !== reactName) {
              var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
              switch (domEventName) {
                case "keypress":
                  if (0 === getEventCharCode(nativeEvent)) break a;
                case "keydown":
                case "keyup":
                  SyntheticEventCtor = SyntheticKeyboardEvent;
                  break;
                case "focusin":
                  reactEventType = "focus";
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;
                case "focusout":
                  reactEventType = "blur";
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;
                case "beforeblur":
                case "afterblur":
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;
                case "click":
                  if (2 === nativeEvent.button) break a;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  SyntheticEventCtor = SyntheticMouseEvent;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  SyntheticEventCtor = SyntheticDragEvent;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  SyntheticEventCtor = SyntheticTouchEvent;
                  break;
                case ANIMATION_END:
                case ANIMATION_ITERATION:
                case ANIMATION_START:
                  SyntheticEventCtor = SyntheticAnimationEvent;
                  break;
                case TRANSITION_END:
                  SyntheticEventCtor = SyntheticTransitionEvent;
                  break;
                case "scroll":
                case "scrollend":
                  SyntheticEventCtor = SyntheticUIEvent;
                  break;
                case "wheel":
                  SyntheticEventCtor = SyntheticWheelEvent;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  SyntheticEventCtor = SyntheticClipboardEvent;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  SyntheticEventCtor = SyntheticPointerEvent;
                  break;
                case "toggle":
                case "beforetoggle":
                  SyntheticEventCtor = SyntheticToggleEvent;
              }
              var inCapturePhase = 0 !== (eventSystemFlags & 4), accumulateTargetOnly = !inCapturePhase && ("scroll" === domEventName || "scrollend" === domEventName), reactEventName = inCapturePhase ? null !== reactName ? reactName + "Capture" : null : reactName;
              inCapturePhase = [];
              for (var instance = targetInst, lastHostComponent; null !== instance; ) {
                var _instance = instance;
                lastHostComponent = _instance.stateNode;
                _instance = _instance.tag;
                5 !== _instance && 26 !== _instance && 27 !== _instance || null === lastHostComponent || null === reactEventName || (_instance = getListener(instance, reactEventName), null != _instance && inCapturePhase.push(
                  createDispatchListener(instance, _instance, lastHostComponent)
                ));
                if (accumulateTargetOnly) break;
                instance = instance.return;
              }
              0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(
                reactName,
                reactEventType,
                null,
                nativeEvent,
                nativeEventTarget
              ), dispatchQueue.push({ event: reactName, listeners: inCapturePhase }));
            }
          }
          if (0 === (eventSystemFlags & 7)) {
            a: {
              reactName = "mouseover" === domEventName || "pointerover" === domEventName;
              SyntheticEventCtor = "mouseout" === domEventName || "pointerout" === domEventName;
              if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey]))
                break a;
              if (SyntheticEventCtor || reactName) {
                reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
                if (SyntheticEventCtor) {
                  if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, null !== reactEventType && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), inCapturePhase = reactEventType.tag, reactEventType !== accumulateTargetOnly || 5 !== inCapturePhase && 27 !== inCapturePhase && 6 !== inCapturePhase))
                    reactEventType = null;
                } else SyntheticEventCtor = null, reactEventType = targetInst;
                if (SyntheticEventCtor !== reactEventType) {
                  inCapturePhase = SyntheticMouseEvent;
                  _instance = "onMouseLeave";
                  reactEventName = "onMouseEnter";
                  instance = "mouse";
                  if ("pointerout" === domEventName || "pointerover" === domEventName)
                    inCapturePhase = SyntheticPointerEvent, _instance = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
                  accumulateTargetOnly = null == SyntheticEventCtor ? reactName : getNodeFromInstance(SyntheticEventCtor);
                  lastHostComponent = null == reactEventType ? reactName : getNodeFromInstance(reactEventType);
                  reactName = new inCapturePhase(
                    _instance,
                    instance + "leave",
                    SyntheticEventCtor,
                    nativeEvent,
                    nativeEventTarget
                  );
                  reactName.target = accumulateTargetOnly;
                  reactName.relatedTarget = lastHostComponent;
                  _instance = null;
                  getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(
                    reactEventName,
                    instance + "enter",
                    reactEventType,
                    nativeEvent,
                    nativeEventTarget
                  ), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, _instance = inCapturePhase);
                  accumulateTargetOnly = _instance;
                  if (SyntheticEventCtor && reactEventType)
                    b: {
                      inCapturePhase = SyntheticEventCtor;
                      reactEventName = reactEventType;
                      instance = 0;
                      for (lastHostComponent = inCapturePhase; lastHostComponent; lastHostComponent = getParent(lastHostComponent))
                        instance++;
                      lastHostComponent = 0;
                      for (_instance = reactEventName; _instance; _instance = getParent(_instance))
                        lastHostComponent++;
                      for (; 0 < instance - lastHostComponent; )
                        inCapturePhase = getParent(inCapturePhase), instance--;
                      for (; 0 < lastHostComponent - instance; )
                        reactEventName = getParent(reactEventName), lastHostComponent--;
                      for (; instance--; ) {
                        if (inCapturePhase === reactEventName || null !== reactEventName && inCapturePhase === reactEventName.alternate)
                          break b;
                        inCapturePhase = getParent(inCapturePhase);
                        reactEventName = getParent(reactEventName);
                      }
                      inCapturePhase = null;
                    }
                  else inCapturePhase = null;
                  null !== SyntheticEventCtor && accumulateEnterLeaveListenersForEvent(
                    dispatchQueue,
                    reactName,
                    SyntheticEventCtor,
                    inCapturePhase,
                    false
                  );
                  null !== reactEventType && null !== accumulateTargetOnly && accumulateEnterLeaveListenersForEvent(
                    dispatchQueue,
                    accumulateTargetOnly,
                    reactEventType,
                    inCapturePhase,
                    true
                  );
                }
              }
            }
            a: {
              reactName = targetInst ? getNodeFromInstance(targetInst) : window;
              SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
              if ("select" === SyntheticEventCtor || "input" === SyntheticEventCtor && "file" === reactName.type)
                var getTargetInstFunc = getTargetInstForChangeEvent;
              else if (isTextInputElement(reactName))
                if (isInputEventSupported)
                  getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                else {
                  getTargetInstFunc = getTargetInstForInputEventPolyfill;
                  var handleEventFunc = handleEventsForInputEventPolyfill;
                }
              else
                SyntheticEventCtor = reactName.nodeName, !SyntheticEventCtor || "input" !== SyntheticEventCtor.toLowerCase() || "checkbox" !== reactName.type && "radio" !== reactName.type ? targetInst && isCustomElement(targetInst.elementType) && (getTargetInstFunc = getTargetInstForChangeEvent) : getTargetInstFunc = getTargetInstForClickEvent;
              if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
                createAndAccumulateChangeEvent(
                  dispatchQueue,
                  getTargetInstFunc,
                  nativeEvent,
                  nativeEventTarget
                );
                break a;
              }
              handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
              "focusout" === domEventName && targetInst && "number" === reactName.type && null != targetInst.memoizedProps.value && setDefaultValue(reactName, "number", reactName.value);
            }
            handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(handleEventFunc) || "true" === handleEventFunc.contentEditable)
                  activeElement = handleEventFunc, activeElementInst = targetInst, lastSelection = null;
                break;
              case "focusout":
                lastSelection = activeElementInst = activeElement = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) break;
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
            var fallbackData;
            if (canUseCompositionEvent)
              b: {
                switch (domEventName) {
                  case "compositionstart":
                    var eventType = "onCompositionStart";
                    break b;
                  case "compositionend":
                    eventType = "onCompositionEnd";
                    break b;
                  case "compositionupdate":
                    eventType = "onCompositionUpdate";
                    break b;
                }
                eventType = void 0;
              }
            else
              isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : "keydown" === domEventName && 229 === nativeEvent.keyCode && (eventType = "onCompositionStart");
            eventType && (useFallbackCompositionData && "ko" !== nativeEvent.locale && (isComposing || "onCompositionStart" !== eventType ? "onCompositionEnd" === eventType && isComposing && (fallbackData = getData()) : (root = nativeEventTarget, startText = "value" in root ? root.value : root.textContent, isComposing = true)), handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(
              eventType,
              domEventName,
              null,
              nativeEvent,
              nativeEventTarget
            ), dispatchQueue.push({ event: eventType, listeners: handleEventFunc }), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), null !== fallbackData && (eventType.data = fallbackData))));
            if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent))
              eventType = accumulateTwoPhaseListeners(targetInst, "onBeforeInput"), 0 < eventType.length && (handleEventFunc = new SyntheticCompositionEvent(
                "onBeforeInput",
                "beforeinput",
                null,
                nativeEvent,
                nativeEventTarget
              ), dispatchQueue.push({
                event: handleEventFunc,
                listeners: eventType
              }), handleEventFunc.data = fallbackData);
            extractEvents$1(
              dispatchQueue,
              domEventName,
              targetInst,
              nativeEvent,
              nativeEventTarget
            );
          }
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        for (var captureName = reactName + "Capture", listeners = []; null !== targetFiber; ) {
          var _instance2 = targetFiber, stateNode = _instance2.stateNode;
          _instance2 = _instance2.tag;
          5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2 || null === stateNode || (_instance2 = getListener(targetFiber, captureName), null != _instance2 && listeners.unshift(
            createDispatchListener(targetFiber, _instance2, stateNode)
          ), _instance2 = getListener(targetFiber, reactName), null != _instance2 && listeners.push(
            createDispatchListener(targetFiber, _instance2, stateNode)
          ));
          if (3 === targetFiber.tag) return listeners;
          targetFiber = targetFiber.return;
        }
        return [];
      }
      function getParent(inst) {
        if (null === inst) return null;
        do
          inst = inst.return;
        while (inst && 5 !== inst.tag && 27 !== inst.tag);
        return inst ? inst : null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        for (var registrationName = event._reactName, listeners = []; null !== target && target !== common; ) {
          var _instance3 = target, alternate = _instance3.alternate, stateNode = _instance3.stateNode;
          _instance3 = _instance3.tag;
          if (null !== alternate && alternate === common) break;
          5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3 || null === stateNode || (alternate = stateNode, inCapturePhase ? (stateNode = getListener(target, registrationName), null != stateNode && listeners.unshift(
            createDispatchListener(target, stateNode, alternate)
          )) : inCapturePhase || (stateNode = getListener(target, registrationName), null != stateNode && listeners.push(
            createDispatchListener(target, stateNode, alternate)
          )));
          target = target.return;
        }
        0 !== listeners.length && dispatchQueue.push({ event, listeners });
      }
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        return ("string" === typeof markup ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText) {
        clientText = normalizeMarkupForTextOrAttribute(clientText);
        return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
      }
      function noop$12() {
      }
      function setProp(domElement, tag, key, value, props, prevValue) {
        switch (key) {
          case "children":
            "string" === typeof value ? "body" === tag || "textarea" === tag && "" === value || setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && "body" !== tag && setTextContent(domElement, "" + value);
            break;
          case "className":
            setValueForKnownAttribute(domElement, "class", value);
            break;
          case "tabIndex":
            setValueForKnownAttribute(domElement, "tabindex", value);
            break;
          case "dir":
          case "role":
          case "viewBox":
          case "width":
          case "height":
            setValueForKnownAttribute(domElement, key, value);
            break;
          case "style":
            setValueForStyles(domElement, value, prevValue);
            break;
          case "data":
            if ("object" !== tag) {
              setValueForKnownAttribute(domElement, "data", value);
              break;
            }
          case "src":
          case "href":
            if ("" === value && ("a" !== tag || "href" !== key)) {
              domElement.removeAttribute(key);
              break;
            }
            if (null == value || "function" === typeof value || "symbol" === typeof value || "boolean" === typeof value) {
              domElement.removeAttribute(key);
              break;
            }
            value = sanitizeURL("" + value);
            domElement.setAttribute(key, value);
            break;
          case "action":
          case "formAction":
            if ("function" === typeof value) {
              domElement.setAttribute(
                key,
                "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
              );
              break;
            } else
              "function" === typeof prevValue && ("formAction" === key ? ("input" !== tag && setProp(domElement, tag, "name", props.name, props, null), setProp(
                domElement,
                tag,
                "formEncType",
                props.formEncType,
                props,
                null
              ), setProp(
                domElement,
                tag,
                "formMethod",
                props.formMethod,
                props,
                null
              ), setProp(
                domElement,
                tag,
                "formTarget",
                props.formTarget,
                props,
                null
              )) : (setProp(domElement, tag, "encType", props.encType, props, null), setProp(domElement, tag, "method", props.method, props, null), setProp(domElement, tag, "target", props.target, props, null)));
            if (null == value || "symbol" === typeof value || "boolean" === typeof value) {
              domElement.removeAttribute(key);
              break;
            }
            value = sanitizeURL("" + value);
            domElement.setAttribute(key, value);
            break;
          case "onClick":
            null != value && (domElement.onclick = noop$12);
            break;
          case "onScroll":
            null != value && listenToNonDelegatedEvent("scroll", domElement);
            break;
          case "onScrollEnd":
            null != value && listenToNonDelegatedEvent("scrollend", domElement);
            break;
          case "dangerouslySetInnerHTML":
            if (null != value) {
              if ("object" !== typeof value || !("__html" in value))
                throw Error(formatProdErrorMessage(61));
              key = value.__html;
              if (null != key) {
                if (null != props.children) throw Error(formatProdErrorMessage(60));
                domElement.innerHTML = key;
              }
            }
            break;
          case "multiple":
            domElement.multiple = value && "function" !== typeof value && "symbol" !== typeof value;
            break;
          case "muted":
            domElement.muted = value && "function" !== typeof value && "symbol" !== typeof value;
            break;
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "ref":
            break;
          case "autoFocus":
            break;
          case "xlinkHref":
            if (null == value || "function" === typeof value || "boolean" === typeof value || "symbol" === typeof value) {
              domElement.removeAttribute("xlink:href");
              break;
            }
            key = sanitizeURL("" + value);
            domElement.setAttributeNS(
              "http://www.w3.org/1999/xlink",
              "xlink:href",
              key
            );
            break;
          case "contentEditable":
          case "spellCheck":
          case "draggable":
          case "value":
          case "autoReverse":
          case "externalResourcesRequired":
          case "focusable":
          case "preserveAlpha":
            null != value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "" + value) : domElement.removeAttribute(key);
            break;
          case "inert":
          case "allowFullScreen":
          case "async":
          case "autoPlay":
          case "controls":
          case "default":
          case "defer":
          case "disabled":
          case "disablePictureInPicture":
          case "disableRemotePlayback":
          case "formNoValidate":
          case "hidden":
          case "loop":
          case "noModule":
          case "noValidate":
          case "open":
          case "playsInline":
          case "readOnly":
          case "required":
          case "reversed":
          case "scoped":
          case "seamless":
          case "itemScope":
            value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "") : domElement.removeAttribute(key);
            break;
          case "capture":
          case "download":
            true === value ? domElement.setAttribute(key, "") : false !== value && null != value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, value) : domElement.removeAttribute(key);
            break;
          case "cols":
          case "rows":
          case "size":
          case "span":
            null != value && "function" !== typeof value && "symbol" !== typeof value && !isNaN(value) && 1 <= value ? domElement.setAttribute(key, value) : domElement.removeAttribute(key);
            break;
          case "rowSpan":
          case "start":
            null == value || "function" === typeof value || "symbol" === typeof value || isNaN(value) ? domElement.removeAttribute(key) : domElement.setAttribute(key, value);
            break;
          case "popover":
            listenToNonDelegatedEvent("beforetoggle", domElement);
            listenToNonDelegatedEvent("toggle", domElement);
            setValueForAttribute(domElement, "popover", value);
            break;
          case "xlinkActuate":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/1999/xlink",
              "xlink:actuate",
              value
            );
            break;
          case "xlinkArcrole":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/1999/xlink",
              "xlink:arcrole",
              value
            );
            break;
          case "xlinkRole":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/1999/xlink",
              "xlink:role",
              value
            );
            break;
          case "xlinkShow":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/1999/xlink",
              "xlink:show",
              value
            );
            break;
          case "xlinkTitle":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/1999/xlink",
              "xlink:title",
              value
            );
            break;
          case "xlinkType":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/1999/xlink",
              "xlink:type",
              value
            );
            break;
          case "xmlBase":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/XML/1998/namespace",
              "xml:base",
              value
            );
            break;
          case "xmlLang":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/XML/1998/namespace",
              "xml:lang",
              value
            );
            break;
          case "xmlSpace":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/XML/1998/namespace",
              "xml:space",
              value
            );
            break;
          case "is":
            setValueForAttribute(domElement, "is", value);
            break;
          case "innerText":
          case "textContent":
            break;
          default:
            if (!(2 < key.length) || "o" !== key[0] && "O" !== key[0] || "n" !== key[1] && "N" !== key[1])
              key = aliases2.get(key) || key, setValueForAttribute(domElement, key, value);
        }
      }
      function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
        switch (key) {
          case "style":
            setValueForStyles(domElement, value, prevValue);
            break;
          case "dangerouslySetInnerHTML":
            if (null != value) {
              if ("object" !== typeof value || !("__html" in value))
                throw Error(formatProdErrorMessage(61));
              key = value.__html;
              if (null != key) {
                if (null != props.children) throw Error(formatProdErrorMessage(60));
                domElement.innerHTML = key;
              }
            }
            break;
          case "children":
            "string" === typeof value ? setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && setTextContent(domElement, "" + value);
            break;
          case "onScroll":
            null != value && listenToNonDelegatedEvent("scroll", domElement);
            break;
          case "onScrollEnd":
            null != value && listenToNonDelegatedEvent("scrollend", domElement);
            break;
          case "onClick":
            null != value && (domElement.onclick = noop$12);
            break;
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
          case "innerHTML":
          case "ref":
            break;
          case "innerText":
          case "textContent":
            break;
          default:
            if (!registrationNameDependencies.hasOwnProperty(key))
              a: {
                if ("o" === key[0] && "n" === key[1] && (props = key.endsWith("Capture"), tag = key.slice(2, props ? key.length - 7 : void 0), prevValue = domElement[internalPropsKey] || null, prevValue = null != prevValue ? prevValue[key] : null, "function" === typeof prevValue && domElement.removeEventListener(tag, prevValue, props), "function" === typeof value)) {
                  "function" !== typeof prevValue && null !== prevValue && (key in domElement ? domElement[key] = null : domElement.hasAttribute(key) && domElement.removeAttribute(key));
                  domElement.addEventListener(tag, value, props);
                  break a;
                }
                key in domElement ? domElement[key] = value : true === value ? domElement.setAttribute(key, "") : setValueForAttribute(domElement, key, value);
              }
        }
      }
      function setInitialProperties(domElement, tag, props) {
        switch (tag) {
          case "div":
          case "span":
          case "svg":
          case "path":
          case "a":
          case "g":
          case "p":
          case "li":
            break;
          case "img":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            var hasSrc = false, hasSrcSet = false, propKey;
            for (propKey in props)
              if (props.hasOwnProperty(propKey)) {
                var propValue = props[propKey];
                if (null != propValue)
                  switch (propKey) {
                    case "src":
                      hasSrc = true;
                      break;
                    case "srcSet":
                      hasSrcSet = true;
                      break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                      throw Error(formatProdErrorMessage(137, tag));
                    default:
                      setProp(domElement, tag, propKey, propValue, props, null);
                  }
              }
            hasSrcSet && setProp(domElement, tag, "srcSet", props.srcSet, props, null);
            hasSrc && setProp(domElement, tag, "src", props.src, props, null);
            return;
          case "input":
            listenToNonDelegatedEvent("invalid", domElement);
            var defaultValue = propKey = propValue = hasSrcSet = null, checked = null, defaultChecked = null;
            for (hasSrc in props)
              if (props.hasOwnProperty(hasSrc)) {
                var propValue$188 = props[hasSrc];
                if (null != propValue$188)
                  switch (hasSrc) {
                    case "name":
                      hasSrcSet = propValue$188;
                      break;
                    case "type":
                      propValue = propValue$188;
                      break;
                    case "checked":
                      checked = propValue$188;
                      break;
                    case "defaultChecked":
                      defaultChecked = propValue$188;
                      break;
                    case "value":
                      propKey = propValue$188;
                      break;
                    case "defaultValue":
                      defaultValue = propValue$188;
                      break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                      if (null != propValue$188)
                        throw Error(formatProdErrorMessage(137, tag));
                      break;
                    default:
                      setProp(domElement, tag, hasSrc, propValue$188, props, null);
                  }
              }
            initInput(
              domElement,
              propKey,
              defaultValue,
              checked,
              defaultChecked,
              propValue,
              hasSrcSet,
              false
            );
            track(domElement);
            return;
          case "select":
            listenToNonDelegatedEvent("invalid", domElement);
            hasSrc = propValue = propKey = null;
            for (hasSrcSet in props)
              if (props.hasOwnProperty(hasSrcSet) && (defaultValue = props[hasSrcSet], null != defaultValue))
                switch (hasSrcSet) {
                  case "value":
                    propKey = defaultValue;
                    break;
                  case "defaultValue":
                    propValue = defaultValue;
                    break;
                  case "multiple":
                    hasSrc = defaultValue;
                  default:
                    setProp(domElement, tag, hasSrcSet, defaultValue, props, null);
                }
            tag = propKey;
            props = propValue;
            domElement.multiple = !!hasSrc;
            null != tag ? updateOptions(domElement, !!hasSrc, tag, false) : null != props && updateOptions(domElement, !!hasSrc, props, true);
            return;
          case "textarea":
            listenToNonDelegatedEvent("invalid", domElement);
            propKey = hasSrcSet = hasSrc = null;
            for (propValue in props)
              if (props.hasOwnProperty(propValue) && (defaultValue = props[propValue], null != defaultValue))
                switch (propValue) {
                  case "value":
                    hasSrc = defaultValue;
                    break;
                  case "defaultValue":
                    hasSrcSet = defaultValue;
                    break;
                  case "children":
                    propKey = defaultValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    if (null != defaultValue) throw Error(formatProdErrorMessage(91));
                    break;
                  default:
                    setProp(domElement, tag, propValue, defaultValue, props, null);
                }
            initTextarea(domElement, hasSrc, hasSrcSet, propKey);
            track(domElement);
            return;
          case "option":
            for (checked in props)
              if (props.hasOwnProperty(checked) && (hasSrc = props[checked], null != hasSrc))
                switch (checked) {
                  case "selected":
                    domElement.selected = hasSrc && "function" !== typeof hasSrc && "symbol" !== typeof hasSrc;
                    break;
                  default:
                    setProp(domElement, tag, checked, hasSrc, props, null);
                }
            return;
          case "dialog":
            listenToNonDelegatedEvent("beforetoggle", domElement);
            listenToNonDelegatedEvent("toggle", domElement);
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
              listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
            break;
          case "image":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "embed":
          case "source":
          case "link":
            listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
          case "area":
          case "base":
          case "br":
          case "col":
          case "hr":
          case "keygen":
          case "meta":
          case "param":
          case "track":
          case "wbr":
          case "menuitem":
            for (defaultChecked in props)
              if (props.hasOwnProperty(defaultChecked) && (hasSrc = props[defaultChecked], null != hasSrc))
                switch (defaultChecked) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(formatProdErrorMessage(137, tag));
                  default:
                    setProp(domElement, tag, defaultChecked, hasSrc, props, null);
                }
            return;
          default:
            if (isCustomElement(tag)) {
              for (propValue$188 in props)
                props.hasOwnProperty(propValue$188) && (hasSrc = props[propValue$188], void 0 !== hasSrc && setPropOnCustomElement(
                  domElement,
                  tag,
                  propValue$188,
                  hasSrc,
                  props,
                  void 0
                ));
              return;
            }
        }
        for (defaultValue in props)
          props.hasOwnProperty(defaultValue) && (hasSrc = props[defaultValue], null != hasSrc && setProp(domElement, tag, defaultValue, hasSrc, props, null));
      }
      function updateProperties(domElement, tag, lastProps, nextProps) {
        switch (tag) {
          case "div":
          case "span":
          case "svg":
          case "path":
          case "a":
          case "g":
          case "p":
          case "li":
            break;
          case "input":
            var name = null, type = null, value = null, defaultValue = null, lastDefaultValue = null, checked = null, defaultChecked = null;
            for (propKey in lastProps) {
              var lastProp = lastProps[propKey];
              if (lastProps.hasOwnProperty(propKey) && null != lastProp)
                switch (propKey) {
                  case "checked":
                    break;
                  case "value":
                    break;
                  case "defaultValue":
                    lastDefaultValue = lastProp;
                  default:
                    nextProps.hasOwnProperty(propKey) || setProp(domElement, tag, propKey, null, nextProps, lastProp);
                }
            }
            for (var propKey$205 in nextProps) {
              var propKey = nextProps[propKey$205];
              lastProp = lastProps[propKey$205];
              if (nextProps.hasOwnProperty(propKey$205) && (null != propKey || null != lastProp))
                switch (propKey$205) {
                  case "type":
                    type = propKey;
                    break;
                  case "name":
                    name = propKey;
                    break;
                  case "checked":
                    checked = propKey;
                    break;
                  case "defaultChecked":
                    defaultChecked = propKey;
                    break;
                  case "value":
                    value = propKey;
                    break;
                  case "defaultValue":
                    defaultValue = propKey;
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    if (null != propKey)
                      throw Error(formatProdErrorMessage(137, tag));
                    break;
                  default:
                    propKey !== lastProp && setProp(
                      domElement,
                      tag,
                      propKey$205,
                      propKey,
                      nextProps,
                      lastProp
                    );
                }
            }
            updateInput(
              domElement,
              value,
              defaultValue,
              lastDefaultValue,
              checked,
              defaultChecked,
              type,
              name
            );
            return;
          case "select":
            propKey = value = defaultValue = propKey$205 = null;
            for (type in lastProps)
              if (lastDefaultValue = lastProps[type], lastProps.hasOwnProperty(type) && null != lastDefaultValue)
                switch (type) {
                  case "value":
                    break;
                  case "multiple":
                    propKey = lastDefaultValue;
                  default:
                    nextProps.hasOwnProperty(type) || setProp(
                      domElement,
                      tag,
                      type,
                      null,
                      nextProps,
                      lastDefaultValue
                    );
                }
            for (name in nextProps)
              if (type = nextProps[name], lastDefaultValue = lastProps[name], nextProps.hasOwnProperty(name) && (null != type || null != lastDefaultValue))
                switch (name) {
                  case "value":
                    propKey$205 = type;
                    break;
                  case "defaultValue":
                    defaultValue = type;
                    break;
                  case "multiple":
                    value = type;
                  default:
                    type !== lastDefaultValue && setProp(
                      domElement,
                      tag,
                      name,
                      type,
                      nextProps,
                      lastDefaultValue
                    );
                }
            tag = defaultValue;
            lastProps = value;
            nextProps = propKey;
            null != propKey$205 ? updateOptions(domElement, !!lastProps, propKey$205, false) : !!nextProps !== !!lastProps && (null != tag ? updateOptions(domElement, !!lastProps, tag, true) : updateOptions(domElement, !!lastProps, lastProps ? [] : "", false));
            return;
          case "textarea":
            propKey = propKey$205 = null;
            for (defaultValue in lastProps)
              if (name = lastProps[defaultValue], lastProps.hasOwnProperty(defaultValue) && null != name && !nextProps.hasOwnProperty(defaultValue))
                switch (defaultValue) {
                  case "value":
                    break;
                  case "children":
                    break;
                  default:
                    setProp(domElement, tag, defaultValue, null, nextProps, name);
                }
            for (value in nextProps)
              if (name = nextProps[value], type = lastProps[value], nextProps.hasOwnProperty(value) && (null != name || null != type))
                switch (value) {
                  case "value":
                    propKey$205 = name;
                    break;
                  case "defaultValue":
                    propKey = name;
                    break;
                  case "children":
                    break;
                  case "dangerouslySetInnerHTML":
                    if (null != name) throw Error(formatProdErrorMessage(91));
                    break;
                  default:
                    name !== type && setProp(domElement, tag, value, name, nextProps, type);
                }
            updateTextarea(domElement, propKey$205, propKey);
            return;
          case "option":
            for (var propKey$221 in lastProps)
              if (propKey$205 = lastProps[propKey$221], lastProps.hasOwnProperty(propKey$221) && null != propKey$205 && !nextProps.hasOwnProperty(propKey$221))
                switch (propKey$221) {
                  case "selected":
                    domElement.selected = false;
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      propKey$221,
                      null,
                      nextProps,
                      propKey$205
                    );
                }
            for (lastDefaultValue in nextProps)
              if (propKey$205 = nextProps[lastDefaultValue], propKey = lastProps[lastDefaultValue], nextProps.hasOwnProperty(lastDefaultValue) && propKey$205 !== propKey && (null != propKey$205 || null != propKey))
                switch (lastDefaultValue) {
                  case "selected":
                    domElement.selected = propKey$205 && "function" !== typeof propKey$205 && "symbol" !== typeof propKey$205;
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      lastDefaultValue,
                      propKey$205,
                      nextProps,
                      propKey
                    );
                }
            return;
          case "img":
          case "link":
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "keygen":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
          case "menuitem":
            for (var propKey$226 in lastProps)
              propKey$205 = lastProps[propKey$226], lastProps.hasOwnProperty(propKey$226) && null != propKey$205 && !nextProps.hasOwnProperty(propKey$226) && setProp(domElement, tag, propKey$226, null, nextProps, propKey$205);
            for (checked in nextProps)
              if (propKey$205 = nextProps[checked], propKey = lastProps[checked], nextProps.hasOwnProperty(checked) && propKey$205 !== propKey && (null != propKey$205 || null != propKey))
                switch (checked) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    if (null != propKey$205)
                      throw Error(formatProdErrorMessage(137, tag));
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      checked,
                      propKey$205,
                      nextProps,
                      propKey
                    );
                }
            return;
          default:
            if (isCustomElement(tag)) {
              for (var propKey$231 in lastProps)
                propKey$205 = lastProps[propKey$231], lastProps.hasOwnProperty(propKey$231) && void 0 !== propKey$205 && !nextProps.hasOwnProperty(propKey$231) && setPropOnCustomElement(
                  domElement,
                  tag,
                  propKey$231,
                  void 0,
                  nextProps,
                  propKey$205
                );
              for (defaultChecked in nextProps)
                propKey$205 = nextProps[defaultChecked], propKey = lastProps[defaultChecked], !nextProps.hasOwnProperty(defaultChecked) || propKey$205 === propKey || void 0 === propKey$205 && void 0 === propKey || setPropOnCustomElement(
                  domElement,
                  tag,
                  defaultChecked,
                  propKey$205,
                  nextProps,
                  propKey
                );
              return;
            }
        }
        for (var propKey$236 in lastProps)
          propKey$205 = lastProps[propKey$236], lastProps.hasOwnProperty(propKey$236) && null != propKey$205 && !nextProps.hasOwnProperty(propKey$236) && setProp(domElement, tag, propKey$236, null, nextProps, propKey$205);
        for (lastProp in nextProps)
          propKey$205 = nextProps[lastProp], propKey = lastProps[lastProp], !nextProps.hasOwnProperty(lastProp) || propKey$205 === propKey || null == propKey$205 && null == propKey || setProp(domElement, tag, lastProp, propKey$205, nextProps, propKey);
      }
      var eventsEnabled = null, selectionInformation = null;
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function getOwnHostContext(namespaceURI) {
        switch (namespaceURI) {
          case "http://www.w3.org/2000/svg":
            return 1;
          case "http://www.w3.org/1998/Math/MathML":
            return 2;
          default:
            return 0;
        }
      }
      function getChildHostContextProd(parentNamespace, type) {
        if (0 === parentNamespace)
          switch (type) {
            case "svg":
              return 1;
            case "math":
              return 2;
            default:
              return 0;
          }
        return 1 === parentNamespace && "foreignObject" === type ? 0 : parentNamespace;
      }
      function shouldSetTextContent(type, props) {
        return "textarea" === type || "noscript" === type || "string" === typeof props.children || "number" === typeof props.children || "bigint" === typeof props.children || "object" === typeof props.dangerouslySetInnerHTML && null !== props.dangerouslySetInnerHTML && null != props.dangerouslySetInnerHTML.__html;
      }
      var currentPopstateTransitionEvent = null;
      function shouldAttemptEagerTransition() {
        var event = window.event;
        if (event && "popstate" === event.type) {
          if (event === currentPopstateTransitionEvent) return false;
          currentPopstateTransitionEvent = event;
          return true;
        }
        currentPopstateTransitionEvent = null;
        return false;
      }
      var scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0, cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0, localPromise = "function" === typeof Promise ? Promise : void 0, scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof localPromise ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error) {
        setTimeout(function() {
          throw error;
        });
      }
      function isSingletonScope(type) {
        return "head" === type;
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance, possiblePreambleContribution = 0, depth = 0;
        do {
          var nextNode = node.nextSibling;
          parentInstance.removeChild(node);
          if (nextNode && 8 === nextNode.nodeType)
            if (node = nextNode.data, "/$" === node) {
              if (0 < possiblePreambleContribution && 8 > possiblePreambleContribution) {
                node = possiblePreambleContribution;
                var ownerDocument = parentInstance.ownerDocument;
                node & 1 && releaseSingletonInstance(ownerDocument.documentElement);
                node & 2 && releaseSingletonInstance(ownerDocument.body);
                if (node & 4)
                  for (node = ownerDocument.head, releaseSingletonInstance(node), ownerDocument = node.firstChild; ownerDocument; ) {
                    var nextNode$jscomp$0 = ownerDocument.nextSibling, nodeName = ownerDocument.nodeName;
                    ownerDocument[internalHoistableMarker] || "SCRIPT" === nodeName || "STYLE" === nodeName || "LINK" === nodeName && "stylesheet" === ownerDocument.rel.toLowerCase() || node.removeChild(ownerDocument);
                    ownerDocument = nextNode$jscomp$0;
                  }
              }
              if (0 === depth) {
                parentInstance.removeChild(nextNode);
                retryIfBlockedOn(suspenseInstance);
                return;
              }
              depth--;
            } else
              "$" === node || "$?" === node || "$!" === node ? depth++ : possiblePreambleContribution = node.charCodeAt(0) - 48;
          else possiblePreambleContribution = 0;
          node = nextNode;
        } while (node);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearContainerSparingly(container) {
        var nextNode = container.firstChild;
        nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
        for (; nextNode; ) {
          var node = nextNode;
          nextNode = nextNode.nextSibling;
          switch (node.nodeName) {
            case "HTML":
            case "HEAD":
            case "BODY":
              clearContainerSparingly(node);
              detachDeletedInstance(node);
              continue;
            case "SCRIPT":
            case "STYLE":
              continue;
            case "LINK":
              if ("stylesheet" === node.rel.toLowerCase()) continue;
          }
          container.removeChild(node);
        }
      }
      function canHydrateInstance(instance, type, props, inRootOrSingleton) {
        for (; 1 === instance.nodeType; ) {
          var anyProps = props;
          if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
            if (!inRootOrSingleton && ("INPUT" !== instance.nodeName || "hidden" !== instance.type))
              break;
          } else if (!inRootOrSingleton)
            if ("input" === type && "hidden" === instance.type) {
              var name = null == anyProps.name ? null : "" + anyProps.name;
              if ("hidden" === anyProps.type && instance.getAttribute("name") === name)
                return instance;
            } else return instance;
          else if (!instance[internalHoistableMarker])
            switch (type) {
              case "meta":
                if (!instance.hasAttribute("itemprop")) break;
                return instance;
              case "link":
                name = instance.getAttribute("rel");
                if ("stylesheet" === name && instance.hasAttribute("data-precedence"))
                  break;
                else if (name !== anyProps.rel || instance.getAttribute("href") !== (null == anyProps.href || "" === anyProps.href ? null : anyProps.href) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) || instance.getAttribute("title") !== (null == anyProps.title ? null : anyProps.title))
                  break;
                return instance;
              case "style":
                if (instance.hasAttribute("data-precedence")) break;
                return instance;
              case "script":
                name = instance.getAttribute("src");
                if ((name !== (null == anyProps.src ? null : anyProps.src) || instance.getAttribute("type") !== (null == anyProps.type ? null : anyProps.type) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) && name && instance.hasAttribute("async") && !instance.hasAttribute("itemprop"))
                  break;
                return instance;
              default:
                return instance;
            }
          instance = getNextHydratable(instance.nextSibling);
          if (null === instance) break;
        }
        return null;
      }
      function canHydrateTextInstance(instance, text2, inRootOrSingleton) {
        if ("" === text2) return null;
        for (; 3 !== instance.nodeType; ) {
          if ((1 !== instance.nodeType || "INPUT" !== instance.nodeName || "hidden" !== instance.type) && !inRootOrSingleton)
            return null;
          instance = getNextHydratable(instance.nextSibling);
          if (null === instance) return null;
        }
        return instance;
      }
      function isSuspenseInstanceFallback(instance) {
        return "$!" === instance.data || "$?" === instance.data && "complete" === instance.ownerDocument.readyState;
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        var ownerDocument = instance.ownerDocument;
        if ("$?" !== instance.data || "complete" === ownerDocument.readyState)
          callback();
        else {
          var listener = function() {
            callback();
            ownerDocument.removeEventListener("DOMContentLoaded", listener);
          };
          ownerDocument.addEventListener("DOMContentLoaded", listener);
          instance._reactRetry = listener;
        }
      }
      function getNextHydratable(node) {
        for (; null != node; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (1 === nodeType || 3 === nodeType) break;
          if (8 === nodeType) {
            nodeType = node.data;
            if ("$" === nodeType || "$!" === nodeType || "$?" === nodeType || "F!" === nodeType || "F" === nodeType)
              break;
            if ("/$" === nodeType) return null;
          }
        }
        return node;
      }
      var previousHydratableOnEnteringScopedSingleton = null;
      function getParentSuspenseInstance(targetInstance) {
        targetInstance = targetInstance.previousSibling;
        for (var depth = 0; targetInstance; ) {
          if (8 === targetInstance.nodeType) {
            var data = targetInstance.data;
            if ("$" === data || "$!" === data || "$?" === data) {
              if (0 === depth) return targetInstance;
              depth--;
            } else "/$" === data && depth++;
          }
          targetInstance = targetInstance.previousSibling;
        }
        return null;
      }
      function resolveSingletonInstance(type, props, rootContainerInstance) {
        props = getOwnerDocumentFromRootContainer(rootContainerInstance);
        switch (type) {
          case "html":
            type = props.documentElement;
            if (!type) throw Error(formatProdErrorMessage(452));
            return type;
          case "head":
            type = props.head;
            if (!type) throw Error(formatProdErrorMessage(453));
            return type;
          case "body":
            type = props.body;
            if (!type) throw Error(formatProdErrorMessage(454));
            return type;
          default:
            throw Error(formatProdErrorMessage(451));
        }
      }
      function releaseSingletonInstance(instance) {
        for (var attributes = instance.attributes; attributes.length; )
          instance.removeAttributeNode(attributes[0]);
        detachDeletedInstance(instance);
      }
      var preloadPropsMap = /* @__PURE__ */ new Map(), preconnectsSet = /* @__PURE__ */ new Set();
      function getHoistableRoot(container) {
        return "function" === typeof container.getRootNode ? container.getRootNode() : 9 === container.nodeType ? container : container.ownerDocument;
      }
      var previousDispatcher = ReactDOMSharedInternals.d;
      ReactDOMSharedInternals.d = {
        f: flushSyncWork,
        r: requestFormReset,
        D: prefetchDNS,
        C: preconnect,
        L: preload,
        m: preloadModule,
        X: preinitScript,
        S: preinitStyle,
        M: preinitModuleScript
      };
      function flushSyncWork() {
        var previousWasRendering = previousDispatcher.f(), wasRendering = flushSyncWork$1();
        return previousWasRendering || wasRendering;
      }
      function requestFormReset(form) {
        var formInst = getInstanceFromNode(form);
        null !== formInst && 5 === formInst.tag && "form" === formInst.type ? requestFormReset$1(formInst) : previousDispatcher.r(form);
      }
      var globalDocument = "undefined" === typeof document ? null : document;
      function preconnectAs(rel, href, crossOrigin) {
        var ownerDocument = globalDocument;
        if (ownerDocument && "string" === typeof href && href) {
          var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
          limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
          "string" === typeof crossOrigin && (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
          preconnectsSet.has(limitedEscapedHref) || (preconnectsSet.add(limitedEscapedHref), rel = { rel, crossOrigin, href }, null === ownerDocument.querySelector(limitedEscapedHref) && (href = ownerDocument.createElement("link"), setInitialProperties(href, "link", rel), markNodeAsHoistable(href), ownerDocument.head.appendChild(href)));
        }
      }
      function prefetchDNS(href) {
        previousDispatcher.D(href);
        preconnectAs("dns-prefetch", href, null);
      }
      function preconnect(href, crossOrigin) {
        previousDispatcher.C(href, crossOrigin);
        preconnectAs("preconnect", href, crossOrigin);
      }
      function preload(href, as2, options3) {
        previousDispatcher.L(href, as2, options3);
        var ownerDocument = globalDocument;
        if (ownerDocument && href && as2) {
          var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as2) + '"]';
          "image" === as2 ? options3 && options3.imageSrcSet ? (preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(
            options3.imageSrcSet
          ) + '"]', "string" === typeof options3.imageSizes && (preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(
            options3.imageSizes
          ) + '"]')) : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]' : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
          var key = preloadSelector;
          switch (as2) {
            case "style":
              key = getStyleKey(href);
              break;
            case "script":
              key = getScriptKey(href);
          }
          preloadPropsMap.has(key) || (href = assign2(
            {
              rel: "preload",
              href: "image" === as2 && options3 && options3.imageSrcSet ? void 0 : href,
              as: as2
            },
            options3
          ), preloadPropsMap.set(key, href), null !== ownerDocument.querySelector(preloadSelector) || "style" === as2 && ownerDocument.querySelector(getStylesheetSelectorFromKey(key)) || "script" === as2 && ownerDocument.querySelector(getScriptSelectorFromKey(key)) || (as2 = ownerDocument.createElement("link"), setInitialProperties(as2, "link", href), markNodeAsHoistable(as2), ownerDocument.head.appendChild(as2)));
        }
      }
      function preloadModule(href, options3) {
        previousDispatcher.m(href, options3);
        var ownerDocument = globalDocument;
        if (ownerDocument && href) {
          var as2 = options3 && "string" === typeof options3.as ? options3.as : "script", preloadSelector = 'link[rel="modulepreload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as2) + '"][href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]', key = preloadSelector;
          switch (as2) {
            case "audioworklet":
            case "paintworklet":
            case "serviceworker":
            case "sharedworker":
            case "worker":
            case "script":
              key = getScriptKey(href);
          }
          if (!preloadPropsMap.has(key) && (href = assign2({ rel: "modulepreload", href }, options3), preloadPropsMap.set(key, href), null === ownerDocument.querySelector(preloadSelector))) {
            switch (as2) {
              case "audioworklet":
              case "paintworklet":
              case "serviceworker":
              case "sharedworker":
              case "worker":
              case "script":
                if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
                  return;
            }
            as2 = ownerDocument.createElement("link");
            setInitialProperties(as2, "link", href);
            markNodeAsHoistable(as2);
            ownerDocument.head.appendChild(as2);
          }
        }
      }
      function preinitStyle(href, precedence, options3) {
        previousDispatcher.S(href, precedence, options3);
        var ownerDocument = globalDocument;
        if (ownerDocument && href) {
          var styles = getResourcesFromRoot(ownerDocument).hoistableStyles, key = getStyleKey(href);
          precedence = precedence || "default";
          var resource = styles.get(key);
          if (!resource) {
            var state = { loading: 0, preload: null };
            if (resource = ownerDocument.querySelector(
              getStylesheetSelectorFromKey(key)
            ))
              state.loading = 5;
            else {
              href = assign2(
                { rel: "stylesheet", href, "data-precedence": precedence },
                options3
              );
              (options3 = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(href, options3);
              var link = resource = ownerDocument.createElement("link");
              markNodeAsHoistable(link);
              setInitialProperties(link, "link", href);
              link._p = new Promise(function(resolve, reject) {
                link.onload = resolve;
                link.onerror = reject;
              });
              link.addEventListener("load", function() {
                state.loading |= 1;
              });
              link.addEventListener("error", function() {
                state.loading |= 2;
              });
              state.loading |= 4;
              insertStylesheet(resource, precedence, ownerDocument);
            }
            resource = {
              type: "stylesheet",
              instance: resource,
              count: 1,
              state
            };
            styles.set(key, resource);
          }
        }
      }
      function preinitScript(src, options3) {
        previousDispatcher.X(src, options3);
        var ownerDocument = globalDocument;
        if (ownerDocument && src) {
          var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
          resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign2({ src, async: true }, options3), (options3 = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options3), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
            type: "script",
            instance: resource,
            count: 1,
            state: null
          }, scripts.set(key, resource));
        }
      }
      function preinitModuleScript(src, options3) {
        previousDispatcher.M(src, options3);
        var ownerDocument = globalDocument;
        if (ownerDocument && src) {
          var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
          resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign2({ src, async: true, type: "module" }, options3), (options3 = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options3), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
            type: "script",
            instance: resource,
            count: 1,
            state: null
          }, scripts.set(key, resource));
        }
      }
      function getResource(type, currentProps, pendingProps, currentResource) {
        var JSCompiler_inline_result = (JSCompiler_inline_result = rootInstanceStackCursor.current) ? getHoistableRoot(JSCompiler_inline_result) : null;
        if (!JSCompiler_inline_result) throw Error(formatProdErrorMessage(446));
        switch (type) {
          case "meta":
          case "title":
            return null;
          case "style":
            return "string" === typeof pendingProps.precedence && "string" === typeof pendingProps.href ? (currentProps = getStyleKey(pendingProps.href), pendingProps = getResourcesFromRoot(
              JSCompiler_inline_result
            ).hoistableStyles, currentResource = pendingProps.get(currentProps), currentResource || (currentResource = {
              type: "style",
              instance: null,
              count: 0,
              state: null
            }, pendingProps.set(currentProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
          case "link":
            if ("stylesheet" === pendingProps.rel && "string" === typeof pendingProps.href && "string" === typeof pendingProps.precedence) {
              type = getStyleKey(pendingProps.href);
              var styles$244 = getResourcesFromRoot(
                JSCompiler_inline_result
              ).hoistableStyles, resource$245 = styles$244.get(type);
              resource$245 || (JSCompiler_inline_result = JSCompiler_inline_result.ownerDocument || JSCompiler_inline_result, resource$245 = {
                type: "stylesheet",
                instance: null,
                count: 0,
                state: { loading: 0, preload: null }
              }, styles$244.set(type, resource$245), (styles$244 = JSCompiler_inline_result.querySelector(
                getStylesheetSelectorFromKey(type)
              )) && !styles$244._p && (resource$245.instance = styles$244, resource$245.state.loading = 5), preloadPropsMap.has(type) || (pendingProps = {
                rel: "preload",
                as: "style",
                href: pendingProps.href,
                crossOrigin: pendingProps.crossOrigin,
                integrity: pendingProps.integrity,
                media: pendingProps.media,
                hrefLang: pendingProps.hrefLang,
                referrerPolicy: pendingProps.referrerPolicy
              }, preloadPropsMap.set(type, pendingProps), styles$244 || preloadStylesheet(
                JSCompiler_inline_result,
                type,
                pendingProps,
                resource$245.state
              )));
              if (currentProps && null === currentResource)
                throw Error(formatProdErrorMessage(528, ""));
              return resource$245;
            }
            if (currentProps && null !== currentResource)
              throw Error(formatProdErrorMessage(529, ""));
            return null;
          case "script":
            return currentProps = pendingProps.async, pendingProps = pendingProps.src, "string" === typeof pendingProps && currentProps && "function" !== typeof currentProps && "symbol" !== typeof currentProps ? (currentProps = getScriptKey(pendingProps), pendingProps = getResourcesFromRoot(
              JSCompiler_inline_result
            ).hoistableScripts, currentResource = pendingProps.get(currentProps), currentResource || (currentResource = {
              type: "script",
              instance: null,
              count: 0,
              state: null
            }, pendingProps.set(currentProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
          default:
            throw Error(formatProdErrorMessage(444, type));
        }
      }
      function getStyleKey(href) {
        return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
      }
      function getStylesheetSelectorFromKey(key) {
        return 'link[rel="stylesheet"][' + key + "]";
      }
      function stylesheetPropsFromRawProps(rawProps) {
        return assign2({}, rawProps, {
          "data-precedence": rawProps.precedence,
          precedence: null
        });
      }
      function preloadStylesheet(ownerDocument, key, preloadProps, state) {
        ownerDocument.querySelector('link[rel="preload"][as="style"][' + key + "]") ? state.loading = 1 : (key = ownerDocument.createElement("link"), state.preload = key, key.addEventListener("load", function() {
          return state.loading |= 1;
        }), key.addEventListener("error", function() {
          return state.loading |= 2;
        }), setInitialProperties(key, "link", preloadProps), markNodeAsHoistable(key), ownerDocument.head.appendChild(key));
      }
      function getScriptKey(src) {
        return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
      }
      function getScriptSelectorFromKey(key) {
        return "script[async]" + key;
      }
      function acquireResource(hoistableRoot, resource, props) {
        resource.count++;
        if (null === resource.instance)
          switch (resource.type) {
            case "style":
              var instance = hoistableRoot.querySelector(
                'style[data-href~="' + escapeSelectorAttributeValueInsideDoubleQuotes(props.href) + '"]'
              );
              if (instance)
                return resource.instance = instance, markNodeAsHoistable(instance), instance;
              var styleProps = assign2({}, props, {
                "data-href": props.href,
                "data-precedence": props.precedence,
                href: null,
                precedence: null
              });
              instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement(
                "style"
              );
              markNodeAsHoistable(instance);
              setInitialProperties(instance, "style", styleProps);
              insertStylesheet(instance, props.precedence, hoistableRoot);
              return resource.instance = instance;
            case "stylesheet":
              styleProps = getStyleKey(props.href);
              var instance$250 = hoistableRoot.querySelector(
                getStylesheetSelectorFromKey(styleProps)
              );
              if (instance$250)
                return resource.state.loading |= 4, resource.instance = instance$250, markNodeAsHoistable(instance$250), instance$250;
              instance = stylesheetPropsFromRawProps(props);
              (styleProps = preloadPropsMap.get(styleProps)) && adoptPreloadPropsForStylesheet(instance, styleProps);
              instance$250 = (hoistableRoot.ownerDocument || hoistableRoot).createElement("link");
              markNodeAsHoistable(instance$250);
              var linkInstance = instance$250;
              linkInstance._p = new Promise(function(resolve, reject) {
                linkInstance.onload = resolve;
                linkInstance.onerror = reject;
              });
              setInitialProperties(instance$250, "link", instance);
              resource.state.loading |= 4;
              insertStylesheet(instance$250, props.precedence, hoistableRoot);
              return resource.instance = instance$250;
            case "script":
              instance$250 = getScriptKey(props.src);
              if (styleProps = hoistableRoot.querySelector(
                getScriptSelectorFromKey(instance$250)
              ))
                return resource.instance = styleProps, markNodeAsHoistable(styleProps), styleProps;
              instance = props;
              if (styleProps = preloadPropsMap.get(instance$250))
                instance = assign2({}, props), adoptPreloadPropsForScript(instance, styleProps);
              hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
              styleProps = hoistableRoot.createElement("script");
              markNodeAsHoistable(styleProps);
              setInitialProperties(styleProps, "link", instance);
              hoistableRoot.head.appendChild(styleProps);
              return resource.instance = styleProps;
            case "void":
              return null;
            default:
              throw Error(formatProdErrorMessage(443, resource.type));
          }
        else
          "stylesheet" === resource.type && 0 === (resource.state.loading & 4) && (instance = resource.instance, resource.state.loading |= 4, insertStylesheet(instance, props.precedence, hoistableRoot));
        return resource.instance;
      }
      function insertStylesheet(instance, precedence, root2) {
        for (var nodes = root2.querySelectorAll(
          'link[rel="stylesheet"][data-precedence],style[data-precedence]'
        ), last2 = nodes.length ? nodes[nodes.length - 1] : null, prior = last2, i2 = 0; i2 < nodes.length; i2++) {
          var node = nodes[i2];
          if (node.dataset.precedence === precedence) prior = node;
          else if (prior !== last2) break;
        }
        prior ? prior.parentNode.insertBefore(instance, prior.nextSibling) : (precedence = 9 === root2.nodeType ? root2.head : root2, precedence.insertBefore(instance, precedence.firstChild));
      }
      function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
        null == stylesheetProps.crossOrigin && (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
        null == stylesheetProps.referrerPolicy && (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
        null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
      }
      function adoptPreloadPropsForScript(scriptProps, preloadProps) {
        null == scriptProps.crossOrigin && (scriptProps.crossOrigin = preloadProps.crossOrigin);
        null == scriptProps.referrerPolicy && (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
        null == scriptProps.integrity && (scriptProps.integrity = preloadProps.integrity);
      }
      var tagCaches = null;
      function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
        if (null === tagCaches) {
          var cache = /* @__PURE__ */ new Map();
          var caches = tagCaches = /* @__PURE__ */ new Map();
          caches.set(ownerDocument, cache);
        } else
          caches = tagCaches, cache = caches.get(ownerDocument), cache || (cache = /* @__PURE__ */ new Map(), caches.set(ownerDocument, cache));
        if (cache.has(type)) return cache;
        cache.set(type, null);
        ownerDocument = ownerDocument.getElementsByTagName(type);
        for (caches = 0; caches < ownerDocument.length; caches++) {
          var node = ownerDocument[caches];
          if (!(node[internalHoistableMarker] || node[internalInstanceKey] || "link" === type && "stylesheet" === node.getAttribute("rel")) && "http://www.w3.org/2000/svg" !== node.namespaceURI) {
            var nodeKey = node.getAttribute(keyAttribute) || "";
            nodeKey = type + nodeKey;
            var existing = cache.get(nodeKey);
            existing ? existing.push(node) : cache.set(nodeKey, [node]);
          }
        }
        return cache;
      }
      function mountHoistable(hoistableRoot, type, instance) {
        hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
        hoistableRoot.head.insertBefore(
          instance,
          "title" === type ? hoistableRoot.querySelector("head > title") : null
        );
      }
      function isHostHoistableType(type, props, hostContext) {
        if (1 === hostContext || null != props.itemProp) return false;
        switch (type) {
          case "meta":
          case "title":
            return true;
          case "style":
            if ("string" !== typeof props.precedence || "string" !== typeof props.href || "" === props.href)
              break;
            return true;
          case "link":
            if ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href || props.onLoad || props.onError)
              break;
            switch (props.rel) {
              case "stylesheet":
                return type = props.disabled, "string" === typeof props.precedence && null == type;
              default:
                return true;
            }
          case "script":
            if (props.async && "function" !== typeof props.async && "symbol" !== typeof props.async && !props.onLoad && !props.onError && props.src && "string" === typeof props.src)
              return true;
        }
        return false;
      }
      function preloadResource(resource) {
        return "stylesheet" === resource.type && 0 === (resource.state.loading & 3) ? false : true;
      }
      var suspendedState = null;
      function noop2() {
      }
      function suspendResource(hoistableRoot, resource, props) {
        if (null === suspendedState) throw Error(formatProdErrorMessage(475));
        var state = suspendedState;
        if ("stylesheet" === resource.type && ("string" !== typeof props.media || false !== matchMedia(props.media).matches) && 0 === (resource.state.loading & 4)) {
          if (null === resource.instance) {
            var key = getStyleKey(props.href), instance = hoistableRoot.querySelector(
              getStylesheetSelectorFromKey(key)
            );
            if (instance) {
              hoistableRoot = instance._p;
              null !== hoistableRoot && "object" === typeof hoistableRoot && "function" === typeof hoistableRoot.then && (state.count++, state = onUnsuspend.bind(state), hoistableRoot.then(state, state));
              resource.state.loading |= 4;
              resource.instance = instance;
              markNodeAsHoistable(instance);
              return;
            }
            instance = hoistableRoot.ownerDocument || hoistableRoot;
            props = stylesheetPropsFromRawProps(props);
            (key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props, key);
            instance = instance.createElement("link");
            markNodeAsHoistable(instance);
            var linkInstance = instance;
            linkInstance._p = new Promise(function(resolve, reject) {
              linkInstance.onload = resolve;
              linkInstance.onerror = reject;
            });
            setInitialProperties(instance, "link", props);
            resource.instance = instance;
          }
          null === state.stylesheets && (state.stylesheets = /* @__PURE__ */ new Map());
          state.stylesheets.set(resource, hoistableRoot);
          (hoistableRoot = resource.state.preload) && 0 === (resource.state.loading & 3) && (state.count++, resource = onUnsuspend.bind(state), hoistableRoot.addEventListener("load", resource), hoistableRoot.addEventListener("error", resource));
        }
      }
      function waitForCommitToBeReady() {
        if (null === suspendedState) throw Error(formatProdErrorMessage(475));
        var state = suspendedState;
        state.stylesheets && 0 === state.count && insertSuspendedStylesheets(state, state.stylesheets);
        return 0 < state.count ? function(commit) {
          var stylesheetTimer = setTimeout(function() {
            state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets);
            if (state.unsuspend) {
              var unsuspend = state.unsuspend;
              state.unsuspend = null;
              unsuspend();
            }
          }, 6e4);
          state.unsuspend = commit;
          return function() {
            state.unsuspend = null;
            clearTimeout(stylesheetTimer);
          };
        } : null;
      }
      function onUnsuspend() {
        this.count--;
        if (0 === this.count) {
          if (this.stylesheets) insertSuspendedStylesheets(this, this.stylesheets);
          else if (this.unsuspend) {
            var unsuspend = this.unsuspend;
            this.unsuspend = null;
            unsuspend();
          }
        }
      }
      var precedencesByRoot = null;
      function insertSuspendedStylesheets(state, resources) {
        state.stylesheets = null;
        null !== state.unsuspend && (state.count++, precedencesByRoot = /* @__PURE__ */ new Map(), resources.forEach(insertStylesheetIntoRoot, state), precedencesByRoot = null, onUnsuspend.call(state));
      }
      function insertStylesheetIntoRoot(root2, resource) {
        if (!(resource.state.loading & 4)) {
          var precedences = precedencesByRoot.get(root2);
          if (precedences) var last2 = precedences.get(null);
          else {
            precedences = /* @__PURE__ */ new Map();
            precedencesByRoot.set(root2, precedences);
            for (var nodes = root2.querySelectorAll(
              "link[data-precedence],style[data-precedence]"
            ), i2 = 0; i2 < nodes.length; i2++) {
              var node = nodes[i2];
              if ("LINK" === node.nodeName || "not all" !== node.getAttribute("media"))
                precedences.set(node.dataset.precedence, node), last2 = node;
            }
            last2 && precedences.set(null, last2);
          }
          nodes = resource.instance;
          node = nodes.getAttribute("data-precedence");
          i2 = precedences.get(node) || last2;
          i2 === last2 && precedences.set(null, nodes);
          precedences.set(node, nodes);
          this.count++;
          last2 = onUnsuspend.bind(this);
          nodes.addEventListener("load", last2);
          nodes.addEventListener("error", last2);
          i2 ? i2.parentNode.insertBefore(nodes, i2.nextSibling) : (root2 = 9 === root2.nodeType ? root2.head : root2, root2.insertBefore(nodes, root2.firstChild));
          resource.state.loading |= 4;
        }
      }
      var HostTransitionContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Provider: null,
        Consumer: null,
        _currentValue: sharedNotPendingObject,
        _currentValue2: sharedNotPendingObject,
        _threadCount: 0
      };
      function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
        this.tag = 1;
        this.containerInfo = containerInfo;
        this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = -1;
        this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
        this.callbackPriority = 0;
        this.expirationTimes = createLaneMap(-1);
        this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = createLaneMap(0);
        this.hiddenUpdates = createLaneMap(null);
        this.identifierPrefix = identifierPrefix;
        this.onUncaughtError = onUncaughtError;
        this.onCaughtError = onCaughtError;
        this.onRecoverableError = onRecoverableError;
        this.pooledCache = null;
        this.pooledCacheLanes = 0;
        this.formState = formState;
        this.incompleteTransitions = /* @__PURE__ */ new Map();
      }
      function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {
        containerInfo = new FiberRootNode(
          containerInfo,
          tag,
          hydrate,
          identifierPrefix,
          onUncaughtError,
          onCaughtError,
          onRecoverableError,
          formState
        );
        tag = 1;
        true === isStrictMode && (tag |= 24);
        isStrictMode = createFiberImplClass(3, null, null, tag);
        containerInfo.current = isStrictMode;
        isStrictMode.stateNode = containerInfo;
        tag = createCache();
        tag.refCount++;
        containerInfo.pooledCache = tag;
        tag.refCount++;
        isStrictMode.memoizedState = {
          element: initialChildren,
          isDehydrated: hydrate,
          cache: tag
        };
        initializeUpdateQueue(isStrictMode);
        return containerInfo;
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        parentComponent = emptyContextObject;
        return parentComponent;
      }
      function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
        parentComponent = getContextForSubtree(parentComponent);
        null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
        container = createUpdate(lane);
        container.payload = { element };
        callback = void 0 === callback ? null : callback;
        null !== callback && (container.callback = callback);
        element = enqueueUpdate(rootFiber, container, lane);
        null !== element && (scheduleUpdateOnFiber(element, rootFiber, lane), entangleTransitions(element, rootFiber, lane));
      }
      function markRetryLaneImpl(fiber, retryLane) {
        fiber = fiber.memoizedState;
        if (null !== fiber && null !== fiber.dehydrated) {
          var a2 = fiber.retryLane;
          fiber.retryLane = 0 !== a2 && a2 < retryLane ? a2 : retryLane;
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
      }
      function attemptContinuousHydration(fiber) {
        if (13 === fiber.tag) {
          var root2 = enqueueConcurrentRenderForLane(fiber, 67108864);
          null !== root2 && scheduleUpdateOnFiber(root2, fiber, 67108864);
          markRetryLaneIfNotHydrated(fiber, 67108864);
        }
      }
      var _enabled = true;
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var prevTransition = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          ReactDOMSharedInternals.p = 2, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var prevTransition = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          ReactDOMSharedInternals.p = 8, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (_enabled) {
          var blockedOn = findInstanceBlockingEvent(nativeEvent);
          if (null === blockedOn)
            dispatchEventForPluginEventSystem(
              domEventName,
              eventSystemFlags,
              nativeEvent,
              return_targetInst,
              targetContainer
            ), clearIfContinuousEvent(domEventName, nativeEvent);
          else if (queueIfContinuousEvent(
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          ))
            nativeEvent.stopPropagation();
          else if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
            for (; null !== blockedOn; ) {
              var fiber = getInstanceFromNode(blockedOn);
              if (null !== fiber)
                switch (fiber.tag) {
                  case 3:
                    fiber = fiber.stateNode;
                    if (fiber.current.memoizedState.isDehydrated) {
                      var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                      if (0 !== lanes) {
                        var root2 = fiber;
                        root2.pendingLanes |= 2;
                        for (root2.entangledLanes |= 2; lanes; ) {
                          var lane = 1 << 31 - clz32(lanes);
                          root2.entanglements[1] |= lane;
                          lanes &= ~lane;
                        }
                        ensureRootIsScheduled(fiber);
                        0 === (executionContext & 6) && (workInProgressRootRenderTargetTime = now2() + 500, flushSyncWorkAcrossRoots_impl(0));
                      }
                    }
                    break;
                  case 13:
                    root2 = enqueueConcurrentRenderForLane(fiber, 2), null !== root2 && scheduleUpdateOnFiber(root2, fiber, 2), flushSyncWork$1(), markRetryLaneIfNotHydrated(fiber, 2);
                }
              fiber = findInstanceBlockingEvent(nativeEvent);
              null === fiber && dispatchEventForPluginEventSystem(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                return_targetInst,
                targetContainer
              );
              if (fiber === blockedOn) break;
              blockedOn = fiber;
            }
            null !== blockedOn && nativeEvent.stopPropagation();
          } else
            dispatchEventForPluginEventSystem(
              domEventName,
              eventSystemFlags,
              nativeEvent,
              null,
              targetContainer
            );
        }
      }
      function findInstanceBlockingEvent(nativeEvent) {
        nativeEvent = getEventTarget(nativeEvent);
        return findInstanceBlockingTarget(nativeEvent);
      }
      var return_targetInst = null;
      function findInstanceBlockingTarget(targetNode) {
        return_targetInst = null;
        targetNode = getClosestInstanceFromNode(targetNode);
        if (null !== targetNode) {
          var nearestMounted = getNearestMountedFiber(targetNode);
          if (null === nearestMounted) targetNode = null;
          else {
            var tag = nearestMounted.tag;
            if (13 === tag) {
              targetNode = getSuspenseInstanceFromFiber(nearestMounted);
              if (null !== targetNode) return targetNode;
              targetNode = null;
            } else if (3 === tag) {
              if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
                return 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
              targetNode = null;
            } else nearestMounted !== targetNode && (targetNode = null);
          }
        }
        return_targetInst = targetNode;
        return null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "beforetoggle":
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "toggle":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return 2;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return 8;
          case "message":
            switch (getCurrentPriorityLevel()) {
              case ImmediatePriority:
                return 2;
              case UserBlockingPriority:
                return 8;
              case NormalPriority$1:
              case LowPriority:
                return 32;
              case IdlePriority:
                return 268435456;
              default:
                return 32;
            }
          default:
            return 32;
        }
      }
      var hasScheduledReplayAttempt = false, queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = /* @__PURE__ */ new Map(), queuedPointerCaptures = /* @__PURE__ */ new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
        " "
      );
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout":
            queuedPointers.delete(nativeEvent.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            queuedPointerCaptures.delete(nativeEvent.pointerId);
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (null === existingQueuedEvent || existingQueuedEvent.nativeEvent !== nativeEvent)
          return existingQueuedEvent = {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          }, null !== blockedOn && (blockedOn = getInstanceFromNode(blockedOn), null !== blockedOn && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        blockedOn = existingQueuedEvent.targetContainers;
        null !== targetContainer && -1 === blockedOn.indexOf(targetContainer) && blockedOn.push(targetContainer);
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin":
            return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedFocus,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ), true;
          case "dragenter":
            return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedDrag,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ), true;
          case "mouseover":
            return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedMouse,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ), true;
          case "pointerover":
            var pointerId = nativeEvent.pointerId;
            queuedPointers.set(
              pointerId,
              accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedPointers.get(pointerId) || null,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              )
            );
            return true;
          case "gotpointercapture":
            return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(
              pointerId,
              accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedPointerCaptures.get(pointerId) || null,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              )
            ), true;
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (null !== targetInst) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (null !== nearestMounted) {
            if (targetInst = nearestMounted.tag, 13 === targetInst) {
              if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), null !== targetInst) {
                queuedTarget.blockedOn = targetInst;
                runWithPriority(queuedTarget.priority, function() {
                  if (13 === nearestMounted.tag) {
                    var lane = requestUpdateLane();
                    lane = getBumpedLaneForHydrationByLane(lane);
                    var root2 = enqueueConcurrentRenderForLane(nearestMounted, lane);
                    null !== root2 && scheduleUpdateOnFiber(root2, nearestMounted, lane);
                    markRetryLaneIfNotHydrated(nearestMounted, lane);
                  }
                });
                return;
              }
            } else if (3 === targetInst && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
              queuedTarget.blockedOn = 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
              return;
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (null !== queuedEvent.blockedOn) return false;
        for (var targetContainers = queuedEvent.targetContainers; 0 < targetContainers.length; ) {
          var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
          if (null === nextBlockedOn) {
            nextBlockedOn = queuedEvent.nativeEvent;
            var nativeEventClone = new nextBlockedOn.constructor(
              nextBlockedOn.type,
              nextBlockedOn
            );
            currentReplayingEvent = nativeEventClone;
            nextBlockedOn.target.dispatchEvent(nativeEventClone);
            currentReplayingEvent = null;
          } else
            return targetContainers = getInstanceFromNode(nextBlockedOn), null !== targetContainers && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, false;
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
        attemptReplayContinuousQueuedEvent(queuedEvent) && map2.delete(key);
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        null !== queuedFocus && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
        null !== queuedDrag && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
        null !== queuedMouse && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = true, Scheduler.unstable_scheduleCallback(
          Scheduler.unstable_NormalPriority,
          replayUnblockedEvents
        )));
      }
      var lastScheduledReplayQueue = null;
      function scheduleReplayQueueIfNeeded(formReplayingQueue) {
        lastScheduledReplayQueue !== formReplayingQueue && (lastScheduledReplayQueue = formReplayingQueue, Scheduler.unstable_scheduleCallback(
          Scheduler.unstable_NormalPriority,
          function() {
            lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null);
            for (var i2 = 0; i2 < formReplayingQueue.length; i2 += 3) {
              var form = formReplayingQueue[i2], submitterOrAction = formReplayingQueue[i2 + 1], formData = formReplayingQueue[i2 + 2];
              if ("function" !== typeof submitterOrAction)
                if (null === findInstanceBlockingTarget(submitterOrAction || form))
                  continue;
                else break;
              var formInst = getInstanceFromNode(form);
              null !== formInst && (formReplayingQueue.splice(i2, 3), i2 -= 3, startHostTransition(
                formInst,
                {
                  pending: true,
                  data: formData,
                  method: form.method,
                  action: submitterOrAction
                },
                submitterOrAction,
                formData
              ));
            }
          }
        ));
      }
      function retryIfBlockedOn(unblocked) {
        function unblock(queuedEvent) {
          return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        }
        null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var i2 = 0; i2 < queuedExplicitHydrationTargets.length; i2++) {
          var queuedTarget = queuedExplicitHydrationTargets[i2];
          queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
        }
        for (; 0 < queuedExplicitHydrationTargets.length && (i2 = queuedExplicitHydrationTargets[0], null === i2.blockedOn); )
          attemptExplicitHydrationTarget(i2), null === i2.blockedOn && queuedExplicitHydrationTargets.shift();
        i2 = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
        if (null != i2)
          for (queuedTarget = 0; queuedTarget < i2.length; queuedTarget += 3) {
            var form = i2[queuedTarget], submitterOrAction = i2[queuedTarget + 1], formProps = form[internalPropsKey] || null;
            if ("function" === typeof submitterOrAction)
              formProps || scheduleReplayQueueIfNeeded(i2);
            else if (formProps) {
              var action = null;
              if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
                if (form = submitterOrAction, formProps = submitterOrAction[internalPropsKey] || null)
                  action = formProps.formAction;
                else {
                  if (null !== findInstanceBlockingTarget(form)) continue;
                }
              else action = formProps.action;
              "function" === typeof action ? i2[queuedTarget + 1] = action : (i2.splice(queuedTarget, 3), queuedTarget -= 3);
              scheduleReplayQueueIfNeeded(i2);
            }
          }
      }
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (null === root2) throw Error(formatProdErrorMessage(409));
        var current = root2.current, lane = requestUpdateLane();
        updateContainerImpl(current, lane, children, root2, null, null);
      };
      ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        var root2 = this._internalRoot;
        if (null !== root2) {
          this._internalRoot = null;
          var container = root2.containerInfo;
          updateContainerImpl(root2.current, 2, null, root2, null, null);
          flushSyncWork$1();
          container[internalContainerInstanceKey] = null;
        }
      };
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
        if (target) {
          var updatePriority = resolveUpdatePriority();
          target = { blockedOn: null, target, priority: updatePriority };
          for (var i2 = 0; i2 < queuedExplicitHydrationTargets.length && 0 !== updatePriority && updatePriority < queuedExplicitHydrationTargets[i2].priority; i2++) ;
          queuedExplicitHydrationTargets.splice(i2, 0, target);
          0 === i2 && attemptExplicitHydrationTarget(target);
        }
      };
      var isomorphicReactPackageVersion$jscomp$inline_1785 = React2.version;
      if ("19.1.0" !== isomorphicReactPackageVersion$jscomp$inline_1785)
        throw Error(
          formatProdErrorMessage(
            527,
            isomorphicReactPackageVersion$jscomp$inline_1785,
            "19.1.0"
          )
        );
      ReactDOMSharedInternals.findDOMNode = function(componentOrElement) {
        var fiber = componentOrElement._reactInternals;
        if (void 0 === fiber) {
          if ("function" === typeof componentOrElement.render)
            throw Error(formatProdErrorMessage(188));
          componentOrElement = Object.keys(componentOrElement).join(",");
          throw Error(formatProdErrorMessage(268, componentOrElement));
        }
        componentOrElement = findCurrentFiberUsingSlowPath(fiber);
        componentOrElement = null !== componentOrElement ? findCurrentHostFiberImpl(componentOrElement) : null;
        componentOrElement = null === componentOrElement ? null : componentOrElement.stateNode;
        return componentOrElement;
      };
      var internals$jscomp$inline_2256 = {
        bundleType: 0,
        version: "19.1.0",
        rendererPackageName: "react-dom",
        currentDispatcherRef: ReactSharedInternals,
        reconcilerVersion: "19.1.0"
      };
      if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        var hook$jscomp$inline_2257 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (!hook$jscomp$inline_2257.isDisabled && hook$jscomp$inline_2257.supportsFiber)
          try {
            rendererID = hook$jscomp$inline_2257.inject(
              internals$jscomp$inline_2256
            ), injectedHook = hook$jscomp$inline_2257;
          } catch (err) {
          }
      }
      reactDomClient_production.createRoot = function(container, options3) {
        if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));
        var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
        null !== options3 && void 0 !== options3 && (true === options3.unstable_strictMode && (isStrictMode = true), void 0 !== options3.identifierPrefix && (identifierPrefix = options3.identifierPrefix), void 0 !== options3.onUncaughtError && (onUncaughtError = options3.onUncaughtError), void 0 !== options3.onCaughtError && (onCaughtError = options3.onCaughtError), void 0 !== options3.onRecoverableError && (onRecoverableError = options3.onRecoverableError), void 0 !== options3.unstable_transitionCallbacks && (transitionCallbacks = options3.unstable_transitionCallbacks));
        options3 = createFiberRoot(
          container,
          1,
          false,
          null,
          null,
          isStrictMode,
          identifierPrefix,
          onUncaughtError,
          onCaughtError,
          onRecoverableError,
          transitionCallbacks,
          null
        );
        container[internalContainerInstanceKey] = options3.current;
        listenToAllSupportedEvents(container);
        return new ReactDOMRoot(options3);
      };
      reactDomClient_production.hydrateRoot = function(container, initialChildren, options3) {
        if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));
        var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null, formState = null;
        null !== options3 && void 0 !== options3 && (true === options3.unstable_strictMode && (isStrictMode = true), void 0 !== options3.identifierPrefix && (identifierPrefix = options3.identifierPrefix), void 0 !== options3.onUncaughtError && (onUncaughtError = options3.onUncaughtError), void 0 !== options3.onCaughtError && (onCaughtError = options3.onCaughtError), void 0 !== options3.onRecoverableError && (onRecoverableError = options3.onRecoverableError), void 0 !== options3.unstable_transitionCallbacks && (transitionCallbacks = options3.unstable_transitionCallbacks), void 0 !== options3.formState && (formState = options3.formState));
        initialChildren = createFiberRoot(
          container,
          1,
          true,
          initialChildren,
          null != options3 ? options3 : null,
          isStrictMode,
          identifierPrefix,
          onUncaughtError,
          onCaughtError,
          onRecoverableError,
          transitionCallbacks,
          formState
        );
        initialChildren.context = getContextForSubtree(null);
        options3 = initialChildren.current;
        isStrictMode = requestUpdateLane();
        isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
        identifierPrefix = createUpdate(isStrictMode);
        identifierPrefix.callback = null;
        enqueueUpdate(options3, identifierPrefix, isStrictMode);
        options3 = isStrictMode;
        initialChildren.current.lanes = options3;
        markRootUpdated$1(initialChildren, options3);
        ensureRootIsScheduled(initialChildren);
        container[internalContainerInstanceKey] = initialChildren.current;
        listenToAllSupportedEvents(container);
        return new ReactDOMHydrationRoot(initialChildren);
      };
      reactDomClient_production.version = "19.1.0";
      return reactDomClient_production;
    }
    var hasRequiredClient;
    function requireClient() {
      if (hasRequiredClient) return client$1.exports;
      hasRequiredClient = 1;
      function checkDCE() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
          return;
        }
        try {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
        } catch (err) {
          console.error(err);
        }
      }
      {
        checkDCE();
        client$1.exports = requireReactDomClient_production();
      }
      return client$1.exports;
    }
    var clientExports = requireClient();
    var dist$1 = {};
    var hasRequiredDist$1;
    function requireDist$1() {
      if (hasRequiredDist$1) return dist$1;
      hasRequiredDist$1 = 1;
      Object.defineProperty(dist$1, "__esModule", { value: true });
      dist$1.parse = parse2;
      dist$1.serialize = serialize;
      const cookieNameRegExp = /^[\u0021-\u003A\u003C\u003E-\u007E]+$/;
      const cookieValueRegExp = /^[\u0021-\u003A\u003C-\u007E]*$/;
      const domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;
      const pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/;
      const __toString = Object.prototype.toString;
      const NullObject = /* @__PURE__ */ (() => {
        const C = function() {
        };
        C.prototype = /* @__PURE__ */ Object.create(null);
        return C;
      })();
      function parse2(str, options2) {
        const obj = new NullObject();
        const len = str.length;
        if (len < 2)
          return obj;
        const dec = (options2 == null ? void 0 : options2.decode) || decode;
        let index2 = 0;
        do {
          const eqIdx = str.indexOf("=", index2);
          if (eqIdx === -1)
            break;
          const colonIdx = str.indexOf(";", index2);
          const endIdx = colonIdx === -1 ? len : colonIdx;
          if (eqIdx > endIdx) {
            index2 = str.lastIndexOf(";", eqIdx - 1) + 1;
            continue;
          }
          const keyStartIdx = startIndex(str, index2, eqIdx);
          const keyEndIdx = endIndex(str, eqIdx, keyStartIdx);
          const key = str.slice(keyStartIdx, keyEndIdx);
          if (obj[key] === void 0) {
            let valStartIdx = startIndex(str, eqIdx + 1, endIdx);
            let valEndIdx = endIndex(str, endIdx, valStartIdx);
            const value = dec(str.slice(valStartIdx, valEndIdx));
            obj[key] = value;
          }
          index2 = endIdx + 1;
        } while (index2 < len);
        return obj;
      }
      function startIndex(str, index2, max2) {
        do {
          const code = str.charCodeAt(index2);
          if (code !== 32 && code !== 9)
            return index2;
        } while (++index2 < max2);
        return max2;
      }
      function endIndex(str, index2, min2) {
        while (index2 > min2) {
          const code = str.charCodeAt(--index2);
          if (code !== 32 && code !== 9)
            return index2 + 1;
        }
        return min2;
      }
      function serialize(name, val, options2) {
        const enc = (options2 == null ? void 0 : options2.encode) || encodeURIComponent;
        if (!cookieNameRegExp.test(name)) {
          throw new TypeError(`argument name is invalid: ${name}`);
        }
        const value = enc(val);
        if (!cookieValueRegExp.test(value)) {
          throw new TypeError(`argument val is invalid: ${val}`);
        }
        let str = name + "=" + value;
        if (!options2)
          return str;
        if (options2.maxAge !== void 0) {
          if (!Number.isInteger(options2.maxAge)) {
            throw new TypeError(`option maxAge is invalid: ${options2.maxAge}`);
          }
          str += "; Max-Age=" + options2.maxAge;
        }
        if (options2.domain) {
          if (!domainValueRegExp.test(options2.domain)) {
            throw new TypeError(`option domain is invalid: ${options2.domain}`);
          }
          str += "; Domain=" + options2.domain;
        }
        if (options2.path) {
          if (!pathValueRegExp.test(options2.path)) {
            throw new TypeError(`option path is invalid: ${options2.path}`);
          }
          str += "; Path=" + options2.path;
        }
        if (options2.expires) {
          if (!isDate2(options2.expires) || !Number.isFinite(options2.expires.valueOf())) {
            throw new TypeError(`option expires is invalid: ${options2.expires}`);
          }
          str += "; Expires=" + options2.expires.toUTCString();
        }
        if (options2.httpOnly) {
          str += "; HttpOnly";
        }
        if (options2.secure) {
          str += "; Secure";
        }
        if (options2.partitioned) {
          str += "; Partitioned";
        }
        if (options2.priority) {
          const priority = typeof options2.priority === "string" ? options2.priority.toLowerCase() : void 0;
          switch (priority) {
            case "low":
              str += "; Priority=Low";
              break;
            case "medium":
              str += "; Priority=Medium";
              break;
            case "high":
              str += "; Priority=High";
              break;
            default:
              throw new TypeError(`option priority is invalid: ${options2.priority}`);
          }
        }
        if (options2.sameSite) {
          const sameSite = typeof options2.sameSite === "string" ? options2.sameSite.toLowerCase() : options2.sameSite;
          switch (sameSite) {
            case true:
            case "strict":
              str += "; SameSite=Strict";
              break;
            case "lax":
              str += "; SameSite=Lax";
              break;
            case "none":
              str += "; SameSite=None";
              break;
            default:
              throw new TypeError(`option sameSite is invalid: ${options2.sameSite}`);
          }
        }
        return str;
      }
      function decode(str) {
        if (str.indexOf("%") === -1)
          return str;
        try {
          return decodeURIComponent(str);
        } catch (e) {
          return str;
        }
      }
      function isDate2(val) {
        return __toString.call(val) === "[object Date]";
      }
      return dist$1;
    }
    requireDist$1();
    /**
     * react-router v7.6.0
     *
     * Copyright (c) Remix Software Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.md file in the root directory of this source tree.
     *
     * @license MIT
     */
    var __typeError2 = (msg) => {
      throw TypeError(msg);
    };
    var __accessCheck2 = (obj, member, msg) => member.has(obj) || __typeError2("Cannot " + msg);
    var __privateGet2 = (obj, member, getter) => (__accessCheck2(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
    var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError2("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    var PopStateEventType = "popstate";
    function createBrowserHistory(options2 = {}) {
      function createBrowserLocation(window2, globalHistory) {
        let { pathname, search, hash } = window2.location;
        return createLocation(
          "",
          { pathname, search, hash },
          // state defaults to `null` because `window.history.state` does
          globalHistory.state && globalHistory.state.usr || null,
          globalHistory.state && globalHistory.state.key || "default"
        );
      }
      function createBrowserHref(window2, to2) {
        return typeof to2 === "string" ? to2 : createPath(to2);
      }
      return getUrlBasedHistory(
        createBrowserLocation,
        createBrowserHref,
        null,
        options2
      );
    }
    function invariant$1(value, message) {
      if (value === false || value === null || typeof value === "undefined") {
        throw new Error(message);
      }
    }
    function warning(cond, message) {
      if (!cond) {
        if (typeof console !== "undefined") console.warn(message);
        try {
          throw new Error(message);
        } catch (e) {
        }
      }
    }
    function createKey() {
      return Math.random().toString(36).substring(2, 10);
    }
    function getHistoryState(location, index2) {
      return {
        usr: location.state,
        key: location.key,
        idx: index2
      };
    }
    function createLocation(current, to2, state = null, key) {
      let location = {
        pathname: typeof current === "string" ? current : current.pathname,
        search: "",
        hash: "",
        ...typeof to2 === "string" ? parsePath(to2) : to2,
        state,
        // TODO: This could be cleaned up.  push/replace should probably just take
        // full Locations now and avoid the need to run through this flow at all
        // But that's a pretty big refactor to the current test suite so going to
        // keep as is for the time being and just let any incoming keys take precedence
        key: to2 && to2.key || key || createKey()
      };
      return location;
    }
    function createPath({
      pathname = "/",
      search = "",
      hash = ""
    }) {
      if (search && search !== "?")
        pathname += search.charAt(0) === "?" ? search : "?" + search;
      if (hash && hash !== "#")
        pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
      return pathname;
    }
    function parsePath(path) {
      let parsedPath = {};
      if (path) {
        let hashIndex = path.indexOf("#");
        if (hashIndex >= 0) {
          parsedPath.hash = path.substring(hashIndex);
          path = path.substring(0, hashIndex);
        }
        let searchIndex = path.indexOf("?");
        if (searchIndex >= 0) {
          parsedPath.search = path.substring(searchIndex);
          path = path.substring(0, searchIndex);
        }
        if (path) {
          parsedPath.pathname = path;
        }
      }
      return parsedPath;
    }
    function getUrlBasedHistory(getLocation, createHref2, validateLocation, options2 = {}) {
      let { window: window2 = document.defaultView, v5Compat = false } = options2;
      let globalHistory = window2.history;
      let action = "POP";
      let listener = null;
      let index2 = getIndex();
      if (index2 == null) {
        index2 = 0;
        globalHistory.replaceState({ ...globalHistory.state, idx: index2 }, "");
      }
      function getIndex() {
        let state = globalHistory.state || { idx: null };
        return state.idx;
      }
      function handlePop() {
        action = "POP";
        let nextIndex = getIndex();
        let delta = nextIndex == null ? null : nextIndex - index2;
        index2 = nextIndex;
        if (listener) {
          listener({ action, location: history.location, delta });
        }
      }
      function push(to2, state) {
        action = "PUSH";
        let location = createLocation(history.location, to2, state);
        index2 = getIndex() + 1;
        let historyState = getHistoryState(location, index2);
        let url = history.createHref(location);
        try {
          globalHistory.pushState(historyState, "", url);
        } catch (error) {
          if (error instanceof DOMException && error.name === "DataCloneError") {
            throw error;
          }
          window2.location.assign(url);
        }
        if (v5Compat && listener) {
          listener({ action, location: history.location, delta: 1 });
        }
      }
      function replace2(to2, state) {
        action = "REPLACE";
        let location = createLocation(history.location, to2, state);
        index2 = getIndex();
        let historyState = getHistoryState(location, index2);
        let url = history.createHref(location);
        globalHistory.replaceState(historyState, "", url);
        if (v5Compat && listener) {
          listener({ action, location: history.location, delta: 0 });
        }
      }
      function createURL(to2) {
        return createBrowserURLImpl(to2);
      }
      let history = {
        get action() {
          return action;
        },
        get location() {
          return getLocation(window2, globalHistory);
        },
        listen(fn) {
          if (listener) {
            throw new Error("A history only accepts one active listener");
          }
          window2.addEventListener(PopStateEventType, handlePop);
          listener = fn;
          return () => {
            window2.removeEventListener(PopStateEventType, handlePop);
            listener = null;
          };
        },
        createHref(to2) {
          return createHref2(window2, to2);
        },
        createURL,
        encodeLocation(to2) {
          let url = createURL(to2);
          return {
            pathname: url.pathname,
            search: url.search,
            hash: url.hash
          };
        },
        push,
        replace: replace2,
        go(n2) {
          return globalHistory.go(n2);
        }
      };
      return history;
    }
    function createBrowserURLImpl(to2, isAbsolute = false) {
      let base = "http://localhost";
      if (typeof window !== "undefined") {
        base = window.location.origin !== "null" ? window.location.origin : window.location.href;
      }
      invariant$1(base, "No window.location.(origin|href) available to create URL");
      let href2 = typeof to2 === "string" ? to2 : createPath(to2);
      href2 = href2.replace(/ $/, "%20");
      if (!isAbsolute && href2.startsWith("//")) {
        href2 = base + href2;
      }
      return new URL(href2, base);
    }
    var _map;
    var unstable_RouterContextProvider = class {
      constructor(init) {
        __privateAdd2(this, _map, /* @__PURE__ */ new Map());
        if (init) {
          for (let [context, value] of init) {
            this.set(context, value);
          }
        }
      }
      get(context) {
        if (__privateGet2(this, _map).has(context)) {
          return __privateGet2(this, _map).get(context);
        }
        if (context.defaultValue !== void 0) {
          return context.defaultValue;
        }
        throw new Error("No value found for context");
      }
      set(context, value) {
        __privateGet2(this, _map).set(context, value);
      }
    };
    _map = /* @__PURE__ */ new WeakMap();
    var unsupportedLazyRouteObjectKeys = /* @__PURE__ */ new Set([
      "lazy",
      "caseSensitive",
      "path",
      "id",
      "index",
      "children"
    ]);
    function isUnsupportedLazyRouteObjectKey(key) {
      return unsupportedLazyRouteObjectKeys.has(
        key
      );
    }
    var unsupportedLazyRouteFunctionKeys = /* @__PURE__ */ new Set([
      "lazy",
      "caseSensitive",
      "path",
      "id",
      "index",
      "unstable_middleware",
      "children"
    ]);
    function isUnsupportedLazyRouteFunctionKey(key) {
      return unsupportedLazyRouteFunctionKeys.has(
        key
      );
    }
    function isIndexRoute(route) {
      return route.index === true;
    }
    function convertRoutesToDataRoutes(routes, mapRouteProperties2, parentPath = [], manifest = {}) {
      return routes.map((route, index2) => {
        let treePath = [...parentPath, String(index2)];
        let id = typeof route.id === "string" ? route.id : treePath.join("-");
        invariant$1(
          route.index !== true || !route.children,
          `Cannot specify children on an index route`
        );
        invariant$1(
          !manifest[id],
          `Found a route id collision on id "${id}".  Route id's must be globally unique within Data Router usages`
        );
        if (isIndexRoute(route)) {
          let indexRoute = {
            ...route,
            ...mapRouteProperties2(route),
            id
          };
          manifest[id] = indexRoute;
          return indexRoute;
        } else {
          let pathOrLayoutRoute = {
            ...route,
            ...mapRouteProperties2(route),
            id,
            children: void 0
          };
          manifest[id] = pathOrLayoutRoute;
          if (route.children) {
            pathOrLayoutRoute.children = convertRoutesToDataRoutes(
              route.children,
              mapRouteProperties2,
              treePath,
              manifest
            );
          }
          return pathOrLayoutRoute;
        }
      });
    }
    function matchRoutes(routes, locationArg, basename = "/") {
      return matchRoutesImpl(routes, locationArg, basename, false);
    }
    function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
      let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      let pathname = stripBasename(location.pathname || "/", basename);
      if (pathname == null) {
        return null;
      }
      let branches = flattenRoutes(routes);
      rankRouteBranches(branches);
      let matches = null;
      for (let i2 = 0; matches == null && i2 < branches.length; ++i2) {
        let decoded = decodePath(pathname);
        matches = matchRouteBranch(
          branches[i2],
          decoded,
          allowPartial
        );
      }
      return matches;
    }
    function convertRouteMatchToUiMatch(match, loaderData) {
      let { route, pathname, params } = match;
      return {
        id: route.id,
        pathname,
        params,
        data: loaderData[route.id],
        handle: route.handle
      };
    }
    function flattenRoutes(routes, branches = [], parentsMeta = [], parentPath = "") {
      let flattenRoute = (route, index2, relativePath) => {
        let meta = {
          relativePath: relativePath === void 0 ? route.path || "" : relativePath,
          caseSensitive: route.caseSensitive === true,
          childrenIndex: index2,
          route
        };
        if (meta.relativePath.startsWith("/")) {
          invariant$1(
            meta.relativePath.startsWith(parentPath),
            `Absolute route path "${meta.relativePath}" nested under path "${parentPath}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`
          );
          meta.relativePath = meta.relativePath.slice(parentPath.length);
        }
        let path = joinPaths([parentPath, meta.relativePath]);
        let routesMeta = parentsMeta.concat(meta);
        if (route.children && route.children.length > 0) {
          invariant$1(
            // Our types know better, but runtime JS may not!
            // @ts-expect-error
            route.index !== true,
            `Index routes must not have child routes. Please remove all child routes from route path "${path}".`
          );
          flattenRoutes(route.children, branches, routesMeta, path);
        }
        if (route.path == null && !route.index) {
          return;
        }
        branches.push({
          path,
          score: computeScore(path, route.index),
          routesMeta
        });
      };
      routes.forEach((route, index2) => {
        var _a2;
        if (route.path === "" || !((_a2 = route.path) == null ? void 0 : _a2.includes("?"))) {
          flattenRoute(route, index2);
        } else {
          for (let exploded of explodeOptionalSegments(route.path)) {
            flattenRoute(route, index2, exploded);
          }
        }
      });
      return branches;
    }
    function explodeOptionalSegments(path) {
      let segments = path.split("/");
      if (segments.length === 0) return [];
      let [first, ...rest] = segments;
      let isOptional = first.endsWith("?");
      let required = first.replace(/\?$/, "");
      if (rest.length === 0) {
        return isOptional ? [required, ""] : [required];
      }
      let restExploded = explodeOptionalSegments(rest.join("/"));
      let result = [];
      result.push(
        ...restExploded.map(
          (subpath) => subpath === "" ? required : [required, subpath].join("/")
        )
      );
      if (isOptional) {
        result.push(...restExploded);
      }
      return result.map(
        (exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded
      );
    }
    function rankRouteBranches(branches) {
      branches.sort(
        (a2, b) => a2.score !== b.score ? b.score - a2.score : compareIndexes(
          a2.routesMeta.map((meta) => meta.childrenIndex),
          b.routesMeta.map((meta) => meta.childrenIndex)
        )
      );
    }
    var paramRe = /^:[\w-]+$/;
    var dynamicSegmentValue = 3;
    var indexRouteValue = 2;
    var emptySegmentValue = 1;
    var staticSegmentValue = 10;
    var splatPenalty = -2;
    var isSplat = (s2) => s2 === "*";
    function computeScore(path, index2) {
      let segments = path.split("/");
      let initialScore = segments.length;
      if (segments.some(isSplat)) {
        initialScore += splatPenalty;
      }
      if (index2) {
        initialScore += indexRouteValue;
      }
      return segments.filter((s2) => !isSplat(s2)).reduce(
        (score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue),
        initialScore
      );
    }
    function compareIndexes(a2, b) {
      let siblings = a2.length === b.length && a2.slice(0, -1).every((n2, i2) => n2 === b[i2]);
      return siblings ? (
        // If two routes are siblings, we should try to match the earlier sibling
        // first. This allows people to have fine-grained control over the matching
        // behavior by simply putting routes with identical paths in the order they
        // want them tried.
        a2[a2.length - 1] - b[b.length - 1]
      ) : (
        // Otherwise, it doesn't really make sense to rank non-siblings by index,
        // so they sort equally.
        0
      );
    }
    function matchRouteBranch(branch, pathname, allowPartial = false) {
      let { routesMeta } = branch;
      let matchedParams = {};
      let matchedPathname = "/";
      let matches = [];
      for (let i2 = 0; i2 < routesMeta.length; ++i2) {
        let meta = routesMeta[i2];
        let end = i2 === routesMeta.length - 1;
        let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
        let match = matchPath(
          { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },
          remainingPathname
        );
        let route = meta.route;
        if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
          match = matchPath(
            {
              path: meta.relativePath,
              caseSensitive: meta.caseSensitive,
              end: false
            },
            remainingPathname
          );
        }
        if (!match) {
          return null;
        }
        Object.assign(matchedParams, match.params);
        matches.push({
          // TODO: Can this as be avoided?
          params: matchedParams,
          pathname: joinPaths([matchedPathname, match.pathname]),
          pathnameBase: normalizePathname(
            joinPaths([matchedPathname, match.pathnameBase])
          ),
          route
        });
        if (match.pathnameBase !== "/") {
          matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
        }
      }
      return matches;
    }
    function matchPath(pattern, pathname) {
      if (typeof pattern === "string") {
        pattern = { path: pattern, caseSensitive: false, end: true };
      }
      let [matcher, compiledParams] = compilePath(
        pattern.path,
        pattern.caseSensitive,
        pattern.end
      );
      let match = pathname.match(matcher);
      if (!match) return null;
      let matchedPathname = match[0];
      let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
      let captureGroups = match.slice(1);
      let params = compiledParams.reduce(
        (memo2, { paramName, isOptional }, index2) => {
          if (paramName === "*") {
            let splatValue = captureGroups[index2] || "";
            pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
          }
          const value = captureGroups[index2];
          if (isOptional && !value) {
            memo2[paramName] = void 0;
          } else {
            memo2[paramName] = (value || "").replace(/%2F/g, "/");
          }
          return memo2;
        },
        {}
      );
      return {
        params,
        pathname: matchedPathname,
        pathnameBase,
        pattern
      };
    }
    function compilePath(path, caseSensitive = false, end = true) {
      warning(
        path === "*" || !path.endsWith("*") || path.endsWith("/*"),
        `Route path "${path}" will be treated as if it were "${path.replace(/\*$/, "/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${path.replace(/\*$/, "/*")}".`
      );
      let params = [];
      let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(
        /\/:([\w-]+)(\?)?/g,
        (_, paramName, isOptional) => {
          params.push({ paramName, isOptional: isOptional != null });
          return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
        }
      );
      if (path.endsWith("*")) {
        params.push({ paramName: "*" });
        regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
      } else if (end) {
        regexpSource += "\\/*$";
      } else if (path !== "" && path !== "/") {
        regexpSource += "(?:(?=\\/|$))";
      } else ;
      let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
      return [matcher, params];
    }
    function decodePath(value) {
      try {
        return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
      } catch (error) {
        warning(
          false,
          `The URL path "${value}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${error}).`
        );
        return value;
      }
    }
    function stripBasename(pathname, basename) {
      if (basename === "/") return pathname;
      if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
        return null;
      }
      let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
      let nextChar = pathname.charAt(startIndex);
      if (nextChar && nextChar !== "/") {
        return null;
      }
      return pathname.slice(startIndex) || "/";
    }
    function resolvePath(to2, fromPathname = "/") {
      let {
        pathname: toPathname,
        search = "",
        hash = ""
      } = typeof to2 === "string" ? parsePath(to2) : to2;
      let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
      return {
        pathname,
        search: normalizeSearch(search),
        hash: normalizeHash(hash)
      };
    }
    function resolvePathname(relativePath, fromPathname) {
      let segments = fromPathname.replace(/\/+$/, "").split("/");
      let relativeSegments = relativePath.split("/");
      relativeSegments.forEach((segment) => {
        if (segment === "..") {
          if (segments.length > 1) segments.pop();
        } else if (segment !== ".") {
          segments.push(segment);
        }
      });
      return segments.length > 1 ? segments.join("/") : "/";
    }
    function getInvalidPathError(char, field, dest, path) {
      return `Cannot include a '${char}' character in a manually specified \`to.${field}\` field [${JSON.stringify(
        path
      )}].  Please separate it out to the \`to.${dest}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`;
    }
    function getPathContributingMatches(matches) {
      return matches.filter(
        (match, index2) => index2 === 0 || match.route.path && match.route.path.length > 0
      );
    }
    function getResolveToMatches(matches) {
      let pathMatches = getPathContributingMatches(matches);
      return pathMatches.map(
        (match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase
      );
    }
    function resolveTo(toArg, routePathnames, locationPathname, isPathRelative = false) {
      let to2;
      if (typeof toArg === "string") {
        to2 = parsePath(toArg);
      } else {
        to2 = { ...toArg };
        invariant$1(
          !to2.pathname || !to2.pathname.includes("?"),
          getInvalidPathError("?", "pathname", "search", to2)
        );
        invariant$1(
          !to2.pathname || !to2.pathname.includes("#"),
          getInvalidPathError("#", "pathname", "hash", to2)
        );
        invariant$1(
          !to2.search || !to2.search.includes("#"),
          getInvalidPathError("#", "search", "hash", to2)
        );
      }
      let isEmptyPath = toArg === "" || to2.pathname === "";
      let toPathname = isEmptyPath ? "/" : to2.pathname;
      let from2;
      if (toPathname == null) {
        from2 = locationPathname;
      } else {
        let routePathnameIndex = routePathnames.length - 1;
        if (!isPathRelative && toPathname.startsWith("..")) {
          let toSegments = toPathname.split("/");
          while (toSegments[0] === "..") {
            toSegments.shift();
            routePathnameIndex -= 1;
          }
          to2.pathname = toSegments.join("/");
        }
        from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
      }
      let path = resolvePath(to2, from2);
      let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
      let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
      if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
        path.pathname += "/";
      }
      return path;
    }
    var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
    var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
    var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
    var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
    var ErrorResponseImpl = class {
      constructor(status, statusText, data2, internal = false) {
        this.status = status;
        this.statusText = statusText || "";
        this.internal = internal;
        if (data2 instanceof Error) {
          this.data = data2.toString();
          this.error = data2;
        } else {
          this.data = data2;
        }
      }
    };
    function isRouteErrorResponse(error) {
      return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
    }
    var validMutationMethodsArr = [
      "POST",
      "PUT",
      "PATCH",
      "DELETE"
    ];
    var validMutationMethods = new Set(
      validMutationMethodsArr
    );
    var validRequestMethodsArr = [
      "GET",
      ...validMutationMethodsArr
    ];
    var validRequestMethods = new Set(validRequestMethodsArr);
    var redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
    var redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]);
    var IDLE_NAVIGATION = {
      state: "idle",
      location: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    };
    var IDLE_FETCHER = {
      state: "idle",
      data: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    };
    var IDLE_BLOCKER = {
      state: "unblocked",
      proceed: void 0,
      reset: void 0,
      location: void 0
    };
    var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
    var defaultMapRouteProperties = (route) => ({
      hasErrorBoundary: Boolean(route.hasErrorBoundary)
    });
    var TRANSITIONS_STORAGE_KEY = "remix-router-transitions";
    var ResetLoaderDataSymbol = Symbol("ResetLoaderData");
    function createRouter(init) {
      const routerWindow = init.window ? init.window : typeof window !== "undefined" ? window : void 0;
      const isBrowser2 = typeof routerWindow !== "undefined" && typeof routerWindow.document !== "undefined" && typeof routerWindow.document.createElement !== "undefined";
      invariant$1(
        init.routes.length > 0,
        "You must provide a non-empty routes array to createRouter"
      );
      let hydrationRouteProperties2 = init.hydrationRouteProperties || [];
      let mapRouteProperties2 = init.mapRouteProperties || defaultMapRouteProperties;
      let manifest = {};
      let dataRoutes = convertRoutesToDataRoutes(
        init.routes,
        mapRouteProperties2,
        void 0,
        manifest
      );
      let inFlightDataRoutes;
      let basename = init.basename || "/";
      let dataStrategyImpl = init.dataStrategy || defaultDataStrategyWithMiddleware;
      let future = {
        unstable_middleware: false,
        ...init.future
      };
      let unlistenHistory = null;
      let subscribers = /* @__PURE__ */ new Set();
      let savedScrollPositions2 = null;
      let getScrollRestorationKey2 = null;
      let getScrollPosition = null;
      let initialScrollRestored = init.hydrationData != null;
      let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);
      let initialMatchesIsFOW = false;
      let initialErrors = null;
      let initialized;
      if (initialMatches == null && !init.patchRoutesOnNavigation) {
        let error = getInternalRouterError(404, {
          pathname: init.history.location.pathname
        });
        let { matches, route } = getShortCircuitMatches(dataRoutes);
        initialized = true;
        initialMatches = matches;
        initialErrors = { [route.id]: error };
      } else {
        if (initialMatches && !init.hydrationData) {
          let fogOfWar = checkFogOfWar(
            initialMatches,
            dataRoutes,
            init.history.location.pathname
          );
          if (fogOfWar.active) {
            initialMatches = null;
          }
        }
        if (!initialMatches) {
          initialized = false;
          initialMatches = [];
          let fogOfWar = checkFogOfWar(
            null,
            dataRoutes,
            init.history.location.pathname
          );
          if (fogOfWar.active && fogOfWar.matches) {
            initialMatchesIsFOW = true;
            initialMatches = fogOfWar.matches;
          }
        } else if (initialMatches.some((m2) => m2.route.lazy)) {
          initialized = false;
        } else if (!initialMatches.some((m2) => m2.route.loader)) {
          initialized = true;
        } else {
          let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;
          let errors = init.hydrationData ? init.hydrationData.errors : null;
          if (errors) {
            let idx = initialMatches.findIndex(
              (m2) => errors[m2.route.id] !== void 0
            );
            initialized = initialMatches.slice(0, idx + 1).every(
              (m2) => !shouldLoadRouteOnHydration(m2.route, loaderData, errors)
            );
          } else {
            initialized = initialMatches.every(
              (m2) => !shouldLoadRouteOnHydration(m2.route, loaderData, errors)
            );
          }
        }
      }
      let router2;
      let state = {
        historyAction: init.history.action,
        location: init.history.location,
        matches: initialMatches,
        initialized,
        navigation: IDLE_NAVIGATION,
        // Don't restore on initial updateState() if we were SSR'd
        restoreScrollPosition: init.hydrationData != null ? false : null,
        preventScrollReset: false,
        revalidation: "idle",
        loaderData: init.hydrationData && init.hydrationData.loaderData || {},
        actionData: init.hydrationData && init.hydrationData.actionData || null,
        errors: init.hydrationData && init.hydrationData.errors || initialErrors,
        fetchers: /* @__PURE__ */ new Map(),
        blockers: /* @__PURE__ */ new Map()
      };
      let pendingAction = "POP";
      let pendingPreventScrollReset = false;
      let pendingNavigationController;
      let pendingViewTransitionEnabled = false;
      let appliedViewTransitions = /* @__PURE__ */ new Map();
      let removePageHideEventListener = null;
      let isUninterruptedRevalidation = false;
      let isRevalidationRequired = false;
      let cancelledFetcherLoads = /* @__PURE__ */ new Set();
      let fetchControllers = /* @__PURE__ */ new Map();
      let incrementingLoadId = 0;
      let pendingNavigationLoadId = -1;
      let fetchReloadIds = /* @__PURE__ */ new Map();
      let fetchRedirectIds = /* @__PURE__ */ new Set();
      let fetchLoadMatches = /* @__PURE__ */ new Map();
      let activeFetchers = /* @__PURE__ */ new Map();
      let fetchersQueuedForDeletion = /* @__PURE__ */ new Set();
      let blockerFunctions = /* @__PURE__ */ new Map();
      let unblockBlockerHistoryUpdate = void 0;
      let pendingRevalidationDfd = null;
      function initialize() {
        unlistenHistory = init.history.listen(
          ({ action: historyAction, location, delta }) => {
            if (unblockBlockerHistoryUpdate) {
              unblockBlockerHistoryUpdate();
              unblockBlockerHistoryUpdate = void 0;
              return;
            }
            warning(
              blockerFunctions.size === 0 || delta != null,
              "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL."
            );
            let blockerKey = shouldBlockNavigation({
              currentLocation: state.location,
              nextLocation: location,
              historyAction
            });
            if (blockerKey && delta != null) {
              let nextHistoryUpdatePromise = new Promise((resolve) => {
                unblockBlockerHistoryUpdate = resolve;
              });
              init.history.go(delta * -1);
              updateBlocker(blockerKey, {
                state: "blocked",
                location,
                proceed() {
                  updateBlocker(blockerKey, {
                    state: "proceeding",
                    proceed: void 0,
                    reset: void 0,
                    location
                  });
                  nextHistoryUpdatePromise.then(() => init.history.go(delta));
                },
                reset() {
                  let blockers = new Map(state.blockers);
                  blockers.set(blockerKey, IDLE_BLOCKER);
                  updateState({ blockers });
                }
              });
              return;
            }
            return startNavigation(historyAction, location);
          }
        );
        if (isBrowser2) {
          restoreAppliedTransitions(routerWindow, appliedViewTransitions);
          let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);
          routerWindow.addEventListener("pagehide", _saveAppliedTransitions);
          removePageHideEventListener = () => routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);
        }
        if (!state.initialized) {
          startNavigation("POP", state.location, {
            initialHydration: true
          });
        }
        return router2;
      }
      function dispose() {
        if (unlistenHistory) {
          unlistenHistory();
        }
        if (removePageHideEventListener) {
          removePageHideEventListener();
        }
        subscribers.clear();
        pendingNavigationController && pendingNavigationController.abort();
        state.fetchers.forEach((_, key) => deleteFetcher(key));
        state.blockers.forEach((_, key) => deleteBlocker(key));
      }
      function subscribe(fn) {
        subscribers.add(fn);
        return () => subscribers.delete(fn);
      }
      function updateState(newState, opts = {}) {
        state = {
          ...state,
          ...newState
        };
        let unmountedFetchers = [];
        let mountedFetchers = [];
        state.fetchers.forEach((fetcher, key) => {
          if (fetcher.state === "idle") {
            if (fetchersQueuedForDeletion.has(key)) {
              unmountedFetchers.push(key);
            } else {
              mountedFetchers.push(key);
            }
          }
        });
        fetchersQueuedForDeletion.forEach((key) => {
          if (!state.fetchers.has(key) && !fetchControllers.has(key)) {
            unmountedFetchers.push(key);
          }
        });
        [...subscribers].forEach(
          (subscriber) => subscriber(state, {
            deletedFetchers: unmountedFetchers,
            viewTransitionOpts: opts.viewTransitionOpts,
            flushSync: opts.flushSync === true
          })
        );
        unmountedFetchers.forEach((key) => deleteFetcher(key));
        mountedFetchers.forEach((key) => state.fetchers.delete(key));
      }
      function completeNavigation(location, newState, { flushSync } = {}) {
        var _a2, _b2;
        let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_a2 = location.state) == null ? void 0 : _a2._isRedirect) !== true;
        let actionData;
        if (newState.actionData) {
          if (Object.keys(newState.actionData).length > 0) {
            actionData = newState.actionData;
          } else {
            actionData = null;
          }
        } else if (isActionReload) {
          actionData = state.actionData;
        } else {
          actionData = null;
        }
        let loaderData = newState.loaderData ? mergeLoaderData(
          state.loaderData,
          newState.loaderData,
          newState.matches || [],
          newState.errors
        ) : state.loaderData;
        let blockers = state.blockers;
        if (blockers.size > 0) {
          blockers = new Map(blockers);
          blockers.forEach((_, k2) => blockers.set(k2, IDLE_BLOCKER));
        }
        let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_b2 = location.state) == null ? void 0 : _b2._isRedirect) !== true;
        if (inFlightDataRoutes) {
          dataRoutes = inFlightDataRoutes;
          inFlightDataRoutes = void 0;
        }
        if (isUninterruptedRevalidation) ;
        else if (pendingAction === "POP") ;
        else if (pendingAction === "PUSH") {
          init.history.push(location, location.state);
        } else if (pendingAction === "REPLACE") {
          init.history.replace(location, location.state);
        }
        let viewTransitionOpts;
        if (pendingAction === "POP") {
          let priorPaths = appliedViewTransitions.get(state.location.pathname);
          if (priorPaths && priorPaths.has(location.pathname)) {
            viewTransitionOpts = {
              currentLocation: state.location,
              nextLocation: location
            };
          } else if (appliedViewTransitions.has(location.pathname)) {
            viewTransitionOpts = {
              currentLocation: location,
              nextLocation: state.location
            };
          }
        } else if (pendingViewTransitionEnabled) {
          let toPaths = appliedViewTransitions.get(state.location.pathname);
          if (toPaths) {
            toPaths.add(location.pathname);
          } else {
            toPaths = /* @__PURE__ */ new Set([location.pathname]);
            appliedViewTransitions.set(state.location.pathname, toPaths);
          }
          viewTransitionOpts = {
            currentLocation: state.location,
            nextLocation: location
          };
        }
        updateState(
          {
            ...newState,
            // matches, errors, fetchers go through as-is
            actionData,
            loaderData,
            historyAction: pendingAction,
            location,
            initialized: true,
            navigation: IDLE_NAVIGATION,
            revalidation: "idle",
            restoreScrollPosition: getSavedScrollPosition(
              location,
              newState.matches || state.matches
            ),
            preventScrollReset,
            blockers
          },
          {
            viewTransitionOpts,
            flushSync: flushSync === true
          }
        );
        pendingAction = "POP";
        pendingPreventScrollReset = false;
        pendingViewTransitionEnabled = false;
        isUninterruptedRevalidation = false;
        isRevalidationRequired = false;
        pendingRevalidationDfd == null ? void 0 : pendingRevalidationDfd.resolve();
        pendingRevalidationDfd = null;
      }
      async function navigate(to2, opts) {
        if (typeof to2 === "number") {
          init.history.go(to2);
          return;
        }
        let normalizedPath = normalizeTo(
          state.location,
          state.matches,
          basename,
          to2,
          opts == null ? void 0 : opts.fromRouteId,
          opts == null ? void 0 : opts.relative
        );
        let { path, submission, error } = normalizeNavigateOptions(
          false,
          normalizedPath,
          opts
        );
        let currentLocation = state.location;
        let nextLocation = createLocation(state.location, path, opts && opts.state);
        nextLocation = {
          ...nextLocation,
          ...init.history.encodeLocation(nextLocation)
        };
        let userReplace = opts && opts.replace != null ? opts.replace : void 0;
        let historyAction = "PUSH";
        if (userReplace === true) {
          historyAction = "REPLACE";
        } else if (userReplace === false) ;
        else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {
          historyAction = "REPLACE";
        }
        let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : void 0;
        let flushSync = (opts && opts.flushSync) === true;
        let blockerKey = shouldBlockNavigation({
          currentLocation,
          nextLocation,
          historyAction
        });
        if (blockerKey) {
          updateBlocker(blockerKey, {
            state: "blocked",
            location: nextLocation,
            proceed() {
              updateBlocker(blockerKey, {
                state: "proceeding",
                proceed: void 0,
                reset: void 0,
                location: nextLocation
              });
              navigate(to2, opts);
            },
            reset() {
              let blockers = new Map(state.blockers);
              blockers.set(blockerKey, IDLE_BLOCKER);
              updateState({ blockers });
            }
          });
          return;
        }
        await startNavigation(historyAction, nextLocation, {
          submission,
          // Send through the formData serialization error if we have one so we can
          // render at the right error boundary after we match routes
          pendingError: error,
          preventScrollReset,
          replace: opts && opts.replace,
          enableViewTransition: opts && opts.viewTransition,
          flushSync
        });
      }
      function revalidate() {
        if (!pendingRevalidationDfd) {
          pendingRevalidationDfd = createDeferred();
        }
        interruptActiveLoads();
        updateState({ revalidation: "loading" });
        let promise = pendingRevalidationDfd.promise;
        if (state.navigation.state === "submitting") {
          return promise;
        }
        if (state.navigation.state === "idle") {
          startNavigation(state.historyAction, state.location, {
            startUninterruptedRevalidation: true
          });
          return promise;
        }
        startNavigation(
          pendingAction || state.historyAction,
          state.navigation.location,
          {
            overrideNavigation: state.navigation,
            // Proxy through any rending view transition
            enableViewTransition: pendingViewTransitionEnabled === true
          }
        );
        return promise;
      }
      async function startNavigation(historyAction, location, opts) {
        pendingNavigationController && pendingNavigationController.abort();
        pendingNavigationController = null;
        pendingAction = historyAction;
        isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
        saveScrollPosition(state.location, state.matches);
        pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
        pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let loadingNavigation = opts && opts.overrideNavigation;
        let matches = (opts == null ? void 0 : opts.initialHydration) && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ? (
          // `matchRoutes()` has already been called if we're in here via `router.initialize()`
          state.matches
        ) : matchRoutes(routesToUse, location, basename);
        let flushSync = (opts && opts.flushSync) === true;
        if (matches && state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
          completeNavigation(location, { matches }, { flushSync });
          return;
        }
        let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);
        if (fogOfWar.active && fogOfWar.matches) {
          matches = fogOfWar.matches;
        }
        if (!matches) {
          let { error, notFoundMatches, route } = handleNavigational404(
            location.pathname
          );
          completeNavigation(
            location,
            {
              matches: notFoundMatches,
              loaderData: {},
              errors: {
                [route.id]: error
              }
            },
            { flushSync }
          );
          return;
        }
        pendingNavigationController = new AbortController();
        let request = createClientSideRequest(
          init.history,
          location,
          pendingNavigationController.signal,
          opts && opts.submission
        );
        let scopedContext = new unstable_RouterContextProvider(
          init.unstable_getContext ? await init.unstable_getContext() : void 0
        );
        let pendingActionResult;
        if (opts && opts.pendingError) {
          pendingActionResult = [
            findNearestBoundary(matches).route.id,
            { type: "error", error: opts.pendingError }
          ];
        } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
          let actionResult = await handleAction(
            request,
            location,
            opts.submission,
            matches,
            scopedContext,
            fogOfWar.active,
            opts && opts.initialHydration === true,
            { replace: opts.replace, flushSync }
          );
          if (actionResult.shortCircuited) {
            return;
          }
          if (actionResult.pendingActionResult) {
            let [routeId, result] = actionResult.pendingActionResult;
            if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {
              pendingNavigationController = null;
              completeNavigation(location, {
                matches: actionResult.matches,
                loaderData: {},
                errors: {
                  [routeId]: result.error
                }
              });
              return;
            }
          }
          matches = actionResult.matches || matches;
          pendingActionResult = actionResult.pendingActionResult;
          loadingNavigation = getLoadingNavigation(location, opts.submission);
          flushSync = false;
          fogOfWar.active = false;
          request = createClientSideRequest(
            init.history,
            request.url,
            request.signal
          );
        }
        let {
          shortCircuited,
          matches: updatedMatches,
          loaderData,
          errors
        } = await handleLoaders(
          request,
          location,
          matches,
          scopedContext,
          fogOfWar.active,
          loadingNavigation,
          opts && opts.submission,
          opts && opts.fetcherSubmission,
          opts && opts.replace,
          opts && opts.initialHydration === true,
          flushSync,
          pendingActionResult
        );
        if (shortCircuited) {
          return;
        }
        pendingNavigationController = null;
        completeNavigation(location, {
          matches: updatedMatches || matches,
          ...getActionDataForCommit(pendingActionResult),
          loaderData,
          errors
        });
      }
      async function handleAction(request, location, submission, matches, scopedContext, isFogOfWar, initialHydration, opts = {}) {
        interruptActiveLoads();
        let navigation = getSubmittingNavigation(location, submission);
        updateState({ navigation }, { flushSync: opts.flushSync === true });
        if (isFogOfWar) {
          let discoverResult = await discoverRoutes(
            matches,
            location.pathname,
            request.signal
          );
          if (discoverResult.type === "aborted") {
            return { shortCircuited: true };
          } else if (discoverResult.type === "error") {
            let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;
            return {
              matches: discoverResult.partialMatches,
              pendingActionResult: [
                boundaryId,
                {
                  type: "error",
                  error: discoverResult.error
                }
              ]
            };
          } else if (!discoverResult.matches) {
            let { notFoundMatches, error, route } = handleNavigational404(
              location.pathname
            );
            return {
              matches: notFoundMatches,
              pendingActionResult: [
                route.id,
                {
                  type: "error",
                  error
                }
              ]
            };
          } else {
            matches = discoverResult.matches;
          }
        }
        let result;
        let actionMatch = getTargetMatch(matches, location);
        if (!actionMatch.route.action && !actionMatch.route.lazy) {
          result = {
            type: "error",
            error: getInternalRouterError(405, {
              method: request.method,
              pathname: location.pathname,
              routeId: actionMatch.route.id
            })
          };
        } else {
          let dsMatches = getTargetedDataStrategyMatches(
            mapRouteProperties2,
            manifest,
            request,
            matches,
            actionMatch,
            initialHydration ? [] : hydrationRouteProperties2,
            scopedContext
          );
          let results = await callDataStrategy(
            request,
            dsMatches,
            scopedContext,
            null
          );
          result = results[actionMatch.route.id];
          if (!result) {
            for (let match of matches) {
              if (results[match.route.id]) {
                result = results[match.route.id];
                break;
              }
            }
          }
          if (request.signal.aborted) {
            return { shortCircuited: true };
          }
        }
        if (isRedirectResult(result)) {
          let replace2;
          if (opts && opts.replace != null) {
            replace2 = opts.replace;
          } else {
            let location2 = normalizeRedirectLocation(
              result.response.headers.get("Location"),
              new URL(request.url),
              basename
            );
            replace2 = location2 === state.location.pathname + state.location.search;
          }
          await startRedirectNavigation(request, result, true, {
            submission,
            replace: replace2
          });
          return { shortCircuited: true };
        }
        if (isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
          if ((opts && opts.replace) !== true) {
            pendingAction = "PUSH";
          }
          return {
            matches,
            pendingActionResult: [
              boundaryMatch.route.id,
              result,
              actionMatch.route.id
            ]
          };
        }
        return {
          matches,
          pendingActionResult: [actionMatch.route.id, result]
        };
      }
      async function handleLoaders(request, location, matches, scopedContext, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace2, initialHydration, flushSync, pendingActionResult) {
        let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);
        let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);
        let shouldUpdateNavigationState = !isUninterruptedRevalidation && !initialHydration;
        if (isFogOfWar) {
          if (shouldUpdateNavigationState) {
            let actionData = getUpdatedActionData(pendingActionResult);
            updateState(
              {
                navigation: loadingNavigation,
                ...actionData !== void 0 ? { actionData } : {}
              },
              {
                flushSync
              }
            );
          }
          let discoverResult = await discoverRoutes(
            matches,
            location.pathname,
            request.signal
          );
          if (discoverResult.type === "aborted") {
            return { shortCircuited: true };
          } else if (discoverResult.type === "error") {
            let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;
            return {
              matches: discoverResult.partialMatches,
              loaderData: {},
              errors: {
                [boundaryId]: discoverResult.error
              }
            };
          } else if (!discoverResult.matches) {
            let { error, notFoundMatches, route } = handleNavigational404(
              location.pathname
            );
            return {
              matches: notFoundMatches,
              loaderData: {},
              errors: {
                [route.id]: error
              }
            };
          } else {
            matches = discoverResult.matches;
          }
        }
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let { dsMatches, revalidatingFetchers } = getMatchesToLoad(
          request,
          scopedContext,
          mapRouteProperties2,
          manifest,
          init.history,
          state,
          matches,
          activeSubmission,
          location,
          initialHydration ? [] : hydrationRouteProperties2,
          initialHydration === true,
          isRevalidationRequired,
          cancelledFetcherLoads,
          fetchersQueuedForDeletion,
          fetchLoadMatches,
          fetchRedirectIds,
          routesToUse,
          basename,
          pendingActionResult
        );
        pendingNavigationLoadId = ++incrementingLoadId;
        if (!init.dataStrategy && !dsMatches.some((m2) => m2.shouldLoad) && revalidatingFetchers.length === 0) {
          let updatedFetchers2 = markFetchRedirectsDone();
          completeNavigation(
            location,
            {
              matches,
              loaderData: {},
              // Commit pending error if we're short circuiting
              errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? { [pendingActionResult[0]]: pendingActionResult[1].error } : null,
              ...getActionDataForCommit(pendingActionResult),
              ...updatedFetchers2 ? { fetchers: new Map(state.fetchers) } : {}
            },
            { flushSync }
          );
          return { shortCircuited: true };
        }
        if (shouldUpdateNavigationState) {
          let updates = {};
          if (!isFogOfWar) {
            updates.navigation = loadingNavigation;
            let actionData = getUpdatedActionData(pendingActionResult);
            if (actionData !== void 0) {
              updates.actionData = actionData;
            }
          }
          if (revalidatingFetchers.length > 0) {
            updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);
          }
          updateState(updates, { flushSync });
        }
        revalidatingFetchers.forEach((rf) => {
          abortFetcher(rf.key);
          if (rf.controller) {
            fetchControllers.set(rf.key, rf.controller);
          }
        });
        let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f) => abortFetcher(f.key));
        if (pendingNavigationController) {
          pendingNavigationController.signal.addEventListener(
            "abort",
            abortPendingFetchRevalidations
          );
        }
        let { loaderResults, fetcherResults } = await callLoadersAndMaybeResolveData(
          dsMatches,
          revalidatingFetchers,
          request,
          scopedContext
        );
        if (request.signal.aborted) {
          return { shortCircuited: true };
        }
        if (pendingNavigationController) {
          pendingNavigationController.signal.removeEventListener(
            "abort",
            abortPendingFetchRevalidations
          );
        }
        revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
        let redirect2 = findRedirect(loaderResults);
        if (redirect2) {
          await startRedirectNavigation(request, redirect2.result, true, {
            replace: replace2
          });
          return { shortCircuited: true };
        }
        redirect2 = findRedirect(fetcherResults);
        if (redirect2) {
          fetchRedirectIds.add(redirect2.key);
          await startRedirectNavigation(request, redirect2.result, true, {
            replace: replace2
          });
          return { shortCircuited: true };
        }
        let { loaderData, errors } = processLoaderData(
          state,
          matches,
          loaderResults,
          pendingActionResult,
          revalidatingFetchers,
          fetcherResults
        );
        if (initialHydration && state.errors) {
          errors = { ...state.errors, ...errors };
        }
        let updatedFetchers = markFetchRedirectsDone();
        let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
        let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
        return {
          matches,
          loaderData,
          errors,
          ...shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}
        };
      }
      function getUpdatedActionData(pendingActionResult) {
        if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {
          return {
            [pendingActionResult[0]]: pendingActionResult[1].data
          };
        } else if (state.actionData) {
          if (Object.keys(state.actionData).length === 0) {
            return null;
          } else {
            return state.actionData;
          }
        }
      }
      function getUpdatedRevalidatingFetchers(revalidatingFetchers) {
        revalidatingFetchers.forEach((rf) => {
          let fetcher = state.fetchers.get(rf.key);
          let revalidatingFetcher = getLoadingFetcher(
            void 0,
            fetcher ? fetcher.data : void 0
          );
          state.fetchers.set(rf.key, revalidatingFetcher);
        });
        return new Map(state.fetchers);
      }
      async function fetch2(key, routeId, href2, opts) {
        abortFetcher(key);
        let flushSync = (opts && opts.flushSync) === true;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let normalizedPath = normalizeTo(
          state.location,
          state.matches,
          basename,
          href2,
          routeId,
          opts == null ? void 0 : opts.relative
        );
        let matches = matchRoutes(routesToUse, normalizedPath, basename);
        let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);
        if (fogOfWar.active && fogOfWar.matches) {
          matches = fogOfWar.matches;
        }
        if (!matches) {
          setFetcherError(
            key,
            routeId,
            getInternalRouterError(404, { pathname: normalizedPath }),
            { flushSync }
          );
          return;
        }
        let { path, submission, error } = normalizeNavigateOptions(
          true,
          normalizedPath,
          opts
        );
        if (error) {
          setFetcherError(key, routeId, error, { flushSync });
          return;
        }
        let match = getTargetMatch(matches, path);
        let scopedContext = new unstable_RouterContextProvider(
          init.unstable_getContext ? await init.unstable_getContext() : void 0
        );
        let preventScrollReset = (opts && opts.preventScrollReset) === true;
        if (submission && isMutationMethod(submission.formMethod)) {
          await handleFetcherAction(
            key,
            routeId,
            path,
            match,
            matches,
            scopedContext,
            fogOfWar.active,
            flushSync,
            preventScrollReset,
            submission
          );
          return;
        }
        fetchLoadMatches.set(key, { routeId, path });
        await handleFetcherLoader(
          key,
          routeId,
          path,
          match,
          matches,
          scopedContext,
          fogOfWar.active,
          flushSync,
          preventScrollReset,
          submission
        );
      }
      async function handleFetcherAction(key, routeId, path, match, requestMatches, scopedContext, isFogOfWar, flushSync, preventScrollReset, submission) {
        interruptActiveLoads();
        fetchLoadMatches.delete(key);
        function detectAndHandle405Error(m2) {
          if (!m2.route.action && !m2.route.lazy) {
            let error = getInternalRouterError(405, {
              method: submission.formMethod,
              pathname: path,
              routeId
            });
            setFetcherError(key, routeId, error, { flushSync });
            return true;
          }
          return false;
        }
        if (!isFogOfWar && detectAndHandle405Error(match)) {
          return;
        }
        let existingFetcher = state.fetchers.get(key);
        updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {
          flushSync
        });
        let abortController = new AbortController();
        let fetchRequest = createClientSideRequest(
          init.history,
          path,
          abortController.signal,
          submission
        );
        if (isFogOfWar) {
          let discoverResult = await discoverRoutes(
            requestMatches,
            path,
            fetchRequest.signal,
            key
          );
          if (discoverResult.type === "aborted") {
            return;
          } else if (discoverResult.type === "error") {
            setFetcherError(key, routeId, discoverResult.error, { flushSync });
            return;
          } else if (!discoverResult.matches) {
            setFetcherError(
              key,
              routeId,
              getInternalRouterError(404, { pathname: path }),
              { flushSync }
            );
            return;
          } else {
            requestMatches = discoverResult.matches;
            match = getTargetMatch(requestMatches, path);
            if (detectAndHandle405Error(match)) {
              return;
            }
          }
        }
        fetchControllers.set(key, abortController);
        let originatingLoadId = incrementingLoadId;
        let fetchMatches = getTargetedDataStrategyMatches(
          mapRouteProperties2,
          manifest,
          fetchRequest,
          requestMatches,
          match,
          hydrationRouteProperties2,
          scopedContext
        );
        let actionResults = await callDataStrategy(
          fetchRequest,
          fetchMatches,
          scopedContext,
          key
        );
        let actionResult = actionResults[match.route.id];
        if (fetchRequest.signal.aborted) {
          if (fetchControllers.get(key) === abortController) {
            fetchControllers.delete(key);
          }
          return;
        }
        if (fetchersQueuedForDeletion.has(key)) {
          if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {
            updateFetcherState(key, getDoneFetcher(void 0));
            return;
          }
        } else {
          if (isRedirectResult(actionResult)) {
            fetchControllers.delete(key);
            if (pendingNavigationLoadId > originatingLoadId) {
              updateFetcherState(key, getDoneFetcher(void 0));
              return;
            } else {
              fetchRedirectIds.add(key);
              updateFetcherState(key, getLoadingFetcher(submission));
              return startRedirectNavigation(fetchRequest, actionResult, false, {
                fetcherSubmission: submission,
                preventScrollReset
              });
            }
          }
          if (isErrorResult(actionResult)) {
            setFetcherError(key, routeId, actionResult.error);
            return;
          }
        }
        let nextLocation = state.navigation.location || state.location;
        let revalidationRequest = createClientSideRequest(
          init.history,
          nextLocation,
          abortController.signal
        );
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;
        invariant$1(matches, "Didn't find any matches after fetcher action");
        let loadId = ++incrementingLoadId;
        fetchReloadIds.set(key, loadId);
        let loadFetcher = getLoadingFetcher(submission, actionResult.data);
        state.fetchers.set(key, loadFetcher);
        let { dsMatches, revalidatingFetchers } = getMatchesToLoad(
          revalidationRequest,
          scopedContext,
          mapRouteProperties2,
          manifest,
          init.history,
          state,
          matches,
          submission,
          nextLocation,
          hydrationRouteProperties2,
          false,
          isRevalidationRequired,
          cancelledFetcherLoads,
          fetchersQueuedForDeletion,
          fetchLoadMatches,
          fetchRedirectIds,
          routesToUse,
          basename,
          [match.route.id, actionResult]
        );
        revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {
          let staleKey = rf.key;
          let existingFetcher2 = state.fetchers.get(staleKey);
          let revalidatingFetcher = getLoadingFetcher(
            void 0,
            existingFetcher2 ? existingFetcher2.data : void 0
          );
          state.fetchers.set(staleKey, revalidatingFetcher);
          abortFetcher(staleKey);
          if (rf.controller) {
            fetchControllers.set(staleKey, rf.controller);
          }
        });
        updateState({ fetchers: new Map(state.fetchers) });
        let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));
        abortController.signal.addEventListener(
          "abort",
          abortPendingFetchRevalidations
        );
        let { loaderResults, fetcherResults } = await callLoadersAndMaybeResolveData(
          dsMatches,
          revalidatingFetchers,
          revalidationRequest,
          scopedContext
        );
        if (abortController.signal.aborted) {
          return;
        }
        abortController.signal.removeEventListener(
          "abort",
          abortPendingFetchRevalidations
        );
        fetchReloadIds.delete(key);
        fetchControllers.delete(key);
        revalidatingFetchers.forEach((r2) => fetchControllers.delete(r2.key));
        if (state.fetchers.has(key)) {
          let doneFetcher = getDoneFetcher(actionResult.data);
          state.fetchers.set(key, doneFetcher);
        }
        let redirect2 = findRedirect(loaderResults);
        if (redirect2) {
          return startRedirectNavigation(
            revalidationRequest,
            redirect2.result,
            false,
            { preventScrollReset }
          );
        }
        redirect2 = findRedirect(fetcherResults);
        if (redirect2) {
          fetchRedirectIds.add(redirect2.key);
          return startRedirectNavigation(
            revalidationRequest,
            redirect2.result,
            false,
            { preventScrollReset }
          );
        }
        let { loaderData, errors } = processLoaderData(
          state,
          matches,
          loaderResults,
          void 0,
          revalidatingFetchers,
          fetcherResults
        );
        abortStaleFetchLoads(loadId);
        if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
          invariant$1(pendingAction, "Expected pending action");
          pendingNavigationController && pendingNavigationController.abort();
          completeNavigation(state.navigation.location, {
            matches,
            loaderData,
            errors,
            fetchers: new Map(state.fetchers)
          });
        } else {
          updateState({
            errors,
            loaderData: mergeLoaderData(
              state.loaderData,
              loaderData,
              matches,
              errors
            ),
            fetchers: new Map(state.fetchers)
          });
          isRevalidationRequired = false;
        }
      }
      async function handleFetcherLoader(key, routeId, path, match, matches, scopedContext, isFogOfWar, flushSync, preventScrollReset, submission) {
        let existingFetcher = state.fetchers.get(key);
        updateFetcherState(
          key,
          getLoadingFetcher(
            submission,
            existingFetcher ? existingFetcher.data : void 0
          ),
          { flushSync }
        );
        let abortController = new AbortController();
        let fetchRequest = createClientSideRequest(
          init.history,
          path,
          abortController.signal
        );
        if (isFogOfWar) {
          let discoverResult = await discoverRoutes(
            matches,
            path,
            fetchRequest.signal,
            key
          );
          if (discoverResult.type === "aborted") {
            return;
          } else if (discoverResult.type === "error") {
            setFetcherError(key, routeId, discoverResult.error, { flushSync });
            return;
          } else if (!discoverResult.matches) {
            setFetcherError(
              key,
              routeId,
              getInternalRouterError(404, { pathname: path }),
              { flushSync }
            );
            return;
          } else {
            matches = discoverResult.matches;
            match = getTargetMatch(matches, path);
          }
        }
        fetchControllers.set(key, abortController);
        let originatingLoadId = incrementingLoadId;
        let dsMatches = getTargetedDataStrategyMatches(
          mapRouteProperties2,
          manifest,
          fetchRequest,
          matches,
          match,
          hydrationRouteProperties2,
          scopedContext
        );
        let results = await callDataStrategy(
          fetchRequest,
          dsMatches,
          scopedContext,
          key
        );
        let result = results[match.route.id];
        if (fetchControllers.get(key) === abortController) {
          fetchControllers.delete(key);
        }
        if (fetchRequest.signal.aborted) {
          return;
        }
        if (fetchersQueuedForDeletion.has(key)) {
          updateFetcherState(key, getDoneFetcher(void 0));
          return;
        }
        if (isRedirectResult(result)) {
          if (pendingNavigationLoadId > originatingLoadId) {
            updateFetcherState(key, getDoneFetcher(void 0));
            return;
          } else {
            fetchRedirectIds.add(key);
            await startRedirectNavigation(fetchRequest, result, false, {
              preventScrollReset
            });
            return;
          }
        }
        if (isErrorResult(result)) {
          setFetcherError(key, routeId, result.error);
          return;
        }
        updateFetcherState(key, getDoneFetcher(result.data));
      }
      async function startRedirectNavigation(request, redirect2, isNavigation, {
        submission,
        fetcherSubmission,
        preventScrollReset,
        replace: replace2
      } = {}) {
        if (redirect2.response.headers.has("X-Remix-Revalidate")) {
          isRevalidationRequired = true;
        }
        let location = redirect2.response.headers.get("Location");
        invariant$1(location, "Expected a Location header on the redirect Response");
        location = normalizeRedirectLocation(
          location,
          new URL(request.url),
          basename
        );
        let redirectLocation = createLocation(state.location, location, {
          _isRedirect: true
        });
        if (isBrowser2) {
          let isDocumentReload = false;
          if (redirect2.response.headers.has("X-Remix-Reload-Document")) {
            isDocumentReload = true;
          } else if (ABSOLUTE_URL_REGEX.test(location)) {
            const url = createBrowserURLImpl(location, true);
            isDocumentReload = // Hard reload if it's an absolute URL to a new origin
            url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
            stripBasename(url.pathname, basename) == null;
          }
          if (isDocumentReload) {
            if (replace2) {
              routerWindow.location.replace(location);
            } else {
              routerWindow.location.assign(location);
            }
            return;
          }
        }
        pendingNavigationController = null;
        let redirectNavigationType = replace2 === true || redirect2.response.headers.has("X-Remix-Replace") ? "REPLACE" : "PUSH";
        let { formMethod, formAction, formEncType } = state.navigation;
        if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {
          submission = getSubmissionFromNavigation(state.navigation);
        }
        let activeSubmission = submission || fetcherSubmission;
        if (redirectPreserveMethodStatusCodes.has(redirect2.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {
          await startNavigation(redirectNavigationType, redirectLocation, {
            submission: {
              ...activeSubmission,
              formAction: location
            },
            // Preserve these flags across redirects
            preventScrollReset: preventScrollReset || pendingPreventScrollReset,
            enableViewTransition: isNavigation ? pendingViewTransitionEnabled : void 0
          });
        } else {
          let overrideNavigation = getLoadingNavigation(
            redirectLocation,
            submission
          );
          await startNavigation(redirectNavigationType, redirectLocation, {
            overrideNavigation,
            // Send fetcher submissions through for shouldRevalidate
            fetcherSubmission,
            // Preserve these flags across redirects
            preventScrollReset: preventScrollReset || pendingPreventScrollReset,
            enableViewTransition: isNavigation ? pendingViewTransitionEnabled : void 0
          });
        }
      }
      async function callDataStrategy(request, matches, scopedContext, fetcherKey) {
        let results;
        let dataResults = {};
        try {
          results = await callDataStrategyImpl(
            dataStrategyImpl,
            request,
            matches,
            fetcherKey,
            scopedContext,
            false
          );
        } catch (e) {
          matches.filter((m2) => m2.shouldLoad).forEach((m2) => {
            dataResults[m2.route.id] = {
              type: "error",
              error: e
            };
          });
          return dataResults;
        }
        if (request.signal.aborted) {
          return dataResults;
        }
        for (let [routeId, result] of Object.entries(results)) {
          if (isRedirectDataStrategyResult(result)) {
            let response = result.result;
            dataResults[routeId] = {
              type: "redirect",
              response: normalizeRelativeRoutingRedirectResponse(
                response,
                request,
                routeId,
                matches,
                basename
              )
            };
          } else {
            dataResults[routeId] = await convertDataStrategyResultToDataResult(
              result
            );
          }
        }
        return dataResults;
      }
      async function callLoadersAndMaybeResolveData(matches, fetchersToLoad, request, scopedContext) {
        let loaderResultsPromise = callDataStrategy(
          request,
          matches,
          scopedContext,
          null
        );
        let fetcherResultsPromise = Promise.all(
          fetchersToLoad.map(async (f) => {
            if (f.matches && f.match && f.request && f.controller) {
              let results = await callDataStrategy(
                f.request,
                f.matches,
                scopedContext,
                f.key
              );
              let result = results[f.match.route.id];
              return { [f.key]: result };
            } else {
              return Promise.resolve({
                [f.key]: {
                  type: "error",
                  error: getInternalRouterError(404, {
                    pathname: f.path
                  })
                }
              });
            }
          })
        );
        let loaderResults = await loaderResultsPromise;
        let fetcherResults = (await fetcherResultsPromise).reduce(
          (acc, r2) => Object.assign(acc, r2),
          {}
        );
        return {
          loaderResults,
          fetcherResults
        };
      }
      function interruptActiveLoads() {
        isRevalidationRequired = true;
        fetchLoadMatches.forEach((_, key) => {
          if (fetchControllers.has(key)) {
            cancelledFetcherLoads.add(key);
          }
          abortFetcher(key);
        });
      }
      function updateFetcherState(key, fetcher, opts = {}) {
        state.fetchers.set(key, fetcher);
        updateState(
          { fetchers: new Map(state.fetchers) },
          { flushSync: (opts && opts.flushSync) === true }
        );
      }
      function setFetcherError(key, routeId, error, opts = {}) {
        let boundaryMatch = findNearestBoundary(state.matches, routeId);
        deleteFetcher(key);
        updateState(
          {
            errors: {
              [boundaryMatch.route.id]: error
            },
            fetchers: new Map(state.fetchers)
          },
          { flushSync: (opts && opts.flushSync) === true }
        );
      }
      function getFetcher(key) {
        activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);
        if (fetchersQueuedForDeletion.has(key)) {
          fetchersQueuedForDeletion.delete(key);
        }
        return state.fetchers.get(key) || IDLE_FETCHER;
      }
      function deleteFetcher(key) {
        let fetcher = state.fetchers.get(key);
        if (fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))) {
          abortFetcher(key);
        }
        fetchLoadMatches.delete(key);
        fetchReloadIds.delete(key);
        fetchRedirectIds.delete(key);
        fetchersQueuedForDeletion.delete(key);
        cancelledFetcherLoads.delete(key);
        state.fetchers.delete(key);
      }
      function queueFetcherForDeletion(key) {
        let count2 = (activeFetchers.get(key) || 0) - 1;
        if (count2 <= 0) {
          activeFetchers.delete(key);
          fetchersQueuedForDeletion.add(key);
        } else {
          activeFetchers.set(key, count2);
        }
        updateState({ fetchers: new Map(state.fetchers) });
      }
      function abortFetcher(key) {
        let controller = fetchControllers.get(key);
        if (controller) {
          controller.abort();
          fetchControllers.delete(key);
        }
      }
      function markFetchersDone(keys2) {
        for (let key of keys2) {
          let fetcher = getFetcher(key);
          let doneFetcher = getDoneFetcher(fetcher.data);
          state.fetchers.set(key, doneFetcher);
        }
      }
      function markFetchRedirectsDone() {
        let doneKeys = [];
        let updatedFetchers = false;
        for (let key of fetchRedirectIds) {
          let fetcher = state.fetchers.get(key);
          invariant$1(fetcher, `Expected fetcher: ${key}`);
          if (fetcher.state === "loading") {
            fetchRedirectIds.delete(key);
            doneKeys.push(key);
            updatedFetchers = true;
          }
        }
        markFetchersDone(doneKeys);
        return updatedFetchers;
      }
      function abortStaleFetchLoads(landedId) {
        let yeetedKeys = [];
        for (let [key, id] of fetchReloadIds) {
          if (id < landedId) {
            let fetcher = state.fetchers.get(key);
            invariant$1(fetcher, `Expected fetcher: ${key}`);
            if (fetcher.state === "loading") {
              abortFetcher(key);
              fetchReloadIds.delete(key);
              yeetedKeys.push(key);
            }
          }
        }
        markFetchersDone(yeetedKeys);
        return yeetedKeys.length > 0;
      }
      function getBlocker(key, fn) {
        let blocker = state.blockers.get(key) || IDLE_BLOCKER;
        if (blockerFunctions.get(key) !== fn) {
          blockerFunctions.set(key, fn);
        }
        return blocker;
      }
      function deleteBlocker(key) {
        state.blockers.delete(key);
        blockerFunctions.delete(key);
      }
      function updateBlocker(key, newBlocker) {
        let blocker = state.blockers.get(key) || IDLE_BLOCKER;
        invariant$1(
          blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked",
          `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`
        );
        let blockers = new Map(state.blockers);
        blockers.set(key, newBlocker);
        updateState({ blockers });
      }
      function shouldBlockNavigation({
        currentLocation,
        nextLocation,
        historyAction
      }) {
        if (blockerFunctions.size === 0) {
          return;
        }
        if (blockerFunctions.size > 1) {
          warning(false, "A router only supports one blocker at a time");
        }
        let entries = Array.from(blockerFunctions.entries());
        let [blockerKey, blockerFunction] = entries[entries.length - 1];
        let blocker = state.blockers.get(blockerKey);
        if (blocker && blocker.state === "proceeding") {
          return;
        }
        if (blockerFunction({ currentLocation, nextLocation, historyAction })) {
          return blockerKey;
        }
      }
      function handleNavigational404(pathname) {
        let error = getInternalRouterError(404, { pathname });
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let { matches, route } = getShortCircuitMatches(routesToUse);
        return { notFoundMatches: matches, route, error };
      }
      function enableScrollRestoration(positions, getPosition, getKey) {
        savedScrollPositions2 = positions;
        getScrollPosition = getPosition;
        getScrollRestorationKey2 = getKey || null;
        if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
          initialScrollRestored = true;
          let y2 = getSavedScrollPosition(state.location, state.matches);
          if (y2 != null) {
            updateState({ restoreScrollPosition: y2 });
          }
        }
        return () => {
          savedScrollPositions2 = null;
          getScrollPosition = null;
          getScrollRestorationKey2 = null;
        };
      }
      function getScrollKey(location, matches) {
        if (getScrollRestorationKey2) {
          let key = getScrollRestorationKey2(
            location,
            matches.map((m2) => convertRouteMatchToUiMatch(m2, state.loaderData))
          );
          return key || location.key;
        }
        return location.key;
      }
      function saveScrollPosition(location, matches) {
        if (savedScrollPositions2 && getScrollPosition) {
          let key = getScrollKey(location, matches);
          savedScrollPositions2[key] = getScrollPosition();
        }
      }
      function getSavedScrollPosition(location, matches) {
        if (savedScrollPositions2) {
          let key = getScrollKey(location, matches);
          let y2 = savedScrollPositions2[key];
          if (typeof y2 === "number") {
            return y2;
          }
        }
        return null;
      }
      function checkFogOfWar(matches, routesToUse, pathname) {
        if (init.patchRoutesOnNavigation) {
          if (!matches) {
            let fogMatches = matchRoutesImpl(
              routesToUse,
              pathname,
              basename,
              true
            );
            return { active: true, matches: fogMatches || [] };
          } else {
            if (Object.keys(matches[0].params).length > 0) {
              let partialMatches = matchRoutesImpl(
                routesToUse,
                pathname,
                basename,
                true
              );
              return { active: true, matches: partialMatches };
            }
          }
        }
        return { active: false, matches: null };
      }
      async function discoverRoutes(matches, pathname, signal, fetcherKey) {
        if (!init.patchRoutesOnNavigation) {
          return { type: "success", matches };
        }
        let partialMatches = matches;
        while (true) {
          let isNonHMR = inFlightDataRoutes == null;
          let routesToUse = inFlightDataRoutes || dataRoutes;
          let localManifest = manifest;
          try {
            await init.patchRoutesOnNavigation({
              signal,
              path: pathname,
              matches: partialMatches,
              fetcherKey,
              patch: (routeId, children) => {
                if (signal.aborted) return;
                patchRoutesImpl(
                  routeId,
                  children,
                  routesToUse,
                  localManifest,
                  mapRouteProperties2
                );
              }
            });
          } catch (e) {
            return { type: "error", error: e, partialMatches };
          } finally {
            if (isNonHMR && !signal.aborted) {
              dataRoutes = [...dataRoutes];
            }
          }
          if (signal.aborted) {
            return { type: "aborted" };
          }
          let newMatches = matchRoutes(routesToUse, pathname, basename);
          if (newMatches) {
            return { type: "success", matches: newMatches };
          }
          let newPartialMatches = matchRoutesImpl(
            routesToUse,
            pathname,
            basename,
            true
          );
          if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every(
            (m2, i2) => m2.route.id === newPartialMatches[i2].route.id
          )) {
            return { type: "success", matches: null };
          }
          partialMatches = newPartialMatches;
        }
      }
      function _internalSetRoutes(newRoutes) {
        manifest = {};
        inFlightDataRoutes = convertRoutesToDataRoutes(
          newRoutes,
          mapRouteProperties2,
          void 0,
          manifest
        );
      }
      function patchRoutes(routeId, children) {
        let isNonHMR = inFlightDataRoutes == null;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        patchRoutesImpl(
          routeId,
          children,
          routesToUse,
          manifest,
          mapRouteProperties2
        );
        if (isNonHMR) {
          dataRoutes = [...dataRoutes];
          updateState({});
        }
      }
      router2 = {
        get basename() {
          return basename;
        },
        get future() {
          return future;
        },
        get state() {
          return state;
        },
        get routes() {
          return dataRoutes;
        },
        get window() {
          return routerWindow;
        },
        initialize,
        subscribe,
        enableScrollRestoration,
        navigate,
        fetch: fetch2,
        revalidate,
        // Passthrough to history-aware createHref used by useHref so we get proper
        // hash-aware URLs in DOM paths
        createHref: (to2) => init.history.createHref(to2),
        encodeLocation: (to2) => init.history.encodeLocation(to2),
        getFetcher,
        deleteFetcher: queueFetcherForDeletion,
        dispose,
        getBlocker,
        deleteBlocker,
        patchRoutes,
        _internalFetchControllers: fetchControllers,
        // TODO: Remove setRoutes, it's temporary to avoid dealing with
        // updating the tree while validating the update algorithm.
        _internalSetRoutes
      };
      return router2;
    }
    function isSubmissionNavigation(opts) {
      return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== void 0);
    }
    function normalizeTo(location, matches, basename, to2, fromRouteId, relative) {
      let contextualMatches;
      let activeRouteMatch;
      if (fromRouteId) {
        contextualMatches = [];
        for (let match of matches) {
          contextualMatches.push(match);
          if (match.route.id === fromRouteId) {
            activeRouteMatch = match;
            break;
          }
        }
      } else {
        contextualMatches = matches;
        activeRouteMatch = matches[matches.length - 1];
      }
      let path = resolveTo(
        to2 ? to2 : ".",
        getResolveToMatches(contextualMatches),
        stripBasename(location.pathname, basename) || location.pathname,
        relative === "path"
      );
      if (to2 == null) {
        path.search = location.search;
        path.hash = location.hash;
      }
      if ((to2 == null || to2 === "" || to2 === ".") && activeRouteMatch) {
        let nakedIndex = hasNakedIndexQuery(path.search);
        if (activeRouteMatch.route.index && !nakedIndex) {
          path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
        } else if (!activeRouteMatch.route.index && nakedIndex) {
          let params = new URLSearchParams(path.search);
          let indexValues = params.getAll("index");
          params.delete("index");
          indexValues.filter((v) => v).forEach((v) => params.append("index", v));
          let qs = params.toString();
          path.search = qs ? `?${qs}` : "";
        }
      }
      if (basename !== "/") {
        path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
      }
      return createPath(path);
    }
    function normalizeNavigateOptions(isFetcher, path, opts) {
      if (!opts || !isSubmissionNavigation(opts)) {
        return { path };
      }
      if (opts.formMethod && !isValidMethod(opts.formMethod)) {
        return {
          path,
          error: getInternalRouterError(405, { method: opts.formMethod })
        };
      }
      let getInvalidBodyError = () => ({
        path,
        error: getInternalRouterError(400, { type: "invalid-body" })
      });
      let rawFormMethod = opts.formMethod || "get";
      let formMethod = rawFormMethod.toUpperCase();
      let formAction = stripHashFromPath(path);
      if (opts.body !== void 0) {
        if (opts.formEncType === "text/plain") {
          if (!isMutationMethod(formMethod)) {
            return getInvalidBodyError();
          }
          let text2 = typeof opts.body === "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? (
            // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
            Array.from(opts.body.entries()).reduce(
              (acc, [name, value]) => `${acc}${name}=${value}
`,
              ""
            )
          ) : String(opts.body);
          return {
            path,
            submission: {
              formMethod,
              formAction,
              formEncType: opts.formEncType,
              formData: void 0,
              json: void 0,
              text: text2
            }
          };
        } else if (opts.formEncType === "application/json") {
          if (!isMutationMethod(formMethod)) {
            return getInvalidBodyError();
          }
          try {
            let json = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;
            return {
              path,
              submission: {
                formMethod,
                formAction,
                formEncType: opts.formEncType,
                formData: void 0,
                json,
                text: void 0
              }
            };
          } catch (e) {
            return getInvalidBodyError();
          }
        }
      }
      invariant$1(
        typeof FormData === "function",
        "FormData is not available in this environment"
      );
      let searchParams;
      let formData;
      if (opts.formData) {
        searchParams = convertFormDataToSearchParams(opts.formData);
        formData = opts.formData;
      } else if (opts.body instanceof FormData) {
        searchParams = convertFormDataToSearchParams(opts.body);
        formData = opts.body;
      } else if (opts.body instanceof URLSearchParams) {
        searchParams = opts.body;
        formData = convertSearchParamsToFormData(searchParams);
      } else if (opts.body == null) {
        searchParams = new URLSearchParams();
        formData = new FormData();
      } else {
        try {
          searchParams = new URLSearchParams(opts.body);
          formData = convertSearchParamsToFormData(searchParams);
        } catch (e) {
          return getInvalidBodyError();
        }
      }
      let submission = {
        formMethod,
        formAction,
        formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
        formData,
        json: void 0,
        text: void 0
      };
      if (isMutationMethod(submission.formMethod)) {
        return { path, submission };
      }
      let parsedPath = parsePath(path);
      if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {
        searchParams.append("index", "");
      }
      parsedPath.search = `?${searchParams}`;
      return { path: createPath(parsedPath), submission };
    }
    function getMatchesToLoad(request, scopedContext, mapRouteProperties2, manifest, history, state, matches, submission, location, lazyRoutePropertiesToSkip, initialHydration, isRevalidationRequired, cancelledFetcherLoads, fetchersQueuedForDeletion, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {
      var _a2;
      let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : void 0;
      let currentUrl = history.createURL(state.location);
      let nextUrl = history.createURL(location);
      let maxIdx;
      if (initialHydration && state.errors) {
        let boundaryId = Object.keys(state.errors)[0];
        maxIdx = matches.findIndex((m2) => m2.route.id === boundaryId);
      } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {
        let boundaryId = pendingActionResult[0];
        maxIdx = matches.findIndex((m2) => m2.route.id === boundaryId) - 1;
      }
      let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : void 0;
      let shouldSkipRevalidation = actionStatus && actionStatus >= 400;
      let baseShouldRevalidateArgs = {
        currentUrl,
        currentParams: ((_a2 = state.matches[0]) == null ? void 0 : _a2.params) || {},
        nextUrl,
        nextParams: matches[0].params,
        ...submission,
        actionResult,
        actionStatus
      };
      let dsMatches = matches.map((match, index2) => {
        let { route } = match;
        let forceShouldLoad = null;
        if (maxIdx != null && index2 > maxIdx) {
          forceShouldLoad = false;
        } else if (route.lazy) {
          forceShouldLoad = true;
        } else if (route.loader == null) {
          forceShouldLoad = false;
        } else if (initialHydration) {
          forceShouldLoad = shouldLoadRouteOnHydration(
            route,
            state.loaderData,
            state.errors
          );
        } else if (isNewLoader(state.loaderData, state.matches[index2], match)) {
          forceShouldLoad = true;
        }
        if (forceShouldLoad !== null) {
          return getDataStrategyMatch(
            mapRouteProperties2,
            manifest,
            request,
            match,
            lazyRoutePropertiesToSkip,
            scopedContext,
            forceShouldLoad
          );
        }
        let defaultShouldRevalidate = shouldSkipRevalidation ? false : (
          // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
          isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
          currentUrl.search !== nextUrl.search || isNewRouteInstance(state.matches[index2], match)
        );
        let shouldRevalidateArgs = {
          ...baseShouldRevalidateArgs,
          defaultShouldRevalidate
        };
        let shouldLoad = shouldRevalidateLoader(match, shouldRevalidateArgs);
        return getDataStrategyMatch(
          mapRouteProperties2,
          manifest,
          request,
          match,
          lazyRoutePropertiesToSkip,
          scopedContext,
          shouldLoad,
          shouldRevalidateArgs
        );
      });
      let revalidatingFetchers = [];
      fetchLoadMatches.forEach((f, key) => {
        if (initialHydration || !matches.some((m2) => m2.route.id === f.routeId) || fetchersQueuedForDeletion.has(key)) {
          return;
        }
        let fetcherMatches = matchRoutes(routesToUse, f.path, basename);
        if (!fetcherMatches) {
          revalidatingFetchers.push({
            key,
            routeId: f.routeId,
            path: f.path,
            matches: null,
            match: null,
            request: null,
            controller: null
          });
          return;
        }
        if (fetchRedirectIds.has(key)) {
          return;
        }
        let fetcher = state.fetchers.get(key);
        let fetcherMatch = getTargetMatch(fetcherMatches, f.path);
        let fetchController = new AbortController();
        let fetchRequest = createClientSideRequest(
          history,
          f.path,
          fetchController.signal
        );
        let fetcherDsMatches = null;
        if (cancelledFetcherLoads.has(key)) {
          cancelledFetcherLoads.delete(key);
          fetcherDsMatches = getTargetedDataStrategyMatches(
            mapRouteProperties2,
            manifest,
            fetchRequest,
            fetcherMatches,
            fetcherMatch,
            lazyRoutePropertiesToSkip,
            scopedContext
          );
        } else if (fetcher && fetcher.state !== "idle" && fetcher.data === void 0) {
          if (isRevalidationRequired) {
            fetcherDsMatches = getTargetedDataStrategyMatches(
              mapRouteProperties2,
              manifest,
              fetchRequest,
              fetcherMatches,
              fetcherMatch,
              lazyRoutePropertiesToSkip,
              scopedContext
            );
          }
        } else {
          let shouldRevalidateArgs = {
            ...baseShouldRevalidateArgs,
            defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired
          };
          if (shouldRevalidateLoader(fetcherMatch, shouldRevalidateArgs)) {
            fetcherDsMatches = getTargetedDataStrategyMatches(
              mapRouteProperties2,
              manifest,
              fetchRequest,
              fetcherMatches,
              fetcherMatch,
              lazyRoutePropertiesToSkip,
              scopedContext,
              shouldRevalidateArgs
            );
          }
        }
        if (fetcherDsMatches) {
          revalidatingFetchers.push({
            key,
            routeId: f.routeId,
            path: f.path,
            matches: fetcherDsMatches,
            match: fetcherMatch,
            request: fetchRequest,
            controller: fetchController
          });
        }
      });
      return { dsMatches, revalidatingFetchers };
    }
    function shouldLoadRouteOnHydration(route, loaderData, errors) {
      if (route.lazy) {
        return true;
      }
      if (!route.loader) {
        return false;
      }
      let hasData = loaderData != null && route.id in loaderData;
      let hasError = errors != null && errors[route.id] !== void 0;
      if (!hasData && hasError) {
        return false;
      }
      if (typeof route.loader === "function" && route.loader.hydrate === true) {
        return true;
      }
      return !hasData && !hasError;
    }
    function isNewLoader(currentLoaderData, currentMatch, match) {
      let isNew = (
        // [a] -> [a, b]
        !currentMatch || // [a, b] -> [a, c]
        match.route.id !== currentMatch.route.id
      );
      let isMissingData = !currentLoaderData.hasOwnProperty(match.route.id);
      return isNew || isMissingData;
    }
    function isNewRouteInstance(currentMatch, match) {
      let currentPath = currentMatch.route.path;
      return (
        // param change for this match, /users/123 -> /users/456
        currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path
        // e.g. /files/images/avatar.jpg -> files/finances.xls
        currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match.params["*"]
      );
    }
    function shouldRevalidateLoader(loaderMatch, arg) {
      if (loaderMatch.route.shouldRevalidate) {
        let routeChoice = loaderMatch.route.shouldRevalidate(arg);
        if (typeof routeChoice === "boolean") {
          return routeChoice;
        }
      }
      return arg.defaultShouldRevalidate;
    }
    function patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties2) {
      let childrenToPatch;
      if (routeId) {
        let route = manifest[routeId];
        invariant$1(
          route,
          `No route found to patch children into: routeId = ${routeId}`
        );
        if (!route.children) {
          route.children = [];
        }
        childrenToPatch = route.children;
      } else {
        childrenToPatch = routesToUse;
      }
      let uniqueChildren = children.filter(
        (newRoute) => !childrenToPatch.some(
          (existingRoute) => isSameRoute(newRoute, existingRoute)
        )
      );
      let newRoutes = convertRoutesToDataRoutes(
        uniqueChildren,
        mapRouteProperties2,
        [routeId || "_", "patch", String((childrenToPatch == null ? void 0 : childrenToPatch.length) || "0")],
        manifest
      );
      childrenToPatch.push(...newRoutes);
    }
    function isSameRoute(newRoute, existingRoute) {
      if ("id" in newRoute && "id" in existingRoute && newRoute.id === existingRoute.id) {
        return true;
      }
      if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {
        return false;
      }
      if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {
        return true;
      }
      return newRoute.children.every(
        (aChild, i2) => {
          var _a2;
          return (_a2 = existingRoute.children) == null ? void 0 : _a2.some((bChild) => isSameRoute(aChild, bChild));
        }
      );
    }
    var lazyRoutePropertyCache = /* @__PURE__ */ new WeakMap();
    var loadLazyRouteProperty = ({
      key,
      route,
      manifest,
      mapRouteProperties: mapRouteProperties2
    }) => {
      let routeToUpdate = manifest[route.id];
      invariant$1(routeToUpdate, "No route found in manifest");
      if (!routeToUpdate.lazy || typeof routeToUpdate.lazy !== "object") {
        return;
      }
      let lazyFn = routeToUpdate.lazy[key];
      if (!lazyFn) {
        return;
      }
      let cache = lazyRoutePropertyCache.get(routeToUpdate);
      if (!cache) {
        cache = {};
        lazyRoutePropertyCache.set(routeToUpdate, cache);
      }
      let cachedPromise = cache[key];
      if (cachedPromise) {
        return cachedPromise;
      }
      let propertyPromise = (async () => {
        let isUnsupported = isUnsupportedLazyRouteObjectKey(key);
        let staticRouteValue = routeToUpdate[key];
        let isStaticallyDefined = staticRouteValue !== void 0 && key !== "hasErrorBoundary";
        if (isUnsupported) {
          warning(
            !isUnsupported,
            "Route property " + key + " is not a supported lazy route property. This property will be ignored."
          );
          cache[key] = Promise.resolve();
        } else if (isStaticallyDefined) {
          warning(
            false,
            `Route "${routeToUpdate.id}" has a static property "${key}" defined. The lazy property will be ignored.`
          );
        } else {
          let value = await lazyFn();
          if (value != null) {
            Object.assign(routeToUpdate, { [key]: value });
            Object.assign(routeToUpdate, mapRouteProperties2(routeToUpdate));
          }
        }
        if (typeof routeToUpdate.lazy === "object") {
          routeToUpdate.lazy[key] = void 0;
          if (Object.values(routeToUpdate.lazy).every((value) => value === void 0)) {
            routeToUpdate.lazy = void 0;
          }
        }
      })();
      cache[key] = propertyPromise;
      return propertyPromise;
    };
    var lazyRouteFunctionCache = /* @__PURE__ */ new WeakMap();
    function loadLazyRoute(route, type, manifest, mapRouteProperties2, lazyRoutePropertiesToSkip) {
      let routeToUpdate = manifest[route.id];
      invariant$1(routeToUpdate, "No route found in manifest");
      if (!route.lazy) {
        return {
          lazyRoutePromise: void 0,
          lazyHandlerPromise: void 0
        };
      }
      if (typeof route.lazy === "function") {
        let cachedPromise = lazyRouteFunctionCache.get(routeToUpdate);
        if (cachedPromise) {
          return {
            lazyRoutePromise: cachedPromise,
            lazyHandlerPromise: cachedPromise
          };
        }
        let lazyRoutePromise2 = (async () => {
          invariant$1(
            typeof route.lazy === "function",
            "No lazy route function found"
          );
          let lazyRoute = await route.lazy();
          let routeUpdates = {};
          for (let lazyRouteProperty in lazyRoute) {
            let lazyValue = lazyRoute[lazyRouteProperty];
            if (lazyValue === void 0) {
              continue;
            }
            let isUnsupported = isUnsupportedLazyRouteFunctionKey(lazyRouteProperty);
            let staticRouteValue = routeToUpdate[lazyRouteProperty];
            let isStaticallyDefined = staticRouteValue !== void 0 && // This property isn't static since it should always be updated based
            // on the route updates
            lazyRouteProperty !== "hasErrorBoundary";
            if (isUnsupported) {
              warning(
                !isUnsupported,
                "Route property " + lazyRouteProperty + " is not a supported property to be returned from a lazy route function. This property will be ignored."
              );
            } else if (isStaticallyDefined) {
              warning(
                !isStaticallyDefined,
                `Route "${routeToUpdate.id}" has a static property "${lazyRouteProperty}" defined but its lazy function is also returning a value for this property. The lazy route property "${lazyRouteProperty}" will be ignored.`
              );
            } else {
              routeUpdates[lazyRouteProperty] = lazyValue;
            }
          }
          Object.assign(routeToUpdate, routeUpdates);
          Object.assign(routeToUpdate, {
            // To keep things framework agnostic, we use the provided `mapRouteProperties`
            // function to set the framework-aware properties (`element`/`hasErrorBoundary`)
            // since the logic will differ between frameworks.
            ...mapRouteProperties2(routeToUpdate),
            lazy: void 0
          });
        })();
        lazyRouteFunctionCache.set(routeToUpdate, lazyRoutePromise2);
        lazyRoutePromise2.catch(() => {
        });
        return {
          lazyRoutePromise: lazyRoutePromise2,
          lazyHandlerPromise: lazyRoutePromise2
        };
      }
      let lazyKeys = Object.keys(route.lazy);
      let lazyPropertyPromises = [];
      let lazyHandlerPromise = void 0;
      for (let key of lazyKeys) {
        if (lazyRoutePropertiesToSkip && lazyRoutePropertiesToSkip.includes(key)) {
          continue;
        }
        let promise = loadLazyRouteProperty({
          key,
          route,
          manifest,
          mapRouteProperties: mapRouteProperties2
        });
        if (promise) {
          lazyPropertyPromises.push(promise);
          if (key === type) {
            lazyHandlerPromise = promise;
          }
        }
      }
      let lazyRoutePromise = lazyPropertyPromises.length > 0 ? Promise.all(lazyPropertyPromises).then(() => {
      }) : void 0;
      lazyRoutePromise == null ? void 0 : lazyRoutePromise.catch(() => {
      });
      lazyHandlerPromise == null ? void 0 : lazyHandlerPromise.catch(() => {
      });
      return {
        lazyRoutePromise,
        lazyHandlerPromise
      };
    }
    async function defaultDataStrategy(args) {
      let matchesToLoad = args.matches.filter((m2) => m2.shouldLoad);
      let keyedResults = {};
      let results = await Promise.all(matchesToLoad.map((m2) => m2.resolve()));
      results.forEach((result, i2) => {
        keyedResults[matchesToLoad[i2].route.id] = result;
      });
      return keyedResults;
    }
    async function defaultDataStrategyWithMiddleware(args) {
      if (!args.matches.some((m2) => m2.route.unstable_middleware)) {
        return defaultDataStrategy(args);
      }
      return runMiddlewarePipeline(
        args,
        false,
        () => defaultDataStrategy(args),
        (error, routeId) => ({ [routeId]: { type: "error", result: error } })
      );
    }
    async function runMiddlewarePipeline(args, propagateResult, handler, errorHandler) {
      let { matches, request, params, context } = args;
      let middlewareState = {
        handlerResult: void 0
      };
      try {
        let tuples = matches.flatMap(
          (m2) => m2.route.unstable_middleware ? m2.route.unstable_middleware.map((fn) => [m2.route.id, fn]) : []
        );
        let result = await callRouteMiddleware(
          { request, params, context },
          tuples,
          propagateResult,
          middlewareState,
          handler
        );
        return propagateResult ? result : middlewareState.handlerResult;
      } catch (e) {
        if (!middlewareState.middlewareError) {
          throw e;
        }
        let result = await errorHandler(
          middlewareState.middlewareError.error,
          middlewareState.middlewareError.routeId
        );
        if (!middlewareState.handlerResult) {
          return result;
        }
        return Object.assign(middlewareState.handlerResult, result);
      }
    }
    async function callRouteMiddleware(args, middlewares, propagateResult, middlewareState, handler, idx = 0) {
      let { request } = args;
      if (request.signal.aborted) {
        if (request.signal.reason) {
          throw request.signal.reason;
        }
        throw new Error(
          `Request aborted without an \`AbortSignal.reason\`: ${request.method} ${request.url}`
        );
      }
      let tuple = middlewares[idx];
      if (!tuple) {
        middlewareState.handlerResult = await handler();
        return middlewareState.handlerResult;
      }
      let [routeId, middleware] = tuple;
      let nextCalled = false;
      let nextResult = void 0;
      let next = async () => {
        if (nextCalled) {
          throw new Error("You may only call `next()` once per middleware");
        }
        nextCalled = true;
        await callRouteMiddleware(
          args,
          middlewares,
          propagateResult,
          middlewareState,
          handler,
          idx + 1
        );
      };
      try {
        let result = await middleware(
          {
            request: args.request,
            params: args.params,
            context: args.context
          },
          next
        );
        if (nextCalled) {
          if (result === void 0) {
            return nextResult;
          } else {
            return result;
          }
        } else {
          return next();
        }
      } catch (error) {
        if (!middlewareState.middlewareError) {
          middlewareState.middlewareError = { routeId, error };
        } else if (middlewareState.middlewareError.error !== error) {
          middlewareState.middlewareError = { routeId, error };
        }
        throw error;
      }
    }
    function getDataStrategyMatchLazyPromises(mapRouteProperties2, manifest, request, match, lazyRoutePropertiesToSkip) {
      let lazyMiddlewarePromise = loadLazyRouteProperty({
        key: "unstable_middleware",
        route: match.route,
        manifest,
        mapRouteProperties: mapRouteProperties2
      });
      let lazyRoutePromises = loadLazyRoute(
        match.route,
        isMutationMethod(request.method) ? "action" : "loader",
        manifest,
        mapRouteProperties2,
        lazyRoutePropertiesToSkip
      );
      return {
        middleware: lazyMiddlewarePromise,
        route: lazyRoutePromises.lazyRoutePromise,
        handler: lazyRoutePromises.lazyHandlerPromise
      };
    }
    function getDataStrategyMatch(mapRouteProperties2, manifest, request, match, lazyRoutePropertiesToSkip, scopedContext, shouldLoad, unstable_shouldRevalidateArgs = null) {
      let isUsingNewApi = false;
      let _lazyPromises = getDataStrategyMatchLazyPromises(
        mapRouteProperties2,
        manifest,
        request,
        match,
        lazyRoutePropertiesToSkip
      );
      return {
        ...match,
        _lazyPromises,
        shouldLoad,
        unstable_shouldRevalidateArgs,
        unstable_shouldCallHandler(defaultShouldRevalidate) {
          isUsingNewApi = true;
          if (!unstable_shouldRevalidateArgs) {
            return shouldLoad;
          }
          if (typeof defaultShouldRevalidate === "boolean") {
            return shouldRevalidateLoader(match, {
              ...unstable_shouldRevalidateArgs,
              defaultShouldRevalidate
            });
          }
          return shouldRevalidateLoader(match, unstable_shouldRevalidateArgs);
        },
        resolve(handlerOverride) {
          if (isUsingNewApi || shouldLoad || handlerOverride && request.method === "GET" && (match.route.lazy || match.route.loader)) {
            return callLoaderOrAction({
              request,
              match,
              lazyHandlerPromise: _lazyPromises == null ? void 0 : _lazyPromises.handler,
              lazyRoutePromise: _lazyPromises == null ? void 0 : _lazyPromises.route,
              handlerOverride,
              scopedContext
            });
          }
          return Promise.resolve({ type: "data", result: void 0 });
        }
      };
    }
    function getTargetedDataStrategyMatches(mapRouteProperties2, manifest, request, matches, targetMatch, lazyRoutePropertiesToSkip, scopedContext, shouldRevalidateArgs = null) {
      return matches.map((match) => {
        if (match.route.id !== targetMatch.route.id) {
          return {
            ...match,
            shouldLoad: false,
            unstable_shouldRevalidateArgs: shouldRevalidateArgs,
            unstable_shouldCallHandler: () => false,
            _lazyPromises: getDataStrategyMatchLazyPromises(
              mapRouteProperties2,
              manifest,
              request,
              match,
              lazyRoutePropertiesToSkip
            ),
            resolve: () => Promise.resolve({ type: "data", result: void 0 })
          };
        }
        return getDataStrategyMatch(
          mapRouteProperties2,
          manifest,
          request,
          match,
          lazyRoutePropertiesToSkip,
          scopedContext,
          true,
          shouldRevalidateArgs
        );
      });
    }
    async function callDataStrategyImpl(dataStrategyImpl, request, matches, fetcherKey, scopedContext, isStaticHandler) {
      if (matches.some((m2) => {
        var _a2;
        return (_a2 = m2._lazyPromises) == null ? void 0 : _a2.middleware;
      })) {
        await Promise.all(matches.map((m2) => {
          var _a2;
          return (_a2 = m2._lazyPromises) == null ? void 0 : _a2.middleware;
        }));
      }
      let dataStrategyArgs = {
        request,
        params: matches[0].params,
        context: scopedContext,
        matches
      };
      let unstable_runClientMiddleware = (cb) => {
        let typedDataStrategyArgs = dataStrategyArgs;
        return runMiddlewarePipeline(
          typedDataStrategyArgs,
          false,
          () => cb({
            ...typedDataStrategyArgs,
            fetcherKey,
            unstable_runClientMiddleware: () => {
              throw new Error(
                "Cannot call `unstable_runClientMiddleware()` from within an `unstable_runClientMiddleware` handler"
              );
            }
          }),
          (error, routeId) => ({
            [routeId]: { type: "error", result: error }
          })
        );
      };
      let results = await dataStrategyImpl({
        ...dataStrategyArgs,
        fetcherKey,
        unstable_runClientMiddleware
      });
      try {
        await Promise.all(
          matches.flatMap((m2) => {
            var _a2, _b2;
            return [(_a2 = m2._lazyPromises) == null ? void 0 : _a2.handler, (_b2 = m2._lazyPromises) == null ? void 0 : _b2.route];
          })
        );
      } catch (e) {
      }
      return results;
    }
    async function callLoaderOrAction({
      request,
      match,
      lazyHandlerPromise,
      lazyRoutePromise,
      handlerOverride,
      scopedContext
    }) {
      let result;
      let onReject;
      let isAction2 = isMutationMethod(request.method);
      let type = isAction2 ? "action" : "loader";
      let runHandler = (handler) => {
        let reject;
        let abortPromise = new Promise((_, r2) => reject = r2);
        onReject = () => reject();
        request.signal.addEventListener("abort", onReject);
        let actualHandler = (ctx) => {
          if (typeof handler !== "function") {
            return Promise.reject(
              new Error(
                `You cannot call the handler for a route which defines a boolean "${type}" [routeId: ${match.route.id}]`
              )
            );
          }
          return handler(
            {
              request,
              params: match.params,
              context: scopedContext
            },
            ...ctx !== void 0 ? [ctx] : []
          );
        };
        let handlerPromise = (async () => {
          try {
            let val = await (handlerOverride ? handlerOverride((ctx) => actualHandler(ctx)) : actualHandler());
            return { type: "data", result: val };
          } catch (e) {
            return { type: "error", result: e };
          }
        })();
        return Promise.race([handlerPromise, abortPromise]);
      };
      try {
        let handler = isAction2 ? match.route.action : match.route.loader;
        if (lazyHandlerPromise || lazyRoutePromise) {
          if (handler) {
            let handlerError;
            let [value] = await Promise.all([
              // If the handler throws, don't let it immediately bubble out,
              // since we need to let the lazy() execution finish so we know if this
              // route has a boundary that can handle the error
              runHandler(handler).catch((e) => {
                handlerError = e;
              }),
              // Ensure all lazy route promises are resolved before continuing
              lazyHandlerPromise,
              lazyRoutePromise
            ]);
            if (handlerError !== void 0) {
              throw handlerError;
            }
            result = value;
          } else {
            await lazyHandlerPromise;
            let handler2 = isAction2 ? match.route.action : match.route.loader;
            if (handler2) {
              [result] = await Promise.all([runHandler(handler2), lazyRoutePromise]);
            } else if (type === "action") {
              let url = new URL(request.url);
              let pathname = url.pathname + url.search;
              throw getInternalRouterError(405, {
                method: request.method,
                pathname,
                routeId: match.route.id
              });
            } else {
              return { type: "data", result: void 0 };
            }
          }
        } else if (!handler) {
          let url = new URL(request.url);
          let pathname = url.pathname + url.search;
          throw getInternalRouterError(404, {
            pathname
          });
        } else {
          result = await runHandler(handler);
        }
      } catch (e) {
        return { type: "error", result: e };
      } finally {
        if (onReject) {
          request.signal.removeEventListener("abort", onReject);
        }
      }
      return result;
    }
    async function convertDataStrategyResultToDataResult(dataStrategyResult) {
      var _a2, _b2, _c2, _d2, _e3, _f2;
      let { result, type } = dataStrategyResult;
      if (isResponse$1(result)) {
        let data2;
        try {
          let contentType = result.headers.get("Content-Type");
          if (contentType && /\bapplication\/json\b/.test(contentType)) {
            if (result.body == null) {
              data2 = null;
            } else {
              data2 = await result.json();
            }
          } else {
            data2 = await result.text();
          }
        } catch (e) {
          return { type: "error", error: e };
        }
        if (type === "error") {
          return {
            type: "error",
            error: new ErrorResponseImpl(result.status, result.statusText, data2),
            statusCode: result.status,
            headers: result.headers
          };
        }
        return {
          type: "data",
          data: data2,
          statusCode: result.status,
          headers: result.headers
        };
      }
      if (type === "error") {
        if (isDataWithResponseInit(result)) {
          if (result.data instanceof Error) {
            return {
              type: "error",
              error: result.data,
              statusCode: (_a2 = result.init) == null ? void 0 : _a2.status,
              headers: ((_b2 = result.init) == null ? void 0 : _b2.headers) ? new Headers(result.init.headers) : void 0
            };
          }
          return {
            type: "error",
            error: new ErrorResponseImpl(
              ((_c2 = result.init) == null ? void 0 : _c2.status) || 500,
              void 0,
              result.data
            ),
            statusCode: isRouteErrorResponse(result) ? result.status : void 0,
            headers: ((_d2 = result.init) == null ? void 0 : _d2.headers) ? new Headers(result.init.headers) : void 0
          };
        }
        return {
          type: "error",
          error: result,
          statusCode: isRouteErrorResponse(result) ? result.status : void 0
        };
      }
      if (isDataWithResponseInit(result)) {
        return {
          type: "data",
          data: result.data,
          statusCode: (_e3 = result.init) == null ? void 0 : _e3.status,
          headers: ((_f2 = result.init) == null ? void 0 : _f2.headers) ? new Headers(result.init.headers) : void 0
        };
      }
      return { type: "data", data: result };
    }
    function normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename) {
      let location = response.headers.get("Location");
      invariant$1(
        location,
        "Redirects returned/thrown from loaders/actions must have a Location header"
      );
      if (!ABSOLUTE_URL_REGEX.test(location)) {
        let trimmedMatches = matches.slice(
          0,
          matches.findIndex((m2) => m2.route.id === routeId) + 1
        );
        location = normalizeTo(
          new URL(request.url),
          trimmedMatches,
          basename,
          location
        );
        response.headers.set("Location", location);
      }
      return response;
    }
    function normalizeRedirectLocation(location, currentUrl, basename) {
      if (ABSOLUTE_URL_REGEX.test(location)) {
        let normalizedLocation = location;
        let url = normalizedLocation.startsWith("//") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);
        let isSameBasename = stripBasename(url.pathname, basename) != null;
        if (url.origin === currentUrl.origin && isSameBasename) {
          return url.pathname + url.search + url.hash;
        }
      }
      return location;
    }
    function createClientSideRequest(history, location, signal, submission) {
      let url = history.createURL(stripHashFromPath(location)).toString();
      let init = { signal };
      if (submission && isMutationMethod(submission.formMethod)) {
        let { formMethod, formEncType } = submission;
        init.method = formMethod.toUpperCase();
        if (formEncType === "application/json") {
          init.headers = new Headers({ "Content-Type": formEncType });
          init.body = JSON.stringify(submission.json);
        } else if (formEncType === "text/plain") {
          init.body = submission.text;
        } else if (formEncType === "application/x-www-form-urlencoded" && submission.formData) {
          init.body = convertFormDataToSearchParams(submission.formData);
        } else {
          init.body = submission.formData;
        }
      }
      return new Request(url, init);
    }
    function convertFormDataToSearchParams(formData) {
      let searchParams = new URLSearchParams();
      for (let [key, value] of formData.entries()) {
        searchParams.append(key, typeof value === "string" ? value : value.name);
      }
      return searchParams;
    }
    function convertSearchParamsToFormData(searchParams) {
      let formData = new FormData();
      for (let [key, value] of searchParams.entries()) {
        formData.append(key, value);
      }
      return formData;
    }
    function processRouteLoaderData(matches, results, pendingActionResult, isStaticHandler = false, skipLoaderErrorBubbling = false) {
      let loaderData = {};
      let errors = null;
      let statusCode;
      let foundError = false;
      let loaderHeaders = {};
      let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : void 0;
      matches.forEach((match) => {
        if (!(match.route.id in results)) {
          return;
        }
        let id = match.route.id;
        let result = results[id];
        invariant$1(
          !isRedirectResult(result),
          "Cannot handle redirect results in processLoaderData"
        );
        if (isErrorResult(result)) {
          let error = result.error;
          if (pendingError !== void 0) {
            error = pendingError;
            pendingError = void 0;
          }
          errors = errors || {};
          if (skipLoaderErrorBubbling) {
            errors[id] = error;
          } else {
            let boundaryMatch = findNearestBoundary(matches, id);
            if (errors[boundaryMatch.route.id] == null) {
              errors[boundaryMatch.route.id] = error;
            }
          }
          if (!isStaticHandler) {
            loaderData[id] = ResetLoaderDataSymbol;
          }
          if (!foundError) {
            foundError = true;
            statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;
          }
          if (result.headers) {
            loaderHeaders[id] = result.headers;
          }
        } else {
          loaderData[id] = result.data;
          if (result.statusCode && result.statusCode !== 200 && !foundError) {
            statusCode = result.statusCode;
          }
          if (result.headers) {
            loaderHeaders[id] = result.headers;
          }
        }
      });
      if (pendingError !== void 0 && pendingActionResult) {
        errors = { [pendingActionResult[0]]: pendingError };
        if (pendingActionResult[2]) {
          loaderData[pendingActionResult[2]] = void 0;
        }
      }
      return {
        loaderData,
        errors,
        statusCode: statusCode || 200,
        loaderHeaders
      };
    }
    function processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults) {
      let { loaderData, errors } = processRouteLoaderData(
        matches,
        results,
        pendingActionResult
      );
      revalidatingFetchers.filter((f) => !f.matches || f.matches.some((m2) => m2.shouldLoad)).forEach((rf) => {
        let { key, match, controller } = rf;
        let result = fetcherResults[key];
        invariant$1(result, "Did not find corresponding fetcher result");
        if (controller && controller.signal.aborted) {
          return;
        } else if (isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);
          if (!(errors && errors[boundaryMatch.route.id])) {
            errors = {
              ...errors,
              [boundaryMatch.route.id]: result.error
            };
          }
          state.fetchers.delete(key);
        } else if (isRedirectResult(result)) {
          invariant$1(false, "Unhandled fetcher revalidation redirect");
        } else {
          let doneFetcher = getDoneFetcher(result.data);
          state.fetchers.set(key, doneFetcher);
        }
      });
      return { loaderData, errors };
    }
    function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
      let mergedLoaderData = Object.entries(newLoaderData).filter(([, v]) => v !== ResetLoaderDataSymbol).reduce((merged, [k2, v]) => {
        merged[k2] = v;
        return merged;
      }, {});
      for (let match of matches) {
        let id = match.route.id;
        if (!newLoaderData.hasOwnProperty(id) && loaderData.hasOwnProperty(id) && match.route.loader) {
          mergedLoaderData[id] = loaderData[id];
        }
        if (errors && errors.hasOwnProperty(id)) {
          break;
        }
      }
      return mergedLoaderData;
    }
    function getActionDataForCommit(pendingActionResult) {
      if (!pendingActionResult) {
        return {};
      }
      return isErrorResult(pendingActionResult[1]) ? {
        // Clear out prior actionData on errors
        actionData: {}
      } : {
        actionData: {
          [pendingActionResult[0]]: pendingActionResult[1].data
        }
      };
    }
    function findNearestBoundary(matches, routeId) {
      let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m2) => m2.route.id === routeId) + 1) : [...matches];
      return eligibleMatches.reverse().find((m2) => m2.route.hasErrorBoundary === true) || matches[0];
    }
    function getShortCircuitMatches(routes) {
      let route = routes.length === 1 ? routes[0] : routes.find((r2) => r2.index || !r2.path || r2.path === "/") || {
        id: `__shim-error-route__`
      };
      return {
        matches: [
          {
            params: {},
            pathname: "",
            pathnameBase: "",
            route
          }
        ],
        route
      };
    }
    function getInternalRouterError(status, {
      pathname,
      routeId,
      method,
      type,
      message
    } = {}) {
      let statusText = "Unknown Server Error";
      let errorMessage = "Unknown @remix-run/router error";
      if (status === 400) {
        statusText = "Bad Request";
        if (method && pathname && routeId) {
          errorMessage = `You made a ${method} request to "${pathname}" but did not provide a \`loader\` for route "${routeId}", so there is no way to handle the request.`;
        } else if (type === "invalid-body") {
          errorMessage = "Unable to encode submission body";
        }
      } else if (status === 403) {
        statusText = "Forbidden";
        errorMessage = `Route "${routeId}" does not match URL "${pathname}"`;
      } else if (status === 404) {
        statusText = "Not Found";
        errorMessage = `No route matches URL "${pathname}"`;
      } else if (status === 405) {
        statusText = "Method Not Allowed";
        if (method && pathname && routeId) {
          errorMessage = `You made a ${method.toUpperCase()} request to "${pathname}" but did not provide an \`action\` for route "${routeId}", so there is no way to handle the request.`;
        } else if (method) {
          errorMessage = `Invalid request method "${method.toUpperCase()}"`;
        }
      }
      return new ErrorResponseImpl(
        status || 500,
        statusText,
        new Error(errorMessage),
        true
      );
    }
    function findRedirect(results) {
      let entries = Object.entries(results);
      for (let i2 = entries.length - 1; i2 >= 0; i2--) {
        let [key, result] = entries[i2];
        if (isRedirectResult(result)) {
          return { key, result };
        }
      }
    }
    function stripHashFromPath(path) {
      let parsedPath = typeof path === "string" ? parsePath(path) : path;
      return createPath({ ...parsedPath, hash: "" });
    }
    function isHashChangeOnly(a2, b) {
      if (a2.pathname !== b.pathname || a2.search !== b.search) {
        return false;
      }
      if (a2.hash === "") {
        return b.hash !== "";
      } else if (a2.hash === b.hash) {
        return true;
      } else if (b.hash !== "") {
        return true;
      }
      return false;
    }
    function isRedirectDataStrategyResult(result) {
      return isResponse$1(result.result) && redirectStatusCodes.has(result.result.status);
    }
    function isErrorResult(result) {
      return result.type === "error";
    }
    function isRedirectResult(result) {
      return (result && result.type) === "redirect";
    }
    function isDataWithResponseInit(value) {
      return typeof value === "object" && value != null && "type" in value && "data" in value && "init" in value && value.type === "DataWithResponseInit";
    }
    function isResponse$1(value) {
      return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";
    }
    function isValidMethod(method) {
      return validRequestMethods.has(method.toUpperCase());
    }
    function isMutationMethod(method) {
      return validMutationMethods.has(method.toUpperCase());
    }
    function hasNakedIndexQuery(search) {
      return new URLSearchParams(search).getAll("index").some((v) => v === "");
    }
    function getTargetMatch(matches, location) {
      let search = typeof location === "string" ? parsePath(location).search : location.search;
      if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || "")) {
        return matches[matches.length - 1];
      }
      let pathMatches = getPathContributingMatches(matches);
      return pathMatches[pathMatches.length - 1];
    }
    function getSubmissionFromNavigation(navigation) {
      let { formMethod, formAction, formEncType, text: text2, formData, json } = navigation;
      if (!formMethod || !formAction || !formEncType) {
        return;
      }
      if (text2 != null) {
        return {
          formMethod,
          formAction,
          formEncType,
          formData: void 0,
          json: void 0,
          text: text2
        };
      } else if (formData != null) {
        return {
          formMethod,
          formAction,
          formEncType,
          formData,
          json: void 0,
          text: void 0
        };
      } else if (json !== void 0) {
        return {
          formMethod,
          formAction,
          formEncType,
          formData: void 0,
          json,
          text: void 0
        };
      }
    }
    function getLoadingNavigation(location, submission) {
      if (submission) {
        let navigation = {
          state: "loading",
          location,
          formMethod: submission.formMethod,
          formAction: submission.formAction,
          formEncType: submission.formEncType,
          formData: submission.formData,
          json: submission.json,
          text: submission.text
        };
        return navigation;
      } else {
        let navigation = {
          state: "loading",
          location,
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          json: void 0,
          text: void 0
        };
        return navigation;
      }
    }
    function getSubmittingNavigation(location, submission) {
      let navigation = {
        state: "submitting",
        location,
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text
      };
      return navigation;
    }
    function getLoadingFetcher(submission, data2) {
      if (submission) {
        let fetcher = {
          state: "loading",
          formMethod: submission.formMethod,
          formAction: submission.formAction,
          formEncType: submission.formEncType,
          formData: submission.formData,
          json: submission.json,
          text: submission.text,
          data: data2
        };
        return fetcher;
      } else {
        let fetcher = {
          state: "loading",
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          json: void 0,
          text: void 0,
          data: data2
        };
        return fetcher;
      }
    }
    function getSubmittingFetcher(submission, existingFetcher) {
      let fetcher = {
        state: "submitting",
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text,
        data: existingFetcher ? existingFetcher.data : void 0
      };
      return fetcher;
    }
    function getDoneFetcher(data2) {
      let fetcher = {
        state: "idle",
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        json: void 0,
        text: void 0,
        data: data2
      };
      return fetcher;
    }
    function restoreAppliedTransitions(_window, transitions) {
      try {
        let sessionPositions = _window.sessionStorage.getItem(
          TRANSITIONS_STORAGE_KEY
        );
        if (sessionPositions) {
          let json = JSON.parse(sessionPositions);
          for (let [k2, v] of Object.entries(json || {})) {
            if (v && Array.isArray(v)) {
              transitions.set(k2, new Set(v || []));
            }
          }
        }
      } catch (e) {
      }
    }
    function persistAppliedTransitions(_window, transitions) {
      if (transitions.size > 0) {
        let json = {};
        for (let [k2, v] of transitions) {
          json[k2] = [...v];
        }
        try {
          _window.sessionStorage.setItem(
            TRANSITIONS_STORAGE_KEY,
            JSON.stringify(json)
          );
        } catch (error) {
          warning(
            false,
            `Failed to save applied view transitions in sessionStorage (${error}).`
          );
        }
      }
    }
    function createDeferred() {
      let resolve;
      let reject;
      let promise = new Promise((res, rej) => {
        resolve = async (val) => {
          res(val);
          try {
            await promise;
          } catch (e) {
          }
        };
        reject = async (error) => {
          rej(error);
          try {
            await promise;
          } catch (e) {
          }
        };
      });
      return {
        promise,
        //@ts-ignore
        resolve,
        //@ts-ignore
        reject
      };
    }
    var DataRouterContext = reactExports.createContext(null);
    DataRouterContext.displayName = "DataRouter";
    var DataRouterStateContext = reactExports.createContext(null);
    DataRouterStateContext.displayName = "DataRouterState";
    var ViewTransitionContext = reactExports.createContext({
      isTransitioning: false
    });
    ViewTransitionContext.displayName = "ViewTransition";
    var FetchersContext = reactExports.createContext(
      /* @__PURE__ */ new Map()
    );
    FetchersContext.displayName = "Fetchers";
    var AwaitContext = reactExports.createContext(null);
    AwaitContext.displayName = "Await";
    var NavigationContext = reactExports.createContext(
      null
    );
    NavigationContext.displayName = "Navigation";
    var LocationContext = reactExports.createContext(
      null
    );
    LocationContext.displayName = "Location";
    var RouteContext = reactExports.createContext({
      outlet: null,
      matches: [],
      isDataRoute: false
    });
    RouteContext.displayName = "Route";
    var RouteErrorContext = reactExports.createContext(null);
    RouteErrorContext.displayName = "RouteError";
    function useHref(to2, { relative } = {}) {
      invariant$1(
        useInRouterContext(),
        // TODO: This error is probably because they somehow have 2 versions of the
        // router loaded. We can help them understand how to avoid that.
        `useHref() may be used only in the context of a <Router> component.`
      );
      let { basename, navigator: navigator2 } = reactExports.useContext(NavigationContext);
      let { hash, pathname, search } = useResolvedPath(to2, { relative });
      let joinedPathname = pathname;
      if (basename !== "/") {
        joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
      }
      return navigator2.createHref({ pathname: joinedPathname, search, hash });
    }
    function useInRouterContext() {
      return reactExports.useContext(LocationContext) != null;
    }
    function useLocation() {
      invariant$1(
        useInRouterContext(),
        // TODO: This error is probably because they somehow have 2 versions of the
        // router loaded. We can help them understand how to avoid that.
        `useLocation() may be used only in the context of a <Router> component.`
      );
      return reactExports.useContext(LocationContext).location;
    }
    var navigateEffectWarning = `You should call navigate() in a React.useEffect(), not when your component is first rendered.`;
    function useIsomorphicLayoutEffect$2(cb) {
      let isStatic = reactExports.useContext(NavigationContext).static;
      if (!isStatic) {
        reactExports.useLayoutEffect(cb);
      }
    }
    function useNavigate() {
      let { isDataRoute } = reactExports.useContext(RouteContext);
      return isDataRoute ? useNavigateStable() : useNavigateUnstable();
    }
    function useNavigateUnstable() {
      invariant$1(
        useInRouterContext(),
        // TODO: This error is probably because they somehow have 2 versions of the
        // router loaded. We can help them understand how to avoid that.
        `useNavigate() may be used only in the context of a <Router> component.`
      );
      let dataRouterContext = reactExports.useContext(DataRouterContext);
      let { basename, navigator: navigator2 } = reactExports.useContext(NavigationContext);
      let { matches } = reactExports.useContext(RouteContext);
      let { pathname: locationPathname } = useLocation();
      let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
      let activeRef = reactExports.useRef(false);
      useIsomorphicLayoutEffect$2(() => {
        activeRef.current = true;
      });
      let navigate = reactExports.useCallback(
        (to2, options2 = {}) => {
          warning(activeRef.current, navigateEffectWarning);
          if (!activeRef.current) return;
          if (typeof to2 === "number") {
            navigator2.go(to2);
            return;
          }
          let path = resolveTo(
            to2,
            JSON.parse(routePathnamesJson),
            locationPathname,
            options2.relative === "path"
          );
          if (dataRouterContext == null && basename !== "/") {
            path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
          }
          (!!options2.replace ? navigator2.replace : navigator2.push)(
            path,
            options2.state,
            options2
          );
        },
        [
          basename,
          navigator2,
          routePathnamesJson,
          locationPathname,
          dataRouterContext
        ]
      );
      return navigate;
    }
    var OutletContext = reactExports.createContext(null);
    function useOutlet(context) {
      let outlet = reactExports.useContext(RouteContext).outlet;
      if (outlet) {
        return /* @__PURE__ */ reactExports.createElement(OutletContext.Provider, { value: context }, outlet);
      }
      return outlet;
    }
    function useParams() {
      let { matches } = reactExports.useContext(RouteContext);
      let routeMatch = matches[matches.length - 1];
      return routeMatch ? routeMatch.params : {};
    }
    function useResolvedPath(to2, { relative } = {}) {
      let { matches } = reactExports.useContext(RouteContext);
      let { pathname: locationPathname } = useLocation();
      let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
      return reactExports.useMemo(
        () => resolveTo(
          to2,
          JSON.parse(routePathnamesJson),
          locationPathname,
          relative === "path"
        ),
        [to2, routePathnamesJson, locationPathname, relative]
      );
    }
    function useRoutesImpl(routes, locationArg, dataRouterState, future) {
      invariant$1(
        useInRouterContext(),
        // TODO: This error is probably because they somehow have 2 versions of the
        // router loaded. We can help them understand how to avoid that.
        `useRoutes() may be used only in the context of a <Router> component.`
      );
      let { navigator: navigator2, static: isStatic } = reactExports.useContext(NavigationContext);
      let { matches: parentMatches } = reactExports.useContext(RouteContext);
      let routeMatch = parentMatches[parentMatches.length - 1];
      let parentParams = routeMatch ? routeMatch.params : {};
      let parentPathname = routeMatch ? routeMatch.pathname : "/";
      let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
      let parentRoute = routeMatch && routeMatch.route;
      {
        let parentPath = parentRoute && parentRoute.path || "";
        warningOnce(
          parentPathname,
          !parentRoute || parentPath.endsWith("*") || parentPath.endsWith("*?"),
          `You rendered descendant <Routes> (or called \`useRoutes()\`) at "${parentPathname}" (under <Route path="${parentPath}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="${parentPath}"> to <Route path="${parentPath === "/" ? "*" : `${parentPath}/*`}">.`
        );
      }
      let locationFromContext = useLocation();
      let location;
      {
        location = locationFromContext;
      }
      let pathname = location.pathname || "/";
      let remainingPathname = pathname;
      if (parentPathnameBase !== "/") {
        let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
        let segments = pathname.replace(/^\//, "").split("/");
        remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
      }
      let matches = !isStatic && dataRouterState && dataRouterState.matches && dataRouterState.matches.length > 0 ? dataRouterState.matches : matchRoutes(routes, { pathname: remainingPathname });
      {
        warning(
          parentRoute || matches != null,
          `No routes matched location "${location.pathname}${location.search}${location.hash}" `
        );
        warning(
          matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0,
          `Matched leaf route at location "${location.pathname}${location.search}${location.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`
        );
      }
      let renderedMatches = _renderMatches(
        matches && matches.map(
          (match) => Object.assign({}, match, {
            params: Object.assign({}, parentParams, match.params),
            pathname: joinPaths([
              parentPathnameBase,
              // Re-encode pathnames that were decoded inside matchRoutes
              navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
            ]),
            pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
              parentPathnameBase,
              // Re-encode pathnames that were decoded inside matchRoutes
              navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
            ])
          })
        ),
        parentMatches,
        dataRouterState,
        future
      );
      return renderedMatches;
    }
    function DefaultErrorComponent() {
      let error = useRouteError();
      let message = isRouteErrorResponse(error) ? `${error.status} ${error.statusText}` : error instanceof Error ? error.message : JSON.stringify(error);
      let stack = error instanceof Error ? error.stack : null;
      let lightgrey = "rgba(200,200,200, 0.5)";
      let preStyles = { padding: "0.5rem", backgroundColor: lightgrey };
      let codeStyles = { padding: "2px 4px", backgroundColor: lightgrey };
      let devInfo = null;
      {
        console.error(
          "Error handled by React Router default ErrorBoundary:",
          error
        );
        devInfo = /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("p", null, "💿 Hey developer 👋"), /* @__PURE__ */ reactExports.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ reactExports.createElement("code", { style: codeStyles }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ reactExports.createElement("code", { style: codeStyles }, "errorElement"), " prop on your route."));
      }
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ reactExports.createElement("h3", { style: { fontStyle: "italic" } }, message), stack ? /* @__PURE__ */ reactExports.createElement("pre", { style: preStyles }, stack) : null, devInfo);
    }
    var defaultErrorElement = /* @__PURE__ */ reactExports.createElement(DefaultErrorComponent, null);
    var RenderErrorBoundary = class extends reactExports.Component {
      constructor(props) {
        super(props);
        this.state = {
          location: props.location,
          revalidation: props.revalidation,
          error: props.error
        };
      }
      static getDerivedStateFromError(error) {
        return { error };
      }
      static getDerivedStateFromProps(props, state) {
        if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
          return {
            error: props.error,
            location: props.location,
            revalidation: props.revalidation
          };
        }
        return {
          error: props.error !== void 0 ? props.error : state.error,
          location: state.location,
          revalidation: props.revalidation || state.revalidation
        };
      }
      componentDidCatch(error, errorInfo) {
        console.error(
          "React Router caught the following error during render",
          error,
          errorInfo
        );
      }
      render() {
        return this.state.error !== void 0 ? /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, { value: this.props.routeContext }, /* @__PURE__ */ reactExports.createElement(
          RouteErrorContext.Provider,
          {
            value: this.state.error,
            children: this.props.component
          }
        )) : this.props.children;
      }
    };
    function RenderedRoute({ routeContext, match, children }) {
      let dataRouterContext = reactExports.useContext(DataRouterContext);
      if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
        dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
      }
      return /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, { value: routeContext }, children);
    }
    function _renderMatches(matches, parentMatches = [], dataRouterState = null, future = null) {
      if (matches == null) {
        if (!dataRouterState) {
          return null;
        }
        if (dataRouterState.errors) {
          matches = dataRouterState.matches;
        } else if (parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
          matches = dataRouterState.matches;
        } else {
          return null;
        }
      }
      let renderedMatches = matches;
      let errors = dataRouterState == null ? void 0 : dataRouterState.errors;
      if (errors != null) {
        let errorIndex = renderedMatches.findIndex(
          (m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]) !== void 0
        );
        invariant$1(
          errorIndex >= 0,
          `Could not find a matching route for errors on route IDs: ${Object.keys(
            errors
          ).join(",")}`
        );
        renderedMatches = renderedMatches.slice(
          0,
          Math.min(renderedMatches.length, errorIndex + 1)
        );
      }
      let renderFallback = false;
      let fallbackIndex = -1;
      if (dataRouterState) {
        for (let i2 = 0; i2 < renderedMatches.length; i2++) {
          let match = renderedMatches[i2];
          if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
            fallbackIndex = i2;
          }
          if (match.route.id) {
            let { loaderData, errors: errors2 } = dataRouterState;
            let needsToRunLoader = match.route.loader && !loaderData.hasOwnProperty(match.route.id) && (!errors2 || errors2[match.route.id] === void 0);
            if (match.route.lazy || needsToRunLoader) {
              renderFallback = true;
              if (fallbackIndex >= 0) {
                renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
              } else {
                renderedMatches = [renderedMatches[0]];
              }
              break;
            }
          }
        }
      }
      return renderedMatches.reduceRight((outlet, match, index2) => {
        let error;
        let shouldRenderHydrateFallback = false;
        let errorElement = null;
        let hydrateFallbackElement = null;
        if (dataRouterState) {
          error = errors && match.route.id ? errors[match.route.id] : void 0;
          errorElement = match.route.errorElement || defaultErrorElement;
          if (renderFallback) {
            if (fallbackIndex < 0 && index2 === 0) {
              warningOnce(
                "route-fallback",
                false,
                "No `HydrateFallback` element provided to render during initial hydration"
              );
              shouldRenderHydrateFallback = true;
              hydrateFallbackElement = null;
            } else if (fallbackIndex === index2) {
              shouldRenderHydrateFallback = true;
              hydrateFallbackElement = match.route.hydrateFallbackElement || null;
            }
          }
        }
        let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
        let getChildren = () => {
          let children;
          if (error) {
            children = errorElement;
          } else if (shouldRenderHydrateFallback) {
            children = hydrateFallbackElement;
          } else if (match.route.Component) {
            children = /* @__PURE__ */ reactExports.createElement(match.route.Component, null);
          } else if (match.route.element) {
            children = match.route.element;
          } else {
            children = outlet;
          }
          return /* @__PURE__ */ reactExports.createElement(
            RenderedRoute,
            {
              match,
              routeContext: {
                outlet,
                matches: matches2,
                isDataRoute: dataRouterState != null
              },
              children
            }
          );
        };
        return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index2 === 0) ? /* @__PURE__ */ reactExports.createElement(
          RenderErrorBoundary,
          {
            location: dataRouterState.location,
            revalidation: dataRouterState.revalidation,
            component: errorElement,
            error,
            children: getChildren(),
            routeContext: { outlet: null, matches: matches2, isDataRoute: true }
          }
        ) : getChildren();
      }, null);
    }
    function getDataRouterConsoleError(hookName) {
      return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
    }
    function useDataRouterContext(hookName) {
      let ctx = reactExports.useContext(DataRouterContext);
      invariant$1(ctx, getDataRouterConsoleError(hookName));
      return ctx;
    }
    function useDataRouterState(hookName) {
      let state = reactExports.useContext(DataRouterStateContext);
      invariant$1(state, getDataRouterConsoleError(hookName));
      return state;
    }
    function useRouteContext(hookName) {
      let route = reactExports.useContext(RouteContext);
      invariant$1(route, getDataRouterConsoleError(hookName));
      return route;
    }
    function useCurrentRouteId(hookName) {
      let route = useRouteContext(hookName);
      let thisRoute = route.matches[route.matches.length - 1];
      invariant$1(
        thisRoute.route.id,
        `${hookName} can only be used on routes that contain a unique "id"`
      );
      return thisRoute.route.id;
    }
    function useRouteId() {
      return useCurrentRouteId(
        "useRouteId"
        /* UseRouteId */
      );
    }
    function useRouteError() {
      var _a2;
      let error = reactExports.useContext(RouteErrorContext);
      let state = useDataRouterState(
        "useRouteError"
        /* UseRouteError */
      );
      let routeId = useCurrentRouteId(
        "useRouteError"
        /* UseRouteError */
      );
      if (error !== void 0) {
        return error;
      }
      return (_a2 = state.errors) == null ? void 0 : _a2[routeId];
    }
    function useNavigateStable() {
      let { router: router2 } = useDataRouterContext(
        "useNavigate"
        /* UseNavigateStable */
      );
      let id = useCurrentRouteId(
        "useNavigate"
        /* UseNavigateStable */
      );
      let activeRef = reactExports.useRef(false);
      useIsomorphicLayoutEffect$2(() => {
        activeRef.current = true;
      });
      let navigate = reactExports.useCallback(
        async (to2, options2 = {}) => {
          warning(activeRef.current, navigateEffectWarning);
          if (!activeRef.current) return;
          if (typeof to2 === "number") {
            router2.navigate(to2);
          } else {
            await router2.navigate(to2, { fromRouteId: id, ...options2 });
          }
        },
        [router2, id]
      );
      return navigate;
    }
    var alreadyWarned = {};
    function warningOnce(key, cond, message) {
      if (!cond && !alreadyWarned[key]) {
        alreadyWarned[key] = true;
        warning(false, message);
      }
    }
    var alreadyWarned2 = {};
    function warnOnce(condition, message) {
      if (!condition && !alreadyWarned2[message]) {
        alreadyWarned2[message] = true;
        console.warn(message);
      }
    }
    function mapRouteProperties(route) {
      let updates = {
        // Note: this check also occurs in createRoutesFromChildren so update
        // there if you change this -- please and thank you!
        hasErrorBoundary: route.hasErrorBoundary || route.ErrorBoundary != null || route.errorElement != null
      };
      if (route.Component) {
        {
          if (route.element) {
            warning(
              false,
              "You should not include both `Component` and `element` on your route - `Component` will be used."
            );
          }
        }
        Object.assign(updates, {
          element: reactExports.createElement(route.Component),
          Component: void 0
        });
      }
      if (route.HydrateFallback) {
        {
          if (route.hydrateFallbackElement) {
            warning(
              false,
              "You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used."
            );
          }
        }
        Object.assign(updates, {
          hydrateFallbackElement: reactExports.createElement(route.HydrateFallback),
          HydrateFallback: void 0
        });
      }
      if (route.ErrorBoundary) {
        {
          if (route.errorElement) {
            warning(
              false,
              "You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used."
            );
          }
        }
        Object.assign(updates, {
          errorElement: reactExports.createElement(route.ErrorBoundary),
          ErrorBoundary: void 0
        });
      }
      return updates;
    }
    var hydrationRouteProperties = [
      "HydrateFallback",
      "hydrateFallbackElement"
    ];
    var Deferred = class {
      constructor() {
        this.status = "pending";
        this.promise = new Promise((resolve, reject) => {
          this.resolve = (value) => {
            if (this.status === "pending") {
              this.status = "resolved";
              resolve(value);
            }
          };
          this.reject = (reason) => {
            if (this.status === "pending") {
              this.status = "rejected";
              reject(reason);
            }
          };
        });
      }
    };
    function RouterProvider({
      router: router2,
      flushSync: reactDomFlushSyncImpl
    }) {
      let [state, setStateImpl] = reactExports.useState(router2.state);
      let [pendingState, setPendingState] = reactExports.useState();
      let [vtContext, setVtContext] = reactExports.useState({
        isTransitioning: false
      });
      let [renderDfd, setRenderDfd] = reactExports.useState();
      let [transition, setTransition] = reactExports.useState();
      let [interruption, setInterruption] = reactExports.useState();
      let fetcherData = reactExports.useRef(/* @__PURE__ */ new Map());
      let setState = reactExports.useCallback(
        (newState, { deletedFetchers, flushSync, viewTransitionOpts }) => {
          newState.fetchers.forEach((fetcher, key) => {
            if (fetcher.data !== void 0) {
              fetcherData.current.set(key, fetcher.data);
            }
          });
          deletedFetchers.forEach((key) => fetcherData.current.delete(key));
          warnOnce(
            flushSync === false || reactDomFlushSyncImpl != null,
            'You provided the `flushSync` option to a router update, but you are not using the `<RouterProvider>` from `react-router/dom` so `ReactDOM.flushSync()` is unavailable.  Please update your app to `import { RouterProvider } from "react-router/dom"` and ensure you have `react-dom` installed as a dependency to use the `flushSync` option.'
          );
          let isViewTransitionAvailable = router2.window != null && router2.window.document != null && typeof router2.window.document.startViewTransition === "function";
          warnOnce(
            viewTransitionOpts == null || isViewTransitionAvailable,
            "You provided the `viewTransition` option to a router update, but you do not appear to be running in a DOM environment as `window.startViewTransition` is not available."
          );
          if (!viewTransitionOpts || !isViewTransitionAvailable) {
            if (reactDomFlushSyncImpl && flushSync) {
              reactDomFlushSyncImpl(() => setStateImpl(newState));
            } else {
              reactExports.startTransition(() => setStateImpl(newState));
            }
            return;
          }
          if (reactDomFlushSyncImpl && flushSync) {
            reactDomFlushSyncImpl(() => {
              if (transition) {
                renderDfd && renderDfd.resolve();
                transition.skipTransition();
              }
              setVtContext({
                isTransitioning: true,
                flushSync: true,
                currentLocation: viewTransitionOpts.currentLocation,
                nextLocation: viewTransitionOpts.nextLocation
              });
            });
            let t = router2.window.document.startViewTransition(() => {
              reactDomFlushSyncImpl(() => setStateImpl(newState));
            });
            t.finished.finally(() => {
              reactDomFlushSyncImpl(() => {
                setRenderDfd(void 0);
                setTransition(void 0);
                setPendingState(void 0);
                setVtContext({ isTransitioning: false });
              });
            });
            reactDomFlushSyncImpl(() => setTransition(t));
            return;
          }
          if (transition) {
            renderDfd && renderDfd.resolve();
            transition.skipTransition();
            setInterruption({
              state: newState,
              currentLocation: viewTransitionOpts.currentLocation,
              nextLocation: viewTransitionOpts.nextLocation
            });
          } else {
            setPendingState(newState);
            setVtContext({
              isTransitioning: true,
              flushSync: false,
              currentLocation: viewTransitionOpts.currentLocation,
              nextLocation: viewTransitionOpts.nextLocation
            });
          }
        },
        [router2.window, reactDomFlushSyncImpl, transition, renderDfd]
      );
      reactExports.useLayoutEffect(() => router2.subscribe(setState), [router2, setState]);
      reactExports.useEffect(() => {
        if (vtContext.isTransitioning && !vtContext.flushSync) {
          setRenderDfd(new Deferred());
        }
      }, [vtContext]);
      reactExports.useEffect(() => {
        if (renderDfd && pendingState && router2.window) {
          let newState = pendingState;
          let renderPromise = renderDfd.promise;
          let transition2 = router2.window.document.startViewTransition(async () => {
            reactExports.startTransition(() => setStateImpl(newState));
            await renderPromise;
          });
          transition2.finished.finally(() => {
            setRenderDfd(void 0);
            setTransition(void 0);
            setPendingState(void 0);
            setVtContext({ isTransitioning: false });
          });
          setTransition(transition2);
        }
      }, [pendingState, renderDfd, router2.window]);
      reactExports.useEffect(() => {
        if (renderDfd && pendingState && state.location.key === pendingState.location.key) {
          renderDfd.resolve();
        }
      }, [renderDfd, transition, state.location, pendingState]);
      reactExports.useEffect(() => {
        if (!vtContext.isTransitioning && interruption) {
          setPendingState(interruption.state);
          setVtContext({
            isTransitioning: true,
            flushSync: false,
            currentLocation: interruption.currentLocation,
            nextLocation: interruption.nextLocation
          });
          setInterruption(void 0);
        }
      }, [vtContext.isTransitioning, interruption]);
      let navigator2 = reactExports.useMemo(() => {
        return {
          createHref: router2.createHref,
          encodeLocation: router2.encodeLocation,
          go: (n2) => router2.navigate(n2),
          push: (to2, state2, opts) => router2.navigate(to2, {
            state: state2,
            preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
          }),
          replace: (to2, state2, opts) => router2.navigate(to2, {
            replace: true,
            state: state2,
            preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
          })
        };
      }, [router2]);
      let basename = router2.basename || "/";
      let dataRouterContext = reactExports.useMemo(
        () => ({
          router: router2,
          navigator: navigator2,
          static: false,
          basename
        }),
        [router2, navigator2, basename]
      );
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(DataRouterContext.Provider, { value: dataRouterContext }, /* @__PURE__ */ reactExports.createElement(DataRouterStateContext.Provider, { value: state }, /* @__PURE__ */ reactExports.createElement(FetchersContext.Provider, { value: fetcherData.current }, /* @__PURE__ */ reactExports.createElement(ViewTransitionContext.Provider, { value: vtContext }, /* @__PURE__ */ reactExports.createElement(
        Router,
        {
          basename,
          location: state.location,
          navigationType: state.historyAction,
          navigator: navigator2
        },
        /* @__PURE__ */ reactExports.createElement(
          MemoizedDataRoutes,
          {
            routes: router2.routes,
            future: router2.future,
            state
          }
        )
      ))))), null);
    }
    var MemoizedDataRoutes = reactExports.memo(DataRoutes);
    function DataRoutes({
      routes,
      future,
      state
    }) {
      return useRoutesImpl(routes, void 0, state, future);
    }
    function Outlet(props) {
      return useOutlet(props.context);
    }
    function Router({
      basename: basenameProp = "/",
      children = null,
      location: locationProp,
      navigationType = "POP",
      navigator: navigator2,
      static: staticProp = false
    }) {
      invariant$1(
        !useInRouterContext(),
        `You cannot render a <Router> inside another <Router>. You should never have more than one in your app.`
      );
      let basename = basenameProp.replace(/^\/*/, "/");
      let navigationContext = reactExports.useMemo(
        () => ({
          basename,
          navigator: navigator2,
          static: staticProp,
          future: {}
        }),
        [basename, navigator2, staticProp]
      );
      if (typeof locationProp === "string") {
        locationProp = parsePath(locationProp);
      }
      let {
        pathname = "/",
        search = "",
        hash = "",
        state = null,
        key = "default"
      } = locationProp;
      let locationContext = reactExports.useMemo(() => {
        let trailingPathname = stripBasename(pathname, basename);
        if (trailingPathname == null) {
          return null;
        }
        return {
          location: {
            pathname: trailingPathname,
            search,
            hash,
            state,
            key
          },
          navigationType
        };
      }, [basename, pathname, search, hash, state, key, navigationType]);
      warning(
        locationContext != null,
        `<Router basename="${basename}"> is not able to match the URL "${pathname}${search}${hash}" because it does not start with the basename, so the <Router> won't render anything.`
      );
      if (locationContext == null) {
        return null;
      }
      return /* @__PURE__ */ reactExports.createElement(NavigationContext.Provider, { value: navigationContext }, /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, { children, value: locationContext }));
    }
    var defaultMethod = "get";
    var defaultEncType = "application/x-www-form-urlencoded";
    function isHtmlElement(object2) {
      return object2 != null && typeof object2.tagName === "string";
    }
    function isButtonElement(object2) {
      return isHtmlElement(object2) && object2.tagName.toLowerCase() === "button";
    }
    function isFormElement(object2) {
      return isHtmlElement(object2) && object2.tagName.toLowerCase() === "form";
    }
    function isInputElement(object2) {
      return isHtmlElement(object2) && object2.tagName.toLowerCase() === "input";
    }
    function isModifiedEvent(event) {
      return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
    }
    function shouldProcessLinkClick(event, target) {
      return event.button === 0 && // Ignore everything but left clicks
      (!target || target === "_self") && // Let browser handle "target=_blank" etc.
      !isModifiedEvent(event);
    }
    var _formDataSupportsSubmitter = null;
    function isFormDataSubmitterSupported() {
      if (_formDataSupportsSubmitter === null) {
        try {
          new FormData(
            document.createElement("form"),
            // @ts-expect-error if FormData supports the submitter parameter, this will throw
            0
          );
          _formDataSupportsSubmitter = false;
        } catch (e) {
          _formDataSupportsSubmitter = true;
        }
      }
      return _formDataSupportsSubmitter;
    }
    var supportedFormEncTypes = /* @__PURE__ */ new Set([
      "application/x-www-form-urlencoded",
      "multipart/form-data",
      "text/plain"
    ]);
    function getFormEncType(encType) {
      if (encType != null && !supportedFormEncTypes.has(encType)) {
        warning(
          false,
          `"${encType}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${defaultEncType}"`
        );
        return null;
      }
      return encType;
    }
    function getFormSubmissionInfo(target, basename) {
      let method;
      let action;
      let encType;
      let formData;
      let body;
      if (isFormElement(target)) {
        let attr = target.getAttribute("action");
        action = attr ? stripBasename(attr, basename) : null;
        method = target.getAttribute("method") || defaultMethod;
        encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
        formData = new FormData(target);
      } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
        let form = target.form;
        if (form == null) {
          throw new Error(
            `Cannot submit a <button> or <input type="submit"> without a <form>`
          );
        }
        let attr = target.getAttribute("formaction") || form.getAttribute("action");
        action = attr ? stripBasename(attr, basename) : null;
        method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
        encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
        formData = new FormData(form, target);
        if (!isFormDataSubmitterSupported()) {
          let { name, type, value } = target;
          if (type === "image") {
            let prefix2 = name ? `${name}.` : "";
            formData.append(`${prefix2}x`, "0");
            formData.append(`${prefix2}y`, "0");
          } else if (name) {
            formData.append(name, value);
          }
        }
      } else if (isHtmlElement(target)) {
        throw new Error(
          `Cannot submit element that is not <form>, <button>, or <input type="submit|image">`
        );
      } else {
        method = defaultMethod;
        action = null;
        encType = defaultEncType;
        body = target;
      }
      if (formData && encType === "text/plain") {
        body = formData;
        formData = void 0;
      }
      return { action, method: method.toLowerCase(), encType, formData, body };
    }
    function invariant2(value, message) {
      if (value === false || value === null || typeof value === "undefined") {
        throw new Error(message);
      }
    }
    async function loadRouteModule(route, routeModulesCache) {
      if (route.id in routeModulesCache) {
        return routeModulesCache[route.id];
      }
      try {
        let routeModule = await import(
          /* @vite-ignore */
          /* webpackIgnore: true */
          route.module
        );
        routeModulesCache[route.id] = routeModule;
        return routeModule;
      } catch (error) {
        console.error(
          `Error loading route module \`${route.module}\`, reloading page...`
        );
        console.error(error);
        if (window.__reactRouterContext && window.__reactRouterContext.isSpaMode && // @ts-expect-error
        void 0) ;
        window.location.reload();
        return new Promise(() => {
        });
      }
    }
    function isHtmlLinkDescriptor(object2) {
      if (object2 == null) {
        return false;
      }
      if (object2.href == null) {
        return object2.rel === "preload" && typeof object2.imageSrcSet === "string" && typeof object2.imageSizes === "string";
      }
      return typeof object2.rel === "string" && typeof object2.href === "string";
    }
    async function getKeyedPrefetchLinks(matches, manifest, routeModules) {
      let links = await Promise.all(
        matches.map(async (match) => {
          let route = manifest.routes[match.route.id];
          if (route) {
            let mod2 = await loadRouteModule(route, routeModules);
            return mod2.links ? mod2.links() : [];
          }
          return [];
        })
      );
      return dedupeLinkDescriptors(
        links.flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === "stylesheet" || link.rel === "preload").map(
          (link) => link.rel === "stylesheet" ? { ...link, rel: "prefetch", as: "style" } : { ...link, rel: "prefetch" }
        )
      );
    }
    function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {
      let isNew = (match, index2) => {
        if (!currentMatches[index2]) return true;
        return match.route.id !== currentMatches[index2].route.id;
      };
      let matchPathChanged = (match, index2) => {
        var _a2;
        return (
          // param change, /users/123 -> /users/456
          currentMatches[index2].pathname !== match.pathname || // splat param changed, which is not present in match.path
          // e.g. /files/images/avatar.jpg -> files/finances.xls
          ((_a2 = currentMatches[index2].route.path) == null ? void 0 : _a2.endsWith("*")) && currentMatches[index2].params["*"] !== match.params["*"]
        );
      };
      if (mode === "assets") {
        return nextMatches.filter(
          (match, index2) => isNew(match, index2) || matchPathChanged(match, index2)
        );
      }
      if (mode === "data") {
        return nextMatches.filter((match, index2) => {
          var _a2;
          let manifestRoute = manifest.routes[match.route.id];
          if (!manifestRoute || !manifestRoute.hasLoader) {
            return false;
          }
          if (isNew(match, index2) || matchPathChanged(match, index2)) {
            return true;
          }
          if (match.route.shouldRevalidate) {
            let routeChoice = match.route.shouldRevalidate({
              currentUrl: new URL(
                location.pathname + location.search + location.hash,
                window.origin
              ),
              currentParams: ((_a2 = currentMatches[0]) == null ? void 0 : _a2.params) || {},
              nextUrl: new URL(page, window.origin),
              nextParams: match.params,
              defaultShouldRevalidate: true
            });
            if (typeof routeChoice === "boolean") {
              return routeChoice;
            }
          }
          return true;
        });
      }
      return [];
    }
    function getModuleLinkHrefs(matches, manifest, { includeHydrateFallback } = {}) {
      return dedupeHrefs(
        matches.map((match) => {
          let route = manifest.routes[match.route.id];
          if (!route) return [];
          let hrefs = [route.module];
          if (route.clientActionModule) {
            hrefs = hrefs.concat(route.clientActionModule);
          }
          if (route.clientLoaderModule) {
            hrefs = hrefs.concat(route.clientLoaderModule);
          }
          if (includeHydrateFallback && route.hydrateFallbackModule) {
            hrefs = hrefs.concat(route.hydrateFallbackModule);
          }
          if (route.imports) {
            hrefs = hrefs.concat(route.imports);
          }
          return hrefs;
        }).flat(1)
      );
    }
    function dedupeHrefs(hrefs) {
      return [...new Set(hrefs)];
    }
    function sortKeys(obj) {
      let sorted = {};
      let keys2 = Object.keys(obj).sort();
      for (let key of keys2) {
        sorted[key] = obj[key];
      }
      return sorted;
    }
    function dedupeLinkDescriptors(descriptors2, preloads) {
      let set2 = /* @__PURE__ */ new Set();
      new Set(preloads);
      return descriptors2.reduce((deduped, descriptor) => {
        let key = JSON.stringify(sortKeys(descriptor));
        if (!set2.has(key)) {
          set2.add(key);
          deduped.push({ key, link: descriptor });
        }
        return deduped;
      }, []);
    }
    Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
    var NO_BODY_STATUS_CODES = /* @__PURE__ */ new Set([100, 101, 204, 205]);
    function singleFetchUrl(reqUrl, basename) {
      let url = typeof reqUrl === "string" ? new URL(
        reqUrl,
        // This can be called during the SSR flow via PrefetchPageLinksImpl so
        // don't assume window is available
        typeof window === "undefined" ? "server://singlefetch/" : window.location.origin
      ) : reqUrl;
      if (url.pathname === "/") {
        url.pathname = "_root.data";
      } else if (basename && stripBasename(url.pathname, basename) === "/") {
        url.pathname = `${basename.replace(/\/$/, "")}/_root.data`;
      } else {
        url.pathname = `${url.pathname.replace(/\/$/, "")}.data`;
      }
      return url;
    }
    function useDataRouterContext2() {
      let context = reactExports.useContext(DataRouterContext);
      invariant2(
        context,
        "You must render this element inside a <DataRouterContext.Provider> element"
      );
      return context;
    }
    function useDataRouterStateContext() {
      let context = reactExports.useContext(DataRouterStateContext);
      invariant2(
        context,
        "You must render this element inside a <DataRouterStateContext.Provider> element"
      );
      return context;
    }
    var FrameworkContext = reactExports.createContext(void 0);
    FrameworkContext.displayName = "FrameworkContext";
    function useFrameworkContext() {
      let context = reactExports.useContext(FrameworkContext);
      invariant2(
        context,
        "You must render this element inside a <HydratedRouter> element"
      );
      return context;
    }
    function usePrefetchBehavior(prefetch, theirElementProps) {
      let frameworkContext = reactExports.useContext(FrameworkContext);
      let [maybePrefetch, setMaybePrefetch] = reactExports.useState(false);
      let [shouldPrefetch, setShouldPrefetch] = reactExports.useState(false);
      let { onFocus, onBlur, onMouseEnter, onMouseLeave, onTouchStart } = theirElementProps;
      let ref = reactExports.useRef(null);
      reactExports.useEffect(() => {
        if (prefetch === "render") {
          setShouldPrefetch(true);
        }
        if (prefetch === "viewport") {
          let callback = (entries) => {
            entries.forEach((entry) => {
              setShouldPrefetch(entry.isIntersecting);
            });
          };
          let observer = new IntersectionObserver(callback, { threshold: 0.5 });
          if (ref.current) observer.observe(ref.current);
          return () => {
            observer.disconnect();
          };
        }
      }, [prefetch]);
      reactExports.useEffect(() => {
        if (maybePrefetch) {
          let id = setTimeout(() => {
            setShouldPrefetch(true);
          }, 100);
          return () => {
            clearTimeout(id);
          };
        }
      }, [maybePrefetch]);
      let setIntent = () => {
        setMaybePrefetch(true);
      };
      let cancelIntent = () => {
        setMaybePrefetch(false);
        setShouldPrefetch(false);
      };
      if (!frameworkContext) {
        return [false, ref, {}];
      }
      if (prefetch !== "intent") {
        return [shouldPrefetch, ref, {}];
      }
      return [
        shouldPrefetch,
        ref,
        {
          onFocus: composeEventHandlers$1(onFocus, setIntent),
          onBlur: composeEventHandlers$1(onBlur, cancelIntent),
          onMouseEnter: composeEventHandlers$1(onMouseEnter, setIntent),
          onMouseLeave: composeEventHandlers$1(onMouseLeave, cancelIntent),
          onTouchStart: composeEventHandlers$1(onTouchStart, setIntent)
        }
      ];
    }
    function composeEventHandlers$1(theirHandler, ourHandler) {
      return (event) => {
        theirHandler && theirHandler(event);
        if (!event.defaultPrevented) {
          ourHandler(event);
        }
      };
    }
    function PrefetchPageLinks({
      page,
      ...dataLinkProps
    }) {
      let { router: router2 } = useDataRouterContext2();
      let matches = reactExports.useMemo(
        () => matchRoutes(router2.routes, page, router2.basename),
        [router2.routes, page, router2.basename]
      );
      if (!matches) {
        return null;
      }
      return /* @__PURE__ */ reactExports.createElement(PrefetchPageLinksImpl, { page, matches, ...dataLinkProps });
    }
    function useKeyedPrefetchLinks(matches) {
      let { manifest, routeModules } = useFrameworkContext();
      let [keyedPrefetchLinks, setKeyedPrefetchLinks] = reactExports.useState([]);
      reactExports.useEffect(() => {
        let interrupted = false;
        void getKeyedPrefetchLinks(matches, manifest, routeModules).then(
          (links) => {
            if (!interrupted) {
              setKeyedPrefetchLinks(links);
            }
          }
        );
        return () => {
          interrupted = true;
        };
      }, [matches, manifest, routeModules]);
      return keyedPrefetchLinks;
    }
    function PrefetchPageLinksImpl({
      page,
      matches: nextMatches,
      ...linkProps
    }) {
      let location = useLocation();
      let { manifest, routeModules } = useFrameworkContext();
      let { basename } = useDataRouterContext2();
      let { loaderData, matches } = useDataRouterStateContext();
      let newMatchesForData = reactExports.useMemo(
        () => getNewMatchesForLinks(
          page,
          nextMatches,
          matches,
          manifest,
          location,
          "data"
        ),
        [page, nextMatches, matches, manifest, location]
      );
      let newMatchesForAssets = reactExports.useMemo(
        () => getNewMatchesForLinks(
          page,
          nextMatches,
          matches,
          manifest,
          location,
          "assets"
        ),
        [page, nextMatches, matches, manifest, location]
      );
      let dataHrefs = reactExports.useMemo(() => {
        if (page === location.pathname + location.search + location.hash) {
          return [];
        }
        let routesParams = /* @__PURE__ */ new Set();
        let foundOptOutRoute = false;
        nextMatches.forEach((m2) => {
          var _a2;
          let manifestRoute = manifest.routes[m2.route.id];
          if (!manifestRoute || !manifestRoute.hasLoader) {
            return;
          }
          if (!newMatchesForData.some((m22) => m22.route.id === m2.route.id) && m2.route.id in loaderData && ((_a2 = routeModules[m2.route.id]) == null ? void 0 : _a2.shouldRevalidate)) {
            foundOptOutRoute = true;
          } else if (manifestRoute.hasClientLoader) {
            foundOptOutRoute = true;
          } else {
            routesParams.add(m2.route.id);
          }
        });
        if (routesParams.size === 0) {
          return [];
        }
        let url = singleFetchUrl(page, basename);
        if (foundOptOutRoute && routesParams.size > 0) {
          url.searchParams.set(
            "_routes",
            nextMatches.filter((m2) => routesParams.has(m2.route.id)).map((m2) => m2.route.id).join(",")
          );
        }
        return [url.pathname + url.search];
      }, [
        basename,
        loaderData,
        location,
        manifest,
        newMatchesForData,
        nextMatches,
        page,
        routeModules
      ]);
      let moduleHrefs = reactExports.useMemo(
        () => getModuleLinkHrefs(newMatchesForAssets, manifest),
        [newMatchesForAssets, manifest]
      );
      let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, dataHrefs.map((href2) => /* @__PURE__ */ reactExports.createElement("link", { key: href2, rel: "prefetch", as: "fetch", href: href2, ...linkProps })), moduleHrefs.map((href2) => /* @__PURE__ */ reactExports.createElement("link", { key: href2, rel: "modulepreload", href: href2, ...linkProps })), keyedPrefetchLinks.map(({ key, link }) => (
        // these don't spread `linkProps` because they are full link descriptors
        // already with their own props
        /* @__PURE__ */ reactExports.createElement("link", { key, ...link })
      )));
    }
    function mergeRefs(...refs) {
      return (value) => {
        refs.forEach((ref) => {
          if (typeof ref === "function") {
            ref(value);
          } else if (ref != null) {
            ref.current = value;
          }
        });
      };
    }
    var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
    try {
      if (isBrowser) {
        window.__reactRouterVersion = "7.6.0";
      }
    } catch (e) {
    }
    function createBrowserRouter(routes, opts) {
      return createRouter({
        basename: opts == null ? void 0 : opts.basename,
        unstable_getContext: opts == null ? void 0 : opts.unstable_getContext,
        future: opts == null ? void 0 : opts.future,
        history: createBrowserHistory({ window: opts == null ? void 0 : opts.window }),
        hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
        routes,
        mapRouteProperties,
        hydrationRouteProperties,
        dataStrategy: opts == null ? void 0 : opts.dataStrategy,
        patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,
        window: opts == null ? void 0 : opts.window
      }).initialize();
    }
    function parseHydrationData() {
      let state = window == null ? void 0 : window.__staticRouterHydrationData;
      if (state && state.errors) {
        state = {
          ...state,
          errors: deserializeErrors(state.errors)
        };
      }
      return state;
    }
    function deserializeErrors(errors) {
      if (!errors) return null;
      let entries = Object.entries(errors);
      let serialized = {};
      for (let [key, val] of entries) {
        if (val && val.__type === "RouteErrorResponse") {
          serialized[key] = new ErrorResponseImpl(
            val.status,
            val.statusText,
            val.data,
            val.internal === true
          );
        } else if (val && val.__type === "Error") {
          if (val.__subType) {
            let ErrorConstructor = window[val.__subType];
            if (typeof ErrorConstructor === "function") {
              try {
                let error = new ErrorConstructor(val.message);
                error.stack = "";
                serialized[key] = error;
              } catch (e) {
              }
            }
          }
          if (serialized[key] == null) {
            let error = new Error(val.message);
            error.stack = "";
            serialized[key] = error;
          }
        } else {
          serialized[key] = val;
        }
      }
      return serialized;
    }
    var ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
    var Link = reactExports.forwardRef(
      function LinkWithRef({
        onClick,
        discover = "render",
        prefetch = "none",
        relative,
        reloadDocument,
        replace: replace2,
        state,
        target,
        to: to2,
        preventScrollReset,
        viewTransition,
        ...rest
      }, forwardedRef) {
        let { basename } = reactExports.useContext(NavigationContext);
        let isAbsolute = typeof to2 === "string" && ABSOLUTE_URL_REGEX2.test(to2);
        let absoluteHref;
        let isExternal = false;
        if (typeof to2 === "string" && isAbsolute) {
          absoluteHref = to2;
          if (isBrowser) {
            try {
              let currentUrl = new URL(window.location.href);
              let targetUrl = to2.startsWith("//") ? new URL(currentUrl.protocol + to2) : new URL(to2);
              let path = stripBasename(targetUrl.pathname, basename);
              if (targetUrl.origin === currentUrl.origin && path != null) {
                to2 = path + targetUrl.search + targetUrl.hash;
              } else {
                isExternal = true;
              }
            } catch (e) {
              warning(
                false,
                `<Link to="${to2}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`
              );
            }
          }
        }
        let href2 = useHref(to2, { relative });
        let [shouldPrefetch, prefetchRef, prefetchHandlers] = usePrefetchBehavior(
          prefetch,
          rest
        );
        let internalOnClick = useLinkClickHandler(to2, {
          replace: replace2,
          state,
          target,
          preventScrollReset,
          relative,
          viewTransition
        });
        function handleClick(event) {
          if (onClick) onClick(event);
          if (!event.defaultPrevented) {
            internalOnClick(event);
          }
        }
        let link = (
          // eslint-disable-next-line jsx-a11y/anchor-has-content
          /* @__PURE__ */ reactExports.createElement(
            "a",
            {
              ...rest,
              ...prefetchHandlers,
              href: absoluteHref || href2,
              onClick: isExternal || reloadDocument ? onClick : handleClick,
              ref: mergeRefs(forwardedRef, prefetchRef),
              target,
              "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
            }
          )
        );
        return shouldPrefetch && !isAbsolute ? /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, link, /* @__PURE__ */ reactExports.createElement(PrefetchPageLinks, { page: href2 })) : link;
      }
    );
    Link.displayName = "Link";
    var NavLink = reactExports.forwardRef(
      function NavLinkWithRef({
        "aria-current": ariaCurrentProp = "page",
        caseSensitive = false,
        className: classNameProp = "",
        end = false,
        style: styleProp,
        to: to2,
        viewTransition,
        children,
        ...rest
      }, ref) {
        let path = useResolvedPath(to2, { relative: rest.relative });
        let location = useLocation();
        let routerState = reactExports.useContext(DataRouterStateContext);
        let { navigator: navigator2, basename } = reactExports.useContext(NavigationContext);
        let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
        // eslint-disable-next-line react-hooks/rules-of-hooks
        useViewTransitionState(path) && viewTransition === true;
        let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
        let locationPathname = location.pathname;
        let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
        if (!caseSensitive) {
          locationPathname = locationPathname.toLowerCase();
          nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
          toPathname = toPathname.toLowerCase();
        }
        if (nextLocationPathname && basename) {
          nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
        }
        const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
        let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
        let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
        let renderProps = {
          isActive,
          isPending,
          isTransitioning
        };
        let ariaCurrent = isActive ? ariaCurrentProp : void 0;
        let className;
        if (typeof classNameProp === "function") {
          className = classNameProp(renderProps);
        } else {
          className = [
            classNameProp,
            isActive ? "active" : null,
            isPending ? "pending" : null,
            isTransitioning ? "transitioning" : null
          ].filter(Boolean).join(" ");
        }
        let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
        return /* @__PURE__ */ reactExports.createElement(
          Link,
          {
            ...rest,
            "aria-current": ariaCurrent,
            className,
            ref,
            style,
            to: to2,
            viewTransition
          },
          typeof children === "function" ? children(renderProps) : children
        );
      }
    );
    NavLink.displayName = "NavLink";
    var Form$1 = reactExports.forwardRef(
      ({
        discover = "render",
        fetcherKey,
        navigate,
        reloadDocument,
        replace: replace2,
        state,
        method = defaultMethod,
        action,
        onSubmit,
        relative,
        preventScrollReset,
        viewTransition,
        ...props
      }, forwardedRef) => {
        let submit = useSubmit();
        let formAction = useFormAction(action, { relative });
        let formMethod = method.toLowerCase() === "get" ? "get" : "post";
        let isAbsolute = typeof action === "string" && ABSOLUTE_URL_REGEX2.test(action);
        let submitHandler = (event) => {
          onSubmit && onSubmit(event);
          if (event.defaultPrevented) return;
          event.preventDefault();
          let submitter = event.nativeEvent.submitter;
          let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
          submit(submitter || event.currentTarget, {
            fetcherKey,
            method: submitMethod,
            navigate,
            replace: replace2,
            state,
            relative,
            preventScrollReset,
            viewTransition
          });
        };
        return /* @__PURE__ */ reactExports.createElement(
          "form",
          {
            ref: forwardedRef,
            method: formMethod,
            action: formAction,
            onSubmit: reloadDocument ? onSubmit : submitHandler,
            ...props,
            "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
          }
        );
      }
    );
    Form$1.displayName = "Form";
    function getDataRouterConsoleError2(hookName) {
      return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
    }
    function useDataRouterContext3(hookName) {
      let ctx = reactExports.useContext(DataRouterContext);
      invariant$1(ctx, getDataRouterConsoleError2(hookName));
      return ctx;
    }
    function useLinkClickHandler(to2, {
      target,
      replace: replaceProp,
      state,
      preventScrollReset,
      relative,
      viewTransition
    } = {}) {
      let navigate = useNavigate();
      let location = useLocation();
      let path = useResolvedPath(to2, { relative });
      return reactExports.useCallback(
        (event) => {
          if (shouldProcessLinkClick(event, target)) {
            event.preventDefault();
            let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
            navigate(to2, {
              replace: replace2,
              state,
              preventScrollReset,
              relative,
              viewTransition
            });
          }
        },
        [
          location,
          navigate,
          path,
          replaceProp,
          state,
          target,
          to2,
          preventScrollReset,
          relative,
          viewTransition
        ]
      );
    }
    var fetcherId = 0;
    var getUniqueFetcherId = () => `__${String(++fetcherId)}__`;
    function useSubmit() {
      let { router: router2 } = useDataRouterContext3(
        "useSubmit"
        /* UseSubmit */
      );
      let { basename } = reactExports.useContext(NavigationContext);
      let currentRouteId = useRouteId();
      return reactExports.useCallback(
        async (target, options2 = {}) => {
          let { action, method, encType, formData, body } = getFormSubmissionInfo(
            target,
            basename
          );
          if (options2.navigate === false) {
            let key = options2.fetcherKey || getUniqueFetcherId();
            await router2.fetch(key, currentRouteId, options2.action || action, {
              preventScrollReset: options2.preventScrollReset,
              formData,
              body,
              formMethod: options2.method || method,
              formEncType: options2.encType || encType,
              flushSync: options2.flushSync
            });
          } else {
            await router2.navigate(options2.action || action, {
              preventScrollReset: options2.preventScrollReset,
              formData,
              body,
              formMethod: options2.method || method,
              formEncType: options2.encType || encType,
              replace: options2.replace,
              state: options2.state,
              fromRouteId: currentRouteId,
              flushSync: options2.flushSync,
              viewTransition: options2.viewTransition
            });
          }
        },
        [router2, basename, currentRouteId]
      );
    }
    function useFormAction(action, { relative } = {}) {
      let { basename } = reactExports.useContext(NavigationContext);
      let routeContext = reactExports.useContext(RouteContext);
      invariant$1(routeContext, "useFormAction must be used inside a RouteContext");
      let [match] = routeContext.matches.slice(-1);
      let path = { ...useResolvedPath(action ? action : ".", { relative }) };
      let location = useLocation();
      if (action == null) {
        path.search = location.search;
        let params = new URLSearchParams(path.search);
        let indexValues = params.getAll("index");
        let hasNakedIndexParam = indexValues.some((v) => v === "");
        if (hasNakedIndexParam) {
          params.delete("index");
          indexValues.filter((v) => v).forEach((v) => params.append("index", v));
          let qs = params.toString();
          path.search = qs ? `?${qs}` : "";
        }
      }
      if ((!action || action === ".") && match.route.index) {
        path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
      }
      if (basename !== "/") {
        path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
      }
      return createPath(path);
    }
    function useViewTransitionState(to2, opts = {}) {
      let vtContext = reactExports.useContext(ViewTransitionContext);
      invariant$1(
        vtContext != null,
        "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?"
      );
      let { basename } = useDataRouterContext3(
        "useViewTransitionState"
        /* useViewTransitionState */
      );
      let path = useResolvedPath(to2, { relative: opts.relative });
      if (!vtContext.isTransitioning) {
        return false;
      }
      let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
      let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
      return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
    }
    /* @__PURE__ */ new Set([
      ...NO_BODY_STATUS_CODES,
      304
    ]);
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    const { toString: toString$3 } = Object.prototype;
    const { getPrototypeOf } = Object;
    const { iterator, toStringTag } = Symbol;
    const kindOf = /* @__PURE__ */ ((cache) => (thing) => {
      const str = toString$3.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    const kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    const typeOfTest = (type) => (thing) => typeof thing === type;
    const { isArray: isArray$2 } = Array;
    const isUndefined$2 = typeOfTest("undefined");
    function isBuffer$1(val) {
      return val !== null && !isUndefined$2(val) && val.constructor !== null && !isUndefined$2(val.constructor) && isFunction$5(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    const isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    const isString$3 = typeOfTest("string");
    const isFunction$5 = typeOfTest("function");
    const isNumber$4 = typeOfTest("number");
    const isObject$3 = (thing) => thing !== null && typeof thing === "object";
    const isBoolean$2 = (thing) => thing === true || thing === false;
    const isPlainObject$3 = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(toStringTag in val) && !(iterator in val);
    };
    const isDate$1 = kindOfTest("Date");
    const isFile = kindOfTest("File");
    const isBlob = kindOfTest("Blob");
    const isFileList = kindOfTest("FileList");
    const isStream = (val) => isObject$3(val) && isFunction$5(val.pipe);
    const isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction$5(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction$5(thing.toString) && thing.toString() === "[object FormData]"));
    };
    const isURLSearchParams = kindOfTest("URLSearchParams");
    const [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    const trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i2;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray$2(obj)) {
        for (i2 = 0, l = obj.length; i2 < l; i2++) {
          fn.call(null, obj[i2], i2, obj);
        }
      } else {
        const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys2.length;
        let key;
        for (i2 = 0; i2 < len; i2++) {
          key = keys2[i2];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys2 = Object.keys(obj);
      let i2 = keys2.length;
      let _key;
      while (i2-- > 0) {
        _key = keys2[i2];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    const _global = (() => {
      if (typeof globalThis !== "undefined") return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    const isContextDefined = (context) => !isUndefined$2(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject$3(result[targetKey]) && isPlainObject$3(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject$3(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray$2(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i2 = 0, l = arguments.length; i2 < l; i2++) {
        arguments[i2] && forEach(arguments[i2], assignValue);
      }
      return result;
    }
    const extend$2 = (a2, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction$5(val)) {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      }, { allOwnKeys });
      return a2;
    };
    const stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    const inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i2;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null) return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i2 = props.length;
        while (i2-- > 0) {
          prop = props[i2];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    const endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    const toArray$2 = (thing) => {
      if (!thing) return null;
      if (isArray$2(thing)) return thing;
      let i2 = thing.length;
      if (!isNumber$4(i2)) return null;
      const arr = new Array(i2);
      while (i2-- > 0) {
        arr[i2] = thing[i2];
      }
      return arr;
    };
    const isTypedArray$1 = /* @__PURE__ */ ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    const forEachEntry = (obj, fn) => {
      const generator = obj && obj[iterator];
      const _iterator = generator.call(obj);
      let result;
      while ((result = _iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    const matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    const isHTMLForm = kindOfTest("HTMLFormElement");
    const toCamelCase$1 = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m2, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    const hasOwnProperty$1 = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    const isRegExp = kindOfTest("RegExp");
    const reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    const freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction$5(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction$5(value)) return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    const toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define2 = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray$2(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
      return obj;
    };
    const noop$2 = () => {
    };
    const toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction$5(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
    }
    const toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i2) => {
        if (isObject$3(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i2] = source;
            const target = isArray$2(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i2 + 1);
              !isUndefined$2(reducedValue) && (target[key] = reducedValue);
            });
            stack[i2] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    const isAsyncFn = kindOfTest("AsyncFunction");
    const isThenable = (thing) => thing && (isObject$3(thing) || isFunction$5(thing)) && isFunction$5(thing.then) && isFunction$5(thing.catch);
    const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token2, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token2) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token2, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction$5(_global.postMessage)
    );
    const asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    const isIterable = (thing) => thing != null && isFunction$5(thing[iterator]);
    const utils$1 = {
      isArray: isArray$2,
      isArrayBuffer,
      isBuffer: isBuffer$1,
      isFormData,
      isArrayBufferView,
      isString: isString$3,
      isNumber: isNumber$4,
      isBoolean: isBoolean$2,
      isObject: isObject$3,
      isPlainObject: isPlainObject$3,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined: isUndefined$2,
      isDate: isDate$1,
      isFile,
      isBlob,
      isRegExp,
      isFunction: isFunction$5,
      isStream,
      isURLSearchParams,
      isTypedArray: isTypedArray$1,
      isFileList,
      forEach,
      merge,
      extend: extend$2,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray: toArray$2,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty: hasOwnProperty$1,
      hasOwnProp: hasOwnProperty$1,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase: toCamelCase$1,
      noop: noop$2,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap,
      isIterable
    };
    function AxiosError$1(message, code, config2, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config2 && (this.config = config2);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }
    utils$1.inherits(AxiosError$1, Error, {
      toJSON: function toJSON2() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    const prototype$1 = AxiosError$1.prototype;
    const descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError$1, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError$1.from = (error, code, config2, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError$1.call(axiosError, error.message, code, config2, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    const httpAdapter = null;
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path) return key;
      return path.concat(key).map(function each(token2, i2) {
        token2 = removeBrackets(token2);
        return !dots && i2 ? "[" + token2 + "]" : token2;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData$1(obj, formData, options2) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options2 = utils$1.toFlatObject(options2, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined2(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options2.metaTokens;
      const visitor = options2.visitor || defaultVisitor;
      const dots = options2.dots;
      const indexes = options2.indexes;
      const _Blob = options2.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null) return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError$1("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index2) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index2, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils$1.isUndefined(value)) return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options2) {
      this._pairs = [];
      params && toFormData$1(params, this, options2);
    }
    const prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append2(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url, params, options2) {
      if (!params) {
        return url;
      }
      const _encode = options2 && options2.encode || encode;
      if (utils$1.isFunction(options2)) {
        options2 = {
          serialize: options2
        };
      }
      const serializeFn = options2 && options2.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options2);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options2).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    class InterceptorManager {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options2) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options2 ? options2.synchronous : false,
          runWhen: options2 ? options2.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    }
    const transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    const URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    const FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    const Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    const platform$2 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    const hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    const _navigator = typeof navigator === "object" && navigator || void 0;
    const hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    const hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    const origin = hasBrowserEnv && window.location.href || "http://localhost";
    const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      navigator: _navigator,
      origin
    }, Symbol.toStringTag, { value: "Module" }));
    const platform$1 = {
      ...utils,
      ...platform$2
    };
    function toURLEncodedForm(data, options2) {
      return toFormData$1(data, new platform$1.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform$1.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options2));
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys2 = Object.keys(arr);
      let i2;
      const len = keys2.length;
      let key;
      for (i2 = 0; i2 < len; i2++) {
        key = keys2[i2];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index2) {
        let name = path[index2++];
        if (name === "__proto__") return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index2 >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value, target[name], index2);
        if (result && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    const defaults$2 = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData$1(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults$2.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError$1.from(e, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform$1.classes.FormData,
        Blob: platform$1.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults$2.headers[method] = {};
    });
    const ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    const parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i2;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i2 = line.indexOf(":");
        key = line.substring(0, i2).trim().toLowerCase();
        val = line.substring(i2 + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    const $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens2 = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens2[match[1]] = match[2];
      }
      return tokens2;
    }
    const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
      if (utils$1.isFunction(filter)) {
        return filter.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value)) return;
      if (utils$1.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }
      if (utils$1.isRegExp(filter)) {
        return filter.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    let AxiosHeaders$1 = class AxiosHeaders {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isObject(header) && utils$1.isIterable(header)) {
          let obj = {}, dest, key;
          for (const entry of header) {
            if (!utils$1.isArray(entry)) {
              throw TypeError("Object iterator must return a key-value pair");
            }
            obj[key = entry[0]] = (dest = obj[key]) ? utils$1.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
          }
          setHeaders(obj, valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys2 = Object.keys(this);
        let i2 = keys2.length;
        let deleted = false;
        while (i2--) {
          const key = keys2[i2];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format2) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format2 ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      getSetCookie() {
        return this.get("set-cookie") || [];
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders$1.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders$1.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders$1);
    function transformData(fns, response) {
      const config2 = this || defaults$2;
      const context = response || config2;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config2, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel$1(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError$1(message, config2, request) {
      AxiosError$1.call(this, message == null ? "canceled" : message, AxiosError$1.ERR_CANCELED, config2, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError$1, AxiosError$1, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError$1(
          "Request failed with status code " + response.status,
          [AxiosError$1.ERR_BAD_REQUEST, AxiosError$1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min2) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min2 = min2 !== void 0 ? min2 : 1e3;
      return function push(chunkLength) {
        const now2 = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now2;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now2;
        let i2 = tail;
        let bytesCount = 0;
        while (i2 !== head) {
          bytesCount += bytes[i2++];
          i2 = i2 % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now2 - firstSampleTS < min2) {
          return;
        }
        const passed = startedAt && now2 - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle$1(fn, freq) {
      let timestamp = 0;
      let threshold2 = 1e3 / freq;
      let lastArgs;
      let timer;
      const invoke = (args, now2 = Date.now()) => {
        timestamp = now2;
        lastArgs = null;
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        fn.apply(null, args);
      };
      const throttled = (...args) => {
        const now2 = Date.now();
        const passed = now2 - timestamp;
        if (passed >= threshold2) {
          invoke(args, now2);
        } else {
          lastArgs = args;
          if (!timer) {
            timer = setTimeout(() => {
              timer = null;
              invoke(lastArgs);
            }, threshold2 - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return throttle$1((e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    const progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    const asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
    const isURLSameOrigin = platform$1.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
      url = new URL(url, platform$1.origin);
      return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
    })(
      new URL(platform$1.origin),
      platform$1.navigator && /(msie|trident)/i.test(platform$1.navigator.userAgent)
    ) : () => true;
    const cookies = platform$1.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
      let isRelativeUrl = !isAbsoluteURL(requestedURL);
      if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig$1(config1, config2) {
      config2 = config2 || {};
      const config3 = {};
      function getMergedValue(target, source, prop, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a2, b, prop, caseless) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(a2, b, prop, caseless);
        } else if (!utils$1.isUndefined(a2)) {
          return getMergedValue(void 0, a2, prop, caseless);
        }
      }
      function valueFromConfig2(a2, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a2, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils$1.isUndefined(a2)) {
          return getMergedValue(void 0, a2);
        }
      }
      function mergeDirectKeys(a2, b, prop) {
        if (prop in config2) {
          return getMergedValue(a2, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a2);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a2, b, prop) => mergeDeepProperties(headersToObject(a2), headersToObject(b), prop, true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config3[prop] = configValue);
      });
      return config3;
    }
    const resolveConfig = (config2) => {
      const newConfig = mergeConfig$1({}, config2);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config2.params, config2.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform$1.hasStandardBrowserEnv || platform$1.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type, ...tokens2] = contentType ? contentType.split(";").map((token2) => token2.trim()).filter(Boolean) : [];
          headers.setContentType([type || "multipart/form-data", ...tokens2].join("; "));
        }
      }
      if (platform$1.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    const xhrAdapter = isXHRAdapterSupported && function(config2) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config2);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config2,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError$1("Request aborted", AxiosError$1.ECONNABORTED, config2, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError$1("Network Error", AxiosError$1.ERR_NETWORK, config2, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError$1(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED,
            config2,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError$1(null, config2, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config.url);
        if (protocol && platform$1.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError$1("Unsupported protocol " + protocol + ":", AxiosError$1.ERR_BAD_REQUEST, config2));
          return;
        }
        request.send(requestData || null);
      });
    };
    const composeSignals = (signals, timeout) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError$1 ? err : new CanceledError$1(err instanceof Error ? err.message : err));
          }
        };
        let timer = timeout && setTimeout(() => {
          timer = null;
          onabort(new AxiosError$1(`timeout ${timeout} of ms exceeded`, AxiosError$1.ETIMEDOUT));
        }, timeout);
        const unsubscribe = () => {
          if (signals) {
            timer && clearTimeout(timer);
            timer = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils$1.asap(unsubscribe);
        return signal;
      }
    };
    const streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    const readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    const readStream = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    const trackStream = (stream, chunkSize, onProgress, onFinish) => {
      const iterator2 = readBytes(stream, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator2.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator2.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    const isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    const encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    const test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false;
      }
    };
    const supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform$1.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    const DEFAULT_CHUNK_SIZE = 64 * 1024;
    const supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
    const resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
        !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res2) => res2[type]() : (_, config2) => {
          throw new AxiosError$1(`Response type '${type}' is not supported`, AxiosError$1.ERR_NOT_SUPPORT, config2);
        });
      });
    })(new Response());
    const getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform$1.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    const resolveBodyLength = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    const fetchAdapter = isFetchSupported && (async (config2) => {
      let {
        url,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config2);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request(url, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options2 = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options2[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options2
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config2);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config: config2,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError$1("Network Error", AxiosError$1.ERR_NETWORK, config2, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError$1.from(err, err && err.code, config2, request);
      }
    });
    const knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    const renderReason = (reason) => `- ${reason}`;
    const isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    const adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i2 = 0; i2 < length; i2++) {
          nameOrAdapter = adapters2[i2];
          let id;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError$1(`Unknown adapter '${id}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id || "#" + i2] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s2 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError$1(
            `There is no suitable adapter to dispatch the request ` + s2,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config2) {
      if (config2.cancelToken) {
        config2.cancelToken.throwIfRequested();
      }
      if (config2.signal && config2.signal.aborted) {
        throw new CanceledError$1(null, config2);
      }
    }
    function dispatchRequest(config2) {
      throwIfCancellationRequested(config2);
      config2.headers = AxiosHeaders$1.from(config2.headers);
      config2.data = transformData.call(
        config2,
        config2.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config2.method) !== -1) {
        config2.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config2.adapter || defaults$2.adapter);
      return adapter(config2).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config2);
        response.data = transformData.call(
          config2,
          config2.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel$1(reason)) {
          throwIfCancellationRequested(config2);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config2,
              config2.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    const VERSION$1 = "1.9.0";
    const validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i2) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
      };
    });
    const deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION$1 + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError$1(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError$1.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    validators$1.spelling = function spelling(correctSpelling) {
      return (value, opt) => {
        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
        return true;
      };
    };
    function assertOptions(options2, schema, allowUnknown) {
      if (typeof options2 !== "object") {
        throw new AxiosError$1("options must be an object", AxiosError$1.ERR_BAD_OPTION_VALUE);
      }
      const keys2 = Object.keys(options2);
      let i2 = keys2.length;
      while (i2-- > 0) {
        const opt = keys2[i2];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options2[opt];
          const result = value === void 0 || validator2(value, opt, options2);
          if (result !== true) {
            throw new AxiosError$1("option " + opt + " must be " + result, AxiosError$1.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError$1("Unknown option " + opt, AxiosError$1.ERR_BAD_OPTION);
        }
      }
    }
    const validator = {
      assertOptions,
      validators: validators$1
    };
    const validators = validator.validators;
    let Axios$1 = class Axios {
      constructor(instanceConfig) {
        this.defaults = instanceConfig || {};
        this.interceptors = {
          request: new InterceptorManager(),
          response: new InterceptorManager()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config2) {
        try {
          return await this._request(configOrUrl, config2);
        } catch (err) {
          if (err instanceof Error) {
            let dummy = {};
            Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config2) {
        if (typeof configOrUrl === "string") {
          config2 = config2 || {};
          config2.url = configOrUrl;
        } else {
          config2 = configOrUrl || {};
        }
        config2 = mergeConfig$1(this.defaults, config2);
        const { transitional, paramsSerializer, headers } = config2;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config2.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        if (config2.allowAbsoluteUrls !== void 0) ;
        else if (this.defaults.allowAbsoluteUrls !== void 0) {
          config2.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
        } else {
          config2.allowAbsoluteUrls = true;
        }
        validator.assertOptions(config2, {
          baseUrl: validators.spelling("baseURL"),
          withXsrfToken: validators.spelling("withXSRFToken")
        }, true);
        config2.method = (config2.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config2.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config2.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i2 = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config2);
          while (i2 < len) {
            promise = promise.then(chain[i2++], chain[i2++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config2;
        i2 = 0;
        while (i2 < len) {
          const onFulfilled = requestInterceptorChain[i2++];
          const onRejected = requestInterceptorChain[i2++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i2 = 0;
        len = responseInterceptorChain.length;
        while (i2 < len) {
          promise = promise.then(responseInterceptorChain[i2++], responseInterceptorChain[i2++]);
        }
        return promise;
      }
      getUri(config2) {
        config2 = mergeConfig$1(this.defaults, config2);
        const fullPath = buildFullPath(config2.baseURL, config2.url, config2.allowAbsoluteUrls);
        return buildURL(fullPath, config2.params, config2.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios$1.prototype[method] = function(url, config2) {
        return this.request(mergeConfig$1(config2 || {}, {
          method,
          url,
          data: (config2 || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config2) {
          return this.request(mergeConfig$1(config2 || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios$1.prototype[method] = generateHTTPMethod();
      Axios$1.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    let CancelToken$1 = class CancelToken2 {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token2 = this;
        this.promise.then((cancel) => {
          if (!token2._listeners) return;
          let i2 = token2._listeners.length;
          while (i2-- > 0) {
            token2._listeners[i2](cancel);
          }
          token2._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token2.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token2.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config2, request) {
          if (token2.reason) {
            return;
          }
          token2.reason = new CanceledError$1(message, config2, request);
          resolvePromise(token2.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index2 = this._listeners.indexOf(listener);
        if (index2 !== -1) {
          this._listeners.splice(index2, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token2 = new CancelToken2(function executor(c2) {
          cancel = c2;
        });
        return {
          token: token2,
          cancel
        };
      }
    };
    function spread$1(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError$1(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    const HttpStatusCode$1 = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode$1).forEach(([key, value]) => {
      HttpStatusCode$1[value] = key;
    });
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create2(instanceConfig) {
        return createInstance(mergeConfig$1(defaultConfig, instanceConfig));
      };
      return instance;
    }
    const axios = createInstance(defaults$2);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError$1;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel$1;
    axios.VERSION = VERSION$1;
    axios.toFormData = toFormData$1;
    axios.AxiosError = AxiosError$1;
    axios.Cancel = axios.CanceledError;
    axios.all = function all2(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread$1;
    axios.isAxiosError = isAxiosError$1;
    axios.mergeConfig = mergeConfig$1;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    const {
      Axios,
      AxiosError,
      CanceledError,
      isCancel,
      CancelToken,
      VERSION,
      all,
      Cancel: Cancel$1,
      isAxiosError,
      spread,
      toFormData,
      AxiosHeaders,
      HttpStatusCode,
      formToJSON,
      getAdapter,
      mergeConfig
    } = axios;
    const client = axios.create({
      baseURL: ""
    });
    const login = (data) => client.post("/auth/login", data).then(({ data: data2 }) => data2.data);
    const checkToken = (token2) => client.get("/auth/check", {
      headers: {
        Authorization: `Bearer ${token2}`
      }
    }).then(({ data }) => data.data);
    const logout = () => client.delete("/auth/logout").then(({ data }) => data.data);
    function createContext2(rootComponentName, defaultContext) {
      const Context = reactExports.createContext(defaultContext);
      const Provider2 = (props) => {
        const { children, ...context } = props;
        const value = reactExports.useMemo(() => context, Object.values(context));
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Context.Provider, { value, children });
      };
      Provider2.displayName = rootComponentName + "Provider";
      function useContext2(consumerName) {
        const context = reactExports.useContext(Context);
        if (context) return context;
        if (defaultContext !== void 0) return defaultContext;
        throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
      }
      return [Provider2, useContext2];
    }
    function createContextScope(scopeName, createContextScopeDeps = []) {
      let defaultContexts = [];
      function createContext3(rootComponentName, defaultContext) {
        const BaseContext = reactExports.createContext(defaultContext);
        const index2 = defaultContexts.length;
        defaultContexts = [...defaultContexts, defaultContext];
        const Provider2 = (props) => {
          var _a2;
          const { scope, children, ...context } = props;
          const Context = ((_a2 = scope == null ? void 0 : scope[scopeName]) == null ? void 0 : _a2[index2]) || BaseContext;
          const value = reactExports.useMemo(() => context, Object.values(context));
          return /* @__PURE__ */ jsxRuntimeExports.jsx(Context.Provider, { value, children });
        };
        Provider2.displayName = rootComponentName + "Provider";
        function useContext2(consumerName, scope) {
          var _a2;
          const Context = ((_a2 = scope == null ? void 0 : scope[scopeName]) == null ? void 0 : _a2[index2]) || BaseContext;
          const context = reactExports.useContext(Context);
          if (context) return context;
          if (defaultContext !== void 0) return defaultContext;
          throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
        }
        return [Provider2, useContext2];
      }
      const createScope = () => {
        const scopeContexts = defaultContexts.map((defaultContext) => {
          return reactExports.createContext(defaultContext);
        });
        return function useScope(scope) {
          const contexts = (scope == null ? void 0 : scope[scopeName]) || scopeContexts;
          return reactExports.useMemo(
            () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),
            [scope, contexts]
          );
        };
      };
      createScope.scopeName = scopeName;
      return [createContext3, composeContextScopes(createScope, ...createContextScopeDeps)];
    }
    function composeContextScopes(...scopes) {
      const baseScope = scopes[0];
      if (scopes.length === 1) return baseScope;
      const createScope = () => {
        const scopeHooks = scopes.map((createScope2) => ({
          useScope: createScope2(),
          scopeName: createScope2.scopeName
        }));
        return function useComposedScopes(overrideScopes) {
          const nextScopes = scopeHooks.reduce((nextScopes2, { useScope, scopeName }) => {
            const scopeProps = useScope(overrideScopes);
            const currentScope = scopeProps[`__scope${scopeName}`];
            return { ...nextScopes2, ...currentScope };
          }, {});
          return reactExports.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);
        };
      };
      createScope.scopeName = baseScope.scopeName;
      return createScope;
    }
    function setRef(ref, value) {
      if (typeof ref === "function") {
        return ref(value);
      } else if (ref !== null && ref !== void 0) {
        ref.current = value;
      }
    }
    function composeRefs(...refs) {
      return (node) => {
        let hasCleanup = false;
        const cleanups = refs.map((ref) => {
          const cleanup = setRef(ref, node);
          if (!hasCleanup && typeof cleanup == "function") {
            hasCleanup = true;
          }
          return cleanup;
        });
        if (hasCleanup) {
          return () => {
            for (let i2 = 0; i2 < cleanups.length; i2++) {
              const cleanup = cleanups[i2];
              if (typeof cleanup == "function") {
                cleanup();
              } else {
                setRef(refs[i2], null);
              }
            }
          };
        }
      };
    }
    function useComposedRefs(...refs) {
      return reactExports.useCallback(composeRefs(...refs), refs);
    }
    function composeEventHandlers(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
      return function handleEvent(event) {
        originalEventHandler == null ? void 0 : originalEventHandler(event);
        if (checkForDefaultPrevented === false || !event.defaultPrevented) {
          return ourEventHandler == null ? void 0 : ourEventHandler(event);
        }
      };
    }
    var useLayoutEffect2 = (globalThis == null ? void 0 : globalThis.document) ? reactExports.useLayoutEffect : () => {
    };
    var useReactId = React$1[" useId ".trim().toString()] || (() => void 0);
    var count$2 = 0;
    function useId(deterministicId) {
      const [id, setId] = reactExports.useState(useReactId());
      useLayoutEffect2(() => {
        setId((reactId) => reactId ?? String(count$2++));
      }, [deterministicId]);
      return deterministicId || (id ? `radix-${id}` : "");
    }
    var useInsertionEffect = React$1[" useInsertionEffect ".trim().toString()] || useLayoutEffect2;
    function useControllableState({
      prop,
      defaultProp,
      onChange = () => {
      },
      caller
    }) {
      const [uncontrolledProp, setUncontrolledProp, onChangeRef] = useUncontrolledState({
        defaultProp,
        onChange
      });
      const isControlled = prop !== void 0;
      const value = isControlled ? prop : uncontrolledProp;
      {
        const isControlledRef = reactExports.useRef(prop !== void 0);
        reactExports.useEffect(() => {
          const wasControlled = isControlledRef.current;
          if (wasControlled !== isControlled) {
            const from2 = wasControlled ? "controlled" : "uncontrolled";
            const to2 = isControlled ? "controlled" : "uncontrolled";
            console.warn(
              `${caller} is changing from ${from2} to ${to2}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`
            );
          }
          isControlledRef.current = isControlled;
        }, [isControlled, caller]);
      }
      const setValue = reactExports.useCallback(
        (nextValue) => {
          var _a2;
          if (isControlled) {
            const value2 = isFunction$4(nextValue) ? nextValue(prop) : nextValue;
            if (value2 !== prop) {
              (_a2 = onChangeRef.current) == null ? void 0 : _a2.call(onChangeRef, value2);
            }
          } else {
            setUncontrolledProp(nextValue);
          }
        },
        [isControlled, prop, setUncontrolledProp, onChangeRef]
      );
      return [value, setValue];
    }
    function useUncontrolledState({
      defaultProp,
      onChange
    }) {
      const [value, setValue] = reactExports.useState(defaultProp);
      const prevValueRef = reactExports.useRef(value);
      const onChangeRef = reactExports.useRef(onChange);
      useInsertionEffect(() => {
        onChangeRef.current = onChange;
      }, [onChange]);
      reactExports.useEffect(() => {
        var _a2;
        if (prevValueRef.current !== value) {
          (_a2 = onChangeRef.current) == null ? void 0 : _a2.call(onChangeRef, value);
          prevValueRef.current = value;
        }
      }, [value, prevValueRef]);
      return [value, setValue, onChangeRef];
    }
    function isFunction$4(value) {
      return typeof value === "function";
    }
    var reactDomExports = requireReactDom();
    const ReactDOM = /* @__PURE__ */ getDefaultExportFromCjs(reactDomExports);
    // @__NO_SIDE_EFFECTS__
    function createSlot(ownerName) {
      const SlotClone = /* @__PURE__ */ createSlotClone(ownerName);
      const Slot2 = reactExports.forwardRef((props, forwardedRef) => {
        const { children, ...slotProps } = props;
        const childrenArray = reactExports.Children.toArray(children);
        const slottable = childrenArray.find(isSlottable);
        if (slottable) {
          const newElement = slottable.props.children;
          const newChildren = childrenArray.map((child) => {
            if (child === slottable) {
              if (reactExports.Children.count(newElement) > 1) return reactExports.Children.only(null);
              return reactExports.isValidElement(newElement) ? newElement.props.children : null;
            } else {
              return child;
            }
          });
          return /* @__PURE__ */ jsxRuntimeExports.jsx(SlotClone, { ...slotProps, ref: forwardedRef, children: reactExports.isValidElement(newElement) ? reactExports.cloneElement(newElement, void 0, newChildren) : null });
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(SlotClone, { ...slotProps, ref: forwardedRef, children });
      });
      Slot2.displayName = `${ownerName}.Slot`;
      return Slot2;
    }
    var Slot$3 = /* @__PURE__ */ createSlot("Slot");
    // @__NO_SIDE_EFFECTS__
    function createSlotClone(ownerName) {
      const SlotClone = reactExports.forwardRef((props, forwardedRef) => {
        const { children, ...slotProps } = props;
        if (reactExports.isValidElement(children)) {
          const childrenRef = getElementRef$1(children);
          const props2 = mergeProps(slotProps, children.props);
          if (children.type !== reactExports.Fragment) {
            props2.ref = forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef;
          }
          return reactExports.cloneElement(children, props2);
        }
        return reactExports.Children.count(children) > 1 ? reactExports.Children.only(null) : null;
      });
      SlotClone.displayName = `${ownerName}.SlotClone`;
      return SlotClone;
    }
    var SLOTTABLE_IDENTIFIER = Symbol("radix.slottable");
    // @__NO_SIDE_EFFECTS__
    function createSlottable(ownerName) {
      const Slottable2 = ({ children }) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children });
      };
      Slottable2.displayName = `${ownerName}.Slottable`;
      Slottable2.__radixId = SLOTTABLE_IDENTIFIER;
      return Slottable2;
    }
    function isSlottable(child) {
      return reactExports.isValidElement(child) && typeof child.type === "function" && "__radixId" in child.type && child.type.__radixId === SLOTTABLE_IDENTIFIER;
    }
    function mergeProps(slotProps, childProps) {
      const overrideProps = { ...childProps };
      for (const propName in childProps) {
        const slotPropValue = slotProps[propName];
        const childPropValue = childProps[propName];
        const isHandler = /^on[A-Z]/.test(propName);
        if (isHandler) {
          if (slotPropValue && childPropValue) {
            overrideProps[propName] = (...args) => {
              const result = childPropValue(...args);
              slotPropValue(...args);
              return result;
            };
          } else if (slotPropValue) {
            overrideProps[propName] = slotPropValue;
          }
        } else if (propName === "style") {
          overrideProps[propName] = { ...slotPropValue, ...childPropValue };
        } else if (propName === "className") {
          overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" ");
        }
      }
      return { ...slotProps, ...overrideProps };
    }
    function getElementRef$1(element) {
      var _a2, _b2;
      let getter = (_a2 = Object.getOwnPropertyDescriptor(element.props, "ref")) == null ? void 0 : _a2.get;
      let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
      if (mayWarn) {
        return element.ref;
      }
      getter = (_b2 = Object.getOwnPropertyDescriptor(element, "ref")) == null ? void 0 : _b2.get;
      mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
      if (mayWarn) {
        return element.props.ref;
      }
      return element.props.ref || element.ref;
    }
    var NODES = [
      "a",
      "button",
      "div",
      "form",
      "h2",
      "h3",
      "img",
      "input",
      "label",
      "li",
      "nav",
      "ol",
      "p",
      "select",
      "span",
      "svg",
      "ul"
    ];
    var Primitive = NODES.reduce((primitive, node) => {
      const Slot2 = /* @__PURE__ */ createSlot(`Primitive.${node}`);
      const Node2 = reactExports.forwardRef((props, forwardedRef) => {
        const { asChild, ...primitiveProps } = props;
        const Comp = asChild ? Slot2 : node;
        if (typeof window !== "undefined") {
          window[Symbol.for("radix-ui")] = true;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Comp, { ...primitiveProps, ref: forwardedRef });
      });
      Node2.displayName = `Primitive.${node}`;
      return { ...primitive, [node]: Node2 };
    }, {});
    function dispatchDiscreteCustomEvent(target, event) {
      if (target) reactDomExports.flushSync(() => target.dispatchEvent(event));
    }
    function useCallbackRef$1(callback) {
      const callbackRef = reactExports.useRef(callback);
      reactExports.useEffect(() => {
        callbackRef.current = callback;
      });
      return reactExports.useMemo(() => (...args) => {
        var _a2;
        return (_a2 = callbackRef.current) == null ? void 0 : _a2.call(callbackRef, ...args);
      }, []);
    }
    function useEscapeKeydown(onEscapeKeyDownProp, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
      const onEscapeKeyDown = useCallbackRef$1(onEscapeKeyDownProp);
      reactExports.useEffect(() => {
        const handleKeyDown = (event) => {
          if (event.key === "Escape") {
            onEscapeKeyDown(event);
          }
        };
        ownerDocument.addEventListener("keydown", handleKeyDown, { capture: true });
        return () => ownerDocument.removeEventListener("keydown", handleKeyDown, { capture: true });
      }, [onEscapeKeyDown, ownerDocument]);
    }
    var DISMISSABLE_LAYER_NAME = "DismissableLayer";
    var CONTEXT_UPDATE = "dismissableLayer.update";
    var POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
    var FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
    var originalBodyPointerEvents;
    var DismissableLayerContext = reactExports.createContext({
      layers: /* @__PURE__ */ new Set(),
      layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
      branches: /* @__PURE__ */ new Set()
    });
    var DismissableLayer = reactExports.forwardRef(
      (props, forwardedRef) => {
        const {
          disableOutsidePointerEvents = false,
          onEscapeKeyDown,
          onPointerDownOutside,
          onFocusOutside,
          onInteractOutside,
          onDismiss,
          ...layerProps
        } = props;
        const context = reactExports.useContext(DismissableLayerContext);
        const [node, setNode] = reactExports.useState(null);
        const ownerDocument = (node == null ? void 0 : node.ownerDocument) ?? (globalThis == null ? void 0 : globalThis.document);
        const [, force] = reactExports.useState({});
        const composedRefs = useComposedRefs(forwardedRef, (node2) => setNode(node2));
        const layers = Array.from(context.layers);
        const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1);
        const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
        const index2 = node ? layers.indexOf(node) : -1;
        const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
        const isPointerEventsEnabled = index2 >= highestLayerWithOutsidePointerEventsDisabledIndex;
        const pointerDownOutside = usePointerDownOutside((event) => {
          const target = event.target;
          const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));
          if (!isPointerEventsEnabled || isPointerDownOnBranch) return;
          onPointerDownOutside == null ? void 0 : onPointerDownOutside(event);
          onInteractOutside == null ? void 0 : onInteractOutside(event);
          if (!event.defaultPrevented) onDismiss == null ? void 0 : onDismiss();
        }, ownerDocument);
        const focusOutside = useFocusOutside((event) => {
          const target = event.target;
          const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));
          if (isFocusInBranch) return;
          onFocusOutside == null ? void 0 : onFocusOutside(event);
          onInteractOutside == null ? void 0 : onInteractOutside(event);
          if (!event.defaultPrevented) onDismiss == null ? void 0 : onDismiss();
        }, ownerDocument);
        useEscapeKeydown((event) => {
          const isHighestLayer = index2 === context.layers.size - 1;
          if (!isHighestLayer) return;
          onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(event);
          if (!event.defaultPrevented && onDismiss) {
            event.preventDefault();
            onDismiss();
          }
        }, ownerDocument);
        reactExports.useEffect(() => {
          if (!node) return;
          if (disableOutsidePointerEvents) {
            if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
              originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
              ownerDocument.body.style.pointerEvents = "none";
            }
            context.layersWithOutsidePointerEventsDisabled.add(node);
          }
          context.layers.add(node);
          dispatchUpdate();
          return () => {
            if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) {
              ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;
            }
          };
        }, [node, ownerDocument, disableOutsidePointerEvents, context]);
        reactExports.useEffect(() => {
          return () => {
            if (!node) return;
            context.layers.delete(node);
            context.layersWithOutsidePointerEventsDisabled.delete(node);
            dispatchUpdate();
          };
        }, [node, context]);
        reactExports.useEffect(() => {
          const handleUpdate = () => force({});
          document.addEventListener(CONTEXT_UPDATE, handleUpdate);
          return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);
        }, []);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Primitive.div,
          {
            ...layerProps,
            ref: composedRefs,
            style: {
              pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
              ...props.style
            },
            onFocusCapture: composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture),
            onBlurCapture: composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture),
            onPointerDownCapture: composeEventHandlers(
              props.onPointerDownCapture,
              pointerDownOutside.onPointerDownCapture
            )
          }
        );
      }
    );
    DismissableLayer.displayName = DISMISSABLE_LAYER_NAME;
    var BRANCH_NAME = "DismissableLayerBranch";
    var DismissableLayerBranch = reactExports.forwardRef((props, forwardedRef) => {
      const context = reactExports.useContext(DismissableLayerContext);
      const ref = reactExports.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref);
      reactExports.useEffect(() => {
        const node = ref.current;
        if (node) {
          context.branches.add(node);
          return () => {
            context.branches.delete(node);
          };
        }
      }, [context.branches]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, { ...props, ref: composedRefs });
    });
    DismissableLayerBranch.displayName = BRANCH_NAME;
    function usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
      const handlePointerDownOutside = useCallbackRef$1(onPointerDownOutside);
      const isPointerInsideReactTreeRef = reactExports.useRef(false);
      const handleClickRef = reactExports.useRef(() => {
      });
      reactExports.useEffect(() => {
        const handlePointerDown = (event) => {
          if (event.target && !isPointerInsideReactTreeRef.current) {
            let handleAndDispatchPointerDownOutsideEvent2 = function() {
              handleAndDispatchCustomEvent(
                POINTER_DOWN_OUTSIDE,
                handlePointerDownOutside,
                eventDetail,
                { discrete: true }
              );
            };
            const eventDetail = { originalEvent: event };
            if (event.pointerType === "touch") {
              ownerDocument.removeEventListener("click", handleClickRef.current);
              handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;
              ownerDocument.addEventListener("click", handleClickRef.current, { once: true });
            } else {
              handleAndDispatchPointerDownOutsideEvent2();
            }
          } else {
            ownerDocument.removeEventListener("click", handleClickRef.current);
          }
          isPointerInsideReactTreeRef.current = false;
        };
        const timerId = window.setTimeout(() => {
          ownerDocument.addEventListener("pointerdown", handlePointerDown);
        }, 0);
        return () => {
          window.clearTimeout(timerId);
          ownerDocument.removeEventListener("pointerdown", handlePointerDown);
          ownerDocument.removeEventListener("click", handleClickRef.current);
        };
      }, [ownerDocument, handlePointerDownOutside]);
      return {
        // ensures we check React component tree (not just DOM tree)
        onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
      };
    }
    function useFocusOutside(onFocusOutside, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
      const handleFocusOutside = useCallbackRef$1(onFocusOutside);
      const isFocusInsideReactTreeRef = reactExports.useRef(false);
      reactExports.useEffect(() => {
        const handleFocus = (event) => {
          if (event.target && !isFocusInsideReactTreeRef.current) {
            const eventDetail = { originalEvent: event };
            handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
              discrete: false
            });
          }
        };
        ownerDocument.addEventListener("focusin", handleFocus);
        return () => ownerDocument.removeEventListener("focusin", handleFocus);
      }, [ownerDocument, handleFocusOutside]);
      return {
        onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
        onBlurCapture: () => isFocusInsideReactTreeRef.current = false
      };
    }
    function dispatchUpdate() {
      const event = new CustomEvent(CONTEXT_UPDATE);
      document.dispatchEvent(event);
    }
    function handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
      const target = detail.originalEvent.target;
      const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });
      if (handler) target.addEventListener(name, handler, { once: true });
      if (discrete) {
        dispatchDiscreteCustomEvent(target, event);
      } else {
        target.dispatchEvent(event);
      }
    }
    var AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
    var AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
    var EVENT_OPTIONS$1 = { bubbles: false, cancelable: true };
    var FOCUS_SCOPE_NAME = "FocusScope";
    var FocusScope = reactExports.forwardRef((props, forwardedRef) => {
      const {
        loop = false,
        trapped = false,
        onMountAutoFocus: onMountAutoFocusProp,
        onUnmountAutoFocus: onUnmountAutoFocusProp,
        ...scopeProps
      } = props;
      const [container, setContainer] = reactExports.useState(null);
      const onMountAutoFocus = useCallbackRef$1(onMountAutoFocusProp);
      const onUnmountAutoFocus = useCallbackRef$1(onUnmountAutoFocusProp);
      const lastFocusedElementRef = reactExports.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, (node) => setContainer(node));
      const focusScope = reactExports.useRef({
        paused: false,
        pause() {
          this.paused = true;
        },
        resume() {
          this.paused = false;
        }
      }).current;
      reactExports.useEffect(() => {
        if (trapped) {
          let handleFocusIn2 = function(event) {
            if (focusScope.paused || !container) return;
            const target = event.target;
            if (container.contains(target)) {
              lastFocusedElementRef.current = target;
            } else {
              focus(lastFocusedElementRef.current, { select: true });
            }
          }, handleFocusOut2 = function(event) {
            if (focusScope.paused || !container) return;
            const relatedTarget = event.relatedTarget;
            if (relatedTarget === null) return;
            if (!container.contains(relatedTarget)) {
              focus(lastFocusedElementRef.current, { select: true });
            }
          }, handleMutations2 = function(mutations) {
            const focusedElement = document.activeElement;
            if (focusedElement !== document.body) return;
            for (const mutation of mutations) {
              if (mutation.removedNodes.length > 0) focus(container);
            }
          };
          document.addEventListener("focusin", handleFocusIn2);
          document.addEventListener("focusout", handleFocusOut2);
          const mutationObserver = new MutationObserver(handleMutations2);
          if (container) mutationObserver.observe(container, { childList: true, subtree: true });
          return () => {
            document.removeEventListener("focusin", handleFocusIn2);
            document.removeEventListener("focusout", handleFocusOut2);
            mutationObserver.disconnect();
          };
        }
      }, [trapped, container, focusScope.paused]);
      reactExports.useEffect(() => {
        if (container) {
          focusScopesStack.add(focusScope);
          const previouslyFocusedElement = document.activeElement;
          const hasFocusedCandidate = container.contains(previouslyFocusedElement);
          if (!hasFocusedCandidate) {
            const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS$1);
            container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
            container.dispatchEvent(mountEvent);
            if (!mountEvent.defaultPrevented) {
              focusFirst$2(removeLinks(getTabbableCandidates(container)), { select: true });
              if (document.activeElement === previouslyFocusedElement) {
                focus(container);
              }
            }
          }
          return () => {
            container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
            setTimeout(() => {
              const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT, EVENT_OPTIONS$1);
              container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
              container.dispatchEvent(unmountEvent);
              if (!unmountEvent.defaultPrevented) {
                focus(previouslyFocusedElement ?? document.body, { select: true });
              }
              container.removeEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
              focusScopesStack.remove(focusScope);
            }, 0);
          };
        }
      }, [container, onMountAutoFocus, onUnmountAutoFocus, focusScope]);
      const handleKeyDown = reactExports.useCallback(
        (event) => {
          if (!loop && !trapped) return;
          if (focusScope.paused) return;
          const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
          const focusedElement = document.activeElement;
          if (isTabKey && focusedElement) {
            const container2 = event.currentTarget;
            const [first, last2] = getTabbableEdges(container2);
            const hasTabbableElementsInside = first && last2;
            if (!hasTabbableElementsInside) {
              if (focusedElement === container2) event.preventDefault();
            } else {
              if (!event.shiftKey && focusedElement === last2) {
                event.preventDefault();
                if (loop) focus(first, { select: true });
              } else if (event.shiftKey && focusedElement === first) {
                event.preventDefault();
                if (loop) focus(last2, { select: true });
              }
            }
          }
        },
        [loop, trapped, focusScope.paused]
      );
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, { tabIndex: -1, ...scopeProps, ref: composedRefs, onKeyDown: handleKeyDown });
    });
    FocusScope.displayName = FOCUS_SCOPE_NAME;
    function focusFirst$2(candidates, { select = false } = {}) {
      const previouslyFocusedElement = document.activeElement;
      for (const candidate of candidates) {
        focus(candidate, { select });
        if (document.activeElement !== previouslyFocusedElement) return;
      }
    }
    function getTabbableEdges(container) {
      const candidates = getTabbableCandidates(container);
      const first = findVisible(candidates, container);
      const last2 = findVisible(candidates.reverse(), container);
      return [first, last2];
    }
    function getTabbableCandidates(container) {
      const nodes = [];
      const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
        acceptNode: (node) => {
          const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
          if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;
          return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
        }
      });
      while (walker.nextNode()) nodes.push(walker.currentNode);
      return nodes;
    }
    function findVisible(elements, container) {
      for (const element of elements) {
        if (!isHidden(element, { upTo: container })) return element;
      }
    }
    function isHidden(node, { upTo }) {
      if (getComputedStyle(node).visibility === "hidden") return true;
      while (node) {
        if (upTo !== void 0 && node === upTo) return false;
        if (getComputedStyle(node).display === "none") return true;
        node = node.parentElement;
      }
      return false;
    }
    function isSelectableInput(element) {
      return element instanceof HTMLInputElement && "select" in element;
    }
    function focus(element, { select = false } = {}) {
      if (element && element.focus) {
        const previouslyFocusedElement = document.activeElement;
        element.focus({ preventScroll: true });
        if (element !== previouslyFocusedElement && isSelectableInput(element) && select)
          element.select();
      }
    }
    var focusScopesStack = createFocusScopesStack();
    function createFocusScopesStack() {
      let stack = [];
      return {
        add(focusScope) {
          const activeFocusScope = stack[0];
          if (focusScope !== activeFocusScope) {
            activeFocusScope == null ? void 0 : activeFocusScope.pause();
          }
          stack = arrayRemove(stack, focusScope);
          stack.unshift(focusScope);
        },
        remove(focusScope) {
          var _a2;
          stack = arrayRemove(stack, focusScope);
          (_a2 = stack[0]) == null ? void 0 : _a2.resume();
        }
      };
    }
    function arrayRemove(array2, item) {
      const updatedArray = [...array2];
      const index2 = updatedArray.indexOf(item);
      if (index2 !== -1) {
        updatedArray.splice(index2, 1);
      }
      return updatedArray;
    }
    function removeLinks(items) {
      return items.filter((item) => item.tagName !== "A");
    }
    var PORTAL_NAME$6 = "Portal";
    var Portal$4 = reactExports.forwardRef((props, forwardedRef) => {
      var _a2;
      const { container: containerProp, ...portalProps } = props;
      const [mounted, setMounted] = reactExports.useState(false);
      useLayoutEffect2(() => setMounted(true), []);
      const container = containerProp || mounted && ((_a2 = globalThis == null ? void 0 : globalThis.document) == null ? void 0 : _a2.body);
      return container ? ReactDOM.createPortal(/* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, { ...portalProps, ref: forwardedRef }), container) : null;
    });
    Portal$4.displayName = PORTAL_NAME$6;
    function useStateMachine(initialState, machine) {
      return reactExports.useReducer((state, event) => {
        const nextState = machine[state][event];
        return nextState ?? state;
      }, initialState);
    }
    var Presence = (props) => {
      const { present, children } = props;
      const presence = usePresence(present);
      const child = typeof children === "function" ? children({ present: presence.isPresent }) : reactExports.Children.only(children);
      const ref = useComposedRefs(presence.ref, getElementRef(child));
      const forceMount = typeof children === "function";
      return forceMount || presence.isPresent ? reactExports.cloneElement(child, { ref }) : null;
    };
    Presence.displayName = "Presence";
    function usePresence(present) {
      const [node, setNode] = reactExports.useState();
      const stylesRef = reactExports.useRef(null);
      const prevPresentRef = reactExports.useRef(present);
      const prevAnimationNameRef = reactExports.useRef("none");
      const initialState = present ? "mounted" : "unmounted";
      const [state, send] = useStateMachine(initialState, {
        mounted: {
          UNMOUNT: "unmounted",
          ANIMATION_OUT: "unmountSuspended"
        },
        unmountSuspended: {
          MOUNT: "mounted",
          ANIMATION_END: "unmounted"
        },
        unmounted: {
          MOUNT: "mounted"
        }
      });
      reactExports.useEffect(() => {
        const currentAnimationName = getAnimationName(stylesRef.current);
        prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
      }, [state]);
      useLayoutEffect2(() => {
        const styles = stylesRef.current;
        const wasPresent = prevPresentRef.current;
        const hasPresentChanged = wasPresent !== present;
        if (hasPresentChanged) {
          const prevAnimationName = prevAnimationNameRef.current;
          const currentAnimationName = getAnimationName(styles);
          if (present) {
            send("MOUNT");
          } else if (currentAnimationName === "none" || (styles == null ? void 0 : styles.display) === "none") {
            send("UNMOUNT");
          } else {
            const isAnimating = prevAnimationName !== currentAnimationName;
            if (wasPresent && isAnimating) {
              send("ANIMATION_OUT");
            } else {
              send("UNMOUNT");
            }
          }
          prevPresentRef.current = present;
        }
      }, [present, send]);
      useLayoutEffect2(() => {
        if (node) {
          let timeoutId;
          const ownerWindow = node.ownerDocument.defaultView ?? window;
          const handleAnimationEnd = (event) => {
            const currentAnimationName = getAnimationName(stylesRef.current);
            const isCurrentAnimation = currentAnimationName.includes(event.animationName);
            if (event.target === node && isCurrentAnimation) {
              send("ANIMATION_END");
              if (!prevPresentRef.current) {
                const currentFillMode = node.style.animationFillMode;
                node.style.animationFillMode = "forwards";
                timeoutId = ownerWindow.setTimeout(() => {
                  if (node.style.animationFillMode === "forwards") {
                    node.style.animationFillMode = currentFillMode;
                  }
                });
              }
            }
          };
          const handleAnimationStart = (event) => {
            if (event.target === node) {
              prevAnimationNameRef.current = getAnimationName(stylesRef.current);
            }
          };
          node.addEventListener("animationstart", handleAnimationStart);
          node.addEventListener("animationcancel", handleAnimationEnd);
          node.addEventListener("animationend", handleAnimationEnd);
          return () => {
            ownerWindow.clearTimeout(timeoutId);
            node.removeEventListener("animationstart", handleAnimationStart);
            node.removeEventListener("animationcancel", handleAnimationEnd);
            node.removeEventListener("animationend", handleAnimationEnd);
          };
        } else {
          send("ANIMATION_END");
        }
      }, [node, send]);
      return {
        isPresent: ["mounted", "unmountSuspended"].includes(state),
        ref: reactExports.useCallback((node2) => {
          stylesRef.current = node2 ? getComputedStyle(node2) : null;
          setNode(node2);
        }, [])
      };
    }
    function getAnimationName(styles) {
      return (styles == null ? void 0 : styles.animationName) || "none";
    }
    function getElementRef(element) {
      var _a2, _b2;
      let getter = (_a2 = Object.getOwnPropertyDescriptor(element.props, "ref")) == null ? void 0 : _a2.get;
      let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
      if (mayWarn) {
        return element.ref;
      }
      getter = (_b2 = Object.getOwnPropertyDescriptor(element, "ref")) == null ? void 0 : _b2.get;
      mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
      if (mayWarn) {
        return element.props.ref;
      }
      return element.props.ref || element.ref;
    }
    var count$1 = 0;
    function useFocusGuards() {
      reactExports.useEffect(() => {
        const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
        document.body.insertAdjacentElement("afterbegin", edgeGuards[0] ?? createFocusGuard());
        document.body.insertAdjacentElement("beforeend", edgeGuards[1] ?? createFocusGuard());
        count$1++;
        return () => {
          if (count$1 === 1) {
            document.querySelectorAll("[data-radix-focus-guard]").forEach((node) => node.remove());
          }
          count$1--;
        };
      }, []);
    }
    function createFocusGuard() {
      const element = document.createElement("span");
      element.setAttribute("data-radix-focus-guard", "");
      element.tabIndex = 0;
      element.style.outline = "none";
      element.style.opacity = "0";
      element.style.position = "fixed";
      element.style.pointerEvents = "none";
      return element;
    }
    var __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
          s2 = arguments[i2];
          for (var p2 in s2) if (Object.prototype.hasOwnProperty.call(s2, p2)) t[p2] = s2[p2];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    function __rest(s2, e) {
      var t = {};
      for (var p2 in s2) if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
        t[p2] = s2[p2];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
          if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
            t[p2[i2]] = s2[p2[i2]];
        }
      return t;
    }
    function __spreadArray(to2, from2, pack) {
      if (pack || arguments.length === 2) for (var i2 = 0, l = from2.length, ar; i2 < l; i2++) {
        if (ar || !(i2 in from2)) {
          if (!ar) ar = Array.prototype.slice.call(from2, 0, i2);
          ar[i2] = from2[i2];
        }
      }
      return to2.concat(ar || Array.prototype.slice.call(from2));
    }
    typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    var zeroRightClassName = "right-scroll-bar-position";
    var fullWidthClassName = "width-before-scroll-bar";
    var noScrollbarsClassName = "with-scroll-bars-hidden";
    var removedBarSizeVariable = "--removed-body-scroll-bar-size";
    function assignRef(ref, value) {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref) {
        ref.current = value;
      }
      return ref;
    }
    function useCallbackRef(initialValue, callback) {
      var ref = reactExports.useState(function() {
        return {
          // value
          value: initialValue,
          // last callback
          callback,
          // "memoized" public interface
          facade: {
            get current() {
              return ref.value;
            },
            set current(value) {
              var last2 = ref.value;
              if (last2 !== value) {
                ref.value = value;
                ref.callback(value, last2);
              }
            }
          }
        };
      })[0];
      ref.callback = callback;
      return ref.facade;
    }
    var useIsomorphicLayoutEffect$1 = typeof window !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
    var currentValues = /* @__PURE__ */ new WeakMap();
    function useMergeRefs(refs, defaultValue) {
      var callbackRef = useCallbackRef(null, function(newValue) {
        return refs.forEach(function(ref) {
          return assignRef(ref, newValue);
        });
      });
      useIsomorphicLayoutEffect$1(function() {
        var oldValue = currentValues.get(callbackRef);
        if (oldValue) {
          var prevRefs_1 = new Set(oldValue);
          var nextRefs_1 = new Set(refs);
          var current_1 = callbackRef.current;
          prevRefs_1.forEach(function(ref) {
            if (!nextRefs_1.has(ref)) {
              assignRef(ref, null);
            }
          });
          nextRefs_1.forEach(function(ref) {
            if (!prevRefs_1.has(ref)) {
              assignRef(ref, current_1);
            }
          });
        }
        currentValues.set(callbackRef, refs);
      }, [refs]);
      return callbackRef;
    }
    function ItoI(a2) {
      return a2;
    }
    function innerCreateMedium(defaults2, middleware) {
      if (middleware === void 0) {
        middleware = ItoI;
      }
      var buffer = [];
      var assigned = false;
      var medium = {
        read: function() {
          if (assigned) {
            throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
          }
          if (buffer.length) {
            return buffer[buffer.length - 1];
          }
          return defaults2;
        },
        useMedium: function(data) {
          var item = middleware(data, assigned);
          buffer.push(item);
          return function() {
            buffer = buffer.filter(function(x2) {
              return x2 !== item;
            });
          };
        },
        assignSyncMedium: function(cb) {
          assigned = true;
          while (buffer.length) {
            var cbs = buffer;
            buffer = [];
            cbs.forEach(cb);
          }
          buffer = {
            push: function(x2) {
              return cb(x2);
            },
            filter: function() {
              return buffer;
            }
          };
        },
        assignMedium: function(cb) {
          assigned = true;
          var pendingQueue = [];
          if (buffer.length) {
            var cbs = buffer;
            buffer = [];
            cbs.forEach(cb);
            pendingQueue = buffer;
          }
          var executeQueue = function() {
            var cbs2 = pendingQueue;
            pendingQueue = [];
            cbs2.forEach(cb);
          };
          var cycle = function() {
            return Promise.resolve().then(executeQueue);
          };
          cycle();
          buffer = {
            push: function(x2) {
              pendingQueue.push(x2);
              cycle();
            },
            filter: function(filter) {
              pendingQueue = pendingQueue.filter(filter);
              return buffer;
            }
          };
        }
      };
      return medium;
    }
    function createSidecarMedium(options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      var medium = innerCreateMedium(null);
      medium.options = __assign({ async: true, ssr: false }, options2);
      return medium;
    }
    var SideCar$1 = function(_a2) {
      var sideCar = _a2.sideCar, rest = __rest(_a2, ["sideCar"]);
      if (!sideCar) {
        throw new Error("Sidecar: please provide `sideCar` property to import the right car");
      }
      var Target = sideCar.read();
      if (!Target) {
        throw new Error("Sidecar medium not found");
      }
      return reactExports.createElement(Target, __assign({}, rest));
    };
    SideCar$1.isSideCarExport = true;
    function exportSidecar(medium, exported) {
      medium.useMedium(exported);
      return SideCar$1;
    }
    var effectCar = createSidecarMedium();
    var nothing = function() {
      return;
    };
    var RemoveScroll = reactExports.forwardRef(function(props, parentRef) {
      var ref = reactExports.useRef(null);
      var _a2 = reactExports.useState({
        onScrollCapture: nothing,
        onWheelCapture: nothing,
        onTouchMoveCapture: nothing
      }), callbacks = _a2[0], setCallbacks = _a2[1];
      var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noRelative = props.noRelative, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b2 = props.as, Container = _b2 === void 0 ? "div" : _b2, gapMode = props.gapMode, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noRelative", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
      var SideCar2 = sideCar;
      var containerRef = useMergeRefs([ref, parentRef]);
      var containerProps = __assign(__assign({}, rest), callbacks);
      return reactExports.createElement(
        reactExports.Fragment,
        null,
        enabled && reactExports.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noRelative, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }),
        forwardProps ? reactExports.cloneElement(reactExports.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : reactExports.createElement(Container, __assign({}, containerProps, { className, ref: containerRef }), children)
      );
    });
    RemoveScroll.defaultProps = {
      enabled: true,
      removeScrollBar: true,
      inert: false
    };
    RemoveScroll.classNames = {
      fullWidth: fullWidthClassName,
      zeroRight: zeroRightClassName
    };
    var getNonce = function() {
      if (typeof __webpack_nonce__ !== "undefined") {
        return __webpack_nonce__;
      }
      return void 0;
    };
    function makeStyleTag() {
      if (!document)
        return null;
      var tag = document.createElement("style");
      tag.type = "text/css";
      var nonce = getNonce();
      if (nonce) {
        tag.setAttribute("nonce", nonce);
      }
      return tag;
    }
    function injectStyles(tag, css) {
      if (tag.styleSheet) {
        tag.styleSheet.cssText = css;
      } else {
        tag.appendChild(document.createTextNode(css));
      }
    }
    function insertStyleTag(tag) {
      var head = document.head || document.getElementsByTagName("head")[0];
      head.appendChild(tag);
    }
    var stylesheetSingleton = function() {
      var counter = 0;
      var stylesheet = null;
      return {
        add: function(style) {
          if (counter == 0) {
            if (stylesheet = makeStyleTag()) {
              injectStyles(stylesheet, style);
              insertStyleTag(stylesheet);
            }
          }
          counter++;
        },
        remove: function() {
          counter--;
          if (!counter && stylesheet) {
            stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
            stylesheet = null;
          }
        }
      };
    };
    var styleHookSingleton = function() {
      var sheet = stylesheetSingleton();
      return function(styles, isDynamic) {
        reactExports.useEffect(function() {
          sheet.add(styles);
          return function() {
            sheet.remove();
          };
        }, [styles && isDynamic]);
      };
    };
    var styleSingleton = function() {
      var useStyle = styleHookSingleton();
      var Sheet2 = function(_a2) {
        var styles = _a2.styles, dynamic = _a2.dynamic;
        useStyle(styles, dynamic);
        return null;
      };
      return Sheet2;
    };
    var zeroGap = {
      left: 0,
      top: 0,
      right: 0,
      gap: 0
    };
    var parse = function(x2) {
      return parseInt(x2 || "", 10) || 0;
    };
    var getOffset$1 = function(gapMode) {
      var cs = window.getComputedStyle(document.body);
      var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
      var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
      var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
      return [parse(left), parse(top), parse(right)];
    };
    var getGapWidth = function(gapMode) {
      if (gapMode === void 0) {
        gapMode = "margin";
      }
      if (typeof window === "undefined") {
        return zeroGap;
      }
      var offsets = getOffset$1(gapMode);
      var documentWidth = document.documentElement.clientWidth;
      var windowWidth = window.innerWidth;
      return {
        left: offsets[0],
        top: offsets[1],
        right: offsets[2],
        gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
      };
    };
    var Style = styleSingleton();
    var lockAttribute = "data-scroll-locked";
    var getStyles = function(_a2, allowRelative, gapMode, important) {
      var left = _a2.left, top = _a2.top, right = _a2.right, gap = _a2.gap;
      if (gapMode === void 0) {
        gapMode = "margin";
      }
      return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body[").concat(lockAttribute, "] {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
        allowRelative && "position: relative ".concat(important, ";"),
        gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
        gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
      ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body[").concat(lockAttribute, "] {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
    };
    var getCurrentUseCounter = function() {
      var counter = parseInt(document.body.getAttribute(lockAttribute) || "0", 10);
      return isFinite(counter) ? counter : 0;
    };
    var useLockAttribute = function() {
      reactExports.useEffect(function() {
        document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());
        return function() {
          var newCounter = getCurrentUseCounter() - 1;
          if (newCounter <= 0) {
            document.body.removeAttribute(lockAttribute);
          } else {
            document.body.setAttribute(lockAttribute, newCounter.toString());
          }
        };
      }, []);
    };
    var RemoveScrollBar = function(_a2) {
      var noRelative = _a2.noRelative, noImportant = _a2.noImportant, _b2 = _a2.gapMode, gapMode = _b2 === void 0 ? "margin" : _b2;
      useLockAttribute();
      var gap = reactExports.useMemo(function() {
        return getGapWidth(gapMode);
      }, [gapMode]);
      return reactExports.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
    };
    var passiveSupported$1 = false;
    if (typeof window !== "undefined") {
      try {
        var options = Object.defineProperty({}, "passive", {
          get: function() {
            passiveSupported$1 = true;
            return true;
          }
        });
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, options);
      } catch (err) {
        passiveSupported$1 = false;
      }
    }
    var nonPassive = passiveSupported$1 ? { passive: false } : false;
    var alwaysContainsScroll = function(node) {
      return node.tagName === "TEXTAREA";
    };
    var elementCanBeScrolled = function(node, overflow) {
      if (!(node instanceof Element)) {
        return false;
      }
      var styles = window.getComputedStyle(node);
      return (
        // not-not-scrollable
        styles[overflow] !== "hidden" && // contains scroll inside self
        !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible")
      );
    };
    var elementCouldBeVScrolled = function(node) {
      return elementCanBeScrolled(node, "overflowY");
    };
    var elementCouldBeHScrolled = function(node) {
      return elementCanBeScrolled(node, "overflowX");
    };
    var locationCouldBeScrolled = function(axis, node) {
      var ownerDocument = node.ownerDocument;
      var current = node;
      do {
        if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
          current = current.host;
        }
        var isScrollable = elementCouldBeScrolled(axis, current);
        if (isScrollable) {
          var _a2 = getScrollVariables(axis, current), scrollHeight = _a2[1], clientHeight = _a2[2];
          if (scrollHeight > clientHeight) {
            return true;
          }
        }
        current = current.parentNode;
      } while (current && current !== ownerDocument.body);
      return false;
    };
    var getVScrollVariables = function(_a2) {
      var scrollTop = _a2.scrollTop, scrollHeight = _a2.scrollHeight, clientHeight = _a2.clientHeight;
      return [
        scrollTop,
        scrollHeight,
        clientHeight
      ];
    };
    var getHScrollVariables = function(_a2) {
      var scrollLeft = _a2.scrollLeft, scrollWidth = _a2.scrollWidth, clientWidth = _a2.clientWidth;
      return [
        scrollLeft,
        scrollWidth,
        clientWidth
      ];
    };
    var elementCouldBeScrolled = function(axis, node) {
      return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
    };
    var getScrollVariables = function(axis, node) {
      return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
    };
    var getDirectionFactor = function(axis, direction) {
      return axis === "h" && direction === "rtl" ? -1 : 1;
    };
    var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
      var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
      var delta = directionFactor * sourceDelta;
      var target = event.target;
      var targetInLock = endTarget.contains(target);
      var shouldCancelScroll = false;
      var isDeltaPositive = delta > 0;
      var availableScroll = 0;
      var availableScrollTop = 0;
      do {
        var _a2 = getScrollVariables(axis, target), position = _a2[0], scroll_1 = _a2[1], capacity = _a2[2];
        var elementScroll = scroll_1 - capacity - directionFactor * position;
        if (position || elementScroll) {
          if (elementCouldBeScrolled(axis, target)) {
            availableScroll += elementScroll;
            availableScrollTop += position;
          }
        }
        target = target.parentNode.host || target.parentNode;
      } while (
        // portaled content
        !targetInLock && target !== document.body || // self content
        targetInLock && (endTarget.contains(target) || endTarget === target)
      );
      if (isDeltaPositive && (Math.abs(availableScroll) < 1 || false)) {
        shouldCancelScroll = true;
      } else if (!isDeltaPositive && (Math.abs(availableScrollTop) < 1 || false)) {
        shouldCancelScroll = true;
      }
      return shouldCancelScroll;
    };
    var getTouchXY = function(event) {
      return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
    };
    var getDeltaXY = function(event) {
      return [event.deltaX, event.deltaY];
    };
    var extractRef = function(ref) {
      return ref && "current" in ref ? ref.current : ref;
    };
    var deltaCompare = function(x2, y2) {
      return x2[0] === y2[0] && x2[1] === y2[1];
    };
    var generateStyle = function(id) {
      return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
    };
    var idCounter$1 = 0;
    var lockStack = [];
    function RemoveScrollSideCar(props) {
      var shouldPreventQueue = reactExports.useRef([]);
      var touchStartRef = reactExports.useRef([0, 0]);
      var activeAxis = reactExports.useRef();
      var id = reactExports.useState(idCounter$1++)[0];
      var Style2 = reactExports.useState(styleSingleton)[0];
      var lastProps = reactExports.useRef(props);
      reactExports.useEffect(function() {
        lastProps.current = props;
      }, [props]);
      reactExports.useEffect(function() {
        if (props.inert) {
          document.body.classList.add("block-interactivity-".concat(id));
          var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
          allow_1.forEach(function(el) {
            return el.classList.add("allow-interactivity-".concat(id));
          });
          return function() {
            document.body.classList.remove("block-interactivity-".concat(id));
            allow_1.forEach(function(el) {
              return el.classList.remove("allow-interactivity-".concat(id));
            });
          };
        }
        return;
      }, [props.inert, props.lockRef.current, props.shards]);
      var shouldCancelEvent = reactExports.useCallback(function(event, parent) {
        if ("touches" in event && event.touches.length === 2 || event.type === "wheel" && event.ctrlKey) {
          return !lastProps.current.allowPinchZoom;
        }
        var touch = getTouchXY(event);
        var touchStart = touchStartRef.current;
        var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
        var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
        var currentAxis;
        var target = event.target;
        var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
        if ("touches" in event && moveDirection === "h" && target.type === "range") {
          return false;
        }
        var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
        if (!canBeScrolledInMainDirection) {
          return true;
        }
        if (canBeScrolledInMainDirection) {
          currentAxis = moveDirection;
        } else {
          currentAxis = moveDirection === "v" ? "h" : "v";
          canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
        }
        if (!canBeScrolledInMainDirection) {
          return false;
        }
        if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
          activeAxis.current = currentAxis;
        }
        if (!currentAxis) {
          return true;
        }
        var cancelingAxis = activeAxis.current || currentAxis;
        return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY);
      }, []);
      var shouldPrevent = reactExports.useCallback(function(_event) {
        var event = _event;
        if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
          return;
        }
        var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
        var sourceEvent = shouldPreventQueue.current.filter(function(e) {
          return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta);
        })[0];
        if (sourceEvent && sourceEvent.should) {
          if (event.cancelable) {
            event.preventDefault();
          }
          return;
        }
        if (!sourceEvent) {
          var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
            return node.contains(event.target);
          });
          var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
          if (shouldStop) {
            if (event.cancelable) {
              event.preventDefault();
            }
          }
        }
      }, []);
      var shouldCancel = reactExports.useCallback(function(name, delta, target, should) {
        var event = { name, delta, target, should, shadowParent: getOutermostShadowParent(target) };
        shouldPreventQueue.current.push(event);
        setTimeout(function() {
          shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
            return e !== event;
          });
        }, 1);
      }, []);
      var scrollTouchStart = reactExports.useCallback(function(event) {
        touchStartRef.current = getTouchXY(event);
        activeAxis.current = void 0;
      }, []);
      var scrollWheel = reactExports.useCallback(function(event) {
        shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
      }, []);
      var scrollTouchMove = reactExports.useCallback(function(event) {
        shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
      }, []);
      reactExports.useEffect(function() {
        lockStack.push(Style2);
        props.setCallbacks({
          onScrollCapture: scrollWheel,
          onWheelCapture: scrollWheel,
          onTouchMoveCapture: scrollTouchMove
        });
        document.addEventListener("wheel", shouldPrevent, nonPassive);
        document.addEventListener("touchmove", shouldPrevent, nonPassive);
        document.addEventListener("touchstart", scrollTouchStart, nonPassive);
        return function() {
          lockStack = lockStack.filter(function(inst) {
            return inst !== Style2;
          });
          document.removeEventListener("wheel", shouldPrevent, nonPassive);
          document.removeEventListener("touchmove", shouldPrevent, nonPassive);
          document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
        };
      }, []);
      var removeScrollBar = props.removeScrollBar, inert = props.inert;
      return reactExports.createElement(
        reactExports.Fragment,
        null,
        inert ? reactExports.createElement(Style2, { styles: generateStyle(id) }) : null,
        removeScrollBar ? reactExports.createElement(RemoveScrollBar, { noRelative: props.noRelative, gapMode: props.gapMode }) : null
      );
    }
    function getOutermostShadowParent(node) {
      var shadowParent = null;
      while (node !== null) {
        if (node instanceof ShadowRoot) {
          shadowParent = node.host;
          node = node.host;
        }
        node = node.parentNode;
      }
      return shadowParent;
    }
    const SideCar = exportSidecar(effectCar, RemoveScrollSideCar);
    var ReactRemoveScroll = reactExports.forwardRef(function(props, ref) {
      return reactExports.createElement(RemoveScroll, __assign({}, props, { ref, sideCar: SideCar }));
    });
    ReactRemoveScroll.classNames = RemoveScroll.classNames;
    var getDefaultParent = function(originalTarget) {
      if (typeof document === "undefined") {
        return null;
      }
      var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
      return sampleTarget.ownerDocument.body;
    };
    var counterMap = /* @__PURE__ */ new WeakMap();
    var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
    var markerMap = {};
    var lockCount = 0;
    var unwrapHost = function(node) {
      return node && (node.host || unwrapHost(node.parentNode));
    };
    var correctTargets = function(parent, targets) {
      return targets.map(function(target) {
        if (parent.contains(target)) {
          return target;
        }
        var correctedTarget = unwrapHost(target);
        if (correctedTarget && parent.contains(correctedTarget)) {
          return correctedTarget;
        }
        console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
        return null;
      }).filter(function(x2) {
        return Boolean(x2);
      });
    };
    var applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
      var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
      if (!markerMap[markerName]) {
        markerMap[markerName] = /* @__PURE__ */ new WeakMap();
      }
      var markerCounter = markerMap[markerName];
      var hiddenNodes = [];
      var elementsToKeep = /* @__PURE__ */ new Set();
      var elementsToStop = new Set(targets);
      var keep = function(el) {
        if (!el || elementsToKeep.has(el)) {
          return;
        }
        elementsToKeep.add(el);
        keep(el.parentNode);
      };
      targets.forEach(keep);
      var deep = function(parent) {
        if (!parent || elementsToStop.has(parent)) {
          return;
        }
        Array.prototype.forEach.call(parent.children, function(node) {
          if (elementsToKeep.has(node)) {
            deep(node);
          } else {
            try {
              var attr = node.getAttribute(controlAttribute);
              var alreadyHidden = attr !== null && attr !== "false";
              var counterValue = (counterMap.get(node) || 0) + 1;
              var markerValue = (markerCounter.get(node) || 0) + 1;
              counterMap.set(node, counterValue);
              markerCounter.set(node, markerValue);
              hiddenNodes.push(node);
              if (counterValue === 1 && alreadyHidden) {
                uncontrolledNodes.set(node, true);
              }
              if (markerValue === 1) {
                node.setAttribute(markerName, "true");
              }
              if (!alreadyHidden) {
                node.setAttribute(controlAttribute, "true");
              }
            } catch (e) {
              console.error("aria-hidden: cannot operate on ", node, e);
            }
          }
        });
      };
      deep(parentNode);
      elementsToKeep.clear();
      lockCount++;
      return function() {
        hiddenNodes.forEach(function(node) {
          var counterValue = counterMap.get(node) - 1;
          var markerValue = markerCounter.get(node) - 1;
          counterMap.set(node, counterValue);
          markerCounter.set(node, markerValue);
          if (!counterValue) {
            if (!uncontrolledNodes.has(node)) {
              node.removeAttribute(controlAttribute);
            }
            uncontrolledNodes.delete(node);
          }
          if (!markerValue) {
            node.removeAttribute(markerName);
          }
        });
        lockCount--;
        if (!lockCount) {
          counterMap = /* @__PURE__ */ new WeakMap();
          counterMap = /* @__PURE__ */ new WeakMap();
          uncontrolledNodes = /* @__PURE__ */ new WeakMap();
          markerMap = {};
        }
      };
    };
    var hideOthers = function(originalTarget, parentNode, markerName) {
      if (markerName === void 0) {
        markerName = "data-aria-hidden";
      }
      var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
      var activeParentNode = getDefaultParent(originalTarget);
      if (!activeParentNode) {
        return function() {
          return null;
        };
      }
      targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live], script")));
      return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
    };
    var DIALOG_NAME = "Dialog";
    var [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);
    var [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);
    var Dialog = (props) => {
      const {
        __scopeDialog,
        children,
        open: openProp,
        defaultOpen,
        onOpenChange,
        modal = true
      } = props;
      const triggerRef = reactExports.useRef(null);
      const contentRef = reactExports.useRef(null);
      const [open, setOpen] = useControllableState({
        prop: openProp,
        defaultProp: defaultOpen ?? false,
        onChange: onOpenChange,
        caller: DIALOG_NAME
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        DialogProvider,
        {
          scope: __scopeDialog,
          triggerRef,
          contentRef,
          contentId: useId(),
          titleId: useId(),
          descriptionId: useId(),
          open,
          onOpenChange: setOpen,
          onOpenToggle: reactExports.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
          modal,
          children
        }
      );
    };
    Dialog.displayName = DIALOG_NAME;
    var TRIGGER_NAME$4 = "DialogTrigger";
    var DialogTrigger = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDialog, ...triggerProps } = props;
        const context = useDialogContext(TRIGGER_NAME$4, __scopeDialog);
        const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Primitive.button,
          {
            type: "button",
            "aria-haspopup": "dialog",
            "aria-expanded": context.open,
            "aria-controls": context.contentId,
            "data-state": getState$1(context.open),
            ...triggerProps,
            ref: composedTriggerRef,
            onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
          }
        );
      }
    );
    DialogTrigger.displayName = TRIGGER_NAME$4;
    var PORTAL_NAME$5 = "DialogPortal";
    var [PortalProvider$3, usePortalContext$3] = createDialogContext(PORTAL_NAME$5, {
      forceMount: void 0
    });
    var DialogPortal = (props) => {
      const { __scopeDialog, forceMount, children, container } = props;
      const context = useDialogContext(PORTAL_NAME$5, __scopeDialog);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PortalProvider$3, { scope: __scopeDialog, forceMount, children: reactExports.Children.map(children, (child) => /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$4, { asChild: true, container, children: child }) })) });
    };
    DialogPortal.displayName = PORTAL_NAME$5;
    var OVERLAY_NAME$1 = "DialogOverlay";
    var DialogOverlay = reactExports.forwardRef(
      (props, forwardedRef) => {
        const portalContext = usePortalContext$3(OVERLAY_NAME$1, props.__scopeDialog);
        const { forceMount = portalContext.forceMount, ...overlayProps } = props;
        const context = useDialogContext(OVERLAY_NAME$1, props.__scopeDialog);
        return context.modal ? /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ jsxRuntimeExports.jsx(DialogOverlayImpl, { ...overlayProps, ref: forwardedRef }) }) : null;
      }
    );
    DialogOverlay.displayName = OVERLAY_NAME$1;
    var Slot$2 = /* @__PURE__ */ createSlot("DialogOverlay.RemoveScroll");
    var DialogOverlayImpl = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDialog, ...overlayProps } = props;
        const context = useDialogContext(OVERLAY_NAME$1, __scopeDialog);
        return (
          // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`
          // ie. when `Overlay` and `Content` are siblings
          /* @__PURE__ */ jsxRuntimeExports.jsx(ReactRemoveScroll, { as: Slot$2, allowPinchZoom: true, shards: [context.contentRef], children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Primitive.div,
            {
              "data-state": getState$1(context.open),
              ...overlayProps,
              ref: forwardedRef,
              style: { pointerEvents: "auto", ...overlayProps.style }
            }
          ) })
        );
      }
    );
    var CONTENT_NAME$6 = "DialogContent";
    var DialogContent = reactExports.forwardRef(
      (props, forwardedRef) => {
        const portalContext = usePortalContext$3(CONTENT_NAME$6, props.__scopeDialog);
        const { forceMount = portalContext.forceMount, ...contentProps } = props;
        const context = useDialogContext(CONTENT_NAME$6, props.__scopeDialog);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, { present: forceMount || context.open, children: context.modal ? /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ jsxRuntimeExports.jsx(DialogContentNonModal, { ...contentProps, ref: forwardedRef }) });
      }
    );
    DialogContent.displayName = CONTENT_NAME$6;
    var DialogContentModal = reactExports.forwardRef(
      (props, forwardedRef) => {
        const context = useDialogContext(CONTENT_NAME$6, props.__scopeDialog);
        const contentRef = reactExports.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);
        reactExports.useEffect(() => {
          const content = contentRef.current;
          if (content) return hideOthers(content);
        }, []);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          DialogContentImpl,
          {
            ...props,
            ref: composedRefs,
            trapFocus: context.open,
            disableOutsidePointerEvents: true,
            onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
              var _a2;
              event.preventDefault();
              (_a2 = context.triggerRef.current) == null ? void 0 : _a2.focus();
            }),
            onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, (event) => {
              const originalEvent = event.detail.originalEvent;
              const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
              const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
              if (isRightClick) event.preventDefault();
            }),
            onFocusOutside: composeEventHandlers(
              props.onFocusOutside,
              (event) => event.preventDefault()
            )
          }
        );
      }
    );
    var DialogContentNonModal = reactExports.forwardRef(
      (props, forwardedRef) => {
        const context = useDialogContext(CONTENT_NAME$6, props.__scopeDialog);
        const hasInteractedOutsideRef = reactExports.useRef(false);
        const hasPointerDownOutsideRef = reactExports.useRef(false);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          DialogContentImpl,
          {
            ...props,
            ref: forwardedRef,
            trapFocus: false,
            disableOutsidePointerEvents: false,
            onCloseAutoFocus: (event) => {
              var _a2, _b2;
              (_a2 = props.onCloseAutoFocus) == null ? void 0 : _a2.call(props, event);
              if (!event.defaultPrevented) {
                if (!hasInteractedOutsideRef.current) (_b2 = context.triggerRef.current) == null ? void 0 : _b2.focus();
                event.preventDefault();
              }
              hasInteractedOutsideRef.current = false;
              hasPointerDownOutsideRef.current = false;
            },
            onInteractOutside: (event) => {
              var _a2, _b2;
              (_a2 = props.onInteractOutside) == null ? void 0 : _a2.call(props, event);
              if (!event.defaultPrevented) {
                hasInteractedOutsideRef.current = true;
                if (event.detail.originalEvent.type === "pointerdown") {
                  hasPointerDownOutsideRef.current = true;
                }
              }
              const target = event.target;
              const targetIsTrigger = (_b2 = context.triggerRef.current) == null ? void 0 : _b2.contains(target);
              if (targetIsTrigger) event.preventDefault();
              if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
                event.preventDefault();
              }
            }
          }
        );
      }
    );
    var DialogContentImpl = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;
        const context = useDialogContext(CONTENT_NAME$6, __scopeDialog);
        const contentRef = reactExports.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, contentRef);
        useFocusGuards();
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            FocusScope,
            {
              asChild: true,
              loop: true,
              trapped: trapFocus,
              onMountAutoFocus: onOpenAutoFocus,
              onUnmountAutoFocus: onCloseAutoFocus,
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                DismissableLayer,
                {
                  role: "dialog",
                  id: context.contentId,
                  "aria-describedby": context.descriptionId,
                  "aria-labelledby": context.titleId,
                  "data-state": getState$1(context.open),
                  ...contentProps,
                  ref: composedRefs,
                  onDismiss: () => context.onOpenChange(false)
                }
              )
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(TitleWarning, { titleId: context.titleId }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(DescriptionWarning$1, { contentRef, descriptionId: context.descriptionId })
          ] })
        ] });
      }
    );
    var TITLE_NAME$1 = "DialogTitle";
    var DialogTitle = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDialog, ...titleProps } = props;
        const context = useDialogContext(TITLE_NAME$1, __scopeDialog);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.h2, { id: context.titleId, ...titleProps, ref: forwardedRef });
      }
    );
    DialogTitle.displayName = TITLE_NAME$1;
    var DESCRIPTION_NAME$1 = "DialogDescription";
    var DialogDescription = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDialog, ...descriptionProps } = props;
        const context = useDialogContext(DESCRIPTION_NAME$1, __scopeDialog);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.p, { id: context.descriptionId, ...descriptionProps, ref: forwardedRef });
      }
    );
    DialogDescription.displayName = DESCRIPTION_NAME$1;
    var CLOSE_NAME$1 = "DialogClose";
    var DialogClose = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDialog, ...closeProps } = props;
        const context = useDialogContext(CLOSE_NAME$1, __scopeDialog);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Primitive.button,
          {
            type: "button",
            ...closeProps,
            ref: forwardedRef,
            onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))
          }
        );
      }
    );
    DialogClose.displayName = CLOSE_NAME$1;
    function getState$1(open) {
      return open ? "open" : "closed";
    }
    var TITLE_WARNING_NAME = "DialogTitleWarning";
    var [WarningProvider, useWarningContext] = createContext2(TITLE_WARNING_NAME, {
      contentName: CONTENT_NAME$6,
      titleName: TITLE_NAME$1,
      docsSlug: "dialog"
    });
    var TitleWarning = ({ titleId }) => {
      const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);
      const MESSAGE = `\`${titleWarningContext.contentName}\` requires a \`${titleWarningContext.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${titleWarningContext.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;
      reactExports.useEffect(() => {
        if (titleId) {
          const hasTitle = document.getElementById(titleId);
          if (!hasTitle) console.error(MESSAGE);
        }
      }, [MESSAGE, titleId]);
      return null;
    };
    var DESCRIPTION_WARNING_NAME = "DialogDescriptionWarning";
    var DescriptionWarning$1 = ({ contentRef, descriptionId }) => {
      const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);
      const MESSAGE = `Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${descriptionWarningContext.contentName}}.`;
      reactExports.useEffect(() => {
        var _a2;
        const describedById = (_a2 = contentRef.current) == null ? void 0 : _a2.getAttribute("aria-describedby");
        if (descriptionId && describedById) {
          const hasDescription = document.getElementById(descriptionId);
          if (!hasDescription) console.warn(MESSAGE);
        }
      }, [MESSAGE, contentRef, descriptionId]);
      return null;
    };
    var Root$5 = Dialog;
    var Trigger$3 = DialogTrigger;
    var Portal$3 = DialogPortal;
    var Overlay = DialogOverlay;
    var Content$1 = DialogContent;
    var Title = DialogTitle;
    var Description = DialogDescription;
    var Close = DialogClose;
    var ROOT_NAME = "AlertDialog";
    var [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [
      createDialogScope
    ]);
    var useDialogScope = createDialogScope();
    var AlertDialog$1 = (props) => {
      const { __scopeAlertDialog, ...alertDialogProps } = props;
      const dialogScope = useDialogScope(__scopeAlertDialog);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Root$5, { ...dialogScope, ...alertDialogProps, modal: true });
    };
    AlertDialog$1.displayName = ROOT_NAME;
    var TRIGGER_NAME$3 = "AlertDialogTrigger";
    var AlertDialogTrigger$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeAlertDialog, ...triggerProps } = props;
        const dialogScope = useDialogScope(__scopeAlertDialog);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Trigger$3, { ...dialogScope, ...triggerProps, ref: forwardedRef });
      }
    );
    AlertDialogTrigger$1.displayName = TRIGGER_NAME$3;
    var PORTAL_NAME$4 = "AlertDialogPortal";
    var AlertDialogPortal$1 = (props) => {
      const { __scopeAlertDialog, ...portalProps } = props;
      const dialogScope = useDialogScope(__scopeAlertDialog);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$3, { ...dialogScope, ...portalProps });
    };
    AlertDialogPortal$1.displayName = PORTAL_NAME$4;
    var OVERLAY_NAME = "AlertDialogOverlay";
    var AlertDialogOverlay$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeAlertDialog, ...overlayProps } = props;
        const dialogScope = useDialogScope(__scopeAlertDialog);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Overlay, { ...dialogScope, ...overlayProps, ref: forwardedRef });
      }
    );
    AlertDialogOverlay$1.displayName = OVERLAY_NAME;
    var CONTENT_NAME$5 = "AlertDialogContent";
    var [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME$5);
    var Slottable$1 = /* @__PURE__ */ createSlottable("AlertDialogContent");
    var AlertDialogContent$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeAlertDialog, children, ...contentProps } = props;
        const dialogScope = useDialogScope(__scopeAlertDialog);
        const contentRef = reactExports.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, contentRef);
        const cancelRef = reactExports.useRef(null);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          WarningProvider,
          {
            contentName: CONTENT_NAME$5,
            titleName: TITLE_NAME,
            docsSlug: "alert-dialog",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(AlertDialogContentProvider, { scope: __scopeAlertDialog, cancelRef, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Content$1,
              {
                role: "alertdialog",
                ...dialogScope,
                ...contentProps,
                ref: composedRefs,
                onOpenAutoFocus: composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {
                  var _a2;
                  event.preventDefault();
                  (_a2 = cancelRef.current) == null ? void 0 : _a2.focus({ preventScroll: true });
                }),
                onPointerDownOutside: (event) => event.preventDefault(),
                onInteractOutside: (event) => event.preventDefault(),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Slottable$1, { children }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(DescriptionWarning, { contentRef })
                ]
              }
            ) })
          }
        );
      }
    );
    AlertDialogContent$1.displayName = CONTENT_NAME$5;
    var TITLE_NAME = "AlertDialogTitle";
    var AlertDialogTitle$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeAlertDialog, ...titleProps } = props;
        const dialogScope = useDialogScope(__scopeAlertDialog);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Title, { ...dialogScope, ...titleProps, ref: forwardedRef });
      }
    );
    AlertDialogTitle$1.displayName = TITLE_NAME;
    var DESCRIPTION_NAME = "AlertDialogDescription";
    var AlertDialogDescription$1 = reactExports.forwardRef((props, forwardedRef) => {
      const { __scopeAlertDialog, ...descriptionProps } = props;
      const dialogScope = useDialogScope(__scopeAlertDialog);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Description, { ...dialogScope, ...descriptionProps, ref: forwardedRef });
    });
    AlertDialogDescription$1.displayName = DESCRIPTION_NAME;
    var ACTION_NAME = "AlertDialogAction";
    var AlertDialogAction$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeAlertDialog, ...actionProps } = props;
        const dialogScope = useDialogScope(__scopeAlertDialog);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Close, { ...dialogScope, ...actionProps, ref: forwardedRef });
      }
    );
    AlertDialogAction$1.displayName = ACTION_NAME;
    var CANCEL_NAME = "AlertDialogCancel";
    var AlertDialogCancel$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeAlertDialog, ...cancelProps } = props;
        const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);
        const dialogScope = useDialogScope(__scopeAlertDialog);
        const ref = useComposedRefs(forwardedRef, cancelRef);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Close, { ...dialogScope, ...cancelProps, ref });
      }
    );
    AlertDialogCancel$1.displayName = CANCEL_NAME;
    var DescriptionWarning = ({ contentRef }) => {
      const MESSAGE = `\`${CONTENT_NAME$5}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${CONTENT_NAME$5}\` by passing a \`${DESCRIPTION_NAME}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${CONTENT_NAME$5}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;
      reactExports.useEffect(() => {
        var _a2;
        const hasDescription = document.getElementById(
          (_a2 = contentRef.current) == null ? void 0 : _a2.getAttribute("aria-describedby")
        );
        if (!hasDescription) console.warn(MESSAGE);
      }, [MESSAGE, contentRef]);
      return null;
    };
    var Root2$3 = AlertDialog$1;
    var Trigger2 = AlertDialogTrigger$1;
    var Portal2$1 = AlertDialogPortal$1;
    var Overlay2 = AlertDialogOverlay$1;
    var Content2$4 = AlertDialogContent$1;
    var Action = AlertDialogAction$1;
    var Cancel = AlertDialogCancel$1;
    var Title2 = AlertDialogTitle$1;
    var Description2 = AlertDialogDescription$1;
    function r$1(e) {
      var t, f, n2 = "";
      if ("string" == typeof e || "number" == typeof e) n2 += e;
      else if ("object" == typeof e) if (Array.isArray(e)) {
        var o2 = e.length;
        for (t = 0; t < o2; t++) e[t] && (f = r$1(e[t])) && (n2 && (n2 += " "), n2 += f);
      } else for (f in e) e[f] && (n2 && (n2 += " "), n2 += f);
      return n2;
    }
    function clsx() {
      for (var e, t, f = 0, n2 = "", o2 = arguments.length; f < o2; f++) (e = arguments[f]) && (t = r$1(e)) && (n2 && (n2 += " "), n2 += t);
      return n2;
    }
    const CLASS_PART_SEPARATOR = "-";
    const createClassGroupUtils = (config2) => {
      const classMap = createClassMap(config2);
      const {
        conflictingClassGroups,
        conflictingClassGroupModifiers
      } = config2;
      const getClassGroupId = (className) => {
        const classParts = className.split(CLASS_PART_SEPARATOR);
        if (classParts[0] === "" && classParts.length !== 1) {
          classParts.shift();
        }
        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
      };
      const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {
        const conflicts = conflictingClassGroups[classGroupId] || [];
        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
          return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
        }
        return conflicts;
      };
      return {
        getClassGroupId,
        getConflictingClassGroupIds
      };
    };
    const getGroupRecursive = (classParts, classPartObject) => {
      var _a2;
      if (classParts.length === 0) {
        return classPartObject.classGroupId;
      }
      const currentClassPart = classParts[0];
      const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
      const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
      if (classGroupFromNextClassPart) {
        return classGroupFromNextClassPart;
      }
      if (classPartObject.validators.length === 0) {
        return void 0;
      }
      const classRest = classParts.join(CLASS_PART_SEPARATOR);
      return (_a2 = classPartObject.validators.find(({
        validator: validator2
      }) => validator2(classRest))) == null ? void 0 : _a2.classGroupId;
    };
    const arbitraryPropertyRegex = /^\[(.+)\]$/;
    const getGroupIdForArbitraryProperty = (className) => {
      if (arbitraryPropertyRegex.test(className)) {
        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
        const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
        if (property) {
          return "arbitrary.." + property;
        }
      }
    };
    const createClassMap = (config2) => {
      const {
        theme,
        classGroups
      } = config2;
      const classMap = {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      };
      for (const classGroupId in classGroups) {
        processClassesRecursively(classGroups[classGroupId], classMap, classGroupId, theme);
      }
      return classMap;
    };
    const processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {
      classGroup.forEach((classDefinition) => {
        if (typeof classDefinition === "string") {
          const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
          classPartObjectToEdit.classGroupId = classGroupId;
          return;
        }
        if (typeof classDefinition === "function") {
          if (isThemeGetter(classDefinition)) {
            processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
            return;
          }
          classPartObject.validators.push({
            validator: classDefinition,
            classGroupId
          });
          return;
        }
        Object.entries(classDefinition).forEach(([key, classGroup2]) => {
          processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
        });
      });
    };
    const getPart = (classPartObject, path) => {
      let currentClassPartObject = classPartObject;
      path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
        if (!currentClassPartObject.nextPart.has(pathPart)) {
          currentClassPartObject.nextPart.set(pathPart, {
            nextPart: /* @__PURE__ */ new Map(),
            validators: []
          });
        }
        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
      });
      return currentClassPartObject;
    };
    const isThemeGetter = (func) => func.isThemeGetter;
    const createLruCache = (maxCacheSize) => {
      if (maxCacheSize < 1) {
        return {
          get: () => void 0,
          set: () => {
          }
        };
      }
      let cacheSize = 0;
      let cache = /* @__PURE__ */ new Map();
      let previousCache = /* @__PURE__ */ new Map();
      const update = (key, value) => {
        cache.set(key, value);
        cacheSize++;
        if (cacheSize > maxCacheSize) {
          cacheSize = 0;
          previousCache = cache;
          cache = /* @__PURE__ */ new Map();
        }
      };
      return {
        get(key) {
          let value = cache.get(key);
          if (value !== void 0) {
            return value;
          }
          if ((value = previousCache.get(key)) !== void 0) {
            update(key, value);
            return value;
          }
        },
        set(key, value) {
          if (cache.has(key)) {
            cache.set(key, value);
          } else {
            update(key, value);
          }
        }
      };
    };
    const IMPORTANT_MODIFIER = "!";
    const MODIFIER_SEPARATOR = ":";
    const MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length;
    const createParseClassName = (config2) => {
      const {
        prefix: prefix2,
        experimentalParseClassName
      } = config2;
      let parseClassName = (className) => {
        const modifiers = [];
        let bracketDepth = 0;
        let parenDepth = 0;
        let modifierStart = 0;
        let postfixModifierPosition;
        for (let index2 = 0; index2 < className.length; index2++) {
          let currentCharacter = className[index2];
          if (bracketDepth === 0 && parenDepth === 0) {
            if (currentCharacter === MODIFIER_SEPARATOR) {
              modifiers.push(className.slice(modifierStart, index2));
              modifierStart = index2 + MODIFIER_SEPARATOR_LENGTH;
              continue;
            }
            if (currentCharacter === "/") {
              postfixModifierPosition = index2;
              continue;
            }
          }
          if (currentCharacter === "[") {
            bracketDepth++;
          } else if (currentCharacter === "]") {
            bracketDepth--;
          } else if (currentCharacter === "(") {
            parenDepth++;
          } else if (currentCharacter === ")") {
            parenDepth--;
          }
        }
        const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
        const baseClassName = stripImportantModifier(baseClassNameWithImportantModifier);
        const hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier;
        const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
        return {
          modifiers,
          hasImportantModifier,
          baseClassName,
          maybePostfixModifierPosition
        };
      };
      if (prefix2) {
        const fullPrefix = prefix2 + MODIFIER_SEPARATOR;
        const parseClassNameOriginal = parseClassName;
        parseClassName = (className) => className.startsWith(fullPrefix) ? parseClassNameOriginal(className.substring(fullPrefix.length)) : {
          isExternal: true,
          modifiers: [],
          hasImportantModifier: false,
          baseClassName: className,
          maybePostfixModifierPosition: void 0
        };
      }
      if (experimentalParseClassName) {
        const parseClassNameOriginal = parseClassName;
        parseClassName = (className) => experimentalParseClassName({
          className,
          parseClassName: parseClassNameOriginal
        });
      }
      return parseClassName;
    };
    const stripImportantModifier = (baseClassName) => {
      if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {
        return baseClassName.substring(0, baseClassName.length - 1);
      }
      if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {
        return baseClassName.substring(1);
      }
      return baseClassName;
    };
    const createSortModifiers = (config2) => {
      const orderSensitiveModifiers = Object.fromEntries(config2.orderSensitiveModifiers.map((modifier) => [modifier, true]));
      const sortModifiers = (modifiers) => {
        if (modifiers.length <= 1) {
          return modifiers;
        }
        const sortedModifiers = [];
        let unsortedModifiers = [];
        modifiers.forEach((modifier) => {
          const isPositionSensitive = modifier[0] === "[" || orderSensitiveModifiers[modifier];
          if (isPositionSensitive) {
            sortedModifiers.push(...unsortedModifiers.sort(), modifier);
            unsortedModifiers = [];
          } else {
            unsortedModifiers.push(modifier);
          }
        });
        sortedModifiers.push(...unsortedModifiers.sort());
        return sortedModifiers;
      };
      return sortModifiers;
    };
    const createConfigUtils = (config2) => ({
      cache: createLruCache(config2.cacheSize),
      parseClassName: createParseClassName(config2),
      sortModifiers: createSortModifiers(config2),
      ...createClassGroupUtils(config2)
    });
    const SPLIT_CLASSES_REGEX = /\s+/;
    const mergeClassList = (classList, configUtils) => {
      const {
        parseClassName,
        getClassGroupId,
        getConflictingClassGroupIds,
        sortModifiers
      } = configUtils;
      const classGroupsInConflict = [];
      const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
      let result = "";
      for (let index2 = classNames.length - 1; index2 >= 0; index2 -= 1) {
        const originalClassName = classNames[index2];
        const {
          isExternal,
          modifiers,
          hasImportantModifier,
          baseClassName,
          maybePostfixModifierPosition
        } = parseClassName(originalClassName);
        if (isExternal) {
          result = originalClassName + (result.length > 0 ? " " + result : result);
          continue;
        }
        let hasPostfixModifier = !!maybePostfixModifierPosition;
        let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
        if (!classGroupId) {
          if (!hasPostfixModifier) {
            result = originalClassName + (result.length > 0 ? " " + result : result);
            continue;
          }
          classGroupId = getClassGroupId(baseClassName);
          if (!classGroupId) {
            result = originalClassName + (result.length > 0 ? " " + result : result);
            continue;
          }
          hasPostfixModifier = false;
        }
        const variantModifier = sortModifiers(modifiers).join(":");
        const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
        const classId = modifierId + classGroupId;
        if (classGroupsInConflict.includes(classId)) {
          continue;
        }
        classGroupsInConflict.push(classId);
        const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
        for (let i2 = 0; i2 < conflictGroups.length; ++i2) {
          const group = conflictGroups[i2];
          classGroupsInConflict.push(modifierId + group);
        }
        result = originalClassName + (result.length > 0 ? " " + result : result);
      }
      return result;
    };
    function twJoin() {
      let index2 = 0;
      let argument;
      let resolvedValue;
      let string2 = "";
      while (index2 < arguments.length) {
        if (argument = arguments[index2++]) {
          if (resolvedValue = toValue(argument)) {
            string2 && (string2 += " ");
            string2 += resolvedValue;
          }
        }
      }
      return string2;
    }
    const toValue = (mix) => {
      if (typeof mix === "string") {
        return mix;
      }
      let resolvedValue;
      let string2 = "";
      for (let k2 = 0; k2 < mix.length; k2++) {
        if (mix[k2]) {
          if (resolvedValue = toValue(mix[k2])) {
            string2 && (string2 += " ");
            string2 += resolvedValue;
          }
        }
      }
      return string2;
    };
    function createTailwindMerge(createConfigFirst, ...createConfigRest) {
      let configUtils;
      let cacheGet;
      let cacheSet;
      let functionToCall = initTailwindMerge;
      function initTailwindMerge(classList) {
        const config2 = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
        configUtils = createConfigUtils(config2);
        cacheGet = configUtils.cache.get;
        cacheSet = configUtils.cache.set;
        functionToCall = tailwindMerge;
        return tailwindMerge(classList);
      }
      function tailwindMerge(classList) {
        const cachedResult = cacheGet(classList);
        if (cachedResult) {
          return cachedResult;
        }
        const result = mergeClassList(classList, configUtils);
        cacheSet(classList, result);
        return result;
      }
      return function callTailwindMerge() {
        return functionToCall(twJoin.apply(null, arguments));
      };
    }
    const fromTheme = (key) => {
      const themeGetter = (theme) => theme[key] || [];
      themeGetter.isThemeGetter = true;
      return themeGetter;
    };
    const arbitraryValueRegex = /^\[(?:(\w[\w-]*):)?(.+)\]$/i;
    const arbitraryVariableRegex = /^\((?:(\w[\w-]*):)?(.+)\)$/i;
    const fractionRegex = /^\d+\/\d+$/;
    const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
    const lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
    const colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
    const shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
    const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
    const isFraction = (value) => fractionRegex.test(value);
    const isNumber$3 = (value) => !!value && !Number.isNaN(Number(value));
    const isInteger = (value) => !!value && Number.isInteger(Number(value));
    const isPercent$1 = (value) => value.endsWith("%") && isNumber$3(value.slice(0, -1));
    const isTshirtSize = (value) => tshirtUnitRegex.test(value);
    const isAny = () => true;
    const isLengthOnly = (value) => (
      // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
      // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
      // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
      lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)
    );
    const isNever = () => false;
    const isShadow = (value) => shadowRegex.test(value);
    const isImage = (value) => imageRegex.test(value);
    const isAnyNonArbitrary = (value) => !isArbitraryValue(value) && !isArbitraryVariable(value);
    const isArbitrarySize = (value) => getIsArbitraryValue(value, isLabelSize, isNever);
    const isArbitraryValue = (value) => arbitraryValueRegex.test(value);
    const isArbitraryLength = (value) => getIsArbitraryValue(value, isLabelLength, isLengthOnly);
    const isArbitraryNumber = (value) => getIsArbitraryValue(value, isLabelNumber, isNumber$3);
    const isArbitraryPosition = (value) => getIsArbitraryValue(value, isLabelPosition, isNever);
    const isArbitraryImage = (value) => getIsArbitraryValue(value, isLabelImage, isImage);
    const isArbitraryShadow = (value) => getIsArbitraryValue(value, isLabelShadow, isShadow);
    const isArbitraryVariable = (value) => arbitraryVariableRegex.test(value);
    const isArbitraryVariableLength = (value) => getIsArbitraryVariable(value, isLabelLength);
    const isArbitraryVariableFamilyName = (value) => getIsArbitraryVariable(value, isLabelFamilyName);
    const isArbitraryVariablePosition = (value) => getIsArbitraryVariable(value, isLabelPosition);
    const isArbitraryVariableSize = (value) => getIsArbitraryVariable(value, isLabelSize);
    const isArbitraryVariableImage = (value) => getIsArbitraryVariable(value, isLabelImage);
    const isArbitraryVariableShadow = (value) => getIsArbitraryVariable(value, isLabelShadow, true);
    const getIsArbitraryValue = (value, testLabel, testValue) => {
      const result = arbitraryValueRegex.exec(value);
      if (result) {
        if (result[1]) {
          return testLabel(result[1]);
        }
        return testValue(result[2]);
      }
      return false;
    };
    const getIsArbitraryVariable = (value, testLabel, shouldMatchNoLabel = false) => {
      const result = arbitraryVariableRegex.exec(value);
      if (result) {
        if (result[1]) {
          return testLabel(result[1]);
        }
        return shouldMatchNoLabel;
      }
      return false;
    };
    const isLabelPosition = (label) => label === "position" || label === "percentage";
    const isLabelImage = (label) => label === "image" || label === "url";
    const isLabelSize = (label) => label === "length" || label === "size" || label === "bg-size";
    const isLabelLength = (label) => label === "length";
    const isLabelNumber = (label) => label === "number";
    const isLabelFamilyName = (label) => label === "family-name";
    const isLabelShadow = (label) => label === "shadow";
    const getDefaultConfig = () => {
      const themeColor = fromTheme("color");
      const themeFont = fromTheme("font");
      const themeText = fromTheme("text");
      const themeFontWeight = fromTheme("font-weight");
      const themeTracking = fromTheme("tracking");
      const themeLeading = fromTheme("leading");
      const themeBreakpoint = fromTheme("breakpoint");
      const themeContainer = fromTheme("container");
      const themeSpacing = fromTheme("spacing");
      const themeRadius = fromTheme("radius");
      const themeShadow = fromTheme("shadow");
      const themeInsetShadow = fromTheme("inset-shadow");
      const themeTextShadow = fromTheme("text-shadow");
      const themeDropShadow = fromTheme("drop-shadow");
      const themeBlur = fromTheme("blur");
      const themePerspective = fromTheme("perspective");
      const themeAspect = fromTheme("aspect");
      const themeEase = fromTheme("ease");
      const themeAnimate = fromTheme("animate");
      const scaleBreak = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
      const scalePosition = () => [
        "center",
        "top",
        "bottom",
        "left",
        "right",
        "top-left",
        // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
        "left-top",
        "top-right",
        // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
        "right-top",
        "bottom-right",
        // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
        "right-bottom",
        "bottom-left",
        // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
        "left-bottom"
      ];
      const scalePositionWithArbitrary = () => [...scalePosition(), isArbitraryVariable, isArbitraryValue];
      const scaleOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
      const scaleOverscroll = () => ["auto", "contain", "none"];
      const scaleUnambiguousSpacing = () => [isArbitraryVariable, isArbitraryValue, themeSpacing];
      const scaleInset = () => [isFraction, "full", "auto", ...scaleUnambiguousSpacing()];
      const scaleGridTemplateColsRows = () => [isInteger, "none", "subgrid", isArbitraryVariable, isArbitraryValue];
      const scaleGridColRowStartAndEnd = () => ["auto", {
        span: ["full", isInteger, isArbitraryVariable, isArbitraryValue]
      }, isInteger, isArbitraryVariable, isArbitraryValue];
      const scaleGridColRowStartOrEnd = () => [isInteger, "auto", isArbitraryVariable, isArbitraryValue];
      const scaleGridAutoColsRows = () => ["auto", "min", "max", "fr", isArbitraryVariable, isArbitraryValue];
      const scaleAlignPrimaryAxis = () => ["start", "end", "center", "between", "around", "evenly", "stretch", "baseline", "center-safe", "end-safe"];
      const scaleAlignSecondaryAxis = () => ["start", "end", "center", "stretch", "center-safe", "end-safe"];
      const scaleMargin = () => ["auto", ...scaleUnambiguousSpacing()];
      const scaleSizing = () => [isFraction, "auto", "full", "dvw", "dvh", "lvw", "lvh", "svw", "svh", "min", "max", "fit", ...scaleUnambiguousSpacing()];
      const scaleColor = () => [themeColor, isArbitraryVariable, isArbitraryValue];
      const scaleBgPosition = () => [...scalePosition(), isArbitraryVariablePosition, isArbitraryPosition, {
        position: [isArbitraryVariable, isArbitraryValue]
      }];
      const scaleBgRepeat = () => ["no-repeat", {
        repeat: ["", "x", "y", "space", "round"]
      }];
      const scaleBgSize = () => ["auto", "cover", "contain", isArbitraryVariableSize, isArbitrarySize, {
        size: [isArbitraryVariable, isArbitraryValue]
      }];
      const scaleGradientStopPosition = () => [isPercent$1, isArbitraryVariableLength, isArbitraryLength];
      const scaleRadius = () => [
        // Deprecated since Tailwind CSS v4.0.0
        "",
        "none",
        "full",
        themeRadius,
        isArbitraryVariable,
        isArbitraryValue
      ];
      const scaleBorderWidth = () => ["", isNumber$3, isArbitraryVariableLength, isArbitraryLength];
      const scaleLineStyle = () => ["solid", "dashed", "dotted", "double"];
      const scaleBlendMode = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
      const scaleMaskImagePosition = () => [isNumber$3, isPercent$1, isArbitraryVariablePosition, isArbitraryPosition];
      const scaleBlur = () => [
        // Deprecated since Tailwind CSS v4.0.0
        "",
        "none",
        themeBlur,
        isArbitraryVariable,
        isArbitraryValue
      ];
      const scaleRotate = () => ["none", isNumber$3, isArbitraryVariable, isArbitraryValue];
      const scaleScale = () => ["none", isNumber$3, isArbitraryVariable, isArbitraryValue];
      const scaleSkew = () => [isNumber$3, isArbitraryVariable, isArbitraryValue];
      const scaleTranslate = () => [isFraction, "full", ...scaleUnambiguousSpacing()];
      return {
        cacheSize: 500,
        theme: {
          animate: ["spin", "ping", "pulse", "bounce"],
          aspect: ["video"],
          blur: [isTshirtSize],
          breakpoint: [isTshirtSize],
          color: [isAny],
          container: [isTshirtSize],
          "drop-shadow": [isTshirtSize],
          ease: ["in", "out", "in-out"],
          font: [isAnyNonArbitrary],
          "font-weight": ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black"],
          "inset-shadow": [isTshirtSize],
          leading: ["none", "tight", "snug", "normal", "relaxed", "loose"],
          perspective: ["dramatic", "near", "normal", "midrange", "distant", "none"],
          radius: [isTshirtSize],
          shadow: [isTshirtSize],
          spacing: ["px", isNumber$3],
          text: [isTshirtSize],
          "text-shadow": [isTshirtSize],
          tracking: ["tighter", "tight", "normal", "wide", "wider", "widest"]
        },
        classGroups: {
          // --------------
          // --- Layout ---
          // --------------
          /**
           * Aspect Ratio
           * @see https://tailwindcss.com/docs/aspect-ratio
           */
          aspect: [{
            aspect: ["auto", "square", isFraction, isArbitraryValue, isArbitraryVariable, themeAspect]
          }],
          /**
           * Container
           * @see https://tailwindcss.com/docs/container
           * @deprecated since Tailwind CSS v4.0.0
           */
          container: ["container"],
          /**
           * Columns
           * @see https://tailwindcss.com/docs/columns
           */
          columns: [{
            columns: [isNumber$3, isArbitraryValue, isArbitraryVariable, themeContainer]
          }],
          /**
           * Break After
           * @see https://tailwindcss.com/docs/break-after
           */
          "break-after": [{
            "break-after": scaleBreak()
          }],
          /**
           * Break Before
           * @see https://tailwindcss.com/docs/break-before
           */
          "break-before": [{
            "break-before": scaleBreak()
          }],
          /**
           * Break Inside
           * @see https://tailwindcss.com/docs/break-inside
           */
          "break-inside": [{
            "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
          }],
          /**
           * Box Decoration Break
           * @see https://tailwindcss.com/docs/box-decoration-break
           */
          "box-decoration": [{
            "box-decoration": ["slice", "clone"]
          }],
          /**
           * Box Sizing
           * @see https://tailwindcss.com/docs/box-sizing
           */
          box: [{
            box: ["border", "content"]
          }],
          /**
           * Display
           * @see https://tailwindcss.com/docs/display
           */
          display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
          /**
           * Screen Reader Only
           * @see https://tailwindcss.com/docs/display#screen-reader-only
           */
          sr: ["sr-only", "not-sr-only"],
          /**
           * Floats
           * @see https://tailwindcss.com/docs/float
           */
          float: [{
            float: ["right", "left", "none", "start", "end"]
          }],
          /**
           * Clear
           * @see https://tailwindcss.com/docs/clear
           */
          clear: [{
            clear: ["left", "right", "both", "none", "start", "end"]
          }],
          /**
           * Isolation
           * @see https://tailwindcss.com/docs/isolation
           */
          isolation: ["isolate", "isolation-auto"],
          /**
           * Object Fit
           * @see https://tailwindcss.com/docs/object-fit
           */
          "object-fit": [{
            object: ["contain", "cover", "fill", "none", "scale-down"]
          }],
          /**
           * Object Position
           * @see https://tailwindcss.com/docs/object-position
           */
          "object-position": [{
            object: scalePositionWithArbitrary()
          }],
          /**
           * Overflow
           * @see https://tailwindcss.com/docs/overflow
           */
          overflow: [{
            overflow: scaleOverflow()
          }],
          /**
           * Overflow X
           * @see https://tailwindcss.com/docs/overflow
           */
          "overflow-x": [{
            "overflow-x": scaleOverflow()
          }],
          /**
           * Overflow Y
           * @see https://tailwindcss.com/docs/overflow
           */
          "overflow-y": [{
            "overflow-y": scaleOverflow()
          }],
          /**
           * Overscroll Behavior
           * @see https://tailwindcss.com/docs/overscroll-behavior
           */
          overscroll: [{
            overscroll: scaleOverscroll()
          }],
          /**
           * Overscroll Behavior X
           * @see https://tailwindcss.com/docs/overscroll-behavior
           */
          "overscroll-x": [{
            "overscroll-x": scaleOverscroll()
          }],
          /**
           * Overscroll Behavior Y
           * @see https://tailwindcss.com/docs/overscroll-behavior
           */
          "overscroll-y": [{
            "overscroll-y": scaleOverscroll()
          }],
          /**
           * Position
           * @see https://tailwindcss.com/docs/position
           */
          position: ["static", "fixed", "absolute", "relative", "sticky"],
          /**
           * Top / Right / Bottom / Left
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          inset: [{
            inset: scaleInset()
          }],
          /**
           * Right / Left
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          "inset-x": [{
            "inset-x": scaleInset()
          }],
          /**
           * Top / Bottom
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          "inset-y": [{
            "inset-y": scaleInset()
          }],
          /**
           * Start
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          start: [{
            start: scaleInset()
          }],
          /**
           * End
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          end: [{
            end: scaleInset()
          }],
          /**
           * Top
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          top: [{
            top: scaleInset()
          }],
          /**
           * Right
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          right: [{
            right: scaleInset()
          }],
          /**
           * Bottom
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          bottom: [{
            bottom: scaleInset()
          }],
          /**
           * Left
           * @see https://tailwindcss.com/docs/top-right-bottom-left
           */
          left: [{
            left: scaleInset()
          }],
          /**
           * Visibility
           * @see https://tailwindcss.com/docs/visibility
           */
          visibility: ["visible", "invisible", "collapse"],
          /**
           * Z-Index
           * @see https://tailwindcss.com/docs/z-index
           */
          z: [{
            z: [isInteger, "auto", isArbitraryVariable, isArbitraryValue]
          }],
          // ------------------------
          // --- Flexbox and Grid ---
          // ------------------------
          /**
           * Flex Basis
           * @see https://tailwindcss.com/docs/flex-basis
           */
          basis: [{
            basis: [isFraction, "full", "auto", themeContainer, ...scaleUnambiguousSpacing()]
          }],
          /**
           * Flex Direction
           * @see https://tailwindcss.com/docs/flex-direction
           */
          "flex-direction": [{
            flex: ["row", "row-reverse", "col", "col-reverse"]
          }],
          /**
           * Flex Wrap
           * @see https://tailwindcss.com/docs/flex-wrap
           */
          "flex-wrap": [{
            flex: ["nowrap", "wrap", "wrap-reverse"]
          }],
          /**
           * Flex
           * @see https://tailwindcss.com/docs/flex
           */
          flex: [{
            flex: [isNumber$3, isFraction, "auto", "initial", "none", isArbitraryValue]
          }],
          /**
           * Flex Grow
           * @see https://tailwindcss.com/docs/flex-grow
           */
          grow: [{
            grow: ["", isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Flex Shrink
           * @see https://tailwindcss.com/docs/flex-shrink
           */
          shrink: [{
            shrink: ["", isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Order
           * @see https://tailwindcss.com/docs/order
           */
          order: [{
            order: [isInteger, "first", "last", "none", isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Grid Template Columns
           * @see https://tailwindcss.com/docs/grid-template-columns
           */
          "grid-cols": [{
            "grid-cols": scaleGridTemplateColsRows()
          }],
          /**
           * Grid Column Start / End
           * @see https://tailwindcss.com/docs/grid-column
           */
          "col-start-end": [{
            col: scaleGridColRowStartAndEnd()
          }],
          /**
           * Grid Column Start
           * @see https://tailwindcss.com/docs/grid-column
           */
          "col-start": [{
            "col-start": scaleGridColRowStartOrEnd()
          }],
          /**
           * Grid Column End
           * @see https://tailwindcss.com/docs/grid-column
           */
          "col-end": [{
            "col-end": scaleGridColRowStartOrEnd()
          }],
          /**
           * Grid Template Rows
           * @see https://tailwindcss.com/docs/grid-template-rows
           */
          "grid-rows": [{
            "grid-rows": scaleGridTemplateColsRows()
          }],
          /**
           * Grid Row Start / End
           * @see https://tailwindcss.com/docs/grid-row
           */
          "row-start-end": [{
            row: scaleGridColRowStartAndEnd()
          }],
          /**
           * Grid Row Start
           * @see https://tailwindcss.com/docs/grid-row
           */
          "row-start": [{
            "row-start": scaleGridColRowStartOrEnd()
          }],
          /**
           * Grid Row End
           * @see https://tailwindcss.com/docs/grid-row
           */
          "row-end": [{
            "row-end": scaleGridColRowStartOrEnd()
          }],
          /**
           * Grid Auto Flow
           * @see https://tailwindcss.com/docs/grid-auto-flow
           */
          "grid-flow": [{
            "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
          }],
          /**
           * Grid Auto Columns
           * @see https://tailwindcss.com/docs/grid-auto-columns
           */
          "auto-cols": [{
            "auto-cols": scaleGridAutoColsRows()
          }],
          /**
           * Grid Auto Rows
           * @see https://tailwindcss.com/docs/grid-auto-rows
           */
          "auto-rows": [{
            "auto-rows": scaleGridAutoColsRows()
          }],
          /**
           * Gap
           * @see https://tailwindcss.com/docs/gap
           */
          gap: [{
            gap: scaleUnambiguousSpacing()
          }],
          /**
           * Gap X
           * @see https://tailwindcss.com/docs/gap
           */
          "gap-x": [{
            "gap-x": scaleUnambiguousSpacing()
          }],
          /**
           * Gap Y
           * @see https://tailwindcss.com/docs/gap
           */
          "gap-y": [{
            "gap-y": scaleUnambiguousSpacing()
          }],
          /**
           * Justify Content
           * @see https://tailwindcss.com/docs/justify-content
           */
          "justify-content": [{
            justify: [...scaleAlignPrimaryAxis(), "normal"]
          }],
          /**
           * Justify Items
           * @see https://tailwindcss.com/docs/justify-items
           */
          "justify-items": [{
            "justify-items": [...scaleAlignSecondaryAxis(), "normal"]
          }],
          /**
           * Justify Self
           * @see https://tailwindcss.com/docs/justify-self
           */
          "justify-self": [{
            "justify-self": ["auto", ...scaleAlignSecondaryAxis()]
          }],
          /**
           * Align Content
           * @see https://tailwindcss.com/docs/align-content
           */
          "align-content": [{
            content: ["normal", ...scaleAlignPrimaryAxis()]
          }],
          /**
           * Align Items
           * @see https://tailwindcss.com/docs/align-items
           */
          "align-items": [{
            items: [...scaleAlignSecondaryAxis(), {
              baseline: ["", "last"]
            }]
          }],
          /**
           * Align Self
           * @see https://tailwindcss.com/docs/align-self
           */
          "align-self": [{
            self: ["auto", ...scaleAlignSecondaryAxis(), {
              baseline: ["", "last"]
            }]
          }],
          /**
           * Place Content
           * @see https://tailwindcss.com/docs/place-content
           */
          "place-content": [{
            "place-content": scaleAlignPrimaryAxis()
          }],
          /**
           * Place Items
           * @see https://tailwindcss.com/docs/place-items
           */
          "place-items": [{
            "place-items": [...scaleAlignSecondaryAxis(), "baseline"]
          }],
          /**
           * Place Self
           * @see https://tailwindcss.com/docs/place-self
           */
          "place-self": [{
            "place-self": ["auto", ...scaleAlignSecondaryAxis()]
          }],
          // Spacing
          /**
           * Padding
           * @see https://tailwindcss.com/docs/padding
           */
          p: [{
            p: scaleUnambiguousSpacing()
          }],
          /**
           * Padding X
           * @see https://tailwindcss.com/docs/padding
           */
          px: [{
            px: scaleUnambiguousSpacing()
          }],
          /**
           * Padding Y
           * @see https://tailwindcss.com/docs/padding
           */
          py: [{
            py: scaleUnambiguousSpacing()
          }],
          /**
           * Padding Start
           * @see https://tailwindcss.com/docs/padding
           */
          ps: [{
            ps: scaleUnambiguousSpacing()
          }],
          /**
           * Padding End
           * @see https://tailwindcss.com/docs/padding
           */
          pe: [{
            pe: scaleUnambiguousSpacing()
          }],
          /**
           * Padding Top
           * @see https://tailwindcss.com/docs/padding
           */
          pt: [{
            pt: scaleUnambiguousSpacing()
          }],
          /**
           * Padding Right
           * @see https://tailwindcss.com/docs/padding
           */
          pr: [{
            pr: scaleUnambiguousSpacing()
          }],
          /**
           * Padding Bottom
           * @see https://tailwindcss.com/docs/padding
           */
          pb: [{
            pb: scaleUnambiguousSpacing()
          }],
          /**
           * Padding Left
           * @see https://tailwindcss.com/docs/padding
           */
          pl: [{
            pl: scaleUnambiguousSpacing()
          }],
          /**
           * Margin
           * @see https://tailwindcss.com/docs/margin
           */
          m: [{
            m: scaleMargin()
          }],
          /**
           * Margin X
           * @see https://tailwindcss.com/docs/margin
           */
          mx: [{
            mx: scaleMargin()
          }],
          /**
           * Margin Y
           * @see https://tailwindcss.com/docs/margin
           */
          my: [{
            my: scaleMargin()
          }],
          /**
           * Margin Start
           * @see https://tailwindcss.com/docs/margin
           */
          ms: [{
            ms: scaleMargin()
          }],
          /**
           * Margin End
           * @see https://tailwindcss.com/docs/margin
           */
          me: [{
            me: scaleMargin()
          }],
          /**
           * Margin Top
           * @see https://tailwindcss.com/docs/margin
           */
          mt: [{
            mt: scaleMargin()
          }],
          /**
           * Margin Right
           * @see https://tailwindcss.com/docs/margin
           */
          mr: [{
            mr: scaleMargin()
          }],
          /**
           * Margin Bottom
           * @see https://tailwindcss.com/docs/margin
           */
          mb: [{
            mb: scaleMargin()
          }],
          /**
           * Margin Left
           * @see https://tailwindcss.com/docs/margin
           */
          ml: [{
            ml: scaleMargin()
          }],
          /**
           * Space Between X
           * @see https://tailwindcss.com/docs/margin#adding-space-between-children
           */
          "space-x": [{
            "space-x": scaleUnambiguousSpacing()
          }],
          /**
           * Space Between X Reverse
           * @see https://tailwindcss.com/docs/margin#adding-space-between-children
           */
          "space-x-reverse": ["space-x-reverse"],
          /**
           * Space Between Y
           * @see https://tailwindcss.com/docs/margin#adding-space-between-children
           */
          "space-y": [{
            "space-y": scaleUnambiguousSpacing()
          }],
          /**
           * Space Between Y Reverse
           * @see https://tailwindcss.com/docs/margin#adding-space-between-children
           */
          "space-y-reverse": ["space-y-reverse"],
          // --------------
          // --- Sizing ---
          // --------------
          /**
           * Size
           * @see https://tailwindcss.com/docs/width#setting-both-width-and-height
           */
          size: [{
            size: scaleSizing()
          }],
          /**
           * Width
           * @see https://tailwindcss.com/docs/width
           */
          w: [{
            w: [themeContainer, "screen", ...scaleSizing()]
          }],
          /**
           * Min-Width
           * @see https://tailwindcss.com/docs/min-width
           */
          "min-w": [{
            "min-w": [
              themeContainer,
              "screen",
              /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
              "none",
              ...scaleSizing()
            ]
          }],
          /**
           * Max-Width
           * @see https://tailwindcss.com/docs/max-width
           */
          "max-w": [{
            "max-w": [
              themeContainer,
              "screen",
              "none",
              /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
              "prose",
              /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
              {
                screen: [themeBreakpoint]
              },
              ...scaleSizing()
            ]
          }],
          /**
           * Height
           * @see https://tailwindcss.com/docs/height
           */
          h: [{
            h: ["screen", "lh", ...scaleSizing()]
          }],
          /**
           * Min-Height
           * @see https://tailwindcss.com/docs/min-height
           */
          "min-h": [{
            "min-h": ["screen", "lh", "none", ...scaleSizing()]
          }],
          /**
           * Max-Height
           * @see https://tailwindcss.com/docs/max-height
           */
          "max-h": [{
            "max-h": ["screen", "lh", ...scaleSizing()]
          }],
          // ------------------
          // --- Typography ---
          // ------------------
          /**
           * Font Size
           * @see https://tailwindcss.com/docs/font-size
           */
          "font-size": [{
            text: ["base", themeText, isArbitraryVariableLength, isArbitraryLength]
          }],
          /**
           * Font Smoothing
           * @see https://tailwindcss.com/docs/font-smoothing
           */
          "font-smoothing": ["antialiased", "subpixel-antialiased"],
          /**
           * Font Style
           * @see https://tailwindcss.com/docs/font-style
           */
          "font-style": ["italic", "not-italic"],
          /**
           * Font Weight
           * @see https://tailwindcss.com/docs/font-weight
           */
          "font-weight": [{
            font: [themeFontWeight, isArbitraryVariable, isArbitraryNumber]
          }],
          /**
           * Font Stretch
           * @see https://tailwindcss.com/docs/font-stretch
           */
          "font-stretch": [{
            "font-stretch": ["ultra-condensed", "extra-condensed", "condensed", "semi-condensed", "normal", "semi-expanded", "expanded", "extra-expanded", "ultra-expanded", isPercent$1, isArbitraryValue]
          }],
          /**
           * Font Family
           * @see https://tailwindcss.com/docs/font-family
           */
          "font-family": [{
            font: [isArbitraryVariableFamilyName, isArbitraryValue, themeFont]
          }],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-normal": ["normal-nums"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-ordinal": ["ordinal"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-slashed-zero": ["slashed-zero"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-figure": ["lining-nums", "oldstyle-nums"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-spacing": ["proportional-nums", "tabular-nums"],
          /**
           * Font Variant Numeric
           * @see https://tailwindcss.com/docs/font-variant-numeric
           */
          "fvn-fraction": ["diagonal-fractions", "stacked-fractions"],
          /**
           * Letter Spacing
           * @see https://tailwindcss.com/docs/letter-spacing
           */
          tracking: [{
            tracking: [themeTracking, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Line Clamp
           * @see https://tailwindcss.com/docs/line-clamp
           */
          "line-clamp": [{
            "line-clamp": [isNumber$3, "none", isArbitraryVariable, isArbitraryNumber]
          }],
          /**
           * Line Height
           * @see https://tailwindcss.com/docs/line-height
           */
          leading: [{
            leading: [
              /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
              themeLeading,
              ...scaleUnambiguousSpacing()
            ]
          }],
          /**
           * List Style Image
           * @see https://tailwindcss.com/docs/list-style-image
           */
          "list-image": [{
            "list-image": ["none", isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * List Style Position
           * @see https://tailwindcss.com/docs/list-style-position
           */
          "list-style-position": [{
            list: ["inside", "outside"]
          }],
          /**
           * List Style Type
           * @see https://tailwindcss.com/docs/list-style-type
           */
          "list-style-type": [{
            list: ["disc", "decimal", "none", isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Text Alignment
           * @see https://tailwindcss.com/docs/text-align
           */
          "text-alignment": [{
            text: ["left", "center", "right", "justify", "start", "end"]
          }],
          /**
           * Placeholder Color
           * @deprecated since Tailwind CSS v3.0.0
           * @see https://v3.tailwindcss.com/docs/placeholder-color
           */
          "placeholder-color": [{
            placeholder: scaleColor()
          }],
          /**
           * Text Color
           * @see https://tailwindcss.com/docs/text-color
           */
          "text-color": [{
            text: scaleColor()
          }],
          /**
           * Text Decoration
           * @see https://tailwindcss.com/docs/text-decoration
           */
          "text-decoration": ["underline", "overline", "line-through", "no-underline"],
          /**
           * Text Decoration Style
           * @see https://tailwindcss.com/docs/text-decoration-style
           */
          "text-decoration-style": [{
            decoration: [...scaleLineStyle(), "wavy"]
          }],
          /**
           * Text Decoration Thickness
           * @see https://tailwindcss.com/docs/text-decoration-thickness
           */
          "text-decoration-thickness": [{
            decoration: [isNumber$3, "from-font", "auto", isArbitraryVariable, isArbitraryLength]
          }],
          /**
           * Text Decoration Color
           * @see https://tailwindcss.com/docs/text-decoration-color
           */
          "text-decoration-color": [{
            decoration: scaleColor()
          }],
          /**
           * Text Underline Offset
           * @see https://tailwindcss.com/docs/text-underline-offset
           */
          "underline-offset": [{
            "underline-offset": [isNumber$3, "auto", isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Text Transform
           * @see https://tailwindcss.com/docs/text-transform
           */
          "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
          /**
           * Text Overflow
           * @see https://tailwindcss.com/docs/text-overflow
           */
          "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
          /**
           * Text Wrap
           * @see https://tailwindcss.com/docs/text-wrap
           */
          "text-wrap": [{
            text: ["wrap", "nowrap", "balance", "pretty"]
          }],
          /**
           * Text Indent
           * @see https://tailwindcss.com/docs/text-indent
           */
          indent: [{
            indent: scaleUnambiguousSpacing()
          }],
          /**
           * Vertical Alignment
           * @see https://tailwindcss.com/docs/vertical-align
           */
          "vertical-align": [{
            align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Whitespace
           * @see https://tailwindcss.com/docs/whitespace
           */
          whitespace: [{
            whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
          }],
          /**
           * Word Break
           * @see https://tailwindcss.com/docs/word-break
           */
          break: [{
            break: ["normal", "words", "all", "keep"]
          }],
          /**
           * Overflow Wrap
           * @see https://tailwindcss.com/docs/overflow-wrap
           */
          wrap: [{
            wrap: ["break-word", "anywhere", "normal"]
          }],
          /**
           * Hyphens
           * @see https://tailwindcss.com/docs/hyphens
           */
          hyphens: [{
            hyphens: ["none", "manual", "auto"]
          }],
          /**
           * Content
           * @see https://tailwindcss.com/docs/content
           */
          content: [{
            content: ["none", isArbitraryVariable, isArbitraryValue]
          }],
          // -------------------
          // --- Backgrounds ---
          // -------------------
          /**
           * Background Attachment
           * @see https://tailwindcss.com/docs/background-attachment
           */
          "bg-attachment": [{
            bg: ["fixed", "local", "scroll"]
          }],
          /**
           * Background Clip
           * @see https://tailwindcss.com/docs/background-clip
           */
          "bg-clip": [{
            "bg-clip": ["border", "padding", "content", "text"]
          }],
          /**
           * Background Origin
           * @see https://tailwindcss.com/docs/background-origin
           */
          "bg-origin": [{
            "bg-origin": ["border", "padding", "content"]
          }],
          /**
           * Background Position
           * @see https://tailwindcss.com/docs/background-position
           */
          "bg-position": [{
            bg: scaleBgPosition()
          }],
          /**
           * Background Repeat
           * @see https://tailwindcss.com/docs/background-repeat
           */
          "bg-repeat": [{
            bg: scaleBgRepeat()
          }],
          /**
           * Background Size
           * @see https://tailwindcss.com/docs/background-size
           */
          "bg-size": [{
            bg: scaleBgSize()
          }],
          /**
           * Background Image
           * @see https://tailwindcss.com/docs/background-image
           */
          "bg-image": [{
            bg: ["none", {
              linear: [{
                to: ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
              }, isInteger, isArbitraryVariable, isArbitraryValue],
              radial: ["", isArbitraryVariable, isArbitraryValue],
              conic: [isInteger, isArbitraryVariable, isArbitraryValue]
            }, isArbitraryVariableImage, isArbitraryImage]
          }],
          /**
           * Background Color
           * @see https://tailwindcss.com/docs/background-color
           */
          "bg-color": [{
            bg: scaleColor()
          }],
          /**
           * Gradient Color Stops From Position
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-from-pos": [{
            from: scaleGradientStopPosition()
          }],
          /**
           * Gradient Color Stops Via Position
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-via-pos": [{
            via: scaleGradientStopPosition()
          }],
          /**
           * Gradient Color Stops To Position
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-to-pos": [{
            to: scaleGradientStopPosition()
          }],
          /**
           * Gradient Color Stops From
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-from": [{
            from: scaleColor()
          }],
          /**
           * Gradient Color Stops Via
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-via": [{
            via: scaleColor()
          }],
          /**
           * Gradient Color Stops To
           * @see https://tailwindcss.com/docs/gradient-color-stops
           */
          "gradient-to": [{
            to: scaleColor()
          }],
          // ---------------
          // --- Borders ---
          // ---------------
          /**
           * Border Radius
           * @see https://tailwindcss.com/docs/border-radius
           */
          rounded: [{
            rounded: scaleRadius()
          }],
          /**
           * Border Radius Start
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-s": [{
            "rounded-s": scaleRadius()
          }],
          /**
           * Border Radius End
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-e": [{
            "rounded-e": scaleRadius()
          }],
          /**
           * Border Radius Top
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-t": [{
            "rounded-t": scaleRadius()
          }],
          /**
           * Border Radius Right
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-r": [{
            "rounded-r": scaleRadius()
          }],
          /**
           * Border Radius Bottom
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-b": [{
            "rounded-b": scaleRadius()
          }],
          /**
           * Border Radius Left
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-l": [{
            "rounded-l": scaleRadius()
          }],
          /**
           * Border Radius Start Start
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-ss": [{
            "rounded-ss": scaleRadius()
          }],
          /**
           * Border Radius Start End
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-se": [{
            "rounded-se": scaleRadius()
          }],
          /**
           * Border Radius End End
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-ee": [{
            "rounded-ee": scaleRadius()
          }],
          /**
           * Border Radius End Start
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-es": [{
            "rounded-es": scaleRadius()
          }],
          /**
           * Border Radius Top Left
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-tl": [{
            "rounded-tl": scaleRadius()
          }],
          /**
           * Border Radius Top Right
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-tr": [{
            "rounded-tr": scaleRadius()
          }],
          /**
           * Border Radius Bottom Right
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-br": [{
            "rounded-br": scaleRadius()
          }],
          /**
           * Border Radius Bottom Left
           * @see https://tailwindcss.com/docs/border-radius
           */
          "rounded-bl": [{
            "rounded-bl": scaleRadius()
          }],
          /**
           * Border Width
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w": [{
            border: scaleBorderWidth()
          }],
          /**
           * Border Width X
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-x": [{
            "border-x": scaleBorderWidth()
          }],
          /**
           * Border Width Y
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-y": [{
            "border-y": scaleBorderWidth()
          }],
          /**
           * Border Width Start
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-s": [{
            "border-s": scaleBorderWidth()
          }],
          /**
           * Border Width End
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-e": [{
            "border-e": scaleBorderWidth()
          }],
          /**
           * Border Width Top
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-t": [{
            "border-t": scaleBorderWidth()
          }],
          /**
           * Border Width Right
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-r": [{
            "border-r": scaleBorderWidth()
          }],
          /**
           * Border Width Bottom
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-b": [{
            "border-b": scaleBorderWidth()
          }],
          /**
           * Border Width Left
           * @see https://tailwindcss.com/docs/border-width
           */
          "border-w-l": [{
            "border-l": scaleBorderWidth()
          }],
          /**
           * Divide Width X
           * @see https://tailwindcss.com/docs/border-width#between-children
           */
          "divide-x": [{
            "divide-x": scaleBorderWidth()
          }],
          /**
           * Divide Width X Reverse
           * @see https://tailwindcss.com/docs/border-width#between-children
           */
          "divide-x-reverse": ["divide-x-reverse"],
          /**
           * Divide Width Y
           * @see https://tailwindcss.com/docs/border-width#between-children
           */
          "divide-y": [{
            "divide-y": scaleBorderWidth()
          }],
          /**
           * Divide Width Y Reverse
           * @see https://tailwindcss.com/docs/border-width#between-children
           */
          "divide-y-reverse": ["divide-y-reverse"],
          /**
           * Border Style
           * @see https://tailwindcss.com/docs/border-style
           */
          "border-style": [{
            border: [...scaleLineStyle(), "hidden", "none"]
          }],
          /**
           * Divide Style
           * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style
           */
          "divide-style": [{
            divide: [...scaleLineStyle(), "hidden", "none"]
          }],
          /**
           * Border Color
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color": [{
            border: scaleColor()
          }],
          /**
           * Border Color X
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-x": [{
            "border-x": scaleColor()
          }],
          /**
           * Border Color Y
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-y": [{
            "border-y": scaleColor()
          }],
          /**
           * Border Color S
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-s": [{
            "border-s": scaleColor()
          }],
          /**
           * Border Color E
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-e": [{
            "border-e": scaleColor()
          }],
          /**
           * Border Color Top
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-t": [{
            "border-t": scaleColor()
          }],
          /**
           * Border Color Right
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-r": [{
            "border-r": scaleColor()
          }],
          /**
           * Border Color Bottom
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-b": [{
            "border-b": scaleColor()
          }],
          /**
           * Border Color Left
           * @see https://tailwindcss.com/docs/border-color
           */
          "border-color-l": [{
            "border-l": scaleColor()
          }],
          /**
           * Divide Color
           * @see https://tailwindcss.com/docs/divide-color
           */
          "divide-color": [{
            divide: scaleColor()
          }],
          /**
           * Outline Style
           * @see https://tailwindcss.com/docs/outline-style
           */
          "outline-style": [{
            outline: [...scaleLineStyle(), "none", "hidden"]
          }],
          /**
           * Outline Offset
           * @see https://tailwindcss.com/docs/outline-offset
           */
          "outline-offset": [{
            "outline-offset": [isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Outline Width
           * @see https://tailwindcss.com/docs/outline-width
           */
          "outline-w": [{
            outline: ["", isNumber$3, isArbitraryVariableLength, isArbitraryLength]
          }],
          /**
           * Outline Color
           * @see https://tailwindcss.com/docs/outline-color
           */
          "outline-color": [{
            outline: scaleColor()
          }],
          // ---------------
          // --- Effects ---
          // ---------------
          /**
           * Box Shadow
           * @see https://tailwindcss.com/docs/box-shadow
           */
          shadow: [{
            shadow: [
              // Deprecated since Tailwind CSS v4.0.0
              "",
              "none",
              themeShadow,
              isArbitraryVariableShadow,
              isArbitraryShadow
            ]
          }],
          /**
           * Box Shadow Color
           * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color
           */
          "shadow-color": [{
            shadow: scaleColor()
          }],
          /**
           * Inset Box Shadow
           * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow
           */
          "inset-shadow": [{
            "inset-shadow": ["none", themeInsetShadow, isArbitraryVariableShadow, isArbitraryShadow]
          }],
          /**
           * Inset Box Shadow Color
           * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color
           */
          "inset-shadow-color": [{
            "inset-shadow": scaleColor()
          }],
          /**
           * Ring Width
           * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring
           */
          "ring-w": [{
            ring: scaleBorderWidth()
          }],
          /**
           * Ring Width Inset
           * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings
           * @deprecated since Tailwind CSS v4.0.0
           * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
           */
          "ring-w-inset": ["ring-inset"],
          /**
           * Ring Color
           * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color
           */
          "ring-color": [{
            ring: scaleColor()
          }],
          /**
           * Ring Offset Width
           * @see https://v3.tailwindcss.com/docs/ring-offset-width
           * @deprecated since Tailwind CSS v4.0.0
           * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
           */
          "ring-offset-w": [{
            "ring-offset": [isNumber$3, isArbitraryLength]
          }],
          /**
           * Ring Offset Color
           * @see https://v3.tailwindcss.com/docs/ring-offset-color
           * @deprecated since Tailwind CSS v4.0.0
           * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
           */
          "ring-offset-color": [{
            "ring-offset": scaleColor()
          }],
          /**
           * Inset Ring Width
           * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring
           */
          "inset-ring-w": [{
            "inset-ring": scaleBorderWidth()
          }],
          /**
           * Inset Ring Color
           * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color
           */
          "inset-ring-color": [{
            "inset-ring": scaleColor()
          }],
          /**
           * Text Shadow
           * @see https://tailwindcss.com/docs/text-shadow
           */
          "text-shadow": [{
            "text-shadow": ["none", themeTextShadow, isArbitraryVariableShadow, isArbitraryShadow]
          }],
          /**
           * Text Shadow Color
           * @see https://tailwindcss.com/docs/text-shadow#setting-the-shadow-color
           */
          "text-shadow-color": [{
            "text-shadow": scaleColor()
          }],
          /**
           * Opacity
           * @see https://tailwindcss.com/docs/opacity
           */
          opacity: [{
            opacity: [isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Mix Blend Mode
           * @see https://tailwindcss.com/docs/mix-blend-mode
           */
          "mix-blend": [{
            "mix-blend": [...scaleBlendMode(), "plus-darker", "plus-lighter"]
          }],
          /**
           * Background Blend Mode
           * @see https://tailwindcss.com/docs/background-blend-mode
           */
          "bg-blend": [{
            "bg-blend": scaleBlendMode()
          }],
          /**
           * Mask Clip
           * @see https://tailwindcss.com/docs/mask-clip
           */
          "mask-clip": [{
            "mask-clip": ["border", "padding", "content", "fill", "stroke", "view"]
          }, "mask-no-clip"],
          /**
           * Mask Composite
           * @see https://tailwindcss.com/docs/mask-composite
           */
          "mask-composite": [{
            mask: ["add", "subtract", "intersect", "exclude"]
          }],
          /**
           * Mask Image
           * @see https://tailwindcss.com/docs/mask-image
           */
          "mask-image-linear-pos": [{
            "mask-linear": [isNumber$3]
          }],
          "mask-image-linear-from-pos": [{
            "mask-linear-from": scaleMaskImagePosition()
          }],
          "mask-image-linear-to-pos": [{
            "mask-linear-to": scaleMaskImagePosition()
          }],
          "mask-image-linear-from-color": [{
            "mask-linear-from": scaleColor()
          }],
          "mask-image-linear-to-color": [{
            "mask-linear-to": scaleColor()
          }],
          "mask-image-t-from-pos": [{
            "mask-t-from": scaleMaskImagePosition()
          }],
          "mask-image-t-to-pos": [{
            "mask-t-to": scaleMaskImagePosition()
          }],
          "mask-image-t-from-color": [{
            "mask-t-from": scaleColor()
          }],
          "mask-image-t-to-color": [{
            "mask-t-to": scaleColor()
          }],
          "mask-image-r-from-pos": [{
            "mask-r-from": scaleMaskImagePosition()
          }],
          "mask-image-r-to-pos": [{
            "mask-r-to": scaleMaskImagePosition()
          }],
          "mask-image-r-from-color": [{
            "mask-r-from": scaleColor()
          }],
          "mask-image-r-to-color": [{
            "mask-r-to": scaleColor()
          }],
          "mask-image-b-from-pos": [{
            "mask-b-from": scaleMaskImagePosition()
          }],
          "mask-image-b-to-pos": [{
            "mask-b-to": scaleMaskImagePosition()
          }],
          "mask-image-b-from-color": [{
            "mask-b-from": scaleColor()
          }],
          "mask-image-b-to-color": [{
            "mask-b-to": scaleColor()
          }],
          "mask-image-l-from-pos": [{
            "mask-l-from": scaleMaskImagePosition()
          }],
          "mask-image-l-to-pos": [{
            "mask-l-to": scaleMaskImagePosition()
          }],
          "mask-image-l-from-color": [{
            "mask-l-from": scaleColor()
          }],
          "mask-image-l-to-color": [{
            "mask-l-to": scaleColor()
          }],
          "mask-image-x-from-pos": [{
            "mask-x-from": scaleMaskImagePosition()
          }],
          "mask-image-x-to-pos": [{
            "mask-x-to": scaleMaskImagePosition()
          }],
          "mask-image-x-from-color": [{
            "mask-x-from": scaleColor()
          }],
          "mask-image-x-to-color": [{
            "mask-x-to": scaleColor()
          }],
          "mask-image-y-from-pos": [{
            "mask-y-from": scaleMaskImagePosition()
          }],
          "mask-image-y-to-pos": [{
            "mask-y-to": scaleMaskImagePosition()
          }],
          "mask-image-y-from-color": [{
            "mask-y-from": scaleColor()
          }],
          "mask-image-y-to-color": [{
            "mask-y-to": scaleColor()
          }],
          "mask-image-radial": [{
            "mask-radial": [isArbitraryVariable, isArbitraryValue]
          }],
          "mask-image-radial-from-pos": [{
            "mask-radial-from": scaleMaskImagePosition()
          }],
          "mask-image-radial-to-pos": [{
            "mask-radial-to": scaleMaskImagePosition()
          }],
          "mask-image-radial-from-color": [{
            "mask-radial-from": scaleColor()
          }],
          "mask-image-radial-to-color": [{
            "mask-radial-to": scaleColor()
          }],
          "mask-image-radial-shape": [{
            "mask-radial": ["circle", "ellipse"]
          }],
          "mask-image-radial-size": [{
            "mask-radial": [{
              closest: ["side", "corner"],
              farthest: ["side", "corner"]
            }]
          }],
          "mask-image-radial-pos": [{
            "mask-radial-at": scalePosition()
          }],
          "mask-image-conic-pos": [{
            "mask-conic": [isNumber$3]
          }],
          "mask-image-conic-from-pos": [{
            "mask-conic-from": scaleMaskImagePosition()
          }],
          "mask-image-conic-to-pos": [{
            "mask-conic-to": scaleMaskImagePosition()
          }],
          "mask-image-conic-from-color": [{
            "mask-conic-from": scaleColor()
          }],
          "mask-image-conic-to-color": [{
            "mask-conic-to": scaleColor()
          }],
          /**
           * Mask Mode
           * @see https://tailwindcss.com/docs/mask-mode
           */
          "mask-mode": [{
            mask: ["alpha", "luminance", "match"]
          }],
          /**
           * Mask Origin
           * @see https://tailwindcss.com/docs/mask-origin
           */
          "mask-origin": [{
            "mask-origin": ["border", "padding", "content", "fill", "stroke", "view"]
          }],
          /**
           * Mask Position
           * @see https://tailwindcss.com/docs/mask-position
           */
          "mask-position": [{
            mask: scaleBgPosition()
          }],
          /**
           * Mask Repeat
           * @see https://tailwindcss.com/docs/mask-repeat
           */
          "mask-repeat": [{
            mask: scaleBgRepeat()
          }],
          /**
           * Mask Size
           * @see https://tailwindcss.com/docs/mask-size
           */
          "mask-size": [{
            mask: scaleBgSize()
          }],
          /**
           * Mask Type
           * @see https://tailwindcss.com/docs/mask-type
           */
          "mask-type": [{
            "mask-type": ["alpha", "luminance"]
          }],
          /**
           * Mask Image
           * @see https://tailwindcss.com/docs/mask-image
           */
          "mask-image": [{
            mask: ["none", isArbitraryVariable, isArbitraryValue]
          }],
          // ---------------
          // --- Filters ---
          // ---------------
          /**
           * Filter
           * @see https://tailwindcss.com/docs/filter
           */
          filter: [{
            filter: [
              // Deprecated since Tailwind CSS v3.0.0
              "",
              "none",
              isArbitraryVariable,
              isArbitraryValue
            ]
          }],
          /**
           * Blur
           * @see https://tailwindcss.com/docs/blur
           */
          blur: [{
            blur: scaleBlur()
          }],
          /**
           * Brightness
           * @see https://tailwindcss.com/docs/brightness
           */
          brightness: [{
            brightness: [isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Contrast
           * @see https://tailwindcss.com/docs/contrast
           */
          contrast: [{
            contrast: [isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Drop Shadow
           * @see https://tailwindcss.com/docs/drop-shadow
           */
          "drop-shadow": [{
            "drop-shadow": [
              // Deprecated since Tailwind CSS v4.0.0
              "",
              "none",
              themeDropShadow,
              isArbitraryVariableShadow,
              isArbitraryShadow
            ]
          }],
          /**
           * Drop Shadow Color
           * @see https://tailwindcss.com/docs/filter-drop-shadow#setting-the-shadow-color
           */
          "drop-shadow-color": [{
            "drop-shadow": scaleColor()
          }],
          /**
           * Grayscale
           * @see https://tailwindcss.com/docs/grayscale
           */
          grayscale: [{
            grayscale: ["", isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Hue Rotate
           * @see https://tailwindcss.com/docs/hue-rotate
           */
          "hue-rotate": [{
            "hue-rotate": [isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Invert
           * @see https://tailwindcss.com/docs/invert
           */
          invert: [{
            invert: ["", isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Saturate
           * @see https://tailwindcss.com/docs/saturate
           */
          saturate: [{
            saturate: [isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Sepia
           * @see https://tailwindcss.com/docs/sepia
           */
          sepia: [{
            sepia: ["", isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Backdrop Filter
           * @see https://tailwindcss.com/docs/backdrop-filter
           */
          "backdrop-filter": [{
            "backdrop-filter": [
              // Deprecated since Tailwind CSS v3.0.0
              "",
              "none",
              isArbitraryVariable,
              isArbitraryValue
            ]
          }],
          /**
           * Backdrop Blur
           * @see https://tailwindcss.com/docs/backdrop-blur
           */
          "backdrop-blur": [{
            "backdrop-blur": scaleBlur()
          }],
          /**
           * Backdrop Brightness
           * @see https://tailwindcss.com/docs/backdrop-brightness
           */
          "backdrop-brightness": [{
            "backdrop-brightness": [isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Backdrop Contrast
           * @see https://tailwindcss.com/docs/backdrop-contrast
           */
          "backdrop-contrast": [{
            "backdrop-contrast": [isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Backdrop Grayscale
           * @see https://tailwindcss.com/docs/backdrop-grayscale
           */
          "backdrop-grayscale": [{
            "backdrop-grayscale": ["", isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Backdrop Hue Rotate
           * @see https://tailwindcss.com/docs/backdrop-hue-rotate
           */
          "backdrop-hue-rotate": [{
            "backdrop-hue-rotate": [isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Backdrop Invert
           * @see https://tailwindcss.com/docs/backdrop-invert
           */
          "backdrop-invert": [{
            "backdrop-invert": ["", isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Backdrop Opacity
           * @see https://tailwindcss.com/docs/backdrop-opacity
           */
          "backdrop-opacity": [{
            "backdrop-opacity": [isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Backdrop Saturate
           * @see https://tailwindcss.com/docs/backdrop-saturate
           */
          "backdrop-saturate": [{
            "backdrop-saturate": [isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Backdrop Sepia
           * @see https://tailwindcss.com/docs/backdrop-sepia
           */
          "backdrop-sepia": [{
            "backdrop-sepia": ["", isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          // --------------
          // --- Tables ---
          // --------------
          /**
           * Border Collapse
           * @see https://tailwindcss.com/docs/border-collapse
           */
          "border-collapse": [{
            border: ["collapse", "separate"]
          }],
          /**
           * Border Spacing
           * @see https://tailwindcss.com/docs/border-spacing
           */
          "border-spacing": [{
            "border-spacing": scaleUnambiguousSpacing()
          }],
          /**
           * Border Spacing X
           * @see https://tailwindcss.com/docs/border-spacing
           */
          "border-spacing-x": [{
            "border-spacing-x": scaleUnambiguousSpacing()
          }],
          /**
           * Border Spacing Y
           * @see https://tailwindcss.com/docs/border-spacing
           */
          "border-spacing-y": [{
            "border-spacing-y": scaleUnambiguousSpacing()
          }],
          /**
           * Table Layout
           * @see https://tailwindcss.com/docs/table-layout
           */
          "table-layout": [{
            table: ["auto", "fixed"]
          }],
          /**
           * Caption Side
           * @see https://tailwindcss.com/docs/caption-side
           */
          caption: [{
            caption: ["top", "bottom"]
          }],
          // ---------------------------------
          // --- Transitions and Animation ---
          // ---------------------------------
          /**
           * Transition Property
           * @see https://tailwindcss.com/docs/transition-property
           */
          transition: [{
            transition: ["", "all", "colors", "opacity", "shadow", "transform", "none", isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Transition Behavior
           * @see https://tailwindcss.com/docs/transition-behavior
           */
          "transition-behavior": [{
            transition: ["normal", "discrete"]
          }],
          /**
           * Transition Duration
           * @see https://tailwindcss.com/docs/transition-duration
           */
          duration: [{
            duration: [isNumber$3, "initial", isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Transition Timing Function
           * @see https://tailwindcss.com/docs/transition-timing-function
           */
          ease: [{
            ease: ["linear", "initial", themeEase, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Transition Delay
           * @see https://tailwindcss.com/docs/transition-delay
           */
          delay: [{
            delay: [isNumber$3, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Animation
           * @see https://tailwindcss.com/docs/animation
           */
          animate: [{
            animate: ["none", themeAnimate, isArbitraryVariable, isArbitraryValue]
          }],
          // ------------------
          // --- Transforms ---
          // ------------------
          /**
           * Backface Visibility
           * @see https://tailwindcss.com/docs/backface-visibility
           */
          backface: [{
            backface: ["hidden", "visible"]
          }],
          /**
           * Perspective
           * @see https://tailwindcss.com/docs/perspective
           */
          perspective: [{
            perspective: [themePerspective, isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Perspective Origin
           * @see https://tailwindcss.com/docs/perspective-origin
           */
          "perspective-origin": [{
            "perspective-origin": scalePositionWithArbitrary()
          }],
          /**
           * Rotate
           * @see https://tailwindcss.com/docs/rotate
           */
          rotate: [{
            rotate: scaleRotate()
          }],
          /**
           * Rotate X
           * @see https://tailwindcss.com/docs/rotate
           */
          "rotate-x": [{
            "rotate-x": scaleRotate()
          }],
          /**
           * Rotate Y
           * @see https://tailwindcss.com/docs/rotate
           */
          "rotate-y": [{
            "rotate-y": scaleRotate()
          }],
          /**
           * Rotate Z
           * @see https://tailwindcss.com/docs/rotate
           */
          "rotate-z": [{
            "rotate-z": scaleRotate()
          }],
          /**
           * Scale
           * @see https://tailwindcss.com/docs/scale
           */
          scale: [{
            scale: scaleScale()
          }],
          /**
           * Scale X
           * @see https://tailwindcss.com/docs/scale
           */
          "scale-x": [{
            "scale-x": scaleScale()
          }],
          /**
           * Scale Y
           * @see https://tailwindcss.com/docs/scale
           */
          "scale-y": [{
            "scale-y": scaleScale()
          }],
          /**
           * Scale Z
           * @see https://tailwindcss.com/docs/scale
           */
          "scale-z": [{
            "scale-z": scaleScale()
          }],
          /**
           * Scale 3D
           * @see https://tailwindcss.com/docs/scale
           */
          "scale-3d": ["scale-3d"],
          /**
           * Skew
           * @see https://tailwindcss.com/docs/skew
           */
          skew: [{
            skew: scaleSkew()
          }],
          /**
           * Skew X
           * @see https://tailwindcss.com/docs/skew
           */
          "skew-x": [{
            "skew-x": scaleSkew()
          }],
          /**
           * Skew Y
           * @see https://tailwindcss.com/docs/skew
           */
          "skew-y": [{
            "skew-y": scaleSkew()
          }],
          /**
           * Transform
           * @see https://tailwindcss.com/docs/transform
           */
          transform: [{
            transform: [isArbitraryVariable, isArbitraryValue, "", "none", "gpu", "cpu"]
          }],
          /**
           * Transform Origin
           * @see https://tailwindcss.com/docs/transform-origin
           */
          "transform-origin": [{
            origin: scalePositionWithArbitrary()
          }],
          /**
           * Transform Style
           * @see https://tailwindcss.com/docs/transform-style
           */
          "transform-style": [{
            transform: ["3d", "flat"]
          }],
          /**
           * Translate
           * @see https://tailwindcss.com/docs/translate
           */
          translate: [{
            translate: scaleTranslate()
          }],
          /**
           * Translate X
           * @see https://tailwindcss.com/docs/translate
           */
          "translate-x": [{
            "translate-x": scaleTranslate()
          }],
          /**
           * Translate Y
           * @see https://tailwindcss.com/docs/translate
           */
          "translate-y": [{
            "translate-y": scaleTranslate()
          }],
          /**
           * Translate Z
           * @see https://tailwindcss.com/docs/translate
           */
          "translate-z": [{
            "translate-z": scaleTranslate()
          }],
          /**
           * Translate None
           * @see https://tailwindcss.com/docs/translate
           */
          "translate-none": ["translate-none"],
          // ---------------------
          // --- Interactivity ---
          // ---------------------
          /**
           * Accent Color
           * @see https://tailwindcss.com/docs/accent-color
           */
          accent: [{
            accent: scaleColor()
          }],
          /**
           * Appearance
           * @see https://tailwindcss.com/docs/appearance
           */
          appearance: [{
            appearance: ["none", "auto"]
          }],
          /**
           * Caret Color
           * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
           */
          "caret-color": [{
            caret: scaleColor()
          }],
          /**
           * Color Scheme
           * @see https://tailwindcss.com/docs/color-scheme
           */
          "color-scheme": [{
            scheme: ["normal", "dark", "light", "light-dark", "only-dark", "only-light"]
          }],
          /**
           * Cursor
           * @see https://tailwindcss.com/docs/cursor
           */
          cursor: [{
            cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryVariable, isArbitraryValue]
          }],
          /**
           * Field Sizing
           * @see https://tailwindcss.com/docs/field-sizing
           */
          "field-sizing": [{
            "field-sizing": ["fixed", "content"]
          }],
          /**
           * Pointer Events
           * @see https://tailwindcss.com/docs/pointer-events
           */
          "pointer-events": [{
            "pointer-events": ["auto", "none"]
          }],
          /**
           * Resize
           * @see https://tailwindcss.com/docs/resize
           */
          resize: [{
            resize: ["none", "", "y", "x"]
          }],
          /**
           * Scroll Behavior
           * @see https://tailwindcss.com/docs/scroll-behavior
           */
          "scroll-behavior": [{
            scroll: ["auto", "smooth"]
          }],
          /**
           * Scroll Margin
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-m": [{
            "scroll-m": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Margin X
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mx": [{
            "scroll-mx": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Margin Y
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-my": [{
            "scroll-my": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Margin Start
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-ms": [{
            "scroll-ms": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Margin End
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-me": [{
            "scroll-me": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Margin Top
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mt": [{
            "scroll-mt": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Margin Right
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mr": [{
            "scroll-mr": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Margin Bottom
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-mb": [{
            "scroll-mb": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Margin Left
           * @see https://tailwindcss.com/docs/scroll-margin
           */
          "scroll-ml": [{
            "scroll-ml": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Padding
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-p": [{
            "scroll-p": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Padding X
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-px": [{
            "scroll-px": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Padding Y
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-py": [{
            "scroll-py": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Padding Start
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-ps": [{
            "scroll-ps": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Padding End
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pe": [{
            "scroll-pe": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Padding Top
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pt": [{
            "scroll-pt": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Padding Right
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pr": [{
            "scroll-pr": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Padding Bottom
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pb": [{
            "scroll-pb": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Padding Left
           * @see https://tailwindcss.com/docs/scroll-padding
           */
          "scroll-pl": [{
            "scroll-pl": scaleUnambiguousSpacing()
          }],
          /**
           * Scroll Snap Align
           * @see https://tailwindcss.com/docs/scroll-snap-align
           */
          "snap-align": [{
            snap: ["start", "end", "center", "align-none"]
          }],
          /**
           * Scroll Snap Stop
           * @see https://tailwindcss.com/docs/scroll-snap-stop
           */
          "snap-stop": [{
            snap: ["normal", "always"]
          }],
          /**
           * Scroll Snap Type
           * @see https://tailwindcss.com/docs/scroll-snap-type
           */
          "snap-type": [{
            snap: ["none", "x", "y", "both"]
          }],
          /**
           * Scroll Snap Type Strictness
           * @see https://tailwindcss.com/docs/scroll-snap-type
           */
          "snap-strictness": [{
            snap: ["mandatory", "proximity"]
          }],
          /**
           * Touch Action
           * @see https://tailwindcss.com/docs/touch-action
           */
          touch: [{
            touch: ["auto", "none", "manipulation"]
          }],
          /**
           * Touch Action X
           * @see https://tailwindcss.com/docs/touch-action
           */
          "touch-x": [{
            "touch-pan": ["x", "left", "right"]
          }],
          /**
           * Touch Action Y
           * @see https://tailwindcss.com/docs/touch-action
           */
          "touch-y": [{
            "touch-pan": ["y", "up", "down"]
          }],
          /**
           * Touch Action Pinch Zoom
           * @see https://tailwindcss.com/docs/touch-action
           */
          "touch-pz": ["touch-pinch-zoom"],
          /**
           * User Select
           * @see https://tailwindcss.com/docs/user-select
           */
          select: [{
            select: ["none", "text", "all", "auto"]
          }],
          /**
           * Will Change
           * @see https://tailwindcss.com/docs/will-change
           */
          "will-change": [{
            "will-change": ["auto", "scroll", "contents", "transform", isArbitraryVariable, isArbitraryValue]
          }],
          // -----------
          // --- SVG ---
          // -----------
          /**
           * Fill
           * @see https://tailwindcss.com/docs/fill
           */
          fill: [{
            fill: ["none", ...scaleColor()]
          }],
          /**
           * Stroke Width
           * @see https://tailwindcss.com/docs/stroke-width
           */
          "stroke-w": [{
            stroke: [isNumber$3, isArbitraryVariableLength, isArbitraryLength, isArbitraryNumber]
          }],
          /**
           * Stroke
           * @see https://tailwindcss.com/docs/stroke
           */
          stroke: [{
            stroke: ["none", ...scaleColor()]
          }],
          // ---------------------
          // --- Accessibility ---
          // ---------------------
          /**
           * Forced Color Adjust
           * @see https://tailwindcss.com/docs/forced-color-adjust
           */
          "forced-color-adjust": [{
            "forced-color-adjust": ["auto", "none"]
          }]
        },
        conflictingClassGroups: {
          overflow: ["overflow-x", "overflow-y"],
          overscroll: ["overscroll-x", "overscroll-y"],
          inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
          "inset-x": ["right", "left"],
          "inset-y": ["top", "bottom"],
          flex: ["basis", "grow", "shrink"],
          gap: ["gap-x", "gap-y"],
          p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
          px: ["pr", "pl"],
          py: ["pt", "pb"],
          m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
          mx: ["mr", "ml"],
          my: ["mt", "mb"],
          size: ["w", "h"],
          "font-size": ["leading"],
          "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
          "fvn-ordinal": ["fvn-normal"],
          "fvn-slashed-zero": ["fvn-normal"],
          "fvn-figure": ["fvn-normal"],
          "fvn-spacing": ["fvn-normal"],
          "fvn-fraction": ["fvn-normal"],
          "line-clamp": ["display", "overflow"],
          rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
          "rounded-s": ["rounded-ss", "rounded-es"],
          "rounded-e": ["rounded-se", "rounded-ee"],
          "rounded-t": ["rounded-tl", "rounded-tr"],
          "rounded-r": ["rounded-tr", "rounded-br"],
          "rounded-b": ["rounded-br", "rounded-bl"],
          "rounded-l": ["rounded-tl", "rounded-bl"],
          "border-spacing": ["border-spacing-x", "border-spacing-y"],
          "border-w": ["border-w-x", "border-w-y", "border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
          "border-w-x": ["border-w-r", "border-w-l"],
          "border-w-y": ["border-w-t", "border-w-b"],
          "border-color": ["border-color-x", "border-color-y", "border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
          "border-color-x": ["border-color-r", "border-color-l"],
          "border-color-y": ["border-color-t", "border-color-b"],
          translate: ["translate-x", "translate-y", "translate-none"],
          "translate-none": ["translate", "translate-x", "translate-y", "translate-z"],
          "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
          "scroll-mx": ["scroll-mr", "scroll-ml"],
          "scroll-my": ["scroll-mt", "scroll-mb"],
          "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
          "scroll-px": ["scroll-pr", "scroll-pl"],
          "scroll-py": ["scroll-pt", "scroll-pb"],
          touch: ["touch-x", "touch-y", "touch-pz"],
          "touch-x": ["touch"],
          "touch-y": ["touch"],
          "touch-pz": ["touch"]
        },
        conflictingClassGroupModifiers: {
          "font-size": ["leading"]
        },
        orderSensitiveModifiers: ["*", "**", "after", "backdrop", "before", "details-content", "file", "first-letter", "first-line", "marker", "placeholder", "selection"]
      };
    };
    const twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);
    function cn$1(...inputs) {
      return twMerge(clsx(inputs));
    }
    const falsyToString = (value) => typeof value === "boolean" ? `${value}` : value === 0 ? "0" : value;
    const cx = clsx;
    const cva = (base, config2) => (props) => {
      var _config_compoundVariants;
      if ((config2 === null || config2 === void 0 ? void 0 : config2.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
      const { variants, defaultVariants } = config2;
      const getVariantClassNames = Object.keys(variants).map((variant) => {
        const variantProp = props === null || props === void 0 ? void 0 : props[variant];
        const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];
        if (variantProp === null) return null;
        const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
        return variants[variant][variantKey];
      });
      const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {
        let [key, value] = param;
        if (value === void 0) {
          return acc;
        }
        acc[key] = value;
        return acc;
      }, {});
      const getCompoundVariantClassNames = config2 === null || config2 === void 0 ? void 0 : (_config_compoundVariants = config2.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param) => {
        let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;
        return Object.entries(compoundVariantOptions).every((param2) => {
          let [key, value] = param2;
          return Array.isArray(value) ? value.includes({
            ...defaultVariants,
            ...propsWithoutUndefined
          }[key]) : {
            ...defaultVariants,
            ...propsWithoutUndefined
          }[key] === value;
        }) ? [
          ...acc,
          cvClass,
          cvClassName
        ] : acc;
      }, []);
      return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
    };
    const buttonVariants = cva(
      "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
      {
        variants: {
          variant: {
            default: "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
            destructive: "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
            outline: "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
            secondary: "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
            ghost: "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
            link: "text-primary underline-offset-4 hover:underline"
          },
          size: {
            default: "h-9 px-4 py-2 has-[>svg]:px-3",
            sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
            lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
            icon: "size-9"
          }
        },
        defaultVariants: {
          variant: "default",
          size: "default"
        }
      }
    );
    function Button({
      className,
      variant,
      size: size2,
      asChild = false,
      ...props
    }) {
      const Comp = asChild ? Slot$3 : "button";
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Comp,
        {
          "data-slot": "button",
          className: cn$1(buttonVariants({ variant, size: size2, className })),
          ...props
        }
      );
    }
    function AlertDialog({
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Root2$3, { "data-slot": "alert-dialog", ...props });
    }
    function AlertDialogTrigger({
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Trigger2, { "data-slot": "alert-dialog-trigger", ...props });
    }
    function AlertDialogPortal({
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal2$1, { "data-slot": "alert-dialog-portal", ...props });
    }
    function AlertDialogOverlay({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Overlay2,
        {
          "data-slot": "alert-dialog-overlay",
          className: cn$1(
            "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
            className
          ),
          ...props
        }
      );
    }
    function AlertDialogContent({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(AlertDialogPortal, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(AlertDialogOverlay, {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Content2$4,
          {
            "data-slot": "alert-dialog-content",
            className: cn$1(
              "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
              className
            ),
            ...props
          }
        )
      ] });
    }
    function AlertDialogHeader({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          "data-slot": "alert-dialog-header",
          className: cn$1("flex flex-col gap-2 text-center sm:text-left", className),
          ...props
        }
      );
    }
    function AlertDialogFooter({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          "data-slot": "alert-dialog-footer",
          className: cn$1(
            "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
            className
          ),
          ...props
        }
      );
    }
    function AlertDialogTitle({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Title2,
        {
          "data-slot": "alert-dialog-title",
          className: cn$1("text-lg font-semibold", className),
          ...props
        }
      );
    }
    function AlertDialogDescription({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Description2,
        {
          "data-slot": "alert-dialog-description",
          className: cn$1("text-muted-foreground text-sm", className),
          ...props
        }
      );
    }
    function AlertDialogAction({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Action,
        {
          className: cn$1(buttonVariants(), className),
          ...props
        }
      );
    }
    function AlertDialogCancel({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Cancel,
        {
          className: cn$1(buttonVariants({ variant: "outline" }), className),
          ...props
        }
      );
    }
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const toKebabCase = (string2) => string2.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
    const toCamelCase = (string2) => string2.replace(
      /^([A-Z])|[\s-_]+(\w)/g,
      (match, p1, p2) => p2 ? p2.toUpperCase() : p1.toLowerCase()
    );
    const toPascalCase = (string2) => {
      const camelCase = toCamelCase(string2);
      return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);
    };
    const mergeClasses = (...classes) => classes.filter((className, index2, array2) => {
      return Boolean(className) && className.trim() !== "" && array2.indexOf(className) === index2;
    }).join(" ").trim();
    const hasA11yProp = (props) => {
      for (const prop in props) {
        if (prop.startsWith("aria-") || prop === "role" || prop === "title") {
          return true;
        }
      }
    };
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    var defaultAttributes = {
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    };
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const Icon = reactExports.forwardRef(
      ({
        color: color2 = "currentColor",
        size: size2 = 24,
        strokeWidth = 2,
        absoluteStrokeWidth,
        className = "",
        children,
        iconNode,
        ...rest
      }, ref) => reactExports.createElement(
        "svg",
        {
          ref,
          ...defaultAttributes,
          width: size2,
          height: size2,
          stroke: color2,
          strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size2) : strokeWidth,
          className: mergeClasses("lucide", className),
          ...!children && !hasA11yProp(rest) && { "aria-hidden": "true" },
          ...rest
        },
        [
          ...iconNode.map(([tag, attrs]) => reactExports.createElement(tag, attrs)),
          ...Array.isArray(children) ? children : [children]
        ]
      )
    );
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const createLucideIcon = (iconName, iconNode) => {
      const Component = reactExports.forwardRef(
        ({ className, ...props }, ref) => reactExports.createElement(Icon, {
          ref,
          iconNode,
          className: mergeClasses(
            `lucide-${toKebabCase(toPascalCase(iconName))}`,
            `lucide-${iconName}`,
            className
          ),
          ...props
        })
      );
      Component.displayName = toPascalCase(iconName);
      return Component;
    };
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$e = [
      ["path", { d: "M5 12h14", key: "1ays0h" }],
      ["path", { d: "m12 5 7 7-7 7", key: "xquz4c" }]
    ];
    const ArrowRight = createLucideIcon("arrow-right", __iconNode$e);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$d = [["path", { d: "M20 6 9 17l-5-5", key: "1gmf2c" }]];
    const Check = createLucideIcon("check", __iconNode$d);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$c = [
      ["path", { d: "m7 15 5 5 5-5", key: "1hf1tw" }],
      ["path", { d: "m7 9 5-5 5 5", key: "sgt6xg" }]
    ];
    const ChevronsUpDown = createLucideIcon("chevrons-up-down", __iconNode$c);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$b = [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 16 14", key: "68esgv" }]
    ];
    const Clock = createLucideIcon("clock", __iconNode$b);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$a = [
      ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
      ["circle", { cx: "19", cy: "12", r: "1", key: "1wjl8i" }],
      ["circle", { cx: "5", cy: "12", r: "1", key: "1pcz8c" }]
    ];
    const Ellipsis = createLucideIcon("ellipsis", __iconNode$a);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$9 = [
      [
        "path",
        {
          d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0",
          key: "1nclc0"
        }
      ],
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
    ];
    const Eye = createLucideIcon("eye", __iconNode$9);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$8 = [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }]
    ];
    const File = createLucideIcon("file", __iconNode$8);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$7 = [
      [
        "path",
        {
          d: "M12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83z",
          key: "zw3jo"
        }
      ],
      [
        "path",
        {
          d: "M2 12a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 12",
          key: "1wduqc"
        }
      ],
      [
        "path",
        {
          d: "M2 17a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 17",
          key: "kqbvx6"
        }
      ]
    ];
    const Layers = createLucideIcon("layers", __iconNode$7);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$6 = [
      ["path", { d: "m16 17 5-5-5-5", key: "1bji2h" }],
      ["path", { d: "M21 12H9", key: "dn1m92" }],
      ["path", { d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4", key: "1uf3rs" }]
    ];
    const LogOut = createLucideIcon("log-out", __iconNode$6);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$5 = [
      [
        "path",
        {
          d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
          key: "1r0f0z"
        }
      ],
      ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }]
    ];
    const MapPin = createLucideIcon("map-pin", __iconNode$5);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$4 = [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M9 3v18", key: "fh3hqa" }]
    ];
    const PanelLeft = createLucideIcon("panel-left", __iconNode$4);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$3 = [
      ["path", { d: "m21 21-4.34-4.34", key: "14j7rj" }],
      ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }]
    ];
    const Search = createLucideIcon("search", __iconNode$3);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$2 = [
      ["path", { d: "M3 6h18", key: "d0wm0j" }],
      ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
      ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }]
    ];
    const Trash = createLucideIcon("trash", __iconNode$2);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode$1 = [
      ["path", { d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2", key: "975kel" }],
      ["circle", { cx: "12", cy: "7", r: "4", key: "17ys0d" }]
    ];
    const User = createLucideIcon("user", __iconNode$1);
    /**
     * @license lucide-react v0.513.0 - ISC
     *
     * This source code is licensed under the ISC license.
     * See the LICENSE file in the root directory of this source tree.
     */
    const __iconNode = [
      ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
      ["path", { d: "m6 6 12 12", key: "d8bk6v" }]
    ];
    const X$1 = createLucideIcon("x", __iconNode);
    const MOBILE_BREAKPOINT = 768;
    function useIsMobile() {
      const [isMobile, setIsMobile] = reactExports.useState(void 0);
      reactExports.useEffect(() => {
        const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
        const onChange = () => {
          setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
        };
        mql.addEventListener("change", onChange);
        setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
        return () => mql.removeEventListener("change", onChange);
      }, []);
      return !!isMobile;
    }
    function Input({ className, type, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "input",
        {
          type,
          "data-slot": "input",
          className: cn$1(
            "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
            "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
            "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
            className
          ),
          ...props
        }
      );
    }
    var NAME$3 = "Separator";
    var DEFAULT_ORIENTATION = "horizontal";
    var ORIENTATIONS = ["horizontal", "vertical"];
    var Separator$2 = reactExports.forwardRef((props, forwardedRef) => {
      const { decorative, orientation: orientationProp = DEFAULT_ORIENTATION, ...domProps } = props;
      const orientation = isValidOrientation(orientationProp) ? orientationProp : DEFAULT_ORIENTATION;
      const ariaOrientation = orientation === "vertical" ? orientation : void 0;
      const semanticProps = decorative ? { role: "none" } : { "aria-orientation": ariaOrientation, role: "separator" };
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Primitive.div,
        {
          "data-orientation": orientation,
          ...semanticProps,
          ...domProps,
          ref: forwardedRef
        }
      );
    });
    Separator$2.displayName = NAME$3;
    function isValidOrientation(orientation) {
      return ORIENTATIONS.includes(orientation);
    }
    var Root$4 = Separator$2;
    function Separator$1({
      className,
      orientation = "horizontal",
      decorative = true,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Root$4,
        {
          "data-slot": "separator-root",
          decorative,
          orientation,
          className: cn$1(
            "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
            className
          ),
          ...props
        }
      );
    }
    function Sheet({ ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Root$5, { "data-slot": "sheet", ...props });
    }
    function SheetPortal({
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$3, { "data-slot": "sheet-portal", ...props });
    }
    function SheetOverlay({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Overlay,
        {
          "data-slot": "sheet-overlay",
          className: cn$1(
            "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
            className
          ),
          ...props
        }
      );
    }
    function SheetContent({
      className,
      children,
      side = "right",
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(SheetPortal, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(SheetOverlay, {}),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Content$1,
          {
            "data-slot": "sheet-content",
            className: cn$1(
              "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
              side === "right" && "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
              side === "left" && "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
              side === "top" && "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
              side === "bottom" && "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
              className
            ),
            ...props,
            children: [
              children,
              /* @__PURE__ */ jsxRuntimeExports.jsxs(Close, { className: "ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(X$1, { className: "size-4" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "sr-only", children: "Close" })
              ] })
            ]
          }
        )
      ] });
    }
    function SheetHeader({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          "data-slot": "sheet-header",
          className: cn$1("flex flex-col gap-1.5 p-4", className),
          ...props
        }
      );
    }
    function SheetTitle({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Title,
        {
          "data-slot": "sheet-title",
          className: cn$1("text-foreground font-semibold", className),
          ...props
        }
      );
    }
    function SheetDescription({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Description,
        {
          "data-slot": "sheet-description",
          className: cn$1("text-muted-foreground text-sm", className),
          ...props
        }
      );
    }
    const sides = ["top", "right", "bottom", "left"];
    const min$4 = Math.min;
    const max$4 = Math.max;
    const round$2 = Math.round;
    const floor = Math.floor;
    const createCoords = (v) => ({
      x: v,
      y: v
    });
    const oppositeSideMap = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    const oppositeAlignmentMap = {
      start: "end",
      end: "start"
    };
    function clamp(start, value, end) {
      return max$4(start, min$4(value, end));
    }
    function evaluate(value, param) {
      return typeof value === "function" ? value(param) : value;
    }
    function getSide(placement) {
      return placement.split("-")[0];
    }
    function getAlignment(placement) {
      return placement.split("-")[1];
    }
    function getOppositeAxis(axis) {
      return axis === "x" ? "y" : "x";
    }
    function getAxisLength(axis) {
      return axis === "y" ? "height" : "width";
    }
    function getSideAxis(placement) {
      return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
    }
    function getAlignmentAxis(placement) {
      return getOppositeAxis(getSideAxis(placement));
    }
    function getAlignmentSides(placement, rects, rtl) {
      if (rtl === void 0) {
        rtl = false;
      }
      const alignment = getAlignment(placement);
      const alignmentAxis = getAlignmentAxis(placement);
      const length = getAxisLength(alignmentAxis);
      let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
      if (rects.reference[length] > rects.floating[length]) {
        mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
      }
      return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
    }
    function getExpandedPlacements(placement) {
      const oppositePlacement = getOppositePlacement(placement);
      return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
    }
    function getOppositeAlignmentPlacement(placement) {
      return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
    }
    function getSideList(side, isStart, rtl) {
      const lr = ["left", "right"];
      const rl = ["right", "left"];
      const tb = ["top", "bottom"];
      const bt = ["bottom", "top"];
      switch (side) {
        case "top":
        case "bottom":
          if (rtl) return isStart ? rl : lr;
          return isStart ? lr : rl;
        case "left":
        case "right":
          return isStart ? tb : bt;
        default:
          return [];
      }
    }
    function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
      const alignment = getAlignment(placement);
      let list = getSideList(getSide(placement), direction === "start", rtl);
      if (alignment) {
        list = list.map((side) => side + "-" + alignment);
        if (flipAlignment) {
          list = list.concat(list.map(getOppositeAlignmentPlacement));
        }
      }
      return list;
    }
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
    }
    function expandPaddingObject(padding) {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        ...padding
      };
    }
    function getPaddingObject(padding) {
      return typeof padding !== "number" ? expandPaddingObject(padding) : {
        top: padding,
        right: padding,
        bottom: padding,
        left: padding
      };
    }
    function rectToClientRect(rect) {
      const {
        x: x2,
        y: y2,
        width,
        height
      } = rect;
      return {
        width,
        height,
        top: y2,
        left: x2,
        right: x2 + width,
        bottom: y2 + height,
        x: x2,
        y: y2
      };
    }
    function computeCoordsFromPlacement(_ref, placement, rtl) {
      let {
        reference,
        floating
      } = _ref;
      const sideAxis = getSideAxis(placement);
      const alignmentAxis = getAlignmentAxis(placement);
      const alignLength = getAxisLength(alignmentAxis);
      const side = getSide(placement);
      const isVertical = sideAxis === "y";
      const commonX = reference.x + reference.width / 2 - floating.width / 2;
      const commonY = reference.y + reference.height / 2 - floating.height / 2;
      const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
      let coords;
      switch (side) {
        case "top":
          coords = {
            x: commonX,
            y: reference.y - floating.height
          };
          break;
        case "bottom":
          coords = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;
        case "right":
          coords = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;
        case "left":
          coords = {
            x: reference.x - floating.width,
            y: commonY
          };
          break;
        default:
          coords = {
            x: reference.x,
            y: reference.y
          };
      }
      switch (getAlignment(placement)) {
        case "start":
          coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
          break;
        case "end":
          coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
          break;
      }
      return coords;
    }
    const computePosition$1 = async (reference, floating, config2) => {
      const {
        placement = "bottom",
        strategy = "absolute",
        middleware = [],
        platform: platform2
      } = config2;
      const validMiddleware = middleware.filter(Boolean);
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
      let rects = await platform2.getElementRects({
        reference,
        floating,
        strategy
      });
      let {
        x: x2,
        y: y2
      } = computeCoordsFromPlacement(rects, placement, rtl);
      let statefulPlacement = placement;
      let middlewareData = {};
      let resetCount = 0;
      for (let i2 = 0; i2 < validMiddleware.length; i2++) {
        const {
          name,
          fn
        } = validMiddleware[i2];
        const {
          x: nextX,
          y: nextY,
          data,
          reset
        } = await fn({
          x: x2,
          y: y2,
          initialPlacement: placement,
          placement: statefulPlacement,
          strategy,
          middlewareData,
          rects,
          platform: platform2,
          elements: {
            reference,
            floating
          }
        });
        x2 = nextX != null ? nextX : x2;
        y2 = nextY != null ? nextY : y2;
        middlewareData = {
          ...middlewareData,
          [name]: {
            ...middlewareData[name],
            ...data
          }
        };
        if (reset && resetCount <= 50) {
          resetCount++;
          if (typeof reset === "object") {
            if (reset.placement) {
              statefulPlacement = reset.placement;
            }
            if (reset.rects) {
              rects = reset.rects === true ? await platform2.getElementRects({
                reference,
                floating,
                strategy
              }) : reset.rects;
            }
            ({
              x: x2,
              y: y2
            } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
          }
          i2 = -1;
        }
      }
      return {
        x: x2,
        y: y2,
        placement: statefulPlacement,
        strategy,
        middlewareData
      };
    };
    async function detectOverflow(state, options2) {
      var _await$platform$isEle;
      if (options2 === void 0) {
        options2 = {};
      }
      const {
        x: x2,
        y: y2,
        platform: platform2,
        rects,
        elements,
        strategy
      } = state;
      const {
        boundary = "clippingAncestors",
        rootBoundary = "viewport",
        elementContext = "floating",
        altBoundary = false,
        padding = 0
      } = evaluate(options2, state);
      const paddingObject = getPaddingObject(padding);
      const altContext = elementContext === "floating" ? "reference" : "floating";
      const element = elements[altBoundary ? altContext : elementContext];
      const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
        element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
        boundary,
        rootBoundary,
        strategy
      }));
      const rect = elementContext === "floating" ? {
        x: x2,
        y: y2,
        width: rects.floating.width,
        height: rects.floating.height
      } : rects.reference;
      const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
      const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
        x: 1,
        y: 1
      } : {
        x: 1,
        y: 1
      };
      const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
        elements,
        rect,
        offsetParent,
        strategy
      }) : rect);
      return {
        top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
        bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
        left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
        right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
      };
    }
    const arrow$3 = (options2) => ({
      name: "arrow",
      options: options2,
      async fn(state) {
        const {
          x: x2,
          y: y2,
          placement,
          rects,
          platform: platform2,
          elements,
          middlewareData
        } = state;
        const {
          element,
          padding = 0
        } = evaluate(options2, state) || {};
        if (element == null) {
          return {};
        }
        const paddingObject = getPaddingObject(padding);
        const coords = {
          x: x2,
          y: y2
        };
        const axis = getAlignmentAxis(placement);
        const length = getAxisLength(axis);
        const arrowDimensions = await platform2.getDimensions(element);
        const isYAxis = axis === "y";
        const minProp = isYAxis ? "top" : "left";
        const maxProp = isYAxis ? "bottom" : "right";
        const clientProp = isYAxis ? "clientHeight" : "clientWidth";
        const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
        const startDiff = coords[axis] - rects.reference[axis];
        const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
        let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
        if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
          clientSize = elements.floating[clientProp] || rects.floating[length];
        }
        const centerToReference = endDiff / 2 - startDiff / 2;
        const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
        const minPadding = min$4(paddingObject[minProp], largestPossiblePadding);
        const maxPadding = min$4(paddingObject[maxProp], largestPossiblePadding);
        const min$12 = minPadding;
        const max2 = clientSize - arrowDimensions[length] - maxPadding;
        const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
        const offset2 = clamp(min$12, center, max2);
        const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset2 && rects.reference[length] / 2 - (center < min$12 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
        const alignmentOffset = shouldAddOffset ? center < min$12 ? center - min$12 : center - max2 : 0;
        return {
          [axis]: coords[axis] + alignmentOffset,
          data: {
            [axis]: offset2,
            centerOffset: center - offset2 - alignmentOffset,
            ...shouldAddOffset && {
              alignmentOffset
            }
          },
          reset: shouldAddOffset
        };
      }
    });
    const flip$2 = function(options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      return {
        name: "flip",
        options: options2,
        async fn(state) {
          var _middlewareData$arrow, _middlewareData$flip;
          const {
            placement,
            middlewareData,
            rects,
            initialPlacement,
            platform: platform2,
            elements
          } = state;
          const {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = true,
            fallbackPlacements: specifiedFallbackPlacements,
            fallbackStrategy = "bestFit",
            fallbackAxisSideDirection = "none",
            flipAlignment = true,
            ...detectOverflowOptions
          } = evaluate(options2, state);
          if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
            return {};
          }
          const side = getSide(placement);
          const initialSideAxis = getSideAxis(initialPlacement);
          const isBasePlacement = getSide(initialPlacement) === initialPlacement;
          const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
          const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
          const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
          if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
            fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
          }
          const placements = [initialPlacement, ...fallbackPlacements];
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const overflows = [];
          let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
          if (checkMainAxis) {
            overflows.push(overflow[side]);
          }
          if (checkCrossAxis) {
            const sides2 = getAlignmentSides(placement, rects, rtl);
            overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
          }
          overflowsData = [...overflowsData, {
            placement,
            overflows
          }];
          if (!overflows.every((side2) => side2 <= 0)) {
            var _middlewareData$flip2, _overflowsData$filter;
            const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
            const nextPlacement = placements[nextIndex];
            if (nextPlacement) {
              var _overflowsData$;
              const ignoreCrossAxisOverflow = checkCrossAxis === "alignment" ? initialSideAxis !== getSideAxis(nextPlacement) : false;
              const hasInitialMainAxisOverflow = ((_overflowsData$ = overflowsData[0]) == null ? void 0 : _overflowsData$.overflows[0]) > 0;
              if (!ignoreCrossAxisOverflow || hasInitialMainAxisOverflow) {
                return {
                  data: {
                    index: nextIndex,
                    overflows: overflowsData
                  },
                  reset: {
                    placement: nextPlacement
                  }
                };
              }
            }
            let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a2, b) => a2.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
            if (!resetPlacement) {
              switch (fallbackStrategy) {
                case "bestFit": {
                  var _overflowsData$filter2;
                  const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                    if (hasFallbackAxisSideDirection) {
                      const currentSideAxis = getSideAxis(d.placement);
                      return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                      // reading directions favoring greater width.
                      currentSideAxis === "y";
                    }
                    return true;
                  }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b) => a2[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                  if (placement2) {
                    resetPlacement = placement2;
                  }
                  break;
                }
                case "initialPlacement":
                  resetPlacement = initialPlacement;
                  break;
              }
            }
            if (placement !== resetPlacement) {
              return {
                reset: {
                  placement: resetPlacement
                }
              };
            }
          }
          return {};
        }
      };
    };
    function getSideOffsets(overflow, rect) {
      return {
        top: overflow.top - rect.height,
        right: overflow.right - rect.width,
        bottom: overflow.bottom - rect.height,
        left: overflow.left - rect.width
      };
    }
    function isAnySideFullyClipped(overflow) {
      return sides.some((side) => overflow[side] >= 0);
    }
    const hide$2 = function(options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      return {
        name: "hide",
        options: options2,
        async fn(state) {
          const {
            rects
          } = state;
          const {
            strategy = "referenceHidden",
            ...detectOverflowOptions
          } = evaluate(options2, state);
          switch (strategy) {
            case "referenceHidden": {
              const overflow = await detectOverflow(state, {
                ...detectOverflowOptions,
                elementContext: "reference"
              });
              const offsets = getSideOffsets(overflow, rects.reference);
              return {
                data: {
                  referenceHiddenOffsets: offsets,
                  referenceHidden: isAnySideFullyClipped(offsets)
                }
              };
            }
            case "escaped": {
              const overflow = await detectOverflow(state, {
                ...detectOverflowOptions,
                altBoundary: true
              });
              const offsets = getSideOffsets(overflow, rects.floating);
              return {
                data: {
                  escapedOffsets: offsets,
                  escaped: isAnySideFullyClipped(offsets)
                }
              };
            }
            default: {
              return {};
            }
          }
        }
      };
    };
    async function convertValueToCoords(state, options2) {
      const {
        placement,
        platform: platform2,
        elements
      } = state;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isVertical = getSideAxis(placement) === "y";
      const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
      const crossAxisMulti = rtl && isVertical ? -1 : 1;
      const rawValue = evaluate(options2, state);
      let {
        mainAxis,
        crossAxis,
        alignmentAxis
      } = typeof rawValue === "number" ? {
        mainAxis: rawValue,
        crossAxis: 0,
        alignmentAxis: null
      } : {
        mainAxis: rawValue.mainAxis || 0,
        crossAxis: rawValue.crossAxis || 0,
        alignmentAxis: rawValue.alignmentAxis
      };
      if (alignment && typeof alignmentAxis === "number") {
        crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
      }
      return isVertical ? {
        x: crossAxis * crossAxisMulti,
        y: mainAxis * mainAxisMulti
      } : {
        x: mainAxis * mainAxisMulti,
        y: crossAxis * crossAxisMulti
      };
    }
    const offset$3 = function(options2) {
      if (options2 === void 0) {
        options2 = 0;
      }
      return {
        name: "offset",
        options: options2,
        async fn(state) {
          var _middlewareData$offse, _middlewareData$arrow;
          const {
            x: x2,
            y: y2,
            placement,
            middlewareData
          } = state;
          const diffCoords = await convertValueToCoords(state, options2);
          if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
            return {};
          }
          return {
            x: x2 + diffCoords.x,
            y: y2 + diffCoords.y,
            data: {
              ...diffCoords,
              placement
            }
          };
        }
      };
    };
    const shift$2 = function(options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      return {
        name: "shift",
        options: options2,
        async fn(state) {
          const {
            x: x2,
            y: y2,
            placement
          } = state;
          const {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = false,
            limiter = {
              fn: (_ref) => {
                let {
                  x: x3,
                  y: y3
                } = _ref;
                return {
                  x: x3,
                  y: y3
                };
              }
            },
            ...detectOverflowOptions
          } = evaluate(options2, state);
          const coords = {
            x: x2,
            y: y2
          };
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const crossAxis = getSideAxis(getSide(placement));
          const mainAxis = getOppositeAxis(crossAxis);
          let mainAxisCoord = coords[mainAxis];
          let crossAxisCoord = coords[crossAxis];
          if (checkMainAxis) {
            const minSide = mainAxis === "y" ? "top" : "left";
            const maxSide = mainAxis === "y" ? "bottom" : "right";
            const min2 = mainAxisCoord + overflow[minSide];
            const max2 = mainAxisCoord - overflow[maxSide];
            mainAxisCoord = clamp(min2, mainAxisCoord, max2);
          }
          if (checkCrossAxis) {
            const minSide = crossAxis === "y" ? "top" : "left";
            const maxSide = crossAxis === "y" ? "bottom" : "right";
            const min2 = crossAxisCoord + overflow[minSide];
            const max2 = crossAxisCoord - overflow[maxSide];
            crossAxisCoord = clamp(min2, crossAxisCoord, max2);
          }
          const limitedCoords = limiter.fn({
            ...state,
            [mainAxis]: mainAxisCoord,
            [crossAxis]: crossAxisCoord
          });
          return {
            ...limitedCoords,
            data: {
              x: limitedCoords.x - x2,
              y: limitedCoords.y - y2,
              enabled: {
                [mainAxis]: checkMainAxis,
                [crossAxis]: checkCrossAxis
              }
            }
          };
        }
      };
    };
    const limitShift$2 = function(options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      return {
        options: options2,
        fn(state) {
          const {
            x: x2,
            y: y2,
            placement,
            rects,
            middlewareData
          } = state;
          const {
            offset: offset2 = 0,
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = true
          } = evaluate(options2, state);
          const coords = {
            x: x2,
            y: y2
          };
          const crossAxis = getSideAxis(placement);
          const mainAxis = getOppositeAxis(crossAxis);
          let mainAxisCoord = coords[mainAxis];
          let crossAxisCoord = coords[crossAxis];
          const rawOffset = evaluate(offset2, state);
          const computedOffset = typeof rawOffset === "number" ? {
            mainAxis: rawOffset,
            crossAxis: 0
          } : {
            mainAxis: 0,
            crossAxis: 0,
            ...rawOffset
          };
          if (checkMainAxis) {
            const len = mainAxis === "y" ? "height" : "width";
            const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
            const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
            if (mainAxisCoord < limitMin) {
              mainAxisCoord = limitMin;
            } else if (mainAxisCoord > limitMax) {
              mainAxisCoord = limitMax;
            }
          }
          if (checkCrossAxis) {
            var _middlewareData$offse, _middlewareData$offse2;
            const len = mainAxis === "y" ? "width" : "height";
            const isOriginSide = ["top", "left"].includes(getSide(placement));
            const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
            const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
            if (crossAxisCoord < limitMin) {
              crossAxisCoord = limitMin;
            } else if (crossAxisCoord > limitMax) {
              crossAxisCoord = limitMax;
            }
          }
          return {
            [mainAxis]: mainAxisCoord,
            [crossAxis]: crossAxisCoord
          };
        }
      };
    };
    const size$2 = function(options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      return {
        name: "size",
        options: options2,
        async fn(state) {
          var _state$middlewareData, _state$middlewareData2;
          const {
            placement,
            rects,
            platform: platform2,
            elements
          } = state;
          const {
            apply = () => {
            },
            ...detectOverflowOptions
          } = evaluate(options2, state);
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const side = getSide(placement);
          const alignment = getAlignment(placement);
          const isYAxis = getSideAxis(placement) === "y";
          const {
            width,
            height
          } = rects.floating;
          let heightSide;
          let widthSide;
          if (side === "top" || side === "bottom") {
            heightSide = side;
            widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
          } else {
            widthSide = side;
            heightSide = alignment === "end" ? "top" : "bottom";
          }
          const maximumClippingHeight = height - overflow.top - overflow.bottom;
          const maximumClippingWidth = width - overflow.left - overflow.right;
          const overflowAvailableHeight = min$4(height - overflow[heightSide], maximumClippingHeight);
          const overflowAvailableWidth = min$4(width - overflow[widthSide], maximumClippingWidth);
          const noShift = !state.middlewareData.shift;
          let availableHeight = overflowAvailableHeight;
          let availableWidth = overflowAvailableWidth;
          if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
            availableWidth = maximumClippingWidth;
          }
          if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
            availableHeight = maximumClippingHeight;
          }
          if (noShift && !alignment) {
            const xMin = max$4(overflow.left, 0);
            const xMax = max$4(overflow.right, 0);
            const yMin = max$4(overflow.top, 0);
            const yMax = max$4(overflow.bottom, 0);
            if (isYAxis) {
              availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max$4(overflow.left, overflow.right));
            } else {
              availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max$4(overflow.top, overflow.bottom));
            }
          }
          await apply({
            ...state,
            availableWidth,
            availableHeight
          });
          const nextDimensions = await platform2.getDimensions(elements.floating);
          if (width !== nextDimensions.width || height !== nextDimensions.height) {
            return {
              reset: {
                rects: true
              }
            };
          }
          return {};
        }
      };
    };
    function hasWindow() {
      return typeof window !== "undefined";
    }
    function getNodeName(node) {
      if (isNode(node)) {
        return (node.nodeName || "").toLowerCase();
      }
      return "#document";
    }
    function getWindow(node) {
      var _node$ownerDocument;
      return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
    }
    function getDocumentElement(node) {
      var _ref;
      return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
    }
    function isNode(value) {
      if (!hasWindow()) {
        return false;
      }
      return value instanceof Node || value instanceof getWindow(value).Node;
    }
    function isElement(value) {
      if (!hasWindow()) {
        return false;
      }
      return value instanceof Element || value instanceof getWindow(value).Element;
    }
    function isHTMLElement$1(value) {
      if (!hasWindow()) {
        return false;
      }
      return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
    }
    function isShadowRoot(value) {
      if (!hasWindow() || typeof ShadowRoot === "undefined") {
        return false;
      }
      return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
    }
    function isOverflowElement(element) {
      const {
        overflow,
        overflowX,
        overflowY,
        display
      } = getComputedStyle$1(element);
      return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
    }
    function isTableElement(element) {
      return ["table", "td", "th"].includes(getNodeName(element));
    }
    function isTopLayer(element) {
      return [":popover-open", ":modal"].some((selector) => {
        try {
          return element.matches(selector);
        } catch (e) {
          return false;
        }
      });
    }
    function isContainingBlock(elementOrCss) {
      const webkit = isWebKit();
      const css = isElement(elementOrCss) ? getComputedStyle$1(elementOrCss) : elementOrCss;
      return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
    }
    function getContainingBlock(element) {
      let currentNode = getParentNode(element);
      while (isHTMLElement$1(currentNode) && !isLastTraversableNode(currentNode)) {
        if (isContainingBlock(currentNode)) {
          return currentNode;
        } else if (isTopLayer(currentNode)) {
          return null;
        }
        currentNode = getParentNode(currentNode);
      }
      return null;
    }
    function isWebKit() {
      if (typeof CSS === "undefined" || !CSS.supports) return false;
      return CSS.supports("-webkit-backdrop-filter", "none");
    }
    function isLastTraversableNode(node) {
      return ["html", "body", "#document"].includes(getNodeName(node));
    }
    function getComputedStyle$1(element) {
      return getWindow(element).getComputedStyle(element);
    }
    function getNodeScroll(element) {
      if (isElement(element)) {
        return {
          scrollLeft: element.scrollLeft,
          scrollTop: element.scrollTop
        };
      }
      return {
        scrollLeft: element.scrollX,
        scrollTop: element.scrollY
      };
    }
    function getParentNode(node) {
      if (getNodeName(node) === "html") {
        return node;
      }
      const result = (
        // Step into the shadow DOM of the parent of a slotted node.
        node.assignedSlot || // DOM Element detected.
        node.parentNode || // ShadowRoot detected.
        isShadowRoot(node) && node.host || // Fallback.
        getDocumentElement(node)
      );
      return isShadowRoot(result) ? result.host : result;
    }
    function getNearestOverflowAncestor(node) {
      const parentNode = getParentNode(node);
      if (isLastTraversableNode(parentNode)) {
        return node.ownerDocument ? node.ownerDocument.body : node.body;
      }
      if (isHTMLElement$1(parentNode) && isOverflowElement(parentNode)) {
        return parentNode;
      }
      return getNearestOverflowAncestor(parentNode);
    }
    function getOverflowAncestors(node, list, traverseIframes) {
      var _node$ownerDocument2;
      if (list === void 0) {
        list = [];
      }
      if (traverseIframes === void 0) {
        traverseIframes = true;
      }
      const scrollableAncestor = getNearestOverflowAncestor(node);
      const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
      const win = getWindow(scrollableAncestor);
      if (isBody) {
        const frameElement = getFrameElement(win);
        return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
      }
      return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
    }
    function getFrameElement(win) {
      return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
    }
    function getCssDimensions(element) {
      const css = getComputedStyle$1(element);
      let width = parseFloat(css.width) || 0;
      let height = parseFloat(css.height) || 0;
      const hasOffset = isHTMLElement$1(element);
      const offsetWidth = hasOffset ? element.offsetWidth : width;
      const offsetHeight = hasOffset ? element.offsetHeight : height;
      const shouldFallback = round$2(width) !== offsetWidth || round$2(height) !== offsetHeight;
      if (shouldFallback) {
        width = offsetWidth;
        height = offsetHeight;
      }
      return {
        width,
        height,
        $: shouldFallback
      };
    }
    function unwrapElement(element) {
      return !isElement(element) ? element.contextElement : element;
    }
    function getScale(element) {
      const domElement = unwrapElement(element);
      if (!isHTMLElement$1(domElement)) {
        return createCoords(1);
      }
      const rect = domElement.getBoundingClientRect();
      const {
        width,
        height,
        $: $2
      } = getCssDimensions(domElement);
      let x2 = ($2 ? round$2(rect.width) : rect.width) / width;
      let y2 = ($2 ? round$2(rect.height) : rect.height) / height;
      if (!x2 || !Number.isFinite(x2)) {
        x2 = 1;
      }
      if (!y2 || !Number.isFinite(y2)) {
        y2 = 1;
      }
      return {
        x: x2,
        y: y2
      };
    }
    const noOffsets = /* @__PURE__ */ createCoords(0);
    function getVisualOffsets(element) {
      const win = getWindow(element);
      if (!isWebKit() || !win.visualViewport) {
        return noOffsets;
      }
      return {
        x: win.visualViewport.offsetLeft,
        y: win.visualViewport.offsetTop
      };
    }
    function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
      if (isFixed === void 0) {
        isFixed = false;
      }
      if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
        return false;
      }
      return isFixed;
    }
    function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
      if (includeScale === void 0) {
        includeScale = false;
      }
      if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
      }
      const clientRect = element.getBoundingClientRect();
      const domElement = unwrapElement(element);
      let scale = createCoords(1);
      if (includeScale) {
        if (offsetParent) {
          if (isElement(offsetParent)) {
            scale = getScale(offsetParent);
          }
        } else {
          scale = getScale(element);
        }
      }
      const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
      let x2 = (clientRect.left + visualOffsets.x) / scale.x;
      let y2 = (clientRect.top + visualOffsets.y) / scale.y;
      let width = clientRect.width / scale.x;
      let height = clientRect.height / scale.y;
      if (domElement) {
        const win = getWindow(domElement);
        const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
        let currentWin = win;
        let currentIFrame = getFrameElement(currentWin);
        while (currentIFrame && offsetParent && offsetWin !== currentWin) {
          const iframeScale = getScale(currentIFrame);
          const iframeRect = currentIFrame.getBoundingClientRect();
          const css = getComputedStyle$1(currentIFrame);
          const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
          const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
          x2 *= iframeScale.x;
          y2 *= iframeScale.y;
          width *= iframeScale.x;
          height *= iframeScale.y;
          x2 += left;
          y2 += top;
          currentWin = getWindow(currentIFrame);
          currentIFrame = getFrameElement(currentWin);
        }
      }
      return rectToClientRect({
        width,
        height,
        x: x2,
        y: y2
      });
    }
    function getWindowScrollBarX(element, rect) {
      const leftScroll = getNodeScroll(element).scrollLeft;
      if (!rect) {
        return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
      }
      return rect.left + leftScroll;
    }
    function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
      if (ignoreScrollbarX === void 0) {
        ignoreScrollbarX = false;
      }
      const htmlRect = documentElement.getBoundingClientRect();
      const x2 = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
        // RTL <body> scrollbar.
        getWindowScrollBarX(documentElement, htmlRect)
      ));
      const y2 = htmlRect.top + scroll.scrollTop;
      return {
        x: x2,
        y: y2
      };
    }
    function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
      let {
        elements,
        rect,
        offsetParent,
        strategy
      } = _ref;
      const isFixed = strategy === "fixed";
      const documentElement = getDocumentElement(offsetParent);
      const topLayer = elements ? isTopLayer(elements.floating) : false;
      if (offsetParent === documentElement || topLayer && isFixed) {
        return rect;
      }
      let scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      let scale = createCoords(1);
      const offsets = createCoords(0);
      const isOffsetParentAnElement = isHTMLElement$1(offsetParent);
      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement$1(offsetParent)) {
          const offsetRect = getBoundingClientRect(offsetParent);
          scale = getScale(offsetParent);
          offsets.x = offsetRect.x + offsetParent.clientLeft;
          offsets.y = offsetRect.y + offsetParent.clientTop;
        }
      }
      const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
      return {
        width: rect.width * scale.x,
        height: rect.height * scale.y,
        x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
        y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
      };
    }
    function getClientRects(element) {
      return Array.from(element.getClientRects());
    }
    function getDocumentRect(element) {
      const html = getDocumentElement(element);
      const scroll = getNodeScroll(element);
      const body = element.ownerDocument.body;
      const width = max$4(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
      const height = max$4(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
      let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
      const y2 = -scroll.scrollTop;
      if (getComputedStyle$1(body).direction === "rtl") {
        x2 += max$4(html.clientWidth, body.clientWidth) - width;
      }
      return {
        width,
        height,
        x: x2,
        y: y2
      };
    }
    function getViewportRect(element, strategy) {
      const win = getWindow(element);
      const html = getDocumentElement(element);
      const visualViewport = win.visualViewport;
      let width = html.clientWidth;
      let height = html.clientHeight;
      let x2 = 0;
      let y2 = 0;
      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        const visualViewportBased = isWebKit();
        if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
          x2 = visualViewport.offsetLeft;
          y2 = visualViewport.offsetTop;
        }
      }
      return {
        width,
        height,
        x: x2,
        y: y2
      };
    }
    function getInnerBoundingClientRect(element, strategy) {
      const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
      const top = clientRect.top + element.clientTop;
      const left = clientRect.left + element.clientLeft;
      const scale = isHTMLElement$1(element) ? getScale(element) : createCoords(1);
      const width = element.clientWidth * scale.x;
      const height = element.clientHeight * scale.y;
      const x2 = left * scale.x;
      const y2 = top * scale.y;
      return {
        width,
        height,
        x: x2,
        y: y2
      };
    }
    function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
      let rect;
      if (clippingAncestor === "viewport") {
        rect = getViewportRect(element, strategy);
      } else if (clippingAncestor === "document") {
        rect = getDocumentRect(getDocumentElement(element));
      } else if (isElement(clippingAncestor)) {
        rect = getInnerBoundingClientRect(clippingAncestor, strategy);
      } else {
        const visualOffsets = getVisualOffsets(element);
        rect = {
          x: clippingAncestor.x - visualOffsets.x,
          y: clippingAncestor.y - visualOffsets.y,
          width: clippingAncestor.width,
          height: clippingAncestor.height
        };
      }
      return rectToClientRect(rect);
    }
    function hasFixedPositionAncestor(element, stopNode) {
      const parentNode = getParentNode(element);
      if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
        return false;
      }
      return getComputedStyle$1(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
    }
    function getClippingElementAncestors(element, cache) {
      const cachedResult = cache.get(element);
      if (cachedResult) {
        return cachedResult;
      }
      let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
      let currentContainingBlockComputedStyle = null;
      const elementIsFixed = getComputedStyle$1(element).position === "fixed";
      let currentNode = elementIsFixed ? getParentNode(element) : element;
      while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
        const computedStyle = getComputedStyle$1(currentNode);
        const currentNodeIsContaining = isContainingBlock(currentNode);
        if (!currentNodeIsContaining && computedStyle.position === "fixed") {
          currentContainingBlockComputedStyle = null;
        }
        const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
        if (shouldDropCurrentNode) {
          result = result.filter((ancestor) => ancestor !== currentNode);
        } else {
          currentContainingBlockComputedStyle = computedStyle;
        }
        currentNode = getParentNode(currentNode);
      }
      cache.set(element, result);
      return result;
    }
    function getClippingRect(_ref) {
      let {
        element,
        boundary,
        rootBoundary,
        strategy
      } = _ref;
      const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
      const clippingAncestors = [...elementClippingAncestors, rootBoundary];
      const firstClippingAncestor = clippingAncestors[0];
      const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
        const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
        accRect.top = max$4(rect.top, accRect.top);
        accRect.right = min$4(rect.right, accRect.right);
        accRect.bottom = min$4(rect.bottom, accRect.bottom);
        accRect.left = max$4(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
      return {
        width: clippingRect.right - clippingRect.left,
        height: clippingRect.bottom - clippingRect.top,
        x: clippingRect.left,
        y: clippingRect.top
      };
    }
    function getDimensions(element) {
      const {
        width,
        height
      } = getCssDimensions(element);
      return {
        width,
        height
      };
    }
    function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
      const isOffsetParentAnElement = isHTMLElement$1(offsetParent);
      const documentElement = getDocumentElement(offsetParent);
      const isFixed = strategy === "fixed";
      const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
      let scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      const offsets = createCoords(0);
      function setLeftRTLScrollbarOffset() {
        offsets.x = getWindowScrollBarX(documentElement);
      }
      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isOffsetParentAnElement) {
          const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
          offsets.x = offsetRect.x + offsetParent.clientLeft;
          offsets.y = offsetRect.y + offsetParent.clientTop;
        } else if (documentElement) {
          setLeftRTLScrollbarOffset();
        }
      }
      if (isFixed && !isOffsetParentAnElement && documentElement) {
        setLeftRTLScrollbarOffset();
      }
      const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
      const x2 = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
      const y2 = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
      return {
        x: x2,
        y: y2,
        width: rect.width,
        height: rect.height
      };
    }
    function isStaticPositioned(element) {
      return getComputedStyle$1(element).position === "static";
    }
    function getTrueOffsetParent(element, polyfill) {
      if (!isHTMLElement$1(element) || getComputedStyle$1(element).position === "fixed") {
        return null;
      }
      if (polyfill) {
        return polyfill(element);
      }
      let rawOffsetParent = element.offsetParent;
      if (getDocumentElement(element) === rawOffsetParent) {
        rawOffsetParent = rawOffsetParent.ownerDocument.body;
      }
      return rawOffsetParent;
    }
    function getOffsetParent(element, polyfill) {
      const win = getWindow(element);
      if (isTopLayer(element)) {
        return win;
      }
      if (!isHTMLElement$1(element)) {
        let svgOffsetParent = getParentNode(element);
        while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
          if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
            return svgOffsetParent;
          }
          svgOffsetParent = getParentNode(svgOffsetParent);
        }
        return win;
      }
      let offsetParent = getTrueOffsetParent(element, polyfill);
      while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
        offsetParent = getTrueOffsetParent(offsetParent, polyfill);
      }
      if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
        return win;
      }
      return offsetParent || getContainingBlock(element) || win;
    }
    const getElementRects = async function(data) {
      const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
      const getDimensionsFn = this.getDimensions;
      const floatingDimensions = await getDimensionsFn(data.floating);
      return {
        reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
        floating: {
          x: 0,
          y: 0,
          width: floatingDimensions.width,
          height: floatingDimensions.height
        }
      };
    };
    function isRTL(element) {
      return getComputedStyle$1(element).direction === "rtl";
    }
    const platform = {
      convertOffsetParentRelativeRectToViewportRelativeRect,
      getDocumentElement,
      getClippingRect,
      getOffsetParent,
      getElementRects,
      getClientRects,
      getDimensions,
      getScale,
      isElement,
      isRTL
    };
    function rectsAreEqual(a2, b) {
      return a2.x === b.x && a2.y === b.y && a2.width === b.width && a2.height === b.height;
    }
    function observeMove(element, onMove) {
      let io = null;
      let timeoutId;
      const root = getDocumentElement(element);
      function cleanup() {
        var _io;
        clearTimeout(timeoutId);
        (_io = io) == null || _io.disconnect();
        io = null;
      }
      function refresh(skip, threshold2) {
        if (skip === void 0) {
          skip = false;
        }
        if (threshold2 === void 0) {
          threshold2 = 1;
        }
        cleanup();
        const elementRectForRootMargin = element.getBoundingClientRect();
        const {
          left,
          top,
          width,
          height
        } = elementRectForRootMargin;
        if (!skip) {
          onMove();
        }
        if (!width || !height) {
          return;
        }
        const insetTop = floor(top);
        const insetRight = floor(root.clientWidth - (left + width));
        const insetBottom = floor(root.clientHeight - (top + height));
        const insetLeft = floor(left);
        const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
        const options2 = {
          rootMargin,
          threshold: max$4(0, min$4(1, threshold2)) || 1
        };
        let isFirstUpdate = true;
        function handleObserve(entries) {
          const ratio = entries[0].intersectionRatio;
          if (ratio !== threshold2) {
            if (!isFirstUpdate) {
              return refresh();
            }
            if (!ratio) {
              timeoutId = setTimeout(() => {
                refresh(false, 1e-7);
              }, 1e3);
            } else {
              refresh(false, ratio);
            }
          }
          if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
            refresh();
          }
          isFirstUpdate = false;
        }
        try {
          io = new IntersectionObserver(handleObserve, {
            ...options2,
            // Handle <iframe>s
            root: root.ownerDocument
          });
        } catch (_e3) {
          io = new IntersectionObserver(handleObserve, options2);
        }
        io.observe(element);
      }
      refresh(true);
      return cleanup;
    }
    function autoUpdate(reference, floating, update, options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      const {
        ancestorScroll = true,
        ancestorResize = true,
        elementResize = typeof ResizeObserver === "function",
        layoutShift = typeof IntersectionObserver === "function",
        animationFrame = false
      } = options2;
      const referenceEl = unwrapElement(reference);
      const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.addEventListener("scroll", update, {
          passive: true
        });
        ancestorResize && ancestor.addEventListener("resize", update);
      });
      const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
      let reobserveFrame = -1;
      let resizeObserver = null;
      if (elementResize) {
        resizeObserver = new ResizeObserver((_ref) => {
          let [firstEntry] = _ref;
          if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
            resizeObserver.unobserve(floating);
            cancelAnimationFrame(reobserveFrame);
            reobserveFrame = requestAnimationFrame(() => {
              var _resizeObserver;
              (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
            });
          }
          update();
        });
        if (referenceEl && !animationFrame) {
          resizeObserver.observe(referenceEl);
        }
        resizeObserver.observe(floating);
      }
      let frameId;
      let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
      if (animationFrame) {
        frameLoop();
      }
      function frameLoop() {
        const nextRefRect = getBoundingClientRect(reference);
        if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
          update();
        }
        prevRefRect = nextRefRect;
        frameId = requestAnimationFrame(frameLoop);
      }
      update();
      return () => {
        var _resizeObserver2;
        ancestors.forEach((ancestor) => {
          ancestorScroll && ancestor.removeEventListener("scroll", update);
          ancestorResize && ancestor.removeEventListener("resize", update);
        });
        cleanupIo == null || cleanupIo();
        (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
        resizeObserver = null;
        if (animationFrame) {
          cancelAnimationFrame(frameId);
        }
      };
    }
    const offset$2 = offset$3;
    const shift$1 = shift$2;
    const flip$1 = flip$2;
    const size$1 = size$2;
    const hide$1 = hide$2;
    const arrow$2 = arrow$3;
    const limitShift$1 = limitShift$2;
    const computePosition = (reference, floating, options2) => {
      const cache = /* @__PURE__ */ new Map();
      const mergedOptions = {
        platform,
        ...options2
      };
      const platformWithCache = {
        ...mergedOptions.platform,
        _c: cache
      };
      return computePosition$1(reference, floating, {
        ...mergedOptions,
        platform: platformWithCache
      });
    };
    var index = typeof document !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
    function deepEqual$2(a2, b) {
      if (a2 === b) {
        return true;
      }
      if (typeof a2 !== typeof b) {
        return false;
      }
      if (typeof a2 === "function" && a2.toString() === b.toString()) {
        return true;
      }
      let length;
      let i2;
      let keys2;
      if (a2 && b && typeof a2 === "object") {
        if (Array.isArray(a2)) {
          length = a2.length;
          if (length !== b.length) return false;
          for (i2 = length; i2-- !== 0; ) {
            if (!deepEqual$2(a2[i2], b[i2])) {
              return false;
            }
          }
          return true;
        }
        keys2 = Object.keys(a2);
        length = keys2.length;
        if (length !== Object.keys(b).length) {
          return false;
        }
        for (i2 = length; i2-- !== 0; ) {
          if (!{}.hasOwnProperty.call(b, keys2[i2])) {
            return false;
          }
        }
        for (i2 = length; i2-- !== 0; ) {
          const key = keys2[i2];
          if (key === "_owner" && a2.$$typeof) {
            continue;
          }
          if (!deepEqual$2(a2[key], b[key])) {
            return false;
          }
        }
        return true;
      }
      return a2 !== a2 && b !== b;
    }
    function getDPR(element) {
      if (typeof window === "undefined") {
        return 1;
      }
      const win = element.ownerDocument.defaultView || window;
      return win.devicePixelRatio || 1;
    }
    function roundByDPR(element, value) {
      const dpr = getDPR(element);
      return Math.round(value * dpr) / dpr;
    }
    function useLatestRef(value) {
      const ref = reactExports.useRef(value);
      index(() => {
        ref.current = value;
      });
      return ref;
    }
    function useFloating(options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      const {
        placement = "bottom",
        strategy = "absolute",
        middleware = [],
        platform: platform2,
        elements: {
          reference: externalReference,
          floating: externalFloating
        } = {},
        transform = true,
        whileElementsMounted,
        open
      } = options2;
      const [data, setData] = reactExports.useState({
        x: 0,
        y: 0,
        strategy,
        placement,
        middlewareData: {},
        isPositioned: false
      });
      const [latestMiddleware, setLatestMiddleware] = reactExports.useState(middleware);
      if (!deepEqual$2(latestMiddleware, middleware)) {
        setLatestMiddleware(middleware);
      }
      const [_reference, _setReference] = reactExports.useState(null);
      const [_floating, _setFloating] = reactExports.useState(null);
      const setReference = reactExports.useCallback((node) => {
        if (node !== referenceRef.current) {
          referenceRef.current = node;
          _setReference(node);
        }
      }, []);
      const setFloating = reactExports.useCallback((node) => {
        if (node !== floatingRef.current) {
          floatingRef.current = node;
          _setFloating(node);
        }
      }, []);
      const referenceEl = externalReference || _reference;
      const floatingEl = externalFloating || _floating;
      const referenceRef = reactExports.useRef(null);
      const floatingRef = reactExports.useRef(null);
      const dataRef = reactExports.useRef(data);
      const hasWhileElementsMounted = whileElementsMounted != null;
      const whileElementsMountedRef = useLatestRef(whileElementsMounted);
      const platformRef = useLatestRef(platform2);
      const openRef = useLatestRef(open);
      const update = reactExports.useCallback(() => {
        if (!referenceRef.current || !floatingRef.current) {
          return;
        }
        const config2 = {
          placement,
          strategy,
          middleware: latestMiddleware
        };
        if (platformRef.current) {
          config2.platform = platformRef.current;
        }
        computePosition(referenceRef.current, floatingRef.current, config2).then((data2) => {
          const fullData = {
            ...data2,
            // The floating element's position may be recomputed while it's closed
            // but still mounted (such as when transitioning out). To ensure
            // `isPositioned` will be `false` initially on the next open, avoid
            // setting it to `true` when `open === false` (must be specified).
            isPositioned: openRef.current !== false
          };
          if (isMountedRef.current && !deepEqual$2(dataRef.current, fullData)) {
            dataRef.current = fullData;
            reactDomExports.flushSync(() => {
              setData(fullData);
            });
          }
        });
      }, [latestMiddleware, placement, strategy, platformRef, openRef]);
      index(() => {
        if (open === false && dataRef.current.isPositioned) {
          dataRef.current.isPositioned = false;
          setData((data2) => ({
            ...data2,
            isPositioned: false
          }));
        }
      }, [open]);
      const isMountedRef = reactExports.useRef(false);
      index(() => {
        isMountedRef.current = true;
        return () => {
          isMountedRef.current = false;
        };
      }, []);
      index(() => {
        if (referenceEl) referenceRef.current = referenceEl;
        if (floatingEl) floatingRef.current = floatingEl;
        if (referenceEl && floatingEl) {
          if (whileElementsMountedRef.current) {
            return whileElementsMountedRef.current(referenceEl, floatingEl, update);
          }
          update();
        }
      }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
      const refs = reactExports.useMemo(() => ({
        reference: referenceRef,
        floating: floatingRef,
        setReference,
        setFloating
      }), [setReference, setFloating]);
      const elements = reactExports.useMemo(() => ({
        reference: referenceEl,
        floating: floatingEl
      }), [referenceEl, floatingEl]);
      const floatingStyles = reactExports.useMemo(() => {
        const initialStyles = {
          position: strategy,
          left: 0,
          top: 0
        };
        if (!elements.floating) {
          return initialStyles;
        }
        const x2 = roundByDPR(elements.floating, data.x);
        const y2 = roundByDPR(elements.floating, data.y);
        if (transform) {
          return {
            ...initialStyles,
            transform: "translate(" + x2 + "px, " + y2 + "px)",
            ...getDPR(elements.floating) >= 1.5 && {
              willChange: "transform"
            }
          };
        }
        return {
          position: strategy,
          left: x2,
          top: y2
        };
      }, [strategy, transform, elements.floating, data.x, data.y]);
      return reactExports.useMemo(() => ({
        ...data,
        update,
        refs,
        elements,
        floatingStyles
      }), [data, update, refs, elements, floatingStyles]);
    }
    const arrow$1 = (options2) => {
      function isRef(value) {
        return {}.hasOwnProperty.call(value, "current");
      }
      return {
        name: "arrow",
        options: options2,
        fn(state) {
          const {
            element,
            padding
          } = typeof options2 === "function" ? options2(state) : options2;
          if (element && isRef(element)) {
            if (element.current != null) {
              return arrow$2({
                element: element.current,
                padding
              }).fn(state);
            }
            return {};
          }
          if (element) {
            return arrow$2({
              element,
              padding
            }).fn(state);
          }
          return {};
        }
      };
    };
    const offset$1 = (options2, deps) => ({
      ...offset$2(options2),
      options: [options2, deps]
    });
    const shift = (options2, deps) => ({
      ...shift$1(options2),
      options: [options2, deps]
    });
    const limitShift = (options2, deps) => ({
      ...limitShift$1(options2),
      options: [options2, deps]
    });
    const flip = (options2, deps) => ({
      ...flip$1(options2),
      options: [options2, deps]
    });
    const size = (options2, deps) => ({
      ...size$1(options2),
      options: [options2, deps]
    });
    const hide = (options2, deps) => ({
      ...hide$1(options2),
      options: [options2, deps]
    });
    const arrow = (options2, deps) => ({
      ...arrow$1(options2),
      options: [options2, deps]
    });
    var NAME$2 = "Arrow";
    var Arrow$1 = reactExports.forwardRef((props, forwardedRef) => {
      const { children, width = 10, height = 5, ...arrowProps } = props;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Primitive.svg,
        {
          ...arrowProps,
          ref: forwardedRef,
          width,
          height,
          viewBox: "0 0 30 10",
          preserveAspectRatio: "none",
          children: props.asChild ? children : /* @__PURE__ */ jsxRuntimeExports.jsx("polygon", { points: "0,0 30,0 15,10" })
        }
      );
    });
    Arrow$1.displayName = NAME$2;
    var Root$3 = Arrow$1;
    function useSize(element) {
      const [size2, setSize] = reactExports.useState(void 0);
      useLayoutEffect2(() => {
        if (element) {
          setSize({ width: element.offsetWidth, height: element.offsetHeight });
          const resizeObserver = new ResizeObserver((entries) => {
            if (!Array.isArray(entries)) {
              return;
            }
            if (!entries.length) {
              return;
            }
            const entry = entries[0];
            let width;
            let height;
            if ("borderBoxSize" in entry) {
              const borderSizeEntry = entry["borderBoxSize"];
              const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
              width = borderSize["inlineSize"];
              height = borderSize["blockSize"];
            } else {
              width = element.offsetWidth;
              height = element.offsetHeight;
            }
            setSize({ width, height });
          });
          resizeObserver.observe(element, { box: "border-box" });
          return () => resizeObserver.unobserve(element);
        } else {
          setSize(void 0);
        }
      }, [element]);
      return size2;
    }
    var POPPER_NAME = "Popper";
    var [createPopperContext, createPopperScope] = createContextScope(POPPER_NAME);
    var [PopperProvider, usePopperContext] = createPopperContext(POPPER_NAME);
    var Popper = (props) => {
      const { __scopePopper, children } = props;
      const [anchor, setAnchor] = reactExports.useState(null);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PopperProvider, { scope: __scopePopper, anchor, onAnchorChange: setAnchor, children });
    };
    Popper.displayName = POPPER_NAME;
    var ANCHOR_NAME$2 = "PopperAnchor";
    var PopperAnchor = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopePopper, virtualRef, ...anchorProps } = props;
        const context = usePopperContext(ANCHOR_NAME$2, __scopePopper);
        const ref = reactExports.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, ref);
        reactExports.useEffect(() => {
          context.onAnchorChange((virtualRef == null ? void 0 : virtualRef.current) || ref.current);
        });
        return virtualRef ? null : /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, { ...anchorProps, ref: composedRefs });
      }
    );
    PopperAnchor.displayName = ANCHOR_NAME$2;
    var CONTENT_NAME$4 = "PopperContent";
    var [PopperContentProvider, useContentContext] = createPopperContext(CONTENT_NAME$4);
    var PopperContent = reactExports.forwardRef(
      (props, forwardedRef) => {
        var _a2, _b2, _c2, _d2, _e3, _f2;
        const {
          __scopePopper,
          side = "bottom",
          sideOffset = 0,
          align = "center",
          alignOffset = 0,
          arrowPadding = 0,
          avoidCollisions = true,
          collisionBoundary = [],
          collisionPadding: collisionPaddingProp = 0,
          sticky = "partial",
          hideWhenDetached = false,
          updatePositionStrategy = "optimized",
          onPlaced,
          ...contentProps
        } = props;
        const context = usePopperContext(CONTENT_NAME$4, __scopePopper);
        const [content, setContent] = reactExports.useState(null);
        const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));
        const [arrow$12, setArrow] = reactExports.useState(null);
        const arrowSize = useSize(arrow$12);
        const arrowWidth = (arrowSize == null ? void 0 : arrowSize.width) ?? 0;
        const arrowHeight = (arrowSize == null ? void 0 : arrowSize.height) ?? 0;
        const desiredPlacement = side + (align !== "center" ? "-" + align : "");
        const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : { top: 0, right: 0, bottom: 0, left: 0, ...collisionPaddingProp };
        const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [collisionBoundary];
        const hasExplicitBoundaries = boundary.length > 0;
        const detectOverflowOptions = {
          padding: collisionPadding,
          boundary: boundary.filter(isNotNull),
          // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
          altBoundary: hasExplicitBoundaries
        };
        const { refs, floatingStyles, placement, isPositioned, middlewareData } = useFloating({
          // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
          strategy: "fixed",
          placement: desiredPlacement,
          whileElementsMounted: (...args) => {
            const cleanup = autoUpdate(...args, {
              animationFrame: updatePositionStrategy === "always"
            });
            return cleanup;
          },
          elements: {
            reference: context.anchor
          },
          middleware: [
            offset$1({ mainAxis: sideOffset + arrowHeight, alignmentAxis: alignOffset }),
            avoidCollisions && shift({
              mainAxis: true,
              crossAxis: false,
              limiter: sticky === "partial" ? limitShift() : void 0,
              ...detectOverflowOptions
            }),
            avoidCollisions && flip({ ...detectOverflowOptions }),
            size({
              ...detectOverflowOptions,
              apply: ({ elements, rects, availableWidth, availableHeight }) => {
                const { width: anchorWidth, height: anchorHeight } = rects.reference;
                const contentStyle = elements.floating.style;
                contentStyle.setProperty("--radix-popper-available-width", `${availableWidth}px`);
                contentStyle.setProperty("--radix-popper-available-height", `${availableHeight}px`);
                contentStyle.setProperty("--radix-popper-anchor-width", `${anchorWidth}px`);
                contentStyle.setProperty("--radix-popper-anchor-height", `${anchorHeight}px`);
              }
            }),
            arrow$12 && arrow({ element: arrow$12, padding: arrowPadding }),
            transformOrigin({ arrowWidth, arrowHeight }),
            hideWhenDetached && hide({ strategy: "referenceHidden", ...detectOverflowOptions })
          ]
        });
        const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
        const handlePlaced = useCallbackRef$1(onPlaced);
        useLayoutEffect2(() => {
          if (isPositioned) {
            handlePlaced == null ? void 0 : handlePlaced();
          }
        }, [isPositioned, handlePlaced]);
        const arrowX = (_a2 = middlewareData.arrow) == null ? void 0 : _a2.x;
        const arrowY = (_b2 = middlewareData.arrow) == null ? void 0 : _b2.y;
        const cannotCenterArrow = ((_c2 = middlewareData.arrow) == null ? void 0 : _c2.centerOffset) !== 0;
        const [contentZIndex, setContentZIndex] = reactExports.useState();
        useLayoutEffect2(() => {
          if (content) setContentZIndex(window.getComputedStyle(content).zIndex);
        }, [content]);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            ref: refs.setFloating,
            "data-radix-popper-content-wrapper": "",
            style: {
              ...floatingStyles,
              transform: isPositioned ? floatingStyles.transform : "translate(0, -200%)",
              // keep off the page when measuring
              minWidth: "max-content",
              zIndex: contentZIndex,
              ["--radix-popper-transform-origin"]: [
                (_d2 = middlewareData.transformOrigin) == null ? void 0 : _d2.x,
                (_e3 = middlewareData.transformOrigin) == null ? void 0 : _e3.y
              ].join(" "),
              // hide the content if using the hide middleware and should be hidden
              // set visibility to hidden and disable pointer events so the UI behaves
              // as if the PopperContent isn't there at all
              ...((_f2 = middlewareData.hide) == null ? void 0 : _f2.referenceHidden) && {
                visibility: "hidden",
                pointerEvents: "none"
              }
            },
            dir: props.dir,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              PopperContentProvider,
              {
                scope: __scopePopper,
                placedSide,
                onArrowChange: setArrow,
                arrowX,
                arrowY,
                shouldHideArrow: cannotCenterArrow,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Primitive.div,
                  {
                    "data-side": placedSide,
                    "data-align": placedAlign,
                    ...contentProps,
                    ref: composedRefs,
                    style: {
                      ...contentProps.style,
                      // if the PopperContent hasn't been placed yet (not all measurements done)
                      // we prevent animations so that users's animation don't kick in too early referring wrong sides
                      animation: !isPositioned ? "none" : void 0
                    }
                  }
                )
              }
            )
          }
        );
      }
    );
    PopperContent.displayName = CONTENT_NAME$4;
    var ARROW_NAME$4 = "PopperArrow";
    var OPPOSITE_SIDE = {
      top: "bottom",
      right: "left",
      bottom: "top",
      left: "right"
    };
    var PopperArrow = reactExports.forwardRef(function PopperArrow2(props, forwardedRef) {
      const { __scopePopper, ...arrowProps } = props;
      const contentContext = useContentContext(ARROW_NAME$4, __scopePopper);
      const baseSide = OPPOSITE_SIDE[contentContext.placedSide];
      return (
        // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)
        // doesn't report size as we'd expect on SVG elements.
        // it reports their bounding box which is effectively the largest path inside the SVG.
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          "span",
          {
            ref: contentContext.onArrowChange,
            style: {
              position: "absolute",
              left: contentContext.arrowX,
              top: contentContext.arrowY,
              [baseSide]: 0,
              transformOrigin: {
                top: "",
                right: "0 0",
                bottom: "center 0",
                left: "100% 0"
              }[contentContext.placedSide],
              transform: {
                top: "translateY(100%)",
                right: "translateY(50%) rotate(90deg) translateX(-50%)",
                bottom: `rotate(180deg)`,
                left: "translateY(50%) rotate(-90deg) translateX(50%)"
              }[contentContext.placedSide],
              visibility: contentContext.shouldHideArrow ? "hidden" : void 0
            },
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Root$3,
              {
                ...arrowProps,
                ref: forwardedRef,
                style: {
                  ...arrowProps.style,
                  // ensures the element can be measured correctly (mostly for if SVG)
                  display: "block"
                }
              }
            )
          }
        )
      );
    });
    PopperArrow.displayName = ARROW_NAME$4;
    function isNotNull(value) {
      return value !== null;
    }
    var transformOrigin = (options2) => ({
      name: "transformOrigin",
      options: options2,
      fn(data) {
        var _a2, _b2, _c2;
        const { placement, rects, middlewareData } = data;
        const cannotCenterArrow = ((_a2 = middlewareData.arrow) == null ? void 0 : _a2.centerOffset) !== 0;
        const isArrowHidden = cannotCenterArrow;
        const arrowWidth = isArrowHidden ? 0 : options2.arrowWidth;
        const arrowHeight = isArrowHidden ? 0 : options2.arrowHeight;
        const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
        const noArrowAlign = { start: "0%", center: "50%", end: "100%" }[placedAlign];
        const arrowXCenter = (((_b2 = middlewareData.arrow) == null ? void 0 : _b2.x) ?? 0) + arrowWidth / 2;
        const arrowYCenter = (((_c2 = middlewareData.arrow) == null ? void 0 : _c2.y) ?? 0) + arrowHeight / 2;
        let x2 = "";
        let y2 = "";
        if (placedSide === "bottom") {
          x2 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
          y2 = `${-arrowHeight}px`;
        } else if (placedSide === "top") {
          x2 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
          y2 = `${rects.floating.height + arrowHeight}px`;
        } else if (placedSide === "right") {
          x2 = `${-arrowHeight}px`;
          y2 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
        } else if (placedSide === "left") {
          x2 = `${rects.floating.width + arrowHeight}px`;
          y2 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
        }
        return { data: { x: x2, y: y2 } };
      }
    });
    function getSideAndAlignFromPlacement(placement) {
      const [side, align = "center"] = placement.split("-");
      return [side, align];
    }
    var Root2$2 = Popper;
    var Anchor = PopperAnchor;
    var Content = PopperContent;
    var Arrow = PopperArrow;
    var VISUALLY_HIDDEN_STYLES = Object.freeze({
      // See: https://github.com/twbs/bootstrap/blob/main/scss/mixins/_visually-hidden.scss
      position: "absolute",
      border: 0,
      width: 1,
      height: 1,
      padding: 0,
      margin: -1,
      overflow: "hidden",
      clip: "rect(0, 0, 0, 0)",
      whiteSpace: "nowrap",
      wordWrap: "normal"
    });
    var NAME$1 = "VisuallyHidden";
    var VisuallyHidden = reactExports.forwardRef(
      (props, forwardedRef) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Primitive.span,
          {
            ...props,
            ref: forwardedRef,
            style: { ...VISUALLY_HIDDEN_STYLES, ...props.style }
          }
        );
      }
    );
    VisuallyHidden.displayName = NAME$1;
    var Root$2 = VisuallyHidden;
    var [createTooltipContext, createTooltipScope] = createContextScope("Tooltip", [
      createPopperScope
    ]);
    var usePopperScope$2 = createPopperScope();
    var PROVIDER_NAME = "TooltipProvider";
    var DEFAULT_DELAY_DURATION = 700;
    var TOOLTIP_OPEN = "tooltip.open";
    var [TooltipProviderContextProvider, useTooltipProviderContext] = createTooltipContext(PROVIDER_NAME);
    var TooltipProvider$1 = (props) => {
      const {
        __scopeTooltip,
        delayDuration = DEFAULT_DELAY_DURATION,
        skipDelayDuration = 300,
        disableHoverableContent = false,
        children
      } = props;
      const isOpenDelayedRef = reactExports.useRef(true);
      const isPointerInTransitRef = reactExports.useRef(false);
      const skipDelayTimerRef = reactExports.useRef(0);
      reactExports.useEffect(() => {
        const skipDelayTimer = skipDelayTimerRef.current;
        return () => window.clearTimeout(skipDelayTimer);
      }, []);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        TooltipProviderContextProvider,
        {
          scope: __scopeTooltip,
          isOpenDelayedRef,
          delayDuration,
          onOpen: reactExports.useCallback(() => {
            window.clearTimeout(skipDelayTimerRef.current);
            isOpenDelayedRef.current = false;
          }, []),
          onClose: reactExports.useCallback(() => {
            window.clearTimeout(skipDelayTimerRef.current);
            skipDelayTimerRef.current = window.setTimeout(
              () => isOpenDelayedRef.current = true,
              skipDelayDuration
            );
          }, [skipDelayDuration]),
          isPointerInTransitRef,
          onPointerInTransitChange: reactExports.useCallback((inTransit) => {
            isPointerInTransitRef.current = inTransit;
          }, []),
          disableHoverableContent,
          children
        }
      );
    };
    TooltipProvider$1.displayName = PROVIDER_NAME;
    var TOOLTIP_NAME = "Tooltip";
    var [TooltipContextProvider, useTooltipContext] = createTooltipContext(TOOLTIP_NAME);
    var Tooltip$2 = (props) => {
      const {
        __scopeTooltip,
        children,
        open: openProp,
        defaultOpen,
        onOpenChange,
        disableHoverableContent: disableHoverableContentProp,
        delayDuration: delayDurationProp
      } = props;
      const providerContext = useTooltipProviderContext(TOOLTIP_NAME, props.__scopeTooltip);
      const popperScope = usePopperScope$2(__scopeTooltip);
      const [trigger, setTrigger] = reactExports.useState(null);
      const contentId = useId();
      const openTimerRef = reactExports.useRef(0);
      const disableHoverableContent = disableHoverableContentProp ?? providerContext.disableHoverableContent;
      const delayDuration = delayDurationProp ?? providerContext.delayDuration;
      const wasOpenDelayedRef = reactExports.useRef(false);
      const [open, setOpen] = useControllableState({
        prop: openProp,
        defaultProp: defaultOpen ?? false,
        onChange: (open2) => {
          if (open2) {
            providerContext.onOpen();
            document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN));
          } else {
            providerContext.onClose();
          }
          onOpenChange == null ? void 0 : onOpenChange(open2);
        },
        caller: TOOLTIP_NAME
      });
      const stateAttribute = reactExports.useMemo(() => {
        return open ? wasOpenDelayedRef.current ? "delayed-open" : "instant-open" : "closed";
      }, [open]);
      const handleOpen = reactExports.useCallback(() => {
        window.clearTimeout(openTimerRef.current);
        openTimerRef.current = 0;
        wasOpenDelayedRef.current = false;
        setOpen(true);
      }, [setOpen]);
      const handleClose = reactExports.useCallback(() => {
        window.clearTimeout(openTimerRef.current);
        openTimerRef.current = 0;
        setOpen(false);
      }, [setOpen]);
      const handleDelayedOpen = reactExports.useCallback(() => {
        window.clearTimeout(openTimerRef.current);
        openTimerRef.current = window.setTimeout(() => {
          wasOpenDelayedRef.current = true;
          setOpen(true);
          openTimerRef.current = 0;
        }, delayDuration);
      }, [delayDuration, setOpen]);
      reactExports.useEffect(() => {
        return () => {
          if (openTimerRef.current) {
            window.clearTimeout(openTimerRef.current);
            openTimerRef.current = 0;
          }
        };
      }, []);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Root2$2, { ...popperScope, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        TooltipContextProvider,
        {
          scope: __scopeTooltip,
          contentId,
          open,
          stateAttribute,
          trigger,
          onTriggerChange: setTrigger,
          onTriggerEnter: reactExports.useCallback(() => {
            if (providerContext.isOpenDelayedRef.current) handleDelayedOpen();
            else handleOpen();
          }, [providerContext.isOpenDelayedRef, handleDelayedOpen, handleOpen]),
          onTriggerLeave: reactExports.useCallback(() => {
            if (disableHoverableContent) {
              handleClose();
            } else {
              window.clearTimeout(openTimerRef.current);
              openTimerRef.current = 0;
            }
          }, [handleClose, disableHoverableContent]),
          onOpen: handleOpen,
          onClose: handleClose,
          disableHoverableContent,
          children
        }
      ) });
    };
    Tooltip$2.displayName = TOOLTIP_NAME;
    var TRIGGER_NAME$2 = "TooltipTrigger";
    var TooltipTrigger$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeTooltip, ...triggerProps } = props;
        const context = useTooltipContext(TRIGGER_NAME$2, __scopeTooltip);
        const providerContext = useTooltipProviderContext(TRIGGER_NAME$2, __scopeTooltip);
        const popperScope = usePopperScope$2(__scopeTooltip);
        const ref = reactExports.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, ref, context.onTriggerChange);
        const isPointerDownRef = reactExports.useRef(false);
        const hasPointerMoveOpenedRef = reactExports.useRef(false);
        const handlePointerUp = reactExports.useCallback(() => isPointerDownRef.current = false, []);
        reactExports.useEffect(() => {
          return () => document.removeEventListener("pointerup", handlePointerUp);
        }, [handlePointerUp]);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Anchor, { asChild: true, ...popperScope, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Primitive.button,
          {
            "aria-describedby": context.open ? context.contentId : void 0,
            "data-state": context.stateAttribute,
            ...triggerProps,
            ref: composedRefs,
            onPointerMove: composeEventHandlers(props.onPointerMove, (event) => {
              if (event.pointerType === "touch") return;
              if (!hasPointerMoveOpenedRef.current && !providerContext.isPointerInTransitRef.current) {
                context.onTriggerEnter();
                hasPointerMoveOpenedRef.current = true;
              }
            }),
            onPointerLeave: composeEventHandlers(props.onPointerLeave, () => {
              context.onTriggerLeave();
              hasPointerMoveOpenedRef.current = false;
            }),
            onPointerDown: composeEventHandlers(props.onPointerDown, () => {
              if (context.open) {
                context.onClose();
              }
              isPointerDownRef.current = true;
              document.addEventListener("pointerup", handlePointerUp, { once: true });
            }),
            onFocus: composeEventHandlers(props.onFocus, () => {
              if (!isPointerDownRef.current) context.onOpen();
            }),
            onBlur: composeEventHandlers(props.onBlur, context.onClose),
            onClick: composeEventHandlers(props.onClick, context.onClose)
          }
        ) });
      }
    );
    TooltipTrigger$1.displayName = TRIGGER_NAME$2;
    var PORTAL_NAME$3 = "TooltipPortal";
    var [PortalProvider$2, usePortalContext$2] = createTooltipContext(PORTAL_NAME$3, {
      forceMount: void 0
    });
    var TooltipPortal = (props) => {
      const { __scopeTooltip, forceMount, children, container } = props;
      const context = useTooltipContext(PORTAL_NAME$3, __scopeTooltip);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PortalProvider$2, { scope: __scopeTooltip, forceMount, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$4, { asChild: true, container, children }) }) });
    };
    TooltipPortal.displayName = PORTAL_NAME$3;
    var CONTENT_NAME$3 = "TooltipContent";
    var TooltipContent$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const portalContext = usePortalContext$2(CONTENT_NAME$3, props.__scopeTooltip);
        const { forceMount = portalContext.forceMount, side = "top", ...contentProps } = props;
        const context = useTooltipContext(CONTENT_NAME$3, props.__scopeTooltip);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, { present: forceMount || context.open, children: context.disableHoverableContent ? /* @__PURE__ */ jsxRuntimeExports.jsx(TooltipContentImpl, { side, ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ jsxRuntimeExports.jsx(TooltipContentHoverable, { side, ...contentProps, ref: forwardedRef }) });
      }
    );
    var TooltipContentHoverable = reactExports.forwardRef((props, forwardedRef) => {
      const context = useTooltipContext(CONTENT_NAME$3, props.__scopeTooltip);
      const providerContext = useTooltipProviderContext(CONTENT_NAME$3, props.__scopeTooltip);
      const ref = reactExports.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref);
      const [pointerGraceArea, setPointerGraceArea] = reactExports.useState(null);
      const { trigger, onClose } = context;
      const content = ref.current;
      const { onPointerInTransitChange } = providerContext;
      const handleRemoveGraceArea = reactExports.useCallback(() => {
        setPointerGraceArea(null);
        onPointerInTransitChange(false);
      }, [onPointerInTransitChange]);
      const handleCreateGraceArea = reactExports.useCallback(
        (event, hoverTarget) => {
          const currentTarget = event.currentTarget;
          const exitPoint = { x: event.clientX, y: event.clientY };
          const exitSide = getExitSideFromRect(exitPoint, currentTarget.getBoundingClientRect());
          const paddedExitPoints = getPaddedExitPoints(exitPoint, exitSide);
          const hoverTargetPoints = getPointsFromRect(hoverTarget.getBoundingClientRect());
          const graceArea = getHull([...paddedExitPoints, ...hoverTargetPoints]);
          setPointerGraceArea(graceArea);
          onPointerInTransitChange(true);
        },
        [onPointerInTransitChange]
      );
      reactExports.useEffect(() => {
        return () => handleRemoveGraceArea();
      }, [handleRemoveGraceArea]);
      reactExports.useEffect(() => {
        if (trigger && content) {
          const handleTriggerLeave = (event) => handleCreateGraceArea(event, content);
          const handleContentLeave = (event) => handleCreateGraceArea(event, trigger);
          trigger.addEventListener("pointerleave", handleTriggerLeave);
          content.addEventListener("pointerleave", handleContentLeave);
          return () => {
            trigger.removeEventListener("pointerleave", handleTriggerLeave);
            content.removeEventListener("pointerleave", handleContentLeave);
          };
        }
      }, [trigger, content, handleCreateGraceArea, handleRemoveGraceArea]);
      reactExports.useEffect(() => {
        if (pointerGraceArea) {
          const handleTrackPointerGrace = (event) => {
            const target = event.target;
            const pointerPosition = { x: event.clientX, y: event.clientY };
            const hasEnteredTarget = (trigger == null ? void 0 : trigger.contains(target)) || (content == null ? void 0 : content.contains(target));
            const isPointerOutsideGraceArea = !isPointInPolygon$1(pointerPosition, pointerGraceArea);
            if (hasEnteredTarget) {
              handleRemoveGraceArea();
            } else if (isPointerOutsideGraceArea) {
              handleRemoveGraceArea();
              onClose();
            }
          };
          document.addEventListener("pointermove", handleTrackPointerGrace);
          return () => document.removeEventListener("pointermove", handleTrackPointerGrace);
        }
      }, [trigger, content, pointerGraceArea, onClose, handleRemoveGraceArea]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(TooltipContentImpl, { ...props, ref: composedRefs });
    });
    var [VisuallyHiddenContentContextProvider, useVisuallyHiddenContentContext] = createTooltipContext(TOOLTIP_NAME, { isInside: false });
    var Slottable = /* @__PURE__ */ createSlottable("TooltipContent");
    var TooltipContentImpl = reactExports.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopeTooltip,
          children,
          "aria-label": ariaLabel,
          onEscapeKeyDown,
          onPointerDownOutside,
          ...contentProps
        } = props;
        const context = useTooltipContext(CONTENT_NAME$3, __scopeTooltip);
        const popperScope = usePopperScope$2(__scopeTooltip);
        const { onClose } = context;
        reactExports.useEffect(() => {
          document.addEventListener(TOOLTIP_OPEN, onClose);
          return () => document.removeEventListener(TOOLTIP_OPEN, onClose);
        }, [onClose]);
        reactExports.useEffect(() => {
          if (context.trigger) {
            const handleScroll2 = (event) => {
              const target = event.target;
              if (target == null ? void 0 : target.contains(context.trigger)) onClose();
            };
            window.addEventListener("scroll", handleScroll2, { capture: true });
            return () => window.removeEventListener("scroll", handleScroll2, { capture: true });
          }
        }, [context.trigger, onClose]);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          DismissableLayer,
          {
            asChild: true,
            disableOutsidePointerEvents: false,
            onEscapeKeyDown,
            onPointerDownOutside,
            onFocusOutside: (event) => event.preventDefault(),
            onDismiss: onClose,
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              Content,
              {
                "data-state": context.stateAttribute,
                ...popperScope,
                ...contentProps,
                ref: forwardedRef,
                style: {
                  ...contentProps.style,
                  // re-namespace exposed content custom properties
                  ...{
                    "--radix-tooltip-content-transform-origin": "var(--radix-popper-transform-origin)",
                    "--radix-tooltip-content-available-width": "var(--radix-popper-available-width)",
                    "--radix-tooltip-content-available-height": "var(--radix-popper-available-height)",
                    "--radix-tooltip-trigger-width": "var(--radix-popper-anchor-width)",
                    "--radix-tooltip-trigger-height": "var(--radix-popper-anchor-height)"
                  }
                },
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Slottable, { children }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(VisuallyHiddenContentContextProvider, { scope: __scopeTooltip, isInside: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Root$2, { id: context.contentId, role: "tooltip", children: ariaLabel || children }) })
                ]
              }
            )
          }
        );
      }
    );
    TooltipContent$1.displayName = CONTENT_NAME$3;
    var ARROW_NAME$3 = "TooltipArrow";
    var TooltipArrow = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeTooltip, ...arrowProps } = props;
        const popperScope = usePopperScope$2(__scopeTooltip);
        const visuallyHiddenContentContext = useVisuallyHiddenContentContext(
          ARROW_NAME$3,
          __scopeTooltip
        );
        return visuallyHiddenContentContext.isInside ? null : /* @__PURE__ */ jsxRuntimeExports.jsx(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
      }
    );
    TooltipArrow.displayName = ARROW_NAME$3;
    function getExitSideFromRect(point2, rect) {
      const top = Math.abs(rect.top - point2.y);
      const bottom = Math.abs(rect.bottom - point2.y);
      const right = Math.abs(rect.right - point2.x);
      const left = Math.abs(rect.left - point2.x);
      switch (Math.min(top, bottom, right, left)) {
        case left:
          return "left";
        case right:
          return "right";
        case top:
          return "top";
        case bottom:
          return "bottom";
        default:
          throw new Error("unreachable");
      }
    }
    function getPaddedExitPoints(exitPoint, exitSide, padding = 5) {
      const paddedExitPoints = [];
      switch (exitSide) {
        case "top":
          paddedExitPoints.push(
            { x: exitPoint.x - padding, y: exitPoint.y + padding },
            { x: exitPoint.x + padding, y: exitPoint.y + padding }
          );
          break;
        case "bottom":
          paddedExitPoints.push(
            { x: exitPoint.x - padding, y: exitPoint.y - padding },
            { x: exitPoint.x + padding, y: exitPoint.y - padding }
          );
          break;
        case "left":
          paddedExitPoints.push(
            { x: exitPoint.x + padding, y: exitPoint.y - padding },
            { x: exitPoint.x + padding, y: exitPoint.y + padding }
          );
          break;
        case "right":
          paddedExitPoints.push(
            { x: exitPoint.x - padding, y: exitPoint.y - padding },
            { x: exitPoint.x - padding, y: exitPoint.y + padding }
          );
          break;
      }
      return paddedExitPoints;
    }
    function getPointsFromRect(rect) {
      const { top, right, bottom, left } = rect;
      return [
        { x: left, y: top },
        { x: right, y: top },
        { x: right, y: bottom },
        { x: left, y: bottom }
      ];
    }
    function isPointInPolygon$1(point2, polygon) {
      const { x: x2, y: y2 } = point2;
      let inside = false;
      for (let i2 = 0, j = polygon.length - 1; i2 < polygon.length; j = i2++) {
        const ii = polygon[i2];
        const jj = polygon[j];
        const xi = ii.x;
        const yi = ii.y;
        const xj = jj.x;
        const yj = jj.y;
        const intersect = yi > y2 !== yj > y2 && x2 < (xj - xi) * (y2 - yi) / (yj - yi) + xi;
        if (intersect) inside = !inside;
      }
      return inside;
    }
    function getHull(points) {
      const newPoints = points.slice();
      newPoints.sort((a2, b) => {
        if (a2.x < b.x) return -1;
        else if (a2.x > b.x) return 1;
        else if (a2.y < b.y) return -1;
        else if (a2.y > b.y) return 1;
        else return 0;
      });
      return getHullPresorted(newPoints);
    }
    function getHullPresorted(points) {
      if (points.length <= 1) return points.slice();
      const upperHull = [];
      for (let i2 = 0; i2 < points.length; i2++) {
        const p2 = points[i2];
        while (upperHull.length >= 2) {
          const q = upperHull[upperHull.length - 1];
          const r2 = upperHull[upperHull.length - 2];
          if ((q.x - r2.x) * (p2.y - r2.y) >= (q.y - r2.y) * (p2.x - r2.x)) upperHull.pop();
          else break;
        }
        upperHull.push(p2);
      }
      upperHull.pop();
      const lowerHull = [];
      for (let i2 = points.length - 1; i2 >= 0; i2--) {
        const p2 = points[i2];
        while (lowerHull.length >= 2) {
          const q = lowerHull[lowerHull.length - 1];
          const r2 = lowerHull[lowerHull.length - 2];
          if ((q.x - r2.x) * (p2.y - r2.y) >= (q.y - r2.y) * (p2.x - r2.x)) lowerHull.pop();
          else break;
        }
        lowerHull.push(p2);
      }
      lowerHull.pop();
      if (upperHull.length === 1 && lowerHull.length === 1 && upperHull[0].x === lowerHull[0].x && upperHull[0].y === lowerHull[0].y) {
        return upperHull;
      } else {
        return upperHull.concat(lowerHull);
      }
    }
    var Provider$1 = TooltipProvider$1;
    var Root3$1 = Tooltip$2;
    var Trigger$2 = TooltipTrigger$1;
    var Portal$2 = TooltipPortal;
    var Content2$3 = TooltipContent$1;
    var Arrow2$1 = TooltipArrow;
    function TooltipProvider({
      delayDuration = 0,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Provider$1,
        {
          "data-slot": "tooltip-provider",
          delayDuration,
          ...props
        }
      );
    }
    function Tooltip$1({
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(TooltipProvider, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Root3$1, { "data-slot": "tooltip", ...props }) });
    }
    function TooltipTrigger({
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Trigger$2, { "data-slot": "tooltip-trigger", ...props });
    }
    function TooltipContent({
      className,
      sideOffset = 0,
      children,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$2, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        Content2$3,
        {
          "data-slot": "tooltip-content",
          sideOffset,
          className: cn$1(
            "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
            className
          ),
          ...props,
          children: [
            children,
            /* @__PURE__ */ jsxRuntimeExports.jsx(Arrow2$1, { className: "bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" })
          ]
        }
      ) });
    }
    const SIDEBAR_COOKIE_NAME = "sidebar_state";
    const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
    const SIDEBAR_WIDTH = "16rem";
    const SIDEBAR_WIDTH_MOBILE = "18rem";
    const SIDEBAR_WIDTH_ICON = "3rem";
    const SIDEBAR_KEYBOARD_SHORTCUT = "b";
    const SidebarContext = reactExports.createContext(null);
    function useSidebar() {
      const context = reactExports.useContext(SidebarContext);
      if (!context) {
        throw new Error("useSidebar must be used within a SidebarProvider.");
      }
      return context;
    }
    function SidebarProvider({
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    }) {
      const isMobile = useIsMobile();
      const [openMobile, setOpenMobile] = reactExports.useState(false);
      const [_open, _setOpen] = reactExports.useState(defaultOpen);
      const open = openProp ?? _open;
      const setOpen = reactExports.useCallback(
        (value) => {
          const openState = typeof value === "function" ? value(open) : value;
          if (setOpenProp) {
            setOpenProp(openState);
          } else {
            _setOpen(openState);
          }
          document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
        },
        [setOpenProp, open]
      );
      const toggleSidebar = reactExports.useCallback(() => {
        return isMobile ? setOpenMobile((open2) => !open2) : setOpen((open2) => !open2);
      }, [isMobile, setOpen, setOpenMobile]);
      reactExports.useEffect(() => {
        const handleKeyDown = (event) => {
          if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
            event.preventDefault();
            toggleSidebar();
          }
        };
        window.addEventListener("keydown", handleKeyDown);
        return () => window.removeEventListener("keydown", handleKeyDown);
      }, [toggleSidebar]);
      const state = open ? "expanded" : "collapsed";
      const contextValue = reactExports.useMemo(
        () => ({
          state,
          open,
          setOpen,
          isMobile,
          openMobile,
          setOpenMobile,
          toggleSidebar
        }),
        [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
      );
      return /* @__PURE__ */ jsxRuntimeExports.jsx(SidebarContext.Provider, { value: contextValue, children: /* @__PURE__ */ jsxRuntimeExports.jsx(TooltipProvider, { delayDuration: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          "data-slot": "sidebar-wrapper",
          style: {
            "--sidebar-width": SIDEBAR_WIDTH,
            "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
            ...style
          },
          className: cn$1(
            "group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full",
            className
          ),
          ...props,
          children
        }
      ) }) });
    }
    function Sidebar({
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    }) {
      const { isMobile, state, openMobile, setOpenMobile } = useSidebar();
      if (collapsible === "none") {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            "data-slot": "sidebar",
            className: cn$1(
              "bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col",
              className
            ),
            ...props,
            children
          }
        );
      }
      if (isMobile) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Sheet, { open: openMobile, onOpenChange: setOpenMobile, ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          SheetContent,
          {
            "data-sidebar": "sidebar",
            "data-slot": "sidebar",
            "data-mobile": "true",
            className: "bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden",
            style: {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE
            },
            side,
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(SheetHeader, { className: "sr-only", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(SheetTitle, { children: "Sidebar" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(SheetDescription, { children: "Displays the mobile sidebar." })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex h-full w-full flex-col", children })
            ]
          }
        ) });
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          className: "group peer text-sidebar-foreground hidden md:block",
          "data-state": state,
          "data-collapsible": state === "collapsed" ? collapsible : "",
          "data-variant": variant,
          "data-side": side,
          "data-slot": "sidebar",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                "data-slot": "sidebar-gap",
                className: cn$1(
                  "relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear",
                  "group-data-[collapsible=offcanvas]:w-0",
                  "group-data-[side=right]:rotate-180",
                  variant === "floating" || variant === "inset" ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]" : "group-data-[collapsible=icon]:w-(--sidebar-width-icon)"
                )
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                "data-slot": "sidebar-container",
                className: cn$1(
                  "fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex",
                  side === "left" ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]" : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
                  // Adjust the padding for floating and inset variants.
                  variant === "floating" || variant === "inset" ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]" : "group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l",
                  className
                ),
                ...props,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "div",
                  {
                    "data-sidebar": "sidebar",
                    "data-slot": "sidebar-inner",
                    className: "bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm",
                    children
                  }
                )
              }
            )
          ]
        }
      );
    }
    function SidebarTrigger({
      className,
      onClick,
      ...props
    }) {
      const { toggleSidebar } = useSidebar();
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(
        Button,
        {
          "data-sidebar": "trigger",
          "data-slot": "sidebar-trigger",
          variant: "ghost",
          size: "icon",
          className: cn$1("size-7", className),
          onClick: (event) => {
            onClick == null ? void 0 : onClick(event);
            toggleSidebar();
          },
          ...props,
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(PanelLeft, {}),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "sr-only", children: "Toggle Sidebar" })
          ]
        }
      );
    }
    function SidebarInset({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "main",
        {
          "data-slot": "sidebar-inset",
          className: cn$1(
            "bg-background relative flex w-full flex-1 flex-col",
            "md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2",
            className
          ),
          ...props
        }
      );
    }
    function SidebarHeader({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          "data-slot": "sidebar-header",
          "data-sidebar": "header",
          className: cn$1("flex flex-col gap-2 p-2", className),
          ...props
        }
      );
    }
    function SidebarFooter({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          "data-slot": "sidebar-footer",
          "data-sidebar": "footer",
          className: cn$1("flex flex-col gap-2 p-2", className),
          ...props
        }
      );
    }
    function SidebarContent({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          "data-slot": "sidebar-content",
          "data-sidebar": "content",
          className: cn$1(
            "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
            className
          ),
          ...props
        }
      );
    }
    function SidebarGroup({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          "data-slot": "sidebar-group",
          "data-sidebar": "group",
          className: cn$1("relative flex w-full min-w-0 flex-col p-2", className),
          ...props
        }
      );
    }
    function SidebarGroupLabel({
      className,
      asChild = false,
      ...props
    }) {
      const Comp = asChild ? Slot$3 : "div";
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Comp,
        {
          "data-slot": "sidebar-group-label",
          "data-sidebar": "group-label",
          className: cn$1(
            "text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
            "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
            className
          ),
          ...props
        }
      );
    }
    function SidebarGroupContent({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          "data-slot": "sidebar-group-content",
          "data-sidebar": "group-content",
          className: cn$1("w-full text-sm", className),
          ...props
        }
      );
    }
    function SidebarMenu({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "ul",
        {
          "data-slot": "sidebar-menu",
          "data-sidebar": "menu",
          className: cn$1("flex w-full min-w-0 flex-col gap-1", className),
          ...props
        }
      );
    }
    function SidebarMenuItem({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "li",
        {
          "data-slot": "sidebar-menu-item",
          "data-sidebar": "menu-item",
          className: cn$1("group/menu-item relative", className),
          ...props
        }
      );
    }
    const sidebarMenuButtonVariants = cva(
      "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
      {
        variants: {
          variant: {
            default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
            outline: "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]"
          },
          size: {
            default: "h-8 text-sm",
            sm: "h-7 text-xs",
            lg: "h-12 text-sm group-data-[collapsible=icon]:p-0!"
          }
        },
        defaultVariants: {
          variant: "default",
          size: "default"
        }
      }
    );
    function SidebarMenuButton({
      asChild = false,
      isActive = false,
      variant = "default",
      size: size2 = "default",
      tooltip,
      className,
      ...props
    }) {
      const Comp = asChild ? Slot$3 : "button";
      const { isMobile, state } = useSidebar();
      const button = /* @__PURE__ */ jsxRuntimeExports.jsx(
        Comp,
        {
          "data-slot": "sidebar-menu-button",
          "data-sidebar": "menu-button",
          "data-size": size2,
          "data-active": isActive,
          className: cn$1(sidebarMenuButtonVariants({ variant, size: size2 }), className),
          ...props
        }
      );
      if (!tooltip) {
        return button;
      }
      if (typeof tooltip === "string") {
        tooltip = {
          children: tooltip
        };
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(Tooltip$1, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(TooltipTrigger, { asChild: true, children: button }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          TooltipContent,
          {
            side: "right",
            align: "center",
            hidden: state !== "collapsed" || isMobile,
            ...tooltip
          }
        )
      ] });
    }
    const defineMenus = (menus2) => menus2;
    const menus = defineMenus([
      {
        title: "Dashboard",
        path: "/"
      },
      {
        title: "Pengaduan",
        path: "/complaint"
      }
    ]);
    const createStoreImpl = (createState) => {
      let state;
      const listeners = /* @__PURE__ */ new Set();
      const setState = (partial, replace) => {
        const nextState = typeof partial === "function" ? partial(state) : partial;
        if (!Object.is(nextState, state)) {
          const previousState = state;
          state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
          listeners.forEach((listener) => listener(state, previousState));
        }
      };
      const getState2 = () => state;
      const getInitialState = () => initialState;
      const subscribe = (listener) => {
        listeners.add(listener);
        return () => listeners.delete(listener);
      };
      const api = { setState, getState: getState2, getInitialState, subscribe };
      const initialState = state = createState(setState, getState2, api);
      return api;
    };
    const createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;
    const identity$5 = (arg) => arg;
    function useStore(api, selector = identity$5) {
      const slice = React.useSyncExternalStore(
        api.subscribe,
        () => selector(api.getState()),
        () => selector(api.getInitialState())
      );
      React.useDebugValue(slice);
      return slice;
    }
    const createImpl = (createState) => {
      const api = createStore(createState);
      const useBoundStore = (selector) => useStore(api, selector);
      Object.assign(useBoundStore, api);
      return useBoundStore;
    };
    const create = (createState) => createImpl;
    const useLayoutState = create()((set2) => ({
      page: {
        title: "Dashboard",
        active: "Dashboard"
      },
      set: (page) => set2({ page })
    }));
    const useUserState = create()((set2) => ({
      user: null,
      set: (user) => set2({ user }),
      unset: () => set2({ user: null })
    }));
    var Subscribable = class {
      constructor() {
        this.listeners = /* @__PURE__ */ new Set();
        this.subscribe = this.subscribe.bind(this);
      }
      subscribe(listener) {
        this.listeners.add(listener);
        this.onSubscribe();
        return () => {
          this.listeners.delete(listener);
          this.onUnsubscribe();
        };
      }
      hasListeners() {
        return this.listeners.size > 0;
      }
      onSubscribe() {
      }
      onUnsubscribe() {
      }
    };
    var isServer = typeof window === "undefined" || "Deno" in globalThis;
    function noop$1() {
    }
    function functionalUpdate$1(updater, input) {
      return typeof updater === "function" ? updater(input) : updater;
    }
    function isValidTimeout(value) {
      return typeof value === "number" && value >= 0 && value !== Infinity;
    }
    function timeUntilStale(updatedAt, staleTime) {
      return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
    }
    function resolveStaleTime(staleTime, query) {
      return typeof staleTime === "function" ? staleTime(query) : staleTime;
    }
    function resolveEnabled(enabled, query) {
      return typeof enabled === "function" ? enabled(query) : enabled;
    }
    function matchQuery(filters, query) {
      const {
        type = "all",
        exact,
        fetchStatus,
        predicate,
        queryKey,
        stale
      } = filters;
      if (queryKey) {
        if (exact) {
          if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
            return false;
          }
        } else if (!partialMatchKey(query.queryKey, queryKey)) {
          return false;
        }
      }
      if (type !== "all") {
        const isActive = query.isActive();
        if (type === "active" && !isActive) {
          return false;
        }
        if (type === "inactive" && isActive) {
          return false;
        }
      }
      if (typeof stale === "boolean" && query.isStale() !== stale) {
        return false;
      }
      if (fetchStatus && fetchStatus !== query.state.fetchStatus) {
        return false;
      }
      if (predicate && !predicate(query)) {
        return false;
      }
      return true;
    }
    function matchMutation(filters, mutation) {
      const { exact, status, predicate, mutationKey } = filters;
      if (mutationKey) {
        if (!mutation.options.mutationKey) {
          return false;
        }
        if (exact) {
          if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {
            return false;
          }
        } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
          return false;
        }
      }
      if (status && mutation.state.status !== status) {
        return false;
      }
      if (predicate && !predicate(mutation)) {
        return false;
      }
      return true;
    }
    function hashQueryKeyByOptions(queryKey, options2) {
      const hashFn = (options2 == null ? void 0 : options2.queryKeyHashFn) || hashKey;
      return hashFn(queryKey);
    }
    function hashKey(queryKey) {
      return JSON.stringify(
        queryKey,
        (_, val) => isPlainObject$2(val) ? Object.keys(val).sort().reduce((result, key) => {
          result[key] = val[key];
          return result;
        }, {}) : val
      );
    }
    function partialMatchKey(a2, b) {
      if (a2 === b) {
        return true;
      }
      if (typeof a2 !== typeof b) {
        return false;
      }
      if (a2 && b && typeof a2 === "object" && typeof b === "object") {
        return Object.keys(b).every((key) => partialMatchKey(a2[key], b[key]));
      }
      return false;
    }
    function replaceEqualDeep(a2, b) {
      if (a2 === b) {
        return a2;
      }
      const array2 = isPlainArray(a2) && isPlainArray(b);
      if (array2 || isPlainObject$2(a2) && isPlainObject$2(b)) {
        const aItems = array2 ? a2 : Object.keys(a2);
        const aSize = aItems.length;
        const bItems = array2 ? b : Object.keys(b);
        const bSize = bItems.length;
        const copy2 = array2 ? [] : {};
        let equalItems = 0;
        for (let i2 = 0; i2 < bSize; i2++) {
          const key = array2 ? i2 : bItems[i2];
          if ((!array2 && aItems.includes(key) || array2) && a2[key] === void 0 && b[key] === void 0) {
            copy2[key] = void 0;
            equalItems++;
          } else {
            copy2[key] = replaceEqualDeep(a2[key], b[key]);
            if (copy2[key] === a2[key] && a2[key] !== void 0) {
              equalItems++;
            }
          }
        }
        return aSize === bSize && equalItems === aSize ? a2 : copy2;
      }
      return b;
    }
    function shallowEqualObjects(a2, b) {
      if (!b || Object.keys(a2).length !== Object.keys(b).length) {
        return false;
      }
      for (const key in a2) {
        if (a2[key] !== b[key]) {
          return false;
        }
      }
      return true;
    }
    function isPlainArray(value) {
      return Array.isArray(value) && value.length === Object.keys(value).length;
    }
    function isPlainObject$2(o2) {
      if (!hasObjectPrototype(o2)) {
        return false;
      }
      const ctor = o2.constructor;
      if (ctor === void 0) {
        return true;
      }
      const prot = ctor.prototype;
      if (!hasObjectPrototype(prot)) {
        return false;
      }
      if (!prot.hasOwnProperty("isPrototypeOf")) {
        return false;
      }
      if (Object.getPrototypeOf(o2) !== Object.prototype) {
        return false;
      }
      return true;
    }
    function hasObjectPrototype(o2) {
      return Object.prototype.toString.call(o2) === "[object Object]";
    }
    function sleep(timeout) {
      return new Promise((resolve) => {
        setTimeout(resolve, timeout);
      });
    }
    function replaceData(prevData, data, options2) {
      if (typeof options2.structuralSharing === "function") {
        return options2.structuralSharing(prevData, data);
      } else if (options2.structuralSharing !== false) {
        return replaceEqualDeep(prevData, data);
      }
      return data;
    }
    function addToEnd(items, item, max2 = 0) {
      const newItems = [...items, item];
      return max2 && newItems.length > max2 ? newItems.slice(1) : newItems;
    }
    function addToStart(items, item, max2 = 0) {
      const newItems = [item, ...items];
      return max2 && newItems.length > max2 ? newItems.slice(0, -1) : newItems;
    }
    var skipToken = Symbol();
    function ensureQueryFn(options2, fetchOptions) {
      if (!options2.queryFn && (fetchOptions == null ? void 0 : fetchOptions.initialPromise)) {
        return () => fetchOptions.initialPromise;
      }
      if (!options2.queryFn || options2.queryFn === skipToken) {
        return () => Promise.reject(new Error(`Missing queryFn: '${options2.queryHash}'`));
      }
      return options2.queryFn;
    }
    function shouldThrowError(throwOnError, params) {
      if (typeof throwOnError === "function") {
        return throwOnError(...params);
      }
      return !!throwOnError;
    }
    var FocusManager = (_a = class extends Subscribable {
      constructor() {
        super();
        __privateAdd(this, _focused);
        __privateAdd(this, _cleanup);
        __privateAdd(this, _setup);
        __privateSet(this, _setup, (onFocus) => {
          if (!isServer && window.addEventListener) {
            const listener = () => onFocus();
            window.addEventListener("visibilitychange", listener, false);
            return () => {
              window.removeEventListener("visibilitychange", listener);
            };
          }
          return;
        });
      }
      onSubscribe() {
        if (!__privateGet(this, _cleanup)) {
          this.setEventListener(__privateGet(this, _setup));
        }
      }
      onUnsubscribe() {
        var _a2;
        if (!this.hasListeners()) {
          (_a2 = __privateGet(this, _cleanup)) == null ? void 0 : _a2.call(this);
          __privateSet(this, _cleanup, void 0);
        }
      }
      setEventListener(setup) {
        var _a2;
        __privateSet(this, _setup, setup);
        (_a2 = __privateGet(this, _cleanup)) == null ? void 0 : _a2.call(this);
        __privateSet(this, _cleanup, setup((focused) => {
          if (typeof focused === "boolean") {
            this.setFocused(focused);
          } else {
            this.onFocus();
          }
        }));
      }
      setFocused(focused) {
        const changed = __privateGet(this, _focused) !== focused;
        if (changed) {
          __privateSet(this, _focused, focused);
          this.onFocus();
        }
      }
      onFocus() {
        const isFocused = this.isFocused();
        this.listeners.forEach((listener) => {
          listener(isFocused);
        });
      }
      isFocused() {
        var _a2;
        if (typeof __privateGet(this, _focused) === "boolean") {
          return __privateGet(this, _focused);
        }
        return ((_a2 = globalThis.document) == null ? void 0 : _a2.visibilityState) !== "hidden";
      }
    }, _focused = new WeakMap(), _cleanup = new WeakMap(), _setup = new WeakMap(), _a);
    var focusManager = new FocusManager();
    var OnlineManager = (_b = class extends Subscribable {
      constructor() {
        super();
        __privateAdd(this, _online, true);
        __privateAdd(this, _cleanup2);
        __privateAdd(this, _setup2);
        __privateSet(this, _setup2, (onOnline) => {
          if (!isServer && window.addEventListener) {
            const onlineListener = () => onOnline(true);
            const offlineListener = () => onOnline(false);
            window.addEventListener("online", onlineListener, false);
            window.addEventListener("offline", offlineListener, false);
            return () => {
              window.removeEventListener("online", onlineListener);
              window.removeEventListener("offline", offlineListener);
            };
          }
          return;
        });
      }
      onSubscribe() {
        if (!__privateGet(this, _cleanup2)) {
          this.setEventListener(__privateGet(this, _setup2));
        }
      }
      onUnsubscribe() {
        var _a2;
        if (!this.hasListeners()) {
          (_a2 = __privateGet(this, _cleanup2)) == null ? void 0 : _a2.call(this);
          __privateSet(this, _cleanup2, void 0);
        }
      }
      setEventListener(setup) {
        var _a2;
        __privateSet(this, _setup2, setup);
        (_a2 = __privateGet(this, _cleanup2)) == null ? void 0 : _a2.call(this);
        __privateSet(this, _cleanup2, setup(this.setOnline.bind(this)));
      }
      setOnline(online) {
        const changed = __privateGet(this, _online) !== online;
        if (changed) {
          __privateSet(this, _online, online);
          this.listeners.forEach((listener) => {
            listener(online);
          });
        }
      }
      isOnline() {
        return __privateGet(this, _online);
      }
    }, _online = new WeakMap(), _cleanup2 = new WeakMap(), _setup2 = new WeakMap(), _b);
    var onlineManager = new OnlineManager();
    function pendingThenable() {
      let resolve;
      let reject;
      const thenable = new Promise((_resolve, _reject) => {
        resolve = _resolve;
        reject = _reject;
      });
      thenable.status = "pending";
      thenable.catch(() => {
      });
      function finalize(data) {
        Object.assign(thenable, data);
        delete thenable.resolve;
        delete thenable.reject;
      }
      thenable.resolve = (value) => {
        finalize({
          status: "fulfilled",
          value
        });
        resolve(value);
      };
      thenable.reject = (reason) => {
        finalize({
          status: "rejected",
          reason
        });
        reject(reason);
      };
      return thenable;
    }
    function defaultRetryDelay(failureCount) {
      return Math.min(1e3 * 2 ** failureCount, 3e4);
    }
    function canFetch(networkMode) {
      return (networkMode ?? "online") === "online" ? onlineManager.isOnline() : true;
    }
    var CancelledError = class extends Error {
      constructor(options2) {
        super("CancelledError");
        this.revert = options2 == null ? void 0 : options2.revert;
        this.silent = options2 == null ? void 0 : options2.silent;
      }
    };
    function isCancelledError(value) {
      return value instanceof CancelledError;
    }
    function createRetryer(config2) {
      let isRetryCancelled = false;
      let failureCount = 0;
      let isResolved = false;
      let continueFn;
      const thenable = pendingThenable();
      const cancel = (cancelOptions) => {
        var _a2;
        if (!isResolved) {
          reject(new CancelledError(cancelOptions));
          (_a2 = config2.abort) == null ? void 0 : _a2.call(config2);
        }
      };
      const cancelRetry = () => {
        isRetryCancelled = true;
      };
      const continueRetry = () => {
        isRetryCancelled = false;
      };
      const canContinue = () => focusManager.isFocused() && (config2.networkMode === "always" || onlineManager.isOnline()) && config2.canRun();
      const canStart = () => canFetch(config2.networkMode) && config2.canRun();
      const resolve = (value) => {
        var _a2;
        if (!isResolved) {
          isResolved = true;
          (_a2 = config2.onSuccess) == null ? void 0 : _a2.call(config2, value);
          continueFn == null ? void 0 : continueFn();
          thenable.resolve(value);
        }
      };
      const reject = (value) => {
        var _a2;
        if (!isResolved) {
          isResolved = true;
          (_a2 = config2.onError) == null ? void 0 : _a2.call(config2, value);
          continueFn == null ? void 0 : continueFn();
          thenable.reject(value);
        }
      };
      const pause = () => {
        return new Promise((continueResolve) => {
          var _a2;
          continueFn = (value) => {
            if (isResolved || canContinue()) {
              continueResolve(value);
            }
          };
          (_a2 = config2.onPause) == null ? void 0 : _a2.call(config2);
        }).then(() => {
          var _a2;
          continueFn = void 0;
          if (!isResolved) {
            (_a2 = config2.onContinue) == null ? void 0 : _a2.call(config2);
          }
        });
      };
      const run = () => {
        if (isResolved) {
          return;
        }
        let promiseOrValue;
        const initialPromise = failureCount === 0 ? config2.initialPromise : void 0;
        try {
          promiseOrValue = initialPromise ?? config2.fn();
        } catch (error) {
          promiseOrValue = Promise.reject(error);
        }
        Promise.resolve(promiseOrValue).then(resolve).catch((error) => {
          var _a2;
          if (isResolved) {
            return;
          }
          const retry = config2.retry ?? (isServer ? 0 : 3);
          const retryDelay = config2.retryDelay ?? defaultRetryDelay;
          const delay = typeof retryDelay === "function" ? retryDelay(failureCount, error) : retryDelay;
          const shouldRetry = retry === true || typeof retry === "number" && failureCount < retry || typeof retry === "function" && retry(failureCount, error);
          if (isRetryCancelled || !shouldRetry) {
            reject(error);
            return;
          }
          failureCount++;
          (_a2 = config2.onFail) == null ? void 0 : _a2.call(config2, failureCount, error);
          sleep(delay).then(() => {
            return canContinue() ? void 0 : pause();
          }).then(() => {
            if (isRetryCancelled) {
              reject(error);
            } else {
              run();
            }
          });
        });
      };
      return {
        promise: thenable,
        cancel,
        continue: () => {
          continueFn == null ? void 0 : continueFn();
          return thenable;
        },
        cancelRetry,
        continueRetry,
        canStart,
        start: () => {
          if (canStart()) {
            run();
          } else {
            pause().then(run);
          }
          return thenable;
        }
      };
    }
    var defaultScheduler = (cb) => setTimeout(cb, 0);
    function createNotifyManager() {
      let queue = [];
      let transactions = 0;
      let notifyFn = (callback) => {
        callback();
      };
      let batchNotifyFn = (callback) => {
        callback();
      };
      let scheduleFn = defaultScheduler;
      const schedule = (callback) => {
        if (transactions) {
          queue.push(callback);
        } else {
          scheduleFn(() => {
            notifyFn(callback);
          });
        }
      };
      const flush = () => {
        const originalQueue = queue;
        queue = [];
        if (originalQueue.length) {
          scheduleFn(() => {
            batchNotifyFn(() => {
              originalQueue.forEach((callback) => {
                notifyFn(callback);
              });
            });
          });
        }
      };
      return {
        batch: (callback) => {
          let result;
          transactions++;
          try {
            result = callback();
          } finally {
            transactions--;
            if (!transactions) {
              flush();
            }
          }
          return result;
        },
        /**
         * All calls to the wrapped function will be batched.
         */
        batchCalls: (callback) => {
          return (...args) => {
            schedule(() => {
              callback(...args);
            });
          };
        },
        schedule,
        /**
         * Use this method to set a custom notify function.
         * This can be used to for example wrap notifications with `React.act` while running tests.
         */
        setNotifyFunction: (fn) => {
          notifyFn = fn;
        },
        /**
         * Use this method to set a custom function to batch notifications together into a single tick.
         * By default React Query will use the batch function provided by ReactDOM or React Native.
         */
        setBatchNotifyFunction: (fn) => {
          batchNotifyFn = fn;
        },
        setScheduler: (fn) => {
          scheduleFn = fn;
        }
      };
    }
    var notifyManager = createNotifyManager();
    var Removable = (_c = class {
      constructor() {
        __privateAdd(this, _gcTimeout);
      }
      destroy() {
        this.clearGcTimeout();
      }
      scheduleGc() {
        this.clearGcTimeout();
        if (isValidTimeout(this.gcTime)) {
          __privateSet(this, _gcTimeout, setTimeout(() => {
            this.optionalRemove();
          }, this.gcTime));
        }
      }
      updateGcTime(newGcTime) {
        this.gcTime = Math.max(
          this.gcTime || 0,
          newGcTime ?? (isServer ? Infinity : 5 * 60 * 1e3)
        );
      }
      clearGcTimeout() {
        if (__privateGet(this, _gcTimeout)) {
          clearTimeout(__privateGet(this, _gcTimeout));
          __privateSet(this, _gcTimeout, void 0);
        }
      }
    }, _gcTimeout = new WeakMap(), _c);
    var Query = (_d = class extends Removable {
      constructor(config2) {
        super();
        __privateAdd(this, _Query_instances);
        __privateAdd(this, _initialState);
        __privateAdd(this, _revertState);
        __privateAdd(this, _cache);
        __privateAdd(this, _client);
        __privateAdd(this, _retryer);
        __privateAdd(this, _defaultOptions);
        __privateAdd(this, _abortSignalConsumed);
        __privateSet(this, _abortSignalConsumed, false);
        __privateSet(this, _defaultOptions, config2.defaultOptions);
        this.setOptions(config2.options);
        this.observers = [];
        __privateSet(this, _client, config2.client);
        __privateSet(this, _cache, __privateGet(this, _client).getQueryCache());
        this.queryKey = config2.queryKey;
        this.queryHash = config2.queryHash;
        __privateSet(this, _initialState, getDefaultState$1(this.options));
        this.state = config2.state ?? __privateGet(this, _initialState);
        this.scheduleGc();
      }
      get meta() {
        return this.options.meta;
      }
      get promise() {
        var _a2;
        return (_a2 = __privateGet(this, _retryer)) == null ? void 0 : _a2.promise;
      }
      setOptions(options2) {
        this.options = { ...__privateGet(this, _defaultOptions), ...options2 };
        this.updateGcTime(this.options.gcTime);
      }
      optionalRemove() {
        if (!this.observers.length && this.state.fetchStatus === "idle") {
          __privateGet(this, _cache).remove(this);
        }
      }
      setData(newData, options2) {
        const data = replaceData(this.state.data, newData, this.options);
        __privateMethod(this, _Query_instances, dispatch_fn).call(this, {
          data,
          type: "success",
          dataUpdatedAt: options2 == null ? void 0 : options2.updatedAt,
          manual: options2 == null ? void 0 : options2.manual
        });
        return data;
      }
      setState(state, setStateOptions) {
        __privateMethod(this, _Query_instances, dispatch_fn).call(this, { type: "setState", state, setStateOptions });
      }
      cancel(options2) {
        var _a2, _b2;
        const promise = (_a2 = __privateGet(this, _retryer)) == null ? void 0 : _a2.promise;
        (_b2 = __privateGet(this, _retryer)) == null ? void 0 : _b2.cancel(options2);
        return promise ? promise.then(noop$1).catch(noop$1) : Promise.resolve();
      }
      destroy() {
        super.destroy();
        this.cancel({ silent: true });
      }
      reset() {
        this.destroy();
        this.setState(__privateGet(this, _initialState));
      }
      isActive() {
        return this.observers.some(
          (observer) => resolveEnabled(observer.options.enabled, this) !== false
        );
      }
      isDisabled() {
        if (this.getObserversCount() > 0) {
          return !this.isActive();
        }
        return this.options.queryFn === skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;
      }
      isStale() {
        if (this.state.isInvalidated) {
          return true;
        }
        if (this.getObserversCount() > 0) {
          return this.observers.some(
            (observer) => observer.getCurrentResult().isStale
          );
        }
        return this.state.data === void 0;
      }
      isStaleByTime(staleTime = 0) {
        return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
      }
      onFocus() {
        var _a2;
        const observer = this.observers.find((x2) => x2.shouldFetchOnWindowFocus());
        observer == null ? void 0 : observer.refetch({ cancelRefetch: false });
        (_a2 = __privateGet(this, _retryer)) == null ? void 0 : _a2.continue();
      }
      onOnline() {
        var _a2;
        const observer = this.observers.find((x2) => x2.shouldFetchOnReconnect());
        observer == null ? void 0 : observer.refetch({ cancelRefetch: false });
        (_a2 = __privateGet(this, _retryer)) == null ? void 0 : _a2.continue();
      }
      addObserver(observer) {
        if (!this.observers.includes(observer)) {
          this.observers.push(observer);
          this.clearGcTimeout();
          __privateGet(this, _cache).notify({ type: "observerAdded", query: this, observer });
        }
      }
      removeObserver(observer) {
        if (this.observers.includes(observer)) {
          this.observers = this.observers.filter((x2) => x2 !== observer);
          if (!this.observers.length) {
            if (__privateGet(this, _retryer)) {
              if (__privateGet(this, _abortSignalConsumed)) {
                __privateGet(this, _retryer).cancel({ revert: true });
              } else {
                __privateGet(this, _retryer).cancelRetry();
              }
            }
            this.scheduleGc();
          }
          __privateGet(this, _cache).notify({ type: "observerRemoved", query: this, observer });
        }
      }
      getObserversCount() {
        return this.observers.length;
      }
      invalidate() {
        if (!this.state.isInvalidated) {
          __privateMethod(this, _Query_instances, dispatch_fn).call(this, { type: "invalidate" });
        }
      }
      fetch(options2, fetchOptions) {
        var _a2, _b2, _c2;
        if (this.state.fetchStatus !== "idle") {
          if (this.state.data !== void 0 && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {
            this.cancel({ silent: true });
          } else if (__privateGet(this, _retryer)) {
            __privateGet(this, _retryer).continueRetry();
            return __privateGet(this, _retryer).promise;
          }
        }
        if (options2) {
          this.setOptions(options2);
        }
        if (!this.options.queryFn) {
          const observer = this.observers.find((x2) => x2.options.queryFn);
          if (observer) {
            this.setOptions(observer.options);
          }
        }
        const abortController = new AbortController();
        const addSignalProperty = (object2) => {
          Object.defineProperty(object2, "signal", {
            enumerable: true,
            get: () => {
              __privateSet(this, _abortSignalConsumed, true);
              return abortController.signal;
            }
          });
        };
        const fetchFn = () => {
          const queryFn = ensureQueryFn(this.options, fetchOptions);
          const queryFnContext = {
            client: __privateGet(this, _client),
            queryKey: this.queryKey,
            meta: this.meta
          };
          addSignalProperty(queryFnContext);
          __privateSet(this, _abortSignalConsumed, false);
          if (this.options.persister) {
            return this.options.persister(
              queryFn,
              queryFnContext,
              this
            );
          }
          return queryFn(queryFnContext);
        };
        const context = {
          fetchOptions,
          options: this.options,
          queryKey: this.queryKey,
          client: __privateGet(this, _client),
          state: this.state,
          fetchFn
        };
        addSignalProperty(context);
        (_a2 = this.options.behavior) == null ? void 0 : _a2.onFetch(
          context,
          this
        );
        __privateSet(this, _revertState, this.state);
        if (this.state.fetchStatus === "idle" || this.state.fetchMeta !== ((_b2 = context.fetchOptions) == null ? void 0 : _b2.meta)) {
          __privateMethod(this, _Query_instances, dispatch_fn).call(this, { type: "fetch", meta: (_c2 = context.fetchOptions) == null ? void 0 : _c2.meta });
        }
        const onError = (error) => {
          var _a3, _b3, _c3, _d2;
          if (!(isCancelledError(error) && error.silent)) {
            __privateMethod(this, _Query_instances, dispatch_fn).call(this, {
              type: "error",
              error
            });
          }
          if (!isCancelledError(error)) {
            (_b3 = (_a3 = __privateGet(this, _cache).config).onError) == null ? void 0 : _b3.call(
              _a3,
              error,
              this
            );
            (_d2 = (_c3 = __privateGet(this, _cache).config).onSettled) == null ? void 0 : _d2.call(
              _c3,
              this.state.data,
              error,
              this
            );
          }
          this.scheduleGc();
        };
        __privateSet(this, _retryer, createRetryer({
          initialPromise: fetchOptions == null ? void 0 : fetchOptions.initialPromise,
          fn: context.fetchFn,
          abort: abortController.abort.bind(abortController),
          onSuccess: (data) => {
            var _a3, _b3, _c3, _d2;
            if (data === void 0) {
              onError(new Error(`${this.queryHash} data is undefined`));
              return;
            }
            try {
              this.setData(data);
            } catch (error) {
              onError(error);
              return;
            }
            (_b3 = (_a3 = __privateGet(this, _cache).config).onSuccess) == null ? void 0 : _b3.call(_a3, data, this);
            (_d2 = (_c3 = __privateGet(this, _cache).config).onSettled) == null ? void 0 : _d2.call(
              _c3,
              data,
              this.state.error,
              this
            );
            this.scheduleGc();
          },
          onError,
          onFail: (failureCount, error) => {
            __privateMethod(this, _Query_instances, dispatch_fn).call(this, { type: "failed", failureCount, error });
          },
          onPause: () => {
            __privateMethod(this, _Query_instances, dispatch_fn).call(this, { type: "pause" });
          },
          onContinue: () => {
            __privateMethod(this, _Query_instances, dispatch_fn).call(this, { type: "continue" });
          },
          retry: context.options.retry,
          retryDelay: context.options.retryDelay,
          networkMode: context.options.networkMode,
          canRun: () => true
        }));
        return __privateGet(this, _retryer).start();
      }
    }, _initialState = new WeakMap(), _revertState = new WeakMap(), _cache = new WeakMap(), _client = new WeakMap(), _retryer = new WeakMap(), _defaultOptions = new WeakMap(), _abortSignalConsumed = new WeakMap(), _Query_instances = new WeakSet(), dispatch_fn = function(action) {
      const reducer = (state) => {
        switch (action.type) {
          case "failed":
            return {
              ...state,
              fetchFailureCount: action.failureCount,
              fetchFailureReason: action.error
            };
          case "pause":
            return {
              ...state,
              fetchStatus: "paused"
            };
          case "continue":
            return {
              ...state,
              fetchStatus: "fetching"
            };
          case "fetch":
            return {
              ...state,
              ...fetchState(state.data, this.options),
              fetchMeta: action.meta ?? null
            };
          case "success":
            return {
              ...state,
              data: action.data,
              dataUpdateCount: state.dataUpdateCount + 1,
              dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),
              error: null,
              isInvalidated: false,
              status: "success",
              ...!action.manual && {
                fetchStatus: "idle",
                fetchFailureCount: 0,
                fetchFailureReason: null
              }
            };
          case "error":
            const error = action.error;
            if (isCancelledError(error) && error.revert && __privateGet(this, _revertState)) {
              return { ...__privateGet(this, _revertState), fetchStatus: "idle" };
            }
            return {
              ...state,
              error,
              errorUpdateCount: state.errorUpdateCount + 1,
              errorUpdatedAt: Date.now(),
              fetchFailureCount: state.fetchFailureCount + 1,
              fetchFailureReason: error,
              fetchStatus: "idle",
              status: "error"
            };
          case "invalidate":
            return {
              ...state,
              isInvalidated: true
            };
          case "setState":
            return {
              ...state,
              ...action.state
            };
        }
      };
      this.state = reducer(this.state);
      notifyManager.batch(() => {
        this.observers.forEach((observer) => {
          observer.onQueryUpdate();
        });
        __privateGet(this, _cache).notify({ query: this, type: "updated", action });
      });
    }, _d);
    function fetchState(data, options2) {
      return {
        fetchFailureCount: 0,
        fetchFailureReason: null,
        fetchStatus: canFetch(options2.networkMode) ? "fetching" : "paused",
        ...data === void 0 && {
          error: null,
          status: "pending"
        }
      };
    }
    function getDefaultState$1(options2) {
      const data = typeof options2.initialData === "function" ? options2.initialData() : options2.initialData;
      const hasData = data !== void 0;
      const initialDataUpdatedAt = hasData ? typeof options2.initialDataUpdatedAt === "function" ? options2.initialDataUpdatedAt() : options2.initialDataUpdatedAt : 0;
      return {
        data,
        dataUpdateCount: 0,
        dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,
        error: null,
        errorUpdateCount: 0,
        errorUpdatedAt: 0,
        fetchFailureCount: 0,
        fetchFailureReason: null,
        fetchMeta: null,
        isInvalidated: false,
        status: hasData ? "success" : "pending",
        fetchStatus: "idle"
      };
    }
    var QueryCache = (_e2 = class extends Subscribable {
      constructor(config2 = {}) {
        super();
        __privateAdd(this, _queries);
        this.config = config2;
        __privateSet(this, _queries, /* @__PURE__ */ new Map());
      }
      build(client2, options2, state) {
        const queryKey = options2.queryKey;
        const queryHash = options2.queryHash ?? hashQueryKeyByOptions(queryKey, options2);
        let query = this.get(queryHash);
        if (!query) {
          query = new Query({
            client: client2,
            queryKey,
            queryHash,
            options: client2.defaultQueryOptions(options2),
            state,
            defaultOptions: client2.getQueryDefaults(queryKey)
          });
          this.add(query);
        }
        return query;
      }
      add(query) {
        if (!__privateGet(this, _queries).has(query.queryHash)) {
          __privateGet(this, _queries).set(query.queryHash, query);
          this.notify({
            type: "added",
            query
          });
        }
      }
      remove(query) {
        const queryInMap = __privateGet(this, _queries).get(query.queryHash);
        if (queryInMap) {
          query.destroy();
          if (queryInMap === query) {
            __privateGet(this, _queries).delete(query.queryHash);
          }
          this.notify({ type: "removed", query });
        }
      }
      clear() {
        notifyManager.batch(() => {
          this.getAll().forEach((query) => {
            this.remove(query);
          });
        });
      }
      get(queryHash) {
        return __privateGet(this, _queries).get(queryHash);
      }
      getAll() {
        return [...__privateGet(this, _queries).values()];
      }
      find(filters) {
        const defaultedFilters = { exact: true, ...filters };
        return this.getAll().find(
          (query) => matchQuery(defaultedFilters, query)
        );
      }
      findAll(filters = {}) {
        const queries = this.getAll();
        return Object.keys(filters).length > 0 ? queries.filter((query) => matchQuery(filters, query)) : queries;
      }
      notify(event) {
        notifyManager.batch(() => {
          this.listeners.forEach((listener) => {
            listener(event);
          });
        });
      }
      onFocus() {
        notifyManager.batch(() => {
          this.getAll().forEach((query) => {
            query.onFocus();
          });
        });
      }
      onOnline() {
        notifyManager.batch(() => {
          this.getAll().forEach((query) => {
            query.onOnline();
          });
        });
      }
    }, _queries = new WeakMap(), _e2);
    var Mutation = (_f = class extends Removable {
      constructor(config2) {
        super();
        __privateAdd(this, _Mutation_instances);
        __privateAdd(this, _observers);
        __privateAdd(this, _mutationCache);
        __privateAdd(this, _retryer2);
        this.mutationId = config2.mutationId;
        __privateSet(this, _mutationCache, config2.mutationCache);
        __privateSet(this, _observers, []);
        this.state = config2.state || getDefaultState();
        this.setOptions(config2.options);
        this.scheduleGc();
      }
      setOptions(options2) {
        this.options = options2;
        this.updateGcTime(this.options.gcTime);
      }
      get meta() {
        return this.options.meta;
      }
      addObserver(observer) {
        if (!__privateGet(this, _observers).includes(observer)) {
          __privateGet(this, _observers).push(observer);
          this.clearGcTimeout();
          __privateGet(this, _mutationCache).notify({
            type: "observerAdded",
            mutation: this,
            observer
          });
        }
      }
      removeObserver(observer) {
        __privateSet(this, _observers, __privateGet(this, _observers).filter((x2) => x2 !== observer));
        this.scheduleGc();
        __privateGet(this, _mutationCache).notify({
          type: "observerRemoved",
          mutation: this,
          observer
        });
      }
      optionalRemove() {
        if (!__privateGet(this, _observers).length) {
          if (this.state.status === "pending") {
            this.scheduleGc();
          } else {
            __privateGet(this, _mutationCache).remove(this);
          }
        }
      }
      continue() {
        var _a2;
        return ((_a2 = __privateGet(this, _retryer2)) == null ? void 0 : _a2.continue()) ?? // continuing a mutation assumes that variables are set, mutation must have been dehydrated before
        this.execute(this.state.variables);
      }
      async execute(variables) {
        var _a2, _b2, _c2, _d2, _e3, _f2, _g2, _h2, _i2, _j2, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t;
        const onContinue = () => {
          __privateMethod(this, _Mutation_instances, dispatch_fn2).call(this, { type: "continue" });
        };
        __privateSet(this, _retryer2, createRetryer({
          fn: () => {
            if (!this.options.mutationFn) {
              return Promise.reject(new Error("No mutationFn found"));
            }
            return this.options.mutationFn(variables);
          },
          onFail: (failureCount, error) => {
            __privateMethod(this, _Mutation_instances, dispatch_fn2).call(this, { type: "failed", failureCount, error });
          },
          onPause: () => {
            __privateMethod(this, _Mutation_instances, dispatch_fn2).call(this, { type: "pause" });
          },
          onContinue,
          retry: this.options.retry ?? 0,
          retryDelay: this.options.retryDelay,
          networkMode: this.options.networkMode,
          canRun: () => __privateGet(this, _mutationCache).canRun(this)
        }));
        const restored = this.state.status === "pending";
        const isPaused = !__privateGet(this, _retryer2).canStart();
        try {
          if (restored) {
            onContinue();
          } else {
            __privateMethod(this, _Mutation_instances, dispatch_fn2).call(this, { type: "pending", variables, isPaused });
            await ((_b2 = (_a2 = __privateGet(this, _mutationCache).config).onMutate) == null ? void 0 : _b2.call(
              _a2,
              variables,
              this
            ));
            const context = await ((_d2 = (_c2 = this.options).onMutate) == null ? void 0 : _d2.call(_c2, variables));
            if (context !== this.state.context) {
              __privateMethod(this, _Mutation_instances, dispatch_fn2).call(this, {
                type: "pending",
                context,
                variables,
                isPaused
              });
            }
          }
          const data = await __privateGet(this, _retryer2).start();
          await ((_f2 = (_e3 = __privateGet(this, _mutationCache).config).onSuccess) == null ? void 0 : _f2.call(
            _e3,
            data,
            variables,
            this.state.context,
            this
          ));
          await ((_h2 = (_g2 = this.options).onSuccess) == null ? void 0 : _h2.call(_g2, data, variables, this.state.context));
          await ((_j2 = (_i2 = __privateGet(this, _mutationCache).config).onSettled) == null ? void 0 : _j2.call(
            _i2,
            data,
            null,
            this.state.variables,
            this.state.context,
            this
          ));
          await ((_l = (_k = this.options).onSettled) == null ? void 0 : _l.call(_k, data, null, variables, this.state.context));
          __privateMethod(this, _Mutation_instances, dispatch_fn2).call(this, { type: "success", data });
          return data;
        } catch (error) {
          try {
            await ((_n = (_m = __privateGet(this, _mutationCache).config).onError) == null ? void 0 : _n.call(
              _m,
              error,
              variables,
              this.state.context,
              this
            ));
            await ((_p = (_o = this.options).onError) == null ? void 0 : _p.call(
              _o,
              error,
              variables,
              this.state.context
            ));
            await ((_r = (_q = __privateGet(this, _mutationCache).config).onSettled) == null ? void 0 : _r.call(
              _q,
              void 0,
              error,
              this.state.variables,
              this.state.context,
              this
            ));
            await ((_t = (_s = this.options).onSettled) == null ? void 0 : _t.call(
              _s,
              void 0,
              error,
              variables,
              this.state.context
            ));
            throw error;
          } finally {
            __privateMethod(this, _Mutation_instances, dispatch_fn2).call(this, { type: "error", error });
          }
        } finally {
          __privateGet(this, _mutationCache).runNext(this);
        }
      }
    }, _observers = new WeakMap(), _mutationCache = new WeakMap(), _retryer2 = new WeakMap(), _Mutation_instances = new WeakSet(), dispatch_fn2 = function(action) {
      const reducer = (state) => {
        switch (action.type) {
          case "failed":
            return {
              ...state,
              failureCount: action.failureCount,
              failureReason: action.error
            };
          case "pause":
            return {
              ...state,
              isPaused: true
            };
          case "continue":
            return {
              ...state,
              isPaused: false
            };
          case "pending":
            return {
              ...state,
              context: action.context,
              data: void 0,
              failureCount: 0,
              failureReason: null,
              error: null,
              isPaused: action.isPaused,
              status: "pending",
              variables: action.variables,
              submittedAt: Date.now()
            };
          case "success":
            return {
              ...state,
              data: action.data,
              failureCount: 0,
              failureReason: null,
              error: null,
              status: "success",
              isPaused: false
            };
          case "error":
            return {
              ...state,
              data: void 0,
              error: action.error,
              failureCount: state.failureCount + 1,
              failureReason: action.error,
              isPaused: false,
              status: "error"
            };
        }
      };
      this.state = reducer(this.state);
      notifyManager.batch(() => {
        __privateGet(this, _observers).forEach((observer) => {
          observer.onMutationUpdate(action);
        });
        __privateGet(this, _mutationCache).notify({
          mutation: this,
          type: "updated",
          action
        });
      });
    }, _f);
    function getDefaultState() {
      return {
        context: void 0,
        data: void 0,
        error: null,
        failureCount: 0,
        failureReason: null,
        isPaused: false,
        status: "idle",
        variables: void 0,
        submittedAt: 0
      };
    }
    var MutationCache = (_g = class extends Subscribable {
      constructor(config2 = {}) {
        super();
        __privateAdd(this, _mutations);
        __privateAdd(this, _scopes);
        __privateAdd(this, _mutationId);
        this.config = config2;
        __privateSet(this, _mutations, /* @__PURE__ */ new Set());
        __privateSet(this, _scopes, /* @__PURE__ */ new Map());
        __privateSet(this, _mutationId, 0);
      }
      build(client2, options2, state) {
        const mutation = new Mutation({
          mutationCache: this,
          mutationId: ++__privateWrapper(this, _mutationId)._,
          options: client2.defaultMutationOptions(options2),
          state
        });
        this.add(mutation);
        return mutation;
      }
      add(mutation) {
        __privateGet(this, _mutations).add(mutation);
        const scope = scopeFor(mutation);
        if (typeof scope === "string") {
          const scopedMutations = __privateGet(this, _scopes).get(scope);
          if (scopedMutations) {
            scopedMutations.push(mutation);
          } else {
            __privateGet(this, _scopes).set(scope, [mutation]);
          }
        }
        this.notify({ type: "added", mutation });
      }
      remove(mutation) {
        if (__privateGet(this, _mutations).delete(mutation)) {
          const scope = scopeFor(mutation);
          if (typeof scope === "string") {
            const scopedMutations = __privateGet(this, _scopes).get(scope);
            if (scopedMutations) {
              if (scopedMutations.length > 1) {
                const index2 = scopedMutations.indexOf(mutation);
                if (index2 !== -1) {
                  scopedMutations.splice(index2, 1);
                }
              } else if (scopedMutations[0] === mutation) {
                __privateGet(this, _scopes).delete(scope);
              }
            }
          }
        }
        this.notify({ type: "removed", mutation });
      }
      canRun(mutation) {
        const scope = scopeFor(mutation);
        if (typeof scope === "string") {
          const mutationsWithSameScope = __privateGet(this, _scopes).get(scope);
          const firstPendingMutation = mutationsWithSameScope == null ? void 0 : mutationsWithSameScope.find(
            (m2) => m2.state.status === "pending"
          );
          return !firstPendingMutation || firstPendingMutation === mutation;
        } else {
          return true;
        }
      }
      runNext(mutation) {
        var _a2;
        const scope = scopeFor(mutation);
        if (typeof scope === "string") {
          const foundMutation = (_a2 = __privateGet(this, _scopes).get(scope)) == null ? void 0 : _a2.find((m2) => m2 !== mutation && m2.state.isPaused);
          return (foundMutation == null ? void 0 : foundMutation.continue()) ?? Promise.resolve();
        } else {
          return Promise.resolve();
        }
      }
      clear() {
        notifyManager.batch(() => {
          __privateGet(this, _mutations).forEach((mutation) => {
            this.notify({ type: "removed", mutation });
          });
          __privateGet(this, _mutations).clear();
          __privateGet(this, _scopes).clear();
        });
      }
      getAll() {
        return Array.from(__privateGet(this, _mutations));
      }
      find(filters) {
        const defaultedFilters = { exact: true, ...filters };
        return this.getAll().find(
          (mutation) => matchMutation(defaultedFilters, mutation)
        );
      }
      findAll(filters = {}) {
        return this.getAll().filter((mutation) => matchMutation(filters, mutation));
      }
      notify(event) {
        notifyManager.batch(() => {
          this.listeners.forEach((listener) => {
            listener(event);
          });
        });
      }
      resumePausedMutations() {
        const pausedMutations = this.getAll().filter((x2) => x2.state.isPaused);
        return notifyManager.batch(
          () => Promise.all(
            pausedMutations.map((mutation) => mutation.continue().catch(noop$1))
          )
        );
      }
    }, _mutations = new WeakMap(), _scopes = new WeakMap(), _mutationId = new WeakMap(), _g);
    function scopeFor(mutation) {
      var _a2;
      return (_a2 = mutation.options.scope) == null ? void 0 : _a2.id;
    }
    function infiniteQueryBehavior(pages) {
      return {
        onFetch: (context, query) => {
          var _a2, _b2, _c2, _d2, _e3;
          const options2 = context.options;
          const direction = (_c2 = (_b2 = (_a2 = context.fetchOptions) == null ? void 0 : _a2.meta) == null ? void 0 : _b2.fetchMore) == null ? void 0 : _c2.direction;
          const oldPages = ((_d2 = context.state.data) == null ? void 0 : _d2.pages) || [];
          const oldPageParams = ((_e3 = context.state.data) == null ? void 0 : _e3.pageParams) || [];
          let result = { pages: [], pageParams: [] };
          let currentPage = 0;
          const fetchFn = async () => {
            let cancelled = false;
            const addSignalProperty = (object2) => {
              Object.defineProperty(object2, "signal", {
                enumerable: true,
                get: () => {
                  if (context.signal.aborted) {
                    cancelled = true;
                  } else {
                    context.signal.addEventListener("abort", () => {
                      cancelled = true;
                    });
                  }
                  return context.signal;
                }
              });
            };
            const queryFn = ensureQueryFn(context.options, context.fetchOptions);
            const fetchPage = async (data, param, previous) => {
              if (cancelled) {
                return Promise.reject();
              }
              if (param == null && data.pages.length) {
                return Promise.resolve(data);
              }
              const queryFnContext = {
                client: context.client,
                queryKey: context.queryKey,
                pageParam: param,
                direction: previous ? "backward" : "forward",
                meta: context.options.meta
              };
              addSignalProperty(queryFnContext);
              const page = await queryFn(
                queryFnContext
              );
              const { maxPages } = context.options;
              const addTo = previous ? addToStart : addToEnd;
              return {
                pages: addTo(data.pages, page, maxPages),
                pageParams: addTo(data.pageParams, param, maxPages)
              };
            };
            if (direction && oldPages.length) {
              const previous = direction === "backward";
              const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;
              const oldData = {
                pages: oldPages,
                pageParams: oldPageParams
              };
              const param = pageParamFn(options2, oldData);
              result = await fetchPage(oldData, param, previous);
            } else {
              const remainingPages = pages ?? oldPages.length;
              do {
                const param = currentPage === 0 ? oldPageParams[0] ?? options2.initialPageParam : getNextPageParam(options2, result);
                if (currentPage > 0 && param == null) {
                  break;
                }
                result = await fetchPage(result, param);
                currentPage++;
              } while (currentPage < remainingPages);
            }
            return result;
          };
          if (context.options.persister) {
            context.fetchFn = () => {
              var _a3, _b3;
              return (_b3 = (_a3 = context.options).persister) == null ? void 0 : _b3.call(
                _a3,
                fetchFn,
                {
                  client: context.client,
                  queryKey: context.queryKey,
                  meta: context.options.meta,
                  signal: context.signal
                },
                query
              );
            };
          } else {
            context.fetchFn = fetchFn;
          }
        }
      };
    }
    function getNextPageParam(options2, { pages, pageParams }) {
      const lastIndex = pages.length - 1;
      return pages.length > 0 ? options2.getNextPageParam(
        pages[lastIndex],
        pages,
        pageParams[lastIndex],
        pageParams
      ) : void 0;
    }
    function getPreviousPageParam(options2, { pages, pageParams }) {
      var _a2;
      return pages.length > 0 ? (_a2 = options2.getPreviousPageParam) == null ? void 0 : _a2.call(options2, pages[0], pages, pageParams[0], pageParams) : void 0;
    }
    var QueryClient = (_h = class {
      constructor(config2 = {}) {
        __privateAdd(this, _queryCache);
        __privateAdd(this, _mutationCache2);
        __privateAdd(this, _defaultOptions2);
        __privateAdd(this, _queryDefaults);
        __privateAdd(this, _mutationDefaults);
        __privateAdd(this, _mountCount);
        __privateAdd(this, _unsubscribeFocus);
        __privateAdd(this, _unsubscribeOnline);
        __privateSet(this, _queryCache, config2.queryCache || new QueryCache());
        __privateSet(this, _mutationCache2, config2.mutationCache || new MutationCache());
        __privateSet(this, _defaultOptions2, config2.defaultOptions || {});
        __privateSet(this, _queryDefaults, /* @__PURE__ */ new Map());
        __privateSet(this, _mutationDefaults, /* @__PURE__ */ new Map());
        __privateSet(this, _mountCount, 0);
      }
      mount() {
        __privateWrapper(this, _mountCount)._++;
        if (__privateGet(this, _mountCount) !== 1) return;
        __privateSet(this, _unsubscribeFocus, focusManager.subscribe(async (focused) => {
          if (focused) {
            await this.resumePausedMutations();
            __privateGet(this, _queryCache).onFocus();
          }
        }));
        __privateSet(this, _unsubscribeOnline, onlineManager.subscribe(async (online) => {
          if (online) {
            await this.resumePausedMutations();
            __privateGet(this, _queryCache).onOnline();
          }
        }));
      }
      unmount() {
        var _a2, _b2;
        __privateWrapper(this, _mountCount)._--;
        if (__privateGet(this, _mountCount) !== 0) return;
        (_a2 = __privateGet(this, _unsubscribeFocus)) == null ? void 0 : _a2.call(this);
        __privateSet(this, _unsubscribeFocus, void 0);
        (_b2 = __privateGet(this, _unsubscribeOnline)) == null ? void 0 : _b2.call(this);
        __privateSet(this, _unsubscribeOnline, void 0);
      }
      isFetching(filters) {
        return __privateGet(this, _queryCache).findAll({ ...filters, fetchStatus: "fetching" }).length;
      }
      isMutating(filters) {
        return __privateGet(this, _mutationCache2).findAll({ ...filters, status: "pending" }).length;
      }
      /**
       * Imperative (non-reactive) way to retrieve data for a QueryKey.
       * Should only be used in callbacks or functions where reading the latest data is necessary, e.g. for optimistic updates.
       *
       * Hint: Do not use this function inside a component, because it won't receive updates.
       * Use `useQuery` to create a `QueryObserver` that subscribes to changes.
       */
      getQueryData(queryKey) {
        var _a2;
        const options2 = this.defaultQueryOptions({ queryKey });
        return (_a2 = __privateGet(this, _queryCache).get(options2.queryHash)) == null ? void 0 : _a2.state.data;
      }
      ensureQueryData(options2) {
        const defaultedOptions = this.defaultQueryOptions(options2);
        const query = __privateGet(this, _queryCache).build(this, defaultedOptions);
        const cachedData = query.state.data;
        if (cachedData === void 0) {
          return this.fetchQuery(options2);
        }
        if (options2.revalidateIfStale && query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))) {
          void this.prefetchQuery(defaultedOptions);
        }
        return Promise.resolve(cachedData);
      }
      getQueriesData(filters) {
        return __privateGet(this, _queryCache).findAll(filters).map(({ queryKey, state }) => {
          const data = state.data;
          return [queryKey, data];
        });
      }
      setQueryData(queryKey, updater, options2) {
        const defaultedOptions = this.defaultQueryOptions({ queryKey });
        const query = __privateGet(this, _queryCache).get(
          defaultedOptions.queryHash
        );
        const prevData = query == null ? void 0 : query.state.data;
        const data = functionalUpdate$1(updater, prevData);
        if (data === void 0) {
          return void 0;
        }
        return __privateGet(this, _queryCache).build(this, defaultedOptions).setData(data, { ...options2, manual: true });
      }
      setQueriesData(filters, updater, options2) {
        return notifyManager.batch(
          () => __privateGet(this, _queryCache).findAll(filters).map(({ queryKey }) => [
            queryKey,
            this.setQueryData(queryKey, updater, options2)
          ])
        );
      }
      getQueryState(queryKey) {
        var _a2;
        const options2 = this.defaultQueryOptions({ queryKey });
        return (_a2 = __privateGet(this, _queryCache).get(
          options2.queryHash
        )) == null ? void 0 : _a2.state;
      }
      removeQueries(filters) {
        const queryCache = __privateGet(this, _queryCache);
        notifyManager.batch(() => {
          queryCache.findAll(filters).forEach((query) => {
            queryCache.remove(query);
          });
        });
      }
      resetQueries(filters, options2) {
        const queryCache = __privateGet(this, _queryCache);
        return notifyManager.batch(() => {
          queryCache.findAll(filters).forEach((query) => {
            query.reset();
          });
          return this.refetchQueries(
            {
              type: "active",
              ...filters
            },
            options2
          );
        });
      }
      cancelQueries(filters, cancelOptions = {}) {
        const defaultedCancelOptions = { revert: true, ...cancelOptions };
        const promises = notifyManager.batch(
          () => __privateGet(this, _queryCache).findAll(filters).map((query) => query.cancel(defaultedCancelOptions))
        );
        return Promise.all(promises).then(noop$1).catch(noop$1);
      }
      invalidateQueries(filters, options2 = {}) {
        return notifyManager.batch(() => {
          __privateGet(this, _queryCache).findAll(filters).forEach((query) => {
            query.invalidate();
          });
          if ((filters == null ? void 0 : filters.refetchType) === "none") {
            return Promise.resolve();
          }
          return this.refetchQueries(
            {
              ...filters,
              type: (filters == null ? void 0 : filters.refetchType) ?? (filters == null ? void 0 : filters.type) ?? "active"
            },
            options2
          );
        });
      }
      refetchQueries(filters, options2 = {}) {
        const fetchOptions = {
          ...options2,
          cancelRefetch: options2.cancelRefetch ?? true
        };
        const promises = notifyManager.batch(
          () => __privateGet(this, _queryCache).findAll(filters).filter((query) => !query.isDisabled()).map((query) => {
            let promise = query.fetch(void 0, fetchOptions);
            if (!fetchOptions.throwOnError) {
              promise = promise.catch(noop$1);
            }
            return query.state.fetchStatus === "paused" ? Promise.resolve() : promise;
          })
        );
        return Promise.all(promises).then(noop$1);
      }
      fetchQuery(options2) {
        const defaultedOptions = this.defaultQueryOptions(options2);
        if (defaultedOptions.retry === void 0) {
          defaultedOptions.retry = false;
        }
        const query = __privateGet(this, _queryCache).build(this, defaultedOptions);
        return query.isStaleByTime(
          resolveStaleTime(defaultedOptions.staleTime, query)
        ) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
      }
      prefetchQuery(options2) {
        return this.fetchQuery(options2).then(noop$1).catch(noop$1);
      }
      fetchInfiniteQuery(options2) {
        options2.behavior = infiniteQueryBehavior(options2.pages);
        return this.fetchQuery(options2);
      }
      prefetchInfiniteQuery(options2) {
        return this.fetchInfiniteQuery(options2).then(noop$1).catch(noop$1);
      }
      ensureInfiniteQueryData(options2) {
        options2.behavior = infiniteQueryBehavior(options2.pages);
        return this.ensureQueryData(options2);
      }
      resumePausedMutations() {
        if (onlineManager.isOnline()) {
          return __privateGet(this, _mutationCache2).resumePausedMutations();
        }
        return Promise.resolve();
      }
      getQueryCache() {
        return __privateGet(this, _queryCache);
      }
      getMutationCache() {
        return __privateGet(this, _mutationCache2);
      }
      getDefaultOptions() {
        return __privateGet(this, _defaultOptions2);
      }
      setDefaultOptions(options2) {
        __privateSet(this, _defaultOptions2, options2);
      }
      setQueryDefaults(queryKey, options2) {
        __privateGet(this, _queryDefaults).set(hashKey(queryKey), {
          queryKey,
          defaultOptions: options2
        });
      }
      getQueryDefaults(queryKey) {
        const defaults2 = [...__privateGet(this, _queryDefaults).values()];
        const result = {};
        defaults2.forEach((queryDefault) => {
          if (partialMatchKey(queryKey, queryDefault.queryKey)) {
            Object.assign(result, queryDefault.defaultOptions);
          }
        });
        return result;
      }
      setMutationDefaults(mutationKey, options2) {
        __privateGet(this, _mutationDefaults).set(hashKey(mutationKey), {
          mutationKey,
          defaultOptions: options2
        });
      }
      getMutationDefaults(mutationKey) {
        const defaults2 = [...__privateGet(this, _mutationDefaults).values()];
        const result = {};
        defaults2.forEach((queryDefault) => {
          if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {
            Object.assign(result, queryDefault.defaultOptions);
          }
        });
        return result;
      }
      defaultQueryOptions(options2) {
        if (options2._defaulted) {
          return options2;
        }
        const defaultedOptions = {
          ...__privateGet(this, _defaultOptions2).queries,
          ...this.getQueryDefaults(options2.queryKey),
          ...options2,
          _defaulted: true
        };
        if (!defaultedOptions.queryHash) {
          defaultedOptions.queryHash = hashQueryKeyByOptions(
            defaultedOptions.queryKey,
            defaultedOptions
          );
        }
        if (defaultedOptions.refetchOnReconnect === void 0) {
          defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== "always";
        }
        if (defaultedOptions.throwOnError === void 0) {
          defaultedOptions.throwOnError = !!defaultedOptions.suspense;
        }
        if (!defaultedOptions.networkMode && defaultedOptions.persister) {
          defaultedOptions.networkMode = "offlineFirst";
        }
        if (defaultedOptions.queryFn === skipToken) {
          defaultedOptions.enabled = false;
        }
        return defaultedOptions;
      }
      defaultMutationOptions(options2) {
        if (options2 == null ? void 0 : options2._defaulted) {
          return options2;
        }
        return {
          ...__privateGet(this, _defaultOptions2).mutations,
          ...(options2 == null ? void 0 : options2.mutationKey) && this.getMutationDefaults(options2.mutationKey),
          ...options2,
          _defaulted: true
        };
      }
      clear() {
        __privateGet(this, _queryCache).clear();
        __privateGet(this, _mutationCache2).clear();
      }
    }, _queryCache = new WeakMap(), _mutationCache2 = new WeakMap(), _defaultOptions2 = new WeakMap(), _queryDefaults = new WeakMap(), _mutationDefaults = new WeakMap(), _mountCount = new WeakMap(), _unsubscribeFocus = new WeakMap(), _unsubscribeOnline = new WeakMap(), _h);
    var QueryObserver = (_i = class extends Subscribable {
      constructor(client2, options2) {
        super();
        __privateAdd(this, _QueryObserver_instances);
        __privateAdd(this, _client2);
        __privateAdd(this, _currentQuery);
        __privateAdd(this, _currentQueryInitialState);
        __privateAdd(this, _currentResult);
        __privateAdd(this, _currentResultState);
        __privateAdd(this, _currentResultOptions);
        __privateAdd(this, _currentThenable);
        __privateAdd(this, _selectError);
        __privateAdd(this, _selectFn);
        __privateAdd(this, _selectResult);
        // This property keeps track of the last query with defined data.
        // It will be used to pass the previous data and query to the placeholder function between renders.
        __privateAdd(this, _lastQueryWithDefinedData);
        __privateAdd(this, _staleTimeoutId);
        __privateAdd(this, _refetchIntervalId);
        __privateAdd(this, _currentRefetchInterval);
        __privateAdd(this, _trackedProps, /* @__PURE__ */ new Set());
        this.options = options2;
        __privateSet(this, _client2, client2);
        __privateSet(this, _selectError, null);
        __privateSet(this, _currentThenable, pendingThenable());
        if (!this.options.experimental_prefetchInRender) {
          __privateGet(this, _currentThenable).reject(
            new Error("experimental_prefetchInRender feature flag is not enabled")
          );
        }
        this.bindMethods();
        this.setOptions(options2);
      }
      bindMethods() {
        this.refetch = this.refetch.bind(this);
      }
      onSubscribe() {
        if (this.listeners.size === 1) {
          __privateGet(this, _currentQuery).addObserver(this);
          if (shouldFetchOnMount(__privateGet(this, _currentQuery), this.options)) {
            __privateMethod(this, _QueryObserver_instances, executeFetch_fn).call(this);
          } else {
            this.updateResult();
          }
          __privateMethod(this, _QueryObserver_instances, updateTimers_fn).call(this);
        }
      }
      onUnsubscribe() {
        if (!this.hasListeners()) {
          this.destroy();
        }
      }
      shouldFetchOnReconnect() {
        return shouldFetchOn(
          __privateGet(this, _currentQuery),
          this.options,
          this.options.refetchOnReconnect
        );
      }
      shouldFetchOnWindowFocus() {
        return shouldFetchOn(
          __privateGet(this, _currentQuery),
          this.options,
          this.options.refetchOnWindowFocus
        );
      }
      destroy() {
        this.listeners = /* @__PURE__ */ new Set();
        __privateMethod(this, _QueryObserver_instances, clearStaleTimeout_fn).call(this);
        __privateMethod(this, _QueryObserver_instances, clearRefetchInterval_fn).call(this);
        __privateGet(this, _currentQuery).removeObserver(this);
      }
      setOptions(options2) {
        const prevOptions = this.options;
        const prevQuery = __privateGet(this, _currentQuery);
        this.options = __privateGet(this, _client2).defaultQueryOptions(options2);
        if (this.options.enabled !== void 0 && typeof this.options.enabled !== "boolean" && typeof this.options.enabled !== "function" && typeof resolveEnabled(this.options.enabled, __privateGet(this, _currentQuery)) !== "boolean") {
          throw new Error(
            "Expected enabled to be a boolean or a callback that returns a boolean"
          );
        }
        __privateMethod(this, _QueryObserver_instances, updateQuery_fn).call(this);
        __privateGet(this, _currentQuery).setOptions(this.options);
        if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {
          __privateGet(this, _client2).getQueryCache().notify({
            type: "observerOptionsUpdated",
            query: __privateGet(this, _currentQuery),
            observer: this
          });
        }
        const mounted = this.hasListeners();
        if (mounted && shouldFetchOptionally(
          __privateGet(this, _currentQuery),
          prevQuery,
          this.options,
          prevOptions
        )) {
          __privateMethod(this, _QueryObserver_instances, executeFetch_fn).call(this);
        }
        this.updateResult();
        if (mounted && (__privateGet(this, _currentQuery) !== prevQuery || resolveEnabled(this.options.enabled, __privateGet(this, _currentQuery)) !== resolveEnabled(prevOptions.enabled, __privateGet(this, _currentQuery)) || resolveStaleTime(this.options.staleTime, __privateGet(this, _currentQuery)) !== resolveStaleTime(prevOptions.staleTime, __privateGet(this, _currentQuery)))) {
          __privateMethod(this, _QueryObserver_instances, updateStaleTimeout_fn).call(this);
        }
        const nextRefetchInterval = __privateMethod(this, _QueryObserver_instances, computeRefetchInterval_fn).call(this);
        if (mounted && (__privateGet(this, _currentQuery) !== prevQuery || resolveEnabled(this.options.enabled, __privateGet(this, _currentQuery)) !== resolveEnabled(prevOptions.enabled, __privateGet(this, _currentQuery)) || nextRefetchInterval !== __privateGet(this, _currentRefetchInterval))) {
          __privateMethod(this, _QueryObserver_instances, updateRefetchInterval_fn).call(this, nextRefetchInterval);
        }
      }
      getOptimisticResult(options2) {
        const query = __privateGet(this, _client2).getQueryCache().build(__privateGet(this, _client2), options2);
        const result = this.createResult(query, options2);
        if (shouldAssignObserverCurrentProperties(this, result)) {
          __privateSet(this, _currentResult, result);
          __privateSet(this, _currentResultOptions, this.options);
          __privateSet(this, _currentResultState, __privateGet(this, _currentQuery).state);
        }
        return result;
      }
      getCurrentResult() {
        return __privateGet(this, _currentResult);
      }
      trackResult(result, onPropTracked) {
        return new Proxy(result, {
          get: (target, key) => {
            this.trackProp(key);
            onPropTracked == null ? void 0 : onPropTracked(key);
            return Reflect.get(target, key);
          }
        });
      }
      trackProp(key) {
        __privateGet(this, _trackedProps).add(key);
      }
      getCurrentQuery() {
        return __privateGet(this, _currentQuery);
      }
      refetch({ ...options2 } = {}) {
        return this.fetch({
          ...options2
        });
      }
      fetchOptimistic(options2) {
        const defaultedOptions = __privateGet(this, _client2).defaultQueryOptions(options2);
        const query = __privateGet(this, _client2).getQueryCache().build(__privateGet(this, _client2), defaultedOptions);
        return query.fetch().then(() => this.createResult(query, defaultedOptions));
      }
      fetch(fetchOptions) {
        return __privateMethod(this, _QueryObserver_instances, executeFetch_fn).call(this, {
          ...fetchOptions,
          cancelRefetch: fetchOptions.cancelRefetch ?? true
        }).then(() => {
          this.updateResult();
          return __privateGet(this, _currentResult);
        });
      }
      createResult(query, options2) {
        var _a2;
        const prevQuery = __privateGet(this, _currentQuery);
        const prevOptions = this.options;
        const prevResult = __privateGet(this, _currentResult);
        const prevResultState = __privateGet(this, _currentResultState);
        const prevResultOptions = __privateGet(this, _currentResultOptions);
        const queryChange = query !== prevQuery;
        const queryInitialState = queryChange ? query.state : __privateGet(this, _currentQueryInitialState);
        const { state } = query;
        let newState = { ...state };
        let isPlaceholderData = false;
        let data;
        if (options2._optimisticResults) {
          const mounted = this.hasListeners();
          const fetchOnMount = !mounted && shouldFetchOnMount(query, options2);
          const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options2, prevOptions);
          if (fetchOnMount || fetchOptionally) {
            newState = {
              ...newState,
              ...fetchState(state.data, query.options)
            };
          }
          if (options2._optimisticResults === "isRestoring") {
            newState.fetchStatus = "idle";
          }
        }
        let { error, errorUpdatedAt, status } = newState;
        data = newState.data;
        let skipSelect = false;
        if (options2.placeholderData !== void 0 && data === void 0 && status === "pending") {
          let placeholderData;
          if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options2.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {
            placeholderData = prevResult.data;
            skipSelect = true;
          } else {
            placeholderData = typeof options2.placeholderData === "function" ? options2.placeholderData(
              (_a2 = __privateGet(this, _lastQueryWithDefinedData)) == null ? void 0 : _a2.state.data,
              __privateGet(this, _lastQueryWithDefinedData)
            ) : options2.placeholderData;
          }
          if (placeholderData !== void 0) {
            status = "success";
            data = replaceData(
              prevResult == null ? void 0 : prevResult.data,
              placeholderData,
              options2
            );
            isPlaceholderData = true;
          }
        }
        if (options2.select && data !== void 0 && !skipSelect) {
          if (prevResult && data === (prevResultState == null ? void 0 : prevResultState.data) && options2.select === __privateGet(this, _selectFn)) {
            data = __privateGet(this, _selectResult);
          } else {
            try {
              __privateSet(this, _selectFn, options2.select);
              data = options2.select(data);
              data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options2);
              __privateSet(this, _selectResult, data);
              __privateSet(this, _selectError, null);
            } catch (selectError) {
              __privateSet(this, _selectError, selectError);
            }
          }
        }
        if (__privateGet(this, _selectError)) {
          error = __privateGet(this, _selectError);
          data = __privateGet(this, _selectResult);
          errorUpdatedAt = Date.now();
          status = "error";
        }
        const isFetching = newState.fetchStatus === "fetching";
        const isPending = status === "pending";
        const isError = status === "error";
        const isLoading = isPending && isFetching;
        const hasData = data !== void 0;
        const result = {
          status,
          fetchStatus: newState.fetchStatus,
          isPending,
          isSuccess: status === "success",
          isError,
          isInitialLoading: isLoading,
          isLoading,
          data,
          dataUpdatedAt: newState.dataUpdatedAt,
          error,
          errorUpdatedAt,
          failureCount: newState.fetchFailureCount,
          failureReason: newState.fetchFailureReason,
          errorUpdateCount: newState.errorUpdateCount,
          isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,
          isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,
          isFetching,
          isRefetching: isFetching && !isPending,
          isLoadingError: isError && !hasData,
          isPaused: newState.fetchStatus === "paused",
          isPlaceholderData,
          isRefetchError: isError && hasData,
          isStale: isStale(query, options2),
          refetch: this.refetch,
          promise: __privateGet(this, _currentThenable)
        };
        const nextResult = result;
        if (this.options.experimental_prefetchInRender) {
          const finalizeThenableIfPossible = (thenable) => {
            if (nextResult.status === "error") {
              thenable.reject(nextResult.error);
            } else if (nextResult.data !== void 0) {
              thenable.resolve(nextResult.data);
            }
          };
          const recreateThenable = () => {
            const pending = __privateSet(this, _currentThenable, nextResult.promise = pendingThenable());
            finalizeThenableIfPossible(pending);
          };
          const prevThenable = __privateGet(this, _currentThenable);
          switch (prevThenable.status) {
            case "pending":
              if (query.queryHash === prevQuery.queryHash) {
                finalizeThenableIfPossible(prevThenable);
              }
              break;
            case "fulfilled":
              if (nextResult.status === "error" || nextResult.data !== prevThenable.value) {
                recreateThenable();
              }
              break;
            case "rejected":
              if (nextResult.status !== "error" || nextResult.error !== prevThenable.reason) {
                recreateThenable();
              }
              break;
          }
        }
        return nextResult;
      }
      updateResult() {
        const prevResult = __privateGet(this, _currentResult);
        const nextResult = this.createResult(__privateGet(this, _currentQuery), this.options);
        __privateSet(this, _currentResultState, __privateGet(this, _currentQuery).state);
        __privateSet(this, _currentResultOptions, this.options);
        if (__privateGet(this, _currentResultState).data !== void 0) {
          __privateSet(this, _lastQueryWithDefinedData, __privateGet(this, _currentQuery));
        }
        if (shallowEqualObjects(nextResult, prevResult)) {
          return;
        }
        __privateSet(this, _currentResult, nextResult);
        const shouldNotifyListeners = () => {
          if (!prevResult) {
            return true;
          }
          const { notifyOnChangeProps } = this.options;
          const notifyOnChangePropsValue = typeof notifyOnChangeProps === "function" ? notifyOnChangeProps() : notifyOnChangeProps;
          if (notifyOnChangePropsValue === "all" || !notifyOnChangePropsValue && !__privateGet(this, _trackedProps).size) {
            return true;
          }
          const includedProps = new Set(
            notifyOnChangePropsValue ?? __privateGet(this, _trackedProps)
          );
          if (this.options.throwOnError) {
            includedProps.add("error");
          }
          return Object.keys(__privateGet(this, _currentResult)).some((key) => {
            const typedKey = key;
            const changed = __privateGet(this, _currentResult)[typedKey] !== prevResult[typedKey];
            return changed && includedProps.has(typedKey);
          });
        };
        __privateMethod(this, _QueryObserver_instances, notify_fn).call(this, { listeners: shouldNotifyListeners() });
      }
      onQueryUpdate() {
        this.updateResult();
        if (this.hasListeners()) {
          __privateMethod(this, _QueryObserver_instances, updateTimers_fn).call(this);
        }
      }
    }, _client2 = new WeakMap(), _currentQuery = new WeakMap(), _currentQueryInitialState = new WeakMap(), _currentResult = new WeakMap(), _currentResultState = new WeakMap(), _currentResultOptions = new WeakMap(), _currentThenable = new WeakMap(), _selectError = new WeakMap(), _selectFn = new WeakMap(), _selectResult = new WeakMap(), _lastQueryWithDefinedData = new WeakMap(), _staleTimeoutId = new WeakMap(), _refetchIntervalId = new WeakMap(), _currentRefetchInterval = new WeakMap(), _trackedProps = new WeakMap(), _QueryObserver_instances = new WeakSet(), executeFetch_fn = function(fetchOptions) {
      __privateMethod(this, _QueryObserver_instances, updateQuery_fn).call(this);
      let promise = __privateGet(this, _currentQuery).fetch(
        this.options,
        fetchOptions
      );
      if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {
        promise = promise.catch(noop$1);
      }
      return promise;
    }, updateStaleTimeout_fn = function() {
      __privateMethod(this, _QueryObserver_instances, clearStaleTimeout_fn).call(this);
      const staleTime = resolveStaleTime(
        this.options.staleTime,
        __privateGet(this, _currentQuery)
      );
      if (isServer || __privateGet(this, _currentResult).isStale || !isValidTimeout(staleTime)) {
        return;
      }
      const time2 = timeUntilStale(__privateGet(this, _currentResult).dataUpdatedAt, staleTime);
      const timeout = time2 + 1;
      __privateSet(this, _staleTimeoutId, setTimeout(() => {
        if (!__privateGet(this, _currentResult).isStale) {
          this.updateResult();
        }
      }, timeout));
    }, computeRefetchInterval_fn = function() {
      return (typeof this.options.refetchInterval === "function" ? this.options.refetchInterval(__privateGet(this, _currentQuery)) : this.options.refetchInterval) ?? false;
    }, updateRefetchInterval_fn = function(nextInterval) {
      __privateMethod(this, _QueryObserver_instances, clearRefetchInterval_fn).call(this);
      __privateSet(this, _currentRefetchInterval, nextInterval);
      if (isServer || resolveEnabled(this.options.enabled, __privateGet(this, _currentQuery)) === false || !isValidTimeout(__privateGet(this, _currentRefetchInterval)) || __privateGet(this, _currentRefetchInterval) === 0) {
        return;
      }
      __privateSet(this, _refetchIntervalId, setInterval(() => {
        if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {
          __privateMethod(this, _QueryObserver_instances, executeFetch_fn).call(this);
        }
      }, __privateGet(this, _currentRefetchInterval)));
    }, updateTimers_fn = function() {
      __privateMethod(this, _QueryObserver_instances, updateStaleTimeout_fn).call(this);
      __privateMethod(this, _QueryObserver_instances, updateRefetchInterval_fn).call(this, __privateMethod(this, _QueryObserver_instances, computeRefetchInterval_fn).call(this));
    }, clearStaleTimeout_fn = function() {
      if (__privateGet(this, _staleTimeoutId)) {
        clearTimeout(__privateGet(this, _staleTimeoutId));
        __privateSet(this, _staleTimeoutId, void 0);
      }
    }, clearRefetchInterval_fn = function() {
      if (__privateGet(this, _refetchIntervalId)) {
        clearInterval(__privateGet(this, _refetchIntervalId));
        __privateSet(this, _refetchIntervalId, void 0);
      }
    }, updateQuery_fn = function() {
      const query = __privateGet(this, _client2).getQueryCache().build(__privateGet(this, _client2), this.options);
      if (query === __privateGet(this, _currentQuery)) {
        return;
      }
      const prevQuery = __privateGet(this, _currentQuery);
      __privateSet(this, _currentQuery, query);
      __privateSet(this, _currentQueryInitialState, query.state);
      if (this.hasListeners()) {
        prevQuery == null ? void 0 : prevQuery.removeObserver(this);
        query.addObserver(this);
      }
    }, notify_fn = function(notifyOptions) {
      notifyManager.batch(() => {
        if (notifyOptions.listeners) {
          this.listeners.forEach((listener) => {
            listener(__privateGet(this, _currentResult));
          });
        }
        __privateGet(this, _client2).getQueryCache().notify({
          query: __privateGet(this, _currentQuery),
          type: "observerResultsUpdated"
        });
      });
    }, _i);
    function shouldLoadOnMount(query, options2) {
      return resolveEnabled(options2.enabled, query) !== false && query.state.data === void 0 && !(query.state.status === "error" && options2.retryOnMount === false);
    }
    function shouldFetchOnMount(query, options2) {
      return shouldLoadOnMount(query, options2) || query.state.data !== void 0 && shouldFetchOn(query, options2, options2.refetchOnMount);
    }
    function shouldFetchOn(query, options2, field) {
      if (resolveEnabled(options2.enabled, query) !== false) {
        const value = typeof field === "function" ? field(query) : field;
        return value === "always" || value !== false && isStale(query, options2);
      }
      return false;
    }
    function shouldFetchOptionally(query, prevQuery, options2, prevOptions) {
      return (query !== prevQuery || resolveEnabled(prevOptions.enabled, query) === false) && (!options2.suspense || query.state.status !== "error") && isStale(query, options2);
    }
    function isStale(query, options2) {
      return resolveEnabled(options2.enabled, query) !== false && query.isStaleByTime(resolveStaleTime(options2.staleTime, query));
    }
    function shouldAssignObserverCurrentProperties(observer, optimisticResult) {
      if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {
        return true;
      }
      return false;
    }
    var MutationObserver$1 = (_j = class extends Subscribable {
      constructor(client2, options2) {
        super();
        __privateAdd(this, _MutationObserver_instances);
        __privateAdd(this, _client3);
        __privateAdd(this, _currentResult2);
        __privateAdd(this, _currentMutation);
        __privateAdd(this, _mutateOptions);
        __privateSet(this, _client3, client2);
        this.setOptions(options2);
        this.bindMethods();
        __privateMethod(this, _MutationObserver_instances, updateResult_fn).call(this);
      }
      bindMethods() {
        this.mutate = this.mutate.bind(this);
        this.reset = this.reset.bind(this);
      }
      setOptions(options2) {
        var _a2;
        const prevOptions = this.options;
        this.options = __privateGet(this, _client3).defaultMutationOptions(options2);
        if (!shallowEqualObjects(this.options, prevOptions)) {
          __privateGet(this, _client3).getMutationCache().notify({
            type: "observerOptionsUpdated",
            mutation: __privateGet(this, _currentMutation),
            observer: this
          });
        }
        if ((prevOptions == null ? void 0 : prevOptions.mutationKey) && this.options.mutationKey && hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)) {
          this.reset();
        } else if (((_a2 = __privateGet(this, _currentMutation)) == null ? void 0 : _a2.state.status) === "pending") {
          __privateGet(this, _currentMutation).setOptions(this.options);
        }
      }
      onUnsubscribe() {
        var _a2;
        if (!this.hasListeners()) {
          (_a2 = __privateGet(this, _currentMutation)) == null ? void 0 : _a2.removeObserver(this);
        }
      }
      onMutationUpdate(action) {
        __privateMethod(this, _MutationObserver_instances, updateResult_fn).call(this);
        __privateMethod(this, _MutationObserver_instances, notify_fn2).call(this, action);
      }
      getCurrentResult() {
        return __privateGet(this, _currentResult2);
      }
      reset() {
        var _a2;
        (_a2 = __privateGet(this, _currentMutation)) == null ? void 0 : _a2.removeObserver(this);
        __privateSet(this, _currentMutation, void 0);
        __privateMethod(this, _MutationObserver_instances, updateResult_fn).call(this);
        __privateMethod(this, _MutationObserver_instances, notify_fn2).call(this);
      }
      mutate(variables, options2) {
        var _a2;
        __privateSet(this, _mutateOptions, options2);
        (_a2 = __privateGet(this, _currentMutation)) == null ? void 0 : _a2.removeObserver(this);
        __privateSet(this, _currentMutation, __privateGet(this, _client3).getMutationCache().build(__privateGet(this, _client3), this.options));
        __privateGet(this, _currentMutation).addObserver(this);
        return __privateGet(this, _currentMutation).execute(variables);
      }
    }, _client3 = new WeakMap(), _currentResult2 = new WeakMap(), _currentMutation = new WeakMap(), _mutateOptions = new WeakMap(), _MutationObserver_instances = new WeakSet(), updateResult_fn = function() {
      var _a2;
      const state = ((_a2 = __privateGet(this, _currentMutation)) == null ? void 0 : _a2.state) ?? getDefaultState();
      __privateSet(this, _currentResult2, {
        ...state,
        isPending: state.status === "pending",
        isSuccess: state.status === "success",
        isError: state.status === "error",
        isIdle: state.status === "idle",
        mutate: this.mutate,
        reset: this.reset
      });
    }, notify_fn2 = function(action) {
      notifyManager.batch(() => {
        var _a2, _b2, _c2, _d2, _e3, _f2, _g2, _h2;
        if (__privateGet(this, _mutateOptions) && this.hasListeners()) {
          const variables = __privateGet(this, _currentResult2).variables;
          const context = __privateGet(this, _currentResult2).context;
          if ((action == null ? void 0 : action.type) === "success") {
            (_b2 = (_a2 = __privateGet(this, _mutateOptions)).onSuccess) == null ? void 0 : _b2.call(_a2, action.data, variables, context);
            (_d2 = (_c2 = __privateGet(this, _mutateOptions)).onSettled) == null ? void 0 : _d2.call(_c2, action.data, null, variables, context);
          } else if ((action == null ? void 0 : action.type) === "error") {
            (_f2 = (_e3 = __privateGet(this, _mutateOptions)).onError) == null ? void 0 : _f2.call(_e3, action.error, variables, context);
            (_h2 = (_g2 = __privateGet(this, _mutateOptions)).onSettled) == null ? void 0 : _h2.call(
              _g2,
              void 0,
              action.error,
              variables,
              context
            );
          }
        }
        this.listeners.forEach((listener) => {
          listener(__privateGet(this, _currentResult2));
        });
      });
    }, _j);
    var QueryClientContext = reactExports.createContext(
      void 0
    );
    var useQueryClient = (queryClient2) => {
      const client2 = reactExports.useContext(QueryClientContext);
      if (!client2) {
        throw new Error("No QueryClient set, use QueryClientProvider to set one");
      }
      return client2;
    };
    var QueryClientProvider = ({
      client: client2,
      children
    }) => {
      reactExports.useEffect(() => {
        client2.mount();
        return () => {
          client2.unmount();
        };
      }, [client2]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(QueryClientContext.Provider, { value: client2, children });
    };
    var IsRestoringContext = reactExports.createContext(false);
    var useIsRestoring = () => reactExports.useContext(IsRestoringContext);
    IsRestoringContext.Provider;
    function createValue() {
      let isReset = false;
      return {
        clearReset: () => {
          isReset = false;
        },
        reset: () => {
          isReset = true;
        },
        isReset: () => {
          return isReset;
        }
      };
    }
    var QueryErrorResetBoundaryContext = reactExports.createContext(createValue());
    var useQueryErrorResetBoundary = () => reactExports.useContext(QueryErrorResetBoundaryContext);
    var ensurePreventErrorBoundaryRetry = (options2, errorResetBoundary) => {
      if (options2.suspense || options2.throwOnError || options2.experimental_prefetchInRender) {
        if (!errorResetBoundary.isReset()) {
          options2.retryOnMount = false;
        }
      }
    };
    var useClearResetErrorBoundary = (errorResetBoundary) => {
      reactExports.useEffect(() => {
        errorResetBoundary.clearReset();
      }, [errorResetBoundary]);
    };
    var getHasError = ({
      result,
      errorResetBoundary,
      throwOnError,
      query,
      suspense
    }) => {
      return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && (suspense && result.data === void 0 || shouldThrowError(throwOnError, [result.error, query]));
    };
    var ensureSuspenseTimers = (defaultedOptions) => {
      const originalStaleTime = defaultedOptions.staleTime;
      if (defaultedOptions.suspense) {
        defaultedOptions.staleTime = typeof originalStaleTime === "function" ? (...args) => Math.max(originalStaleTime(...args), 1e3) : Math.max(originalStaleTime ?? 1e3, 1e3);
        if (typeof defaultedOptions.gcTime === "number") {
          defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1e3);
        }
      }
    };
    var willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;
    var shouldSuspend = (defaultedOptions, result) => (defaultedOptions == null ? void 0 : defaultedOptions.suspense) && result.isPending;
    var fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).catch(() => {
      errorResetBoundary.clearReset();
    });
    function useBaseQuery(options2, Observer2, queryClient2) {
      var _a2, _b2, _c2, _d2, _e3;
      const client2 = useQueryClient();
      const isRestoring = useIsRestoring();
      const errorResetBoundary = useQueryErrorResetBoundary();
      const defaultedOptions = client2.defaultQueryOptions(options2);
      (_b2 = (_a2 = client2.getDefaultOptions().queries) == null ? void 0 : _a2._experimental_beforeQuery) == null ? void 0 : _b2.call(
        _a2,
        defaultedOptions
      );
      defaultedOptions._optimisticResults = isRestoring ? "isRestoring" : "optimistic";
      ensureSuspenseTimers(defaultedOptions);
      ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);
      useClearResetErrorBoundary(errorResetBoundary);
      const isNewCacheEntry = !client2.getQueryCache().get(defaultedOptions.queryHash);
      const [observer] = reactExports.useState(
        () => new Observer2(
          client2,
          defaultedOptions
        )
      );
      const result = observer.getOptimisticResult(defaultedOptions);
      const shouldSubscribe = !isRestoring && options2.subscribed !== false;
      reactExports.useSyncExternalStore(
        reactExports.useCallback(
          (onStoreChange) => {
            const unsubscribe = shouldSubscribe ? observer.subscribe(notifyManager.batchCalls(onStoreChange)) : noop$1;
            observer.updateResult();
            return unsubscribe;
          },
          [observer, shouldSubscribe]
        ),
        () => observer.getCurrentResult(),
        () => observer.getCurrentResult()
      );
      reactExports.useEffect(() => {
        observer.setOptions(defaultedOptions);
      }, [defaultedOptions, observer]);
      if (shouldSuspend(defaultedOptions, result)) {
        throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);
      }
      if (getHasError({
        result,
        errorResetBoundary,
        throwOnError: defaultedOptions.throwOnError,
        query: client2.getQueryCache().get(defaultedOptions.queryHash),
        suspense: defaultedOptions.suspense
      })) {
        throw result.error;
      }
      (_d2 = (_c2 = client2.getDefaultOptions().queries) == null ? void 0 : _c2._experimental_afterQuery) == null ? void 0 : _d2.call(
        _c2,
        defaultedOptions,
        result
      );
      if (defaultedOptions.experimental_prefetchInRender && !isServer && willFetch(result, isRestoring)) {
        const promise = isNewCacheEntry ? (
          // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted
          fetchOptimistic(defaultedOptions, observer, errorResetBoundary)
        ) : (
          // subscribe to the "cache promise" so that we can finalize the currentThenable once data comes in
          (_e3 = client2.getQueryCache().get(defaultedOptions.queryHash)) == null ? void 0 : _e3.promise
        );
        promise == null ? void 0 : promise.catch(noop$1).finally(() => {
          observer.updateResult();
        });
      }
      return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;
    }
    function useQuery(options2, queryClient2) {
      return useBaseQuery(options2, QueryObserver);
    }
    function useMutation(options2, queryClient2) {
      const client2 = useQueryClient();
      const [observer] = reactExports.useState(
        () => new MutationObserver$1(
          client2,
          options2
        )
      );
      reactExports.useEffect(() => {
        observer.setOptions(options2);
      }, [observer, options2]);
      const result = reactExports.useSyncExternalStore(
        reactExports.useCallback(
          (onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)),
          [observer]
        ),
        () => observer.getCurrentResult(),
        () => observer.getCurrentResult()
      );
      const mutate = reactExports.useCallback(
        (variables, mutateOptions) => {
          observer.mutate(variables, mutateOptions).catch(noop$1);
        },
        [observer]
      );
      if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {
        throw result.error;
      }
      return { ...result, mutate, mutateAsync: result.mutate };
    }
    var dist = {};
    var hasRequiredDist;
    function requireDist() {
      if (hasRequiredDist) return dist;
      hasRequiredDist = 1;
      Object.defineProperty(dist, "__esModule", { value: true });
      dist.parse = parse2;
      dist.serialize = serialize;
      const cookieNameRegExp = /^[\u0021-\u003A\u003C\u003E-\u007E]+$/;
      const cookieValueRegExp = /^[\u0021-\u003A\u003C-\u007E]*$/;
      const domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;
      const pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/;
      const __toString = Object.prototype.toString;
      const NullObject = /* @__PURE__ */ (() => {
        const C = function() {
        };
        C.prototype = /* @__PURE__ */ Object.create(null);
        return C;
      })();
      function parse2(str, options2) {
        const obj = new NullObject();
        const len = str.length;
        if (len < 2)
          return obj;
        const dec = (options2 == null ? void 0 : options2.decode) || decode;
        let index2 = 0;
        do {
          const eqIdx = str.indexOf("=", index2);
          if (eqIdx === -1)
            break;
          const colonIdx = str.indexOf(";", index2);
          const endIdx = colonIdx === -1 ? len : colonIdx;
          if (eqIdx > endIdx) {
            index2 = str.lastIndexOf(";", eqIdx - 1) + 1;
            continue;
          }
          const keyStartIdx = startIndex(str, index2, eqIdx);
          const keyEndIdx = endIndex(str, eqIdx, keyStartIdx);
          const key = str.slice(keyStartIdx, keyEndIdx);
          if (obj[key] === void 0) {
            let valStartIdx = startIndex(str, eqIdx + 1, endIdx);
            let valEndIdx = endIndex(str, endIdx, valStartIdx);
            const value = dec(str.slice(valStartIdx, valEndIdx));
            obj[key] = value;
          }
          index2 = endIdx + 1;
        } while (index2 < len);
        return obj;
      }
      function startIndex(str, index2, max2) {
        do {
          const code = str.charCodeAt(index2);
          if (code !== 32 && code !== 9)
            return index2;
        } while (++index2 < max2);
        return max2;
      }
      function endIndex(str, index2, min2) {
        while (index2 > min2) {
          const code = str.charCodeAt(--index2);
          if (code !== 32 && code !== 9)
            return index2 + 1;
        }
        return min2;
      }
      function serialize(name, val, options2) {
        const enc = (options2 == null ? void 0 : options2.encode) || encodeURIComponent;
        if (!cookieNameRegExp.test(name)) {
          throw new TypeError(`argument name is invalid: ${name}`);
        }
        const value = enc(val);
        if (!cookieValueRegExp.test(value)) {
          throw new TypeError(`argument val is invalid: ${val}`);
        }
        let str = name + "=" + value;
        if (!options2)
          return str;
        if (options2.maxAge !== void 0) {
          if (!Number.isInteger(options2.maxAge)) {
            throw new TypeError(`option maxAge is invalid: ${options2.maxAge}`);
          }
          str += "; Max-Age=" + options2.maxAge;
        }
        if (options2.domain) {
          if (!domainValueRegExp.test(options2.domain)) {
            throw new TypeError(`option domain is invalid: ${options2.domain}`);
          }
          str += "; Domain=" + options2.domain;
        }
        if (options2.path) {
          if (!pathValueRegExp.test(options2.path)) {
            throw new TypeError(`option path is invalid: ${options2.path}`);
          }
          str += "; Path=" + options2.path;
        }
        if (options2.expires) {
          if (!isDate2(options2.expires) || !Number.isFinite(options2.expires.valueOf())) {
            throw new TypeError(`option expires is invalid: ${options2.expires}`);
          }
          str += "; Expires=" + options2.expires.toUTCString();
        }
        if (options2.httpOnly) {
          str += "; HttpOnly";
        }
        if (options2.secure) {
          str += "; Secure";
        }
        if (options2.partitioned) {
          str += "; Partitioned";
        }
        if (options2.priority) {
          const priority = typeof options2.priority === "string" ? options2.priority.toLowerCase() : void 0;
          switch (priority) {
            case "low":
              str += "; Priority=Low";
              break;
            case "medium":
              str += "; Priority=Medium";
              break;
            case "high":
              str += "; Priority=High";
              break;
            default:
              throw new TypeError(`option priority is invalid: ${options2.priority}`);
          }
        }
        if (options2.sameSite) {
          const sameSite = typeof options2.sameSite === "string" ? options2.sameSite.toLowerCase() : options2.sameSite;
          switch (sameSite) {
            case true:
            case "strict":
              str += "; SameSite=Strict";
              break;
            case "lax":
              str += "; SameSite=Lax";
              break;
            case "none":
              str += "; SameSite=None";
              break;
            default:
              throw new TypeError(`option sameSite is invalid: ${options2.sameSite}`);
          }
        }
        return str;
      }
      function decode(str) {
        if (str.indexOf("%") === -1)
          return str;
        try {
          return decodeURIComponent(str);
        } catch (e) {
          return str;
        }
      }
      function isDate2(val) {
        return __toString.call(val) === "[object Date]";
      }
      return dist;
    }
    var distExports = requireDist();
    function hasDocumentCookie() {
      const testingValue = typeof global === "undefined" ? void 0 : global.TEST_HAS_DOCUMENT_COOKIE;
      if (typeof testingValue === "boolean") {
        return testingValue;
      }
      return typeof document === "object" && typeof document.cookie === "string";
    }
    function parseCookies(cookies2) {
      if (typeof cookies2 === "string") {
        return distExports.parse(cookies2);
      } else if (typeof cookies2 === "object" && cookies2 !== null) {
        return cookies2;
      } else {
        return {};
      }
    }
    function readCookie(value, options2 = {}) {
      const cleanValue = cleanupCookieValue(value);
      if (!options2.doNotParse) {
        try {
          return JSON.parse(cleanValue);
        } catch (e) {
        }
      }
      return value;
    }
    function cleanupCookieValue(value) {
      if (value && value[0] === "j" && value[1] === ":") {
        return value.substr(2);
      }
      return value;
    }
    class Cookies {
      constructor(cookies2, defaultSetOptions = {}) {
        this.changeListeners = [];
        this.HAS_DOCUMENT_COOKIE = false;
        this.update = () => {
          if (!this.HAS_DOCUMENT_COOKIE) {
            return;
          }
          const previousCookies = this.cookies;
          this.cookies = distExports.parse(document.cookie);
          this._checkChanges(previousCookies);
        };
        const domCookies = typeof document === "undefined" ? "" : document.cookie;
        this.cookies = parseCookies(cookies2 || domCookies);
        this.defaultSetOptions = defaultSetOptions;
        this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();
      }
      _emitChange(params) {
        for (let i2 = 0; i2 < this.changeListeners.length; ++i2) {
          this.changeListeners[i2](params);
        }
      }
      _checkChanges(previousCookies) {
        const names = new Set(Object.keys(previousCookies).concat(Object.keys(this.cookies)));
        names.forEach((name) => {
          if (previousCookies[name] !== this.cookies[name]) {
            this._emitChange({
              name,
              value: readCookie(this.cookies[name])
            });
          }
        });
      }
      _startPolling() {
        this.pollingInterval = setInterval(this.update, 300);
      }
      _stopPolling() {
        if (this.pollingInterval) {
          clearInterval(this.pollingInterval);
        }
      }
      get(name, options2 = {}) {
        if (!options2.doNotUpdate) {
          this.update();
        }
        return readCookie(this.cookies[name], options2);
      }
      getAll(options2 = {}) {
        if (!options2.doNotUpdate) {
          this.update();
        }
        const result = {};
        for (let name in this.cookies) {
          result[name] = readCookie(this.cookies[name], options2);
        }
        return result;
      }
      set(name, value, options2) {
        if (options2) {
          options2 = Object.assign(Object.assign({}, this.defaultSetOptions), options2);
        } else {
          options2 = this.defaultSetOptions;
        }
        const stringValue = typeof value === "string" ? value : JSON.stringify(value);
        this.cookies = Object.assign(Object.assign({}, this.cookies), { [name]: stringValue });
        if (this.HAS_DOCUMENT_COOKIE) {
          document.cookie = distExports.serialize(name, stringValue, options2);
        }
        this._emitChange({ name, value, options: options2 });
      }
      remove(name, options2) {
        const finalOptions = options2 = Object.assign(Object.assign(Object.assign({}, this.defaultSetOptions), options2), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 });
        this.cookies = Object.assign({}, this.cookies);
        delete this.cookies[name];
        if (this.HAS_DOCUMENT_COOKIE) {
          document.cookie = distExports.serialize(name, "", finalOptions);
        }
        this._emitChange({ name, value: void 0, options: options2 });
      }
      addChangeListener(callback) {
        this.changeListeners.push(callback);
        if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 1) {
          if (typeof window === "object" && "cookieStore" in window) {
            window.cookieStore.addEventListener("change", this.update);
          } else {
            this._startPolling();
          }
        }
      }
      removeChangeListener(callback) {
        const idx = this.changeListeners.indexOf(callback);
        if (idx >= 0) {
          this.changeListeners.splice(idx, 1);
        }
        if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 0) {
          if (typeof window === "object" && "cookieStore" in window) {
            window.cookieStore.removeEventListener("change", this.update);
          } else {
            this._stopPolling();
          }
        }
      }
      removeAllChangeListeners() {
        while (this.changeListeners.length > 0) {
          this.removeChangeListener(this.changeListeners[0]);
        }
      }
    }
    const CookiesContext = reactExports.createContext(null);
    const { Provider, Consumer } = CookiesContext;
    const CookiesProvider = (props) => {
      const cookies2 = reactExports.useMemo(() => {
        if (props.cookies) {
          return props.cookies;
        } else {
          return new Cookies(void 0, props.defaultSetOptions);
        }
      }, [props.cookies, props.defaultSetOptions]);
      return reactExports.createElement(Provider, { value: cookies2 }, props.children);
    };
    typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    var reactIs$1 = { exports: {} };
    var reactIs_production_min$1 = {};
    /** @license React v16.13.1
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var hasRequiredReactIs_production_min$1;
    function requireReactIs_production_min$1() {
      if (hasRequiredReactIs_production_min$1) return reactIs_production_min$1;
      hasRequiredReactIs_production_min$1 = 1;
      var b = "function" === typeof Symbol && Symbol.for, c2 = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k2 = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m2 = b ? Symbol.for("react.concurrent_mode") : 60111, n2 = b ? Symbol.for("react.forward_ref") : 60112, p2 = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.suspense_list") : 60120, r2 = b ? Symbol.for("react.memo") : 60115, t = b ? Symbol.for("react.lazy") : 60116, v = b ? Symbol.for("react.block") : 60121, w = b ? Symbol.for("react.fundamental") : 60117, x2 = b ? Symbol.for("react.responder") : 60118, y2 = b ? Symbol.for("react.scope") : 60119;
      function z2(a2) {
        if ("object" === typeof a2 && null !== a2) {
          var u2 = a2.$$typeof;
          switch (u2) {
            case c2:
              switch (a2 = a2.type, a2) {
                case l:
                case m2:
                case e:
                case g:
                case f:
                case p2:
                  return a2;
                default:
                  switch (a2 = a2 && a2.$$typeof, a2) {
                    case k2:
                    case n2:
                    case t:
                    case r2:
                    case h:
                      return a2;
                    default:
                      return u2;
                  }
              }
            case d:
              return u2;
          }
        }
      }
      function A(a2) {
        return z2(a2) === m2;
      }
      reactIs_production_min$1.AsyncMode = l;
      reactIs_production_min$1.ConcurrentMode = m2;
      reactIs_production_min$1.ContextConsumer = k2;
      reactIs_production_min$1.ContextProvider = h;
      reactIs_production_min$1.Element = c2;
      reactIs_production_min$1.ForwardRef = n2;
      reactIs_production_min$1.Fragment = e;
      reactIs_production_min$1.Lazy = t;
      reactIs_production_min$1.Memo = r2;
      reactIs_production_min$1.Portal = d;
      reactIs_production_min$1.Profiler = g;
      reactIs_production_min$1.StrictMode = f;
      reactIs_production_min$1.Suspense = p2;
      reactIs_production_min$1.isAsyncMode = function(a2) {
        return A(a2) || z2(a2) === l;
      };
      reactIs_production_min$1.isConcurrentMode = A;
      reactIs_production_min$1.isContextConsumer = function(a2) {
        return z2(a2) === k2;
      };
      reactIs_production_min$1.isContextProvider = function(a2) {
        return z2(a2) === h;
      };
      reactIs_production_min$1.isElement = function(a2) {
        return "object" === typeof a2 && null !== a2 && a2.$$typeof === c2;
      };
      reactIs_production_min$1.isForwardRef = function(a2) {
        return z2(a2) === n2;
      };
      reactIs_production_min$1.isFragment = function(a2) {
        return z2(a2) === e;
      };
      reactIs_production_min$1.isLazy = function(a2) {
        return z2(a2) === t;
      };
      reactIs_production_min$1.isMemo = function(a2) {
        return z2(a2) === r2;
      };
      reactIs_production_min$1.isPortal = function(a2) {
        return z2(a2) === d;
      };
      reactIs_production_min$1.isProfiler = function(a2) {
        return z2(a2) === g;
      };
      reactIs_production_min$1.isStrictMode = function(a2) {
        return z2(a2) === f;
      };
      reactIs_production_min$1.isSuspense = function(a2) {
        return z2(a2) === p2;
      };
      reactIs_production_min$1.isValidElementType = function(a2) {
        return "string" === typeof a2 || "function" === typeof a2 || a2 === e || a2 === m2 || a2 === g || a2 === f || a2 === p2 || a2 === q || "object" === typeof a2 && null !== a2 && (a2.$$typeof === t || a2.$$typeof === r2 || a2.$$typeof === h || a2.$$typeof === k2 || a2.$$typeof === n2 || a2.$$typeof === w || a2.$$typeof === x2 || a2.$$typeof === y2 || a2.$$typeof === v);
      };
      reactIs_production_min$1.typeOf = z2;
      return reactIs_production_min$1;
    }
    var hasRequiredReactIs$1;
    function requireReactIs$1() {
      if (hasRequiredReactIs$1) return reactIs$1.exports;
      hasRequiredReactIs$1 = 1;
      {
        reactIs$1.exports = requireReactIs_production_min$1();
      }
      return reactIs$1.exports;
    }
    var hoistNonReactStatics_cjs;
    var hasRequiredHoistNonReactStatics_cjs;
    function requireHoistNonReactStatics_cjs() {
      if (hasRequiredHoistNonReactStatics_cjs) return hoistNonReactStatics_cjs;
      hasRequiredHoistNonReactStatics_cjs = 1;
      var reactIs2 = requireReactIs$1();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs2.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs2.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs2.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames2 = Object.getOwnPropertyNames;
      var getOwnPropertySymbols2 = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor2 = Object.getOwnPropertyDescriptor;
      var getPrototypeOf2 = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf2(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys2 = getOwnPropertyNames2(sourceComponent);
          if (getOwnPropertySymbols2) {
            keys2 = keys2.concat(getOwnPropertySymbols2(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i2 = 0; i2 < keys2.length; ++i2) {
            var key = keys2[i2];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor2(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      hoistNonReactStatics_cjs = hoistNonReactStatics;
      return hoistNonReactStatics_cjs;
    }
    requireHoistNonReactStatics_cjs();
    function isInBrowser() {
      return typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
    }
    function useCookies(dependencies, options2) {
      const cookies2 = reactExports.useContext(CookiesContext);
      if (!cookies2) {
        throw new Error("Missing <CookiesProvider>");
      }
      const defaultOptions2 = { doNotUpdate: true };
      const getOptions = Object.assign(Object.assign({}, defaultOptions2), options2);
      const [allCookies, setCookies] = reactExports.useState(() => cookies2.getAll(getOptions));
      if (isInBrowser()) {
        reactExports.useLayoutEffect(() => {
          function onChange() {
            if (!cookies2) {
              throw new Error("Missing <CookiesProvider>");
            }
            const newCookies = cookies2.getAll(getOptions);
            if (shouldUpdate(dependencies || null, newCookies, allCookies)) {
              setCookies(newCookies);
            }
          }
          cookies2.addChangeListener(onChange);
          return () => {
            cookies2.removeChangeListener(onChange);
          };
        }, [cookies2, allCookies]);
      }
      const setCookie = reactExports.useMemo(() => cookies2.set.bind(cookies2), [cookies2]);
      const removeCookie = reactExports.useMemo(() => cookies2.remove.bind(cookies2), [cookies2]);
      const updateCookies = reactExports.useMemo(() => cookies2.update.bind(cookies2), [cookies2]);
      return [allCookies, setCookie, removeCookie, updateCookies];
    }
    function shouldUpdate(dependencies, newCookies, oldCookies) {
      if (!dependencies) {
        return true;
      }
      for (let dependency of dependencies) {
        if (newCookies[dependency] !== oldCookies[dependency]) {
          return true;
        }
      }
      return false;
    }
    function __insertCSS(code) {
      if (typeof document == "undefined") return;
      let head = document.head || document.getElementsByTagName("head")[0];
      let style = document.createElement("style");
      style.type = "text/css";
      head.appendChild(style);
      style.styleSheet ? style.styleSheet.cssText = code : style.appendChild(document.createTextNode(code));
    }
    const getAsset = (type) => {
      switch (type) {
        case "success":
          return SuccessIcon;
        case "info":
          return InfoIcon;
        case "warning":
          return WarningIcon;
        case "error":
          return ErrorIcon;
        default:
          return null;
      }
    };
    const bars = Array(12).fill(0);
    const Loader = ({ visible, className }) => {
      return /* @__PURE__ */ React.createElement("div", {
        className: [
          "sonner-loading-wrapper",
          className
        ].filter(Boolean).join(" "),
        "data-visible": visible
      }, /* @__PURE__ */ React.createElement("div", {
        className: "sonner-spinner"
      }, bars.map((_, i2) => /* @__PURE__ */ React.createElement("div", {
        className: "sonner-loading-bar",
        key: `spinner-bar-${i2}`
      }))));
    };
    const SuccessIcon = /* @__PURE__ */ React.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      fill: "currentColor",
      height: "20",
      width: "20"
    }, /* @__PURE__ */ React.createElement("path", {
      fillRule: "evenodd",
      d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z",
      clipRule: "evenodd"
    }));
    const WarningIcon = /* @__PURE__ */ React.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 24 24",
      fill: "currentColor",
      height: "20",
      width: "20"
    }, /* @__PURE__ */ React.createElement("path", {
      fillRule: "evenodd",
      d: "M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z",
      clipRule: "evenodd"
    }));
    const InfoIcon = /* @__PURE__ */ React.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      fill: "currentColor",
      height: "20",
      width: "20"
    }, /* @__PURE__ */ React.createElement("path", {
      fillRule: "evenodd",
      d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z",
      clipRule: "evenodd"
    }));
    const ErrorIcon = /* @__PURE__ */ React.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      fill: "currentColor",
      height: "20",
      width: "20"
    }, /* @__PURE__ */ React.createElement("path", {
      fillRule: "evenodd",
      d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z",
      clipRule: "evenodd"
    }));
    const CloseIcon = /* @__PURE__ */ React.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: "12",
      height: "12",
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: "1.5",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }, /* @__PURE__ */ React.createElement("line", {
      x1: "18",
      y1: "6",
      x2: "6",
      y2: "18"
    }), /* @__PURE__ */ React.createElement("line", {
      x1: "6",
      y1: "6",
      x2: "18",
      y2: "18"
    }));
    const useIsDocumentHidden = () => {
      const [isDocumentHidden, setIsDocumentHidden] = React.useState(document.hidden);
      React.useEffect(() => {
        const callback = () => {
          setIsDocumentHidden(document.hidden);
        };
        document.addEventListener("visibilitychange", callback);
        return () => window.removeEventListener("visibilitychange", callback);
      }, []);
      return isDocumentHidden;
    };
    let toastsCounter = 1;
    class Observer {
      constructor() {
        this.subscribe = (subscriber) => {
          this.subscribers.push(subscriber);
          return () => {
            const index2 = this.subscribers.indexOf(subscriber);
            this.subscribers.splice(index2, 1);
          };
        };
        this.publish = (data) => {
          this.subscribers.forEach((subscriber) => subscriber(data));
        };
        this.addToast = (data) => {
          this.publish(data);
          this.toasts = [
            ...this.toasts,
            data
          ];
        };
        this.create = (data) => {
          var _data_id;
          const { message, ...rest } = data;
          const id = typeof (data == null ? void 0 : data.id) === "number" || ((_data_id = data.id) == null ? void 0 : _data_id.length) > 0 ? data.id : toastsCounter++;
          const alreadyExists = this.toasts.find((toast2) => {
            return toast2.id === id;
          });
          const dismissible = data.dismissible === void 0 ? true : data.dismissible;
          if (this.dismissedToasts.has(id)) {
            this.dismissedToasts.delete(id);
          }
          if (alreadyExists) {
            this.toasts = this.toasts.map((toast2) => {
              if (toast2.id === id) {
                this.publish({
                  ...toast2,
                  ...data,
                  id,
                  title: message
                });
                return {
                  ...toast2,
                  ...data,
                  id,
                  dismissible,
                  title: message
                };
              }
              return toast2;
            });
          } else {
            this.addToast({
              title: message,
              ...rest,
              dismissible,
              id
            });
          }
          return id;
        };
        this.dismiss = (id) => {
          if (id) {
            this.dismissedToasts.add(id);
            requestAnimationFrame(() => this.subscribers.forEach((subscriber) => subscriber({
              id,
              dismiss: true
            })));
          } else {
            this.toasts.forEach((toast2) => {
              this.subscribers.forEach((subscriber) => subscriber({
                id: toast2.id,
                dismiss: true
              }));
            });
          }
          return id;
        };
        this.message = (message, data) => {
          return this.create({
            ...data,
            message
          });
        };
        this.error = (message, data) => {
          return this.create({
            ...data,
            message,
            type: "error"
          });
        };
        this.success = (message, data) => {
          return this.create({
            ...data,
            type: "success",
            message
          });
        };
        this.info = (message, data) => {
          return this.create({
            ...data,
            type: "info",
            message
          });
        };
        this.warning = (message, data) => {
          return this.create({
            ...data,
            type: "warning",
            message
          });
        };
        this.loading = (message, data) => {
          return this.create({
            ...data,
            type: "loading",
            message
          });
        };
        this.promise = (promise, data) => {
          if (!data) {
            return;
          }
          let id = void 0;
          if (data.loading !== void 0) {
            id = this.create({
              ...data,
              promise,
              type: "loading",
              message: data.loading,
              description: typeof data.description !== "function" ? data.description : void 0
            });
          }
          const p2 = Promise.resolve(promise instanceof Function ? promise() : promise);
          let shouldDismiss = id !== void 0;
          let result;
          const originalPromise = p2.then(async (response) => {
            result = [
              "resolve",
              response
            ];
            const isReactElementResponse = React.isValidElement(response);
            if (isReactElementResponse) {
              shouldDismiss = false;
              this.create({
                id,
                type: "default",
                message: response
              });
            } else if (isHttpResponse(response) && !response.ok) {
              shouldDismiss = false;
              const promiseData = typeof data.error === "function" ? await data.error(`HTTP error! status: ${response.status}`) : data.error;
              const description = typeof data.description === "function" ? await data.description(`HTTP error! status: ${response.status}`) : data.description;
              const isExtendedResult = typeof promiseData === "object" && !React.isValidElement(promiseData);
              const toastSettings = isExtendedResult ? promiseData : {
                message: promiseData
              };
              this.create({
                id,
                type: "error",
                description,
                ...toastSettings
              });
            } else if (response instanceof Error) {
              shouldDismiss = false;
              const promiseData = typeof data.error === "function" ? await data.error(response) : data.error;
              const description = typeof data.description === "function" ? await data.description(response) : data.description;
              const isExtendedResult = typeof promiseData === "object" && !React.isValidElement(promiseData);
              const toastSettings = isExtendedResult ? promiseData : {
                message: promiseData
              };
              this.create({
                id,
                type: "error",
                description,
                ...toastSettings
              });
            } else if (data.success !== void 0) {
              shouldDismiss = false;
              const promiseData = typeof data.success === "function" ? await data.success(response) : data.success;
              const description = typeof data.description === "function" ? await data.description(response) : data.description;
              const isExtendedResult = typeof promiseData === "object" && !React.isValidElement(promiseData);
              const toastSettings = isExtendedResult ? promiseData : {
                message: promiseData
              };
              this.create({
                id,
                type: "success",
                description,
                ...toastSettings
              });
            }
          }).catch(async (error) => {
            result = [
              "reject",
              error
            ];
            if (data.error !== void 0) {
              shouldDismiss = false;
              const promiseData = typeof data.error === "function" ? await data.error(error) : data.error;
              const description = typeof data.description === "function" ? await data.description(error) : data.description;
              const isExtendedResult = typeof promiseData === "object" && !React.isValidElement(promiseData);
              const toastSettings = isExtendedResult ? promiseData : {
                message: promiseData
              };
              this.create({
                id,
                type: "error",
                description,
                ...toastSettings
              });
            }
          }).finally(() => {
            if (shouldDismiss) {
              this.dismiss(id);
              id = void 0;
            }
            data.finally == null ? void 0 : data.finally.call(data);
          });
          const unwrap = () => new Promise((resolve, reject) => originalPromise.then(() => result[0] === "reject" ? reject(result[1]) : resolve(result[1])).catch(reject));
          if (typeof id !== "string" && typeof id !== "number") {
            return {
              unwrap
            };
          } else {
            return Object.assign(id, {
              unwrap
            });
          }
        };
        this.custom = (jsx, data) => {
          const id = (data == null ? void 0 : data.id) || toastsCounter++;
          this.create({
            jsx: jsx(id),
            id,
            ...data
          });
          return id;
        };
        this.getActiveToasts = () => {
          return this.toasts.filter((toast2) => !this.dismissedToasts.has(toast2.id));
        };
        this.subscribers = [];
        this.toasts = [];
        this.dismissedToasts = /* @__PURE__ */ new Set();
      }
    }
    const ToastState = new Observer();
    const toastFunction = (message, data) => {
      const id = (data == null ? void 0 : data.id) || toastsCounter++;
      ToastState.addToast({
        title: message,
        ...data,
        id
      });
      return id;
    };
    const isHttpResponse = (data) => {
      return data && typeof data === "object" && "ok" in data && typeof data.ok === "boolean" && "status" in data && typeof data.status === "number";
    };
    const basicToast = toastFunction;
    const getHistory = () => ToastState.toasts;
    const getToasts = () => ToastState.getActiveToasts();
    const toast = Object.assign(basicToast, {
      success: ToastState.success,
      info: ToastState.info,
      warning: ToastState.warning,
      error: ToastState.error,
      custom: ToastState.custom,
      message: ToastState.message,
      promise: ToastState.promise,
      dismiss: ToastState.dismiss,
      loading: ToastState.loading
    }, {
      getHistory,
      getToasts
    });
    __insertCSS("[data-sonner-toaster][dir=ltr],html[dir=ltr]{--toast-icon-margin-start:-3px;--toast-icon-margin-end:4px;--toast-svg-margin-start:-1px;--toast-svg-margin-end:0px;--toast-button-margin-start:auto;--toast-button-margin-end:0;--toast-close-button-start:0;--toast-close-button-end:unset;--toast-close-button-transform:translate(-35%, -35%)}[data-sonner-toaster][dir=rtl],html[dir=rtl]{--toast-icon-margin-start:4px;--toast-icon-margin-end:-3px;--toast-svg-margin-start:0px;--toast-svg-margin-end:-1px;--toast-button-margin-start:0;--toast-button-margin-end:auto;--toast-close-button-start:unset;--toast-close-button-end:0;--toast-close-button-transform:translate(35%, -35%)}[data-sonner-toaster]{position:fixed;width:var(--width);font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;--gray1:hsl(0, 0%, 99%);--gray2:hsl(0, 0%, 97.3%);--gray3:hsl(0, 0%, 95.1%);--gray4:hsl(0, 0%, 93%);--gray5:hsl(0, 0%, 90.9%);--gray6:hsl(0, 0%, 88.7%);--gray7:hsl(0, 0%, 85.8%);--gray8:hsl(0, 0%, 78%);--gray9:hsl(0, 0%, 56.1%);--gray10:hsl(0, 0%, 52.3%);--gray11:hsl(0, 0%, 43.5%);--gray12:hsl(0, 0%, 9%);--border-radius:8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:0;z-index:999999999;transition:transform .4s ease}[data-sonner-toaster][data-lifted=true]{transform:translateY(-8px)}@media (hover:none) and (pointer:coarse){[data-sonner-toaster][data-lifted=true]{transform:none}}[data-sonner-toaster][data-x-position=right]{right:var(--offset-right)}[data-sonner-toaster][data-x-position=left]{left:var(--offset-left)}[data-sonner-toaster][data-x-position=center]{left:50%;transform:translateX(-50%)}[data-sonner-toaster][data-y-position=top]{top:var(--offset-top)}[data-sonner-toaster][data-y-position=bottom]{bottom:var(--offset-bottom)}[data-sonner-toast]{--y:translateY(100%);--lift-amount:calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);touch-action:none;transition:transform .4s,opacity .4s,height .4s,box-shadow .2s;box-sizing:border-box;outline:0;overflow-wrap:anywhere}[data-sonner-toast][data-styled=true]{padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0 4px 12px rgba(0,0,0,.1);width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}[data-sonner-toast]:focus-visible{box-shadow:0 4px 12px rgba(0,0,0,.1),0 0 0 2px rgba(0,0,0,.2)}[data-sonner-toast][data-y-position=top]{top:0;--y:translateY(-100%);--lift:1;--lift-amount:calc(1 * var(--gap))}[data-sonner-toast][data-y-position=bottom]{bottom:0;--y:translateY(100%);--lift:-1;--lift-amount:calc(var(--lift) * var(--gap))}[data-sonner-toast][data-styled=true] [data-description]{font-weight:400;line-height:1.4;color:#3f3f3f}[data-rich-colors=true][data-sonner-toast][data-styled=true] [data-description]{color:inherit}[data-sonner-toaster][data-sonner-theme=dark] [data-description]{color:#e8e8e8}[data-sonner-toast][data-styled=true] [data-title]{font-weight:500;line-height:1.5;color:inherit}[data-sonner-toast][data-styled=true] [data-icon]{display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}[data-sonner-toast][data-promise=true] [data-icon]>svg{opacity:0;transform:scale(.8);transform-origin:center;animation:sonner-fade-in .3s ease forwards}[data-sonner-toast][data-styled=true] [data-icon]>*{flex-shrink:0}[data-sonner-toast][data-styled=true] [data-icon] svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}[data-sonner-toast][data-styled=true] [data-content]{display:flex;flex-direction:column;gap:2px}[data-sonner-toast][data-styled=true] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;font-weight:500;cursor:pointer;outline:0;display:flex;align-items:center;flex-shrink:0;transition:opacity .4s,box-shadow .2s}[data-sonner-toast][data-styled=true] [data-button]:focus-visible{box-shadow:0 0 0 2px rgba(0,0,0,.4)}[data-sonner-toast][data-styled=true] [data-button]:first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}[data-sonner-toast][data-styled=true] [data-cancel]{color:var(--normal-text);background:rgba(0,0,0,.08)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast][data-styled=true] [data-cancel]{background:rgba(255,255,255,.3)}[data-sonner-toast][data-styled=true] [data-close-button]{position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;color:var(--gray12);background:var(--normal-bg);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;cursor:pointer;z-index:1;transition:opacity .1s,background .2s,border-color .2s}[data-sonner-toast][data-styled=true] [data-close-button]:focus-visible{box-shadow:0 4px 12px rgba(0,0,0,.1),0 0 0 2px rgba(0,0,0,.2)}[data-sonner-toast][data-styled=true] [data-disabled=true]{cursor:not-allowed}[data-sonner-toast][data-styled=true]:hover [data-close-button]:hover{background:var(--gray2);border-color:var(--gray5)}[data-sonner-toast][data-swiping=true]::before{content:'';position:absolute;left:-100%;right:-100%;height:100%;z-index:-1}[data-sonner-toast][data-y-position=top][data-swiping=true]::before{bottom:50%;transform:scaleY(3) translateY(50%)}[data-sonner-toast][data-y-position=bottom][data-swiping=true]::before{top:50%;transform:scaleY(3) translateY(-50%)}[data-sonner-toast][data-swiping=false][data-removed=true]::before{content:'';position:absolute;inset:0;transform:scaleY(2)}[data-sonner-toast][data-expanded=true]::after{content:'';position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}[data-sonner-toast][data-mounted=true]{--y:translateY(0);opacity:1}[data-sonner-toast][data-expanded=false][data-front=false]{--scale:var(--toasts-before) * 0.05 + 1;--y:translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}[data-sonner-toast]>*{transition:opacity .4s}[data-sonner-toast][data-x-position=right]{right:0}[data-sonner-toast][data-x-position=left]{left:0}[data-sonner-toast][data-expanded=false][data-front=false][data-styled=true]>*{opacity:0}[data-sonner-toast][data-visible=false]{opacity:0;pointer-events:none}[data-sonner-toast][data-mounted=true][data-expanded=true]{--y:translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}[data-sonner-toast][data-removed=true][data-front=true][data-swipe-out=false]{--y:translateY(calc(var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=true]{--y:translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=false]{--y:translateY(40%);opacity:0;transition:transform .5s,opacity .2s}[data-sonner-toast][data-removed=true][data-front=false]::before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping=true]{transform:var(--y) translateY(var(--swipe-amount-y,0)) translateX(var(--swipe-amount-x,0));transition:none}[data-sonner-toast][data-swiped=true]{user-select:none}[data-sonner-toast][data-swipe-out=true][data-y-position=bottom],[data-sonner-toast][data-swipe-out=true][data-y-position=top]{animation-duration:.2s;animation-timing-function:ease-out;animation-fill-mode:forwards}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=left]{animation-name:swipe-out-left}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=right]{animation-name:swipe-out-right}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=up]{animation-name:swipe-out-up}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=down]{animation-name:swipe-out-down}@keyframes swipe-out-left{from{transform:var(--y) translateX(var(--swipe-amount-x));opacity:1}to{transform:var(--y) translateX(calc(var(--swipe-amount-x) - 100%));opacity:0}}@keyframes swipe-out-right{from{transform:var(--y) translateX(var(--swipe-amount-x));opacity:1}to{transform:var(--y) translateX(calc(var(--swipe-amount-x) + 100%));opacity:0}}@keyframes swipe-out-up{from{transform:var(--y) translateY(var(--swipe-amount-y));opacity:1}to{transform:var(--y) translateY(calc(var(--swipe-amount-y) - 100%));opacity:0}}@keyframes swipe-out-down{from{transform:var(--y) translateY(var(--swipe-amount-y));opacity:1}to{transform:var(--y) translateY(calc(var(--swipe-amount-y) + 100%));opacity:0}}@media (max-width:600px){[data-sonner-toaster]{position:fixed;right:var(--mobile-offset-right);left:var(--mobile-offset-left);width:100%}[data-sonner-toaster][dir=rtl]{left:calc(var(--mobile-offset-left) * -1)}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - var(--mobile-offset-left) * 2)}[data-sonner-toaster][data-x-position=left]{left:var(--mobile-offset-left)}[data-sonner-toaster][data-y-position=bottom]{bottom:var(--mobile-offset-bottom)}[data-sonner-toaster][data-y-position=top]{top:var(--mobile-offset-top)}[data-sonner-toaster][data-x-position=center]{left:var(--mobile-offset-left);right:var(--mobile-offset-right);transform:none}}[data-sonner-toaster][data-sonner-theme=light]{--normal-bg:#fff;--normal-border:var(--gray4);--normal-text:var(--gray12);--success-bg:hsl(143, 85%, 96%);--success-border:hsl(145, 92%, 87%);--success-text:hsl(140, 100%, 27%);--info-bg:hsl(208, 100%, 97%);--info-border:hsl(221, 91%, 93%);--info-text:hsl(210, 92%, 45%);--warning-bg:hsl(49, 100%, 97%);--warning-border:hsl(49, 91%, 84%);--warning-text:hsl(31, 92%, 45%);--error-bg:hsl(359, 100%, 97%);--error-border:hsl(359, 100%, 94%);--error-text:hsl(360, 100%, 45%)}[data-sonner-toaster][data-sonner-theme=light] [data-sonner-toast][data-invert=true]{--normal-bg:#000;--normal-border:hsl(0, 0%, 20%);--normal-text:var(--gray1)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast][data-invert=true]{--normal-bg:#fff;--normal-border:var(--gray3);--normal-text:var(--gray12)}[data-sonner-toaster][data-sonner-theme=dark]{--normal-bg:#000;--normal-bg-hover:hsl(0, 0%, 12%);--normal-border:hsl(0, 0%, 20%);--normal-border-hover:hsl(0, 0%, 25%);--normal-text:var(--gray1);--success-bg:hsl(150, 100%, 6%);--success-border:hsl(147, 100%, 12%);--success-text:hsl(150, 86%, 65%);--info-bg:hsl(215, 100%, 6%);--info-border:hsl(223, 43%, 17%);--info-text:hsl(216, 87%, 65%);--warning-bg:hsl(64, 100%, 6%);--warning-border:hsl(60, 100%, 9%);--warning-text:hsl(46, 87%, 65%);--error-bg:hsl(358, 76%, 10%);--error-border:hsl(357, 89%, 16%);--error-text:hsl(358, 100%, 81%)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast] [data-close-button]{background:var(--normal-bg);border-color:var(--normal-border);color:var(--normal-text)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast] [data-close-button]:hover{background:var(--normal-bg-hover);border-color:var(--normal-border-hover)}[data-rich-colors=true][data-sonner-toast][data-type=success]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=success] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=info]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=info] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=error]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}[data-rich-colors=true][data-sonner-toast][data-type=error] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size:16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible=false]{transform-origin:center;animation:sonner-fade-out .2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:first-child{animation-delay:-1.2s;transform:rotate(.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(.8)}100%{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(.8)}}@keyframes sonner-spin{0%{opacity:1}100%{opacity:.15}}@media (prefers-reduced-motion){.sonner-loading-bar,[data-sonner-toast],[data-sonner-toast]>*{transition:none!important;animation:none!important}}.sonner-loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);transform-origin:center;transition:opacity .2s,transform .2s}.sonner-loader[data-visible=false]{opacity:0;transform:scale(.8) translate(-50%,-50%)}");
    function isAction(action) {
      return action.label !== void 0;
    }
    const VISIBLE_TOASTS_AMOUNT = 3;
    const VIEWPORT_OFFSET = "24px";
    const MOBILE_VIEWPORT_OFFSET = "16px";
    const TOAST_LIFETIME = 4e3;
    const TOAST_WIDTH = 356;
    const GAP = 14;
    const SWIPE_THRESHOLD = 45;
    const TIME_BEFORE_UNMOUNT = 200;
    function cn(...classes) {
      return classes.filter(Boolean).join(" ");
    }
    function getDefaultSwipeDirections(position) {
      const [y2, x2] = position.split("-");
      const directions = [];
      if (y2) {
        directions.push(y2);
      }
      if (x2) {
        directions.push(x2);
      }
      return directions;
    }
    const Toast = (props) => {
      var _toast_classNames, _toast_classNames1, _toast_classNames2, _toast_classNames3, _toast_classNames4, _toast_classNames5, _toast_classNames6, _toast_classNames7, _toast_classNames8;
      const { invert: ToasterInvert, toast: toast2, unstyled, interacting, setHeights, visibleToasts, heights, index: index2, toasts, expanded, removeToast, defaultRichColors, closeButton: closeButtonFromToaster, style, cancelButtonStyle, actionButtonStyle, className = "", descriptionClassName = "", duration: durationFromToaster, position, gap, expandByDefault, classNames, icons, closeButtonAriaLabel = "Close toast" } = props;
      const [swipeDirection, setSwipeDirection] = React.useState(null);
      const [swipeOutDirection, setSwipeOutDirection] = React.useState(null);
      const [mounted, setMounted] = React.useState(false);
      const [removed, setRemoved] = React.useState(false);
      const [swiping, setSwiping] = React.useState(false);
      const [swipeOut, setSwipeOut] = React.useState(false);
      const [isSwiped, setIsSwiped] = React.useState(false);
      const [offsetBeforeRemove, setOffsetBeforeRemove] = React.useState(0);
      const [initialHeight, setInitialHeight] = React.useState(0);
      const remainingTime = React.useRef(toast2.duration || durationFromToaster || TOAST_LIFETIME);
      const dragStartTime = React.useRef(null);
      const toastRef = React.useRef(null);
      const isFront = index2 === 0;
      const isVisible2 = index2 + 1 <= visibleToasts;
      const toastType = toast2.type;
      const dismissible = toast2.dismissible !== false;
      const toastClassname = toast2.className || "";
      const toastDescriptionClassname = toast2.descriptionClassName || "";
      const heightIndex = React.useMemo(() => heights.findIndex((height) => height.toastId === toast2.id) || 0, [
        heights,
        toast2.id
      ]);
      const closeButton = React.useMemo(() => {
        var _toast_closeButton;
        return (_toast_closeButton = toast2.closeButton) != null ? _toast_closeButton : closeButtonFromToaster;
      }, [
        toast2.closeButton,
        closeButtonFromToaster
      ]);
      const duration = React.useMemo(() => toast2.duration || durationFromToaster || TOAST_LIFETIME, [
        toast2.duration,
        durationFromToaster
      ]);
      const closeTimerStartTimeRef = React.useRef(0);
      const offset2 = React.useRef(0);
      const lastCloseTimerStartTimeRef = React.useRef(0);
      const pointerStartRef = React.useRef(null);
      const [y2, x2] = position.split("-");
      const toastsHeightBefore = React.useMemo(() => {
        return heights.reduce((prev, curr, reducerIndex) => {
          if (reducerIndex >= heightIndex) {
            return prev;
          }
          return prev + curr.height;
        }, 0);
      }, [
        heights,
        heightIndex
      ]);
      const isDocumentHidden = useIsDocumentHidden();
      const invert = toast2.invert || ToasterInvert;
      const disabled = toastType === "loading";
      offset2.current = React.useMemo(() => heightIndex * gap + toastsHeightBefore, [
        heightIndex,
        toastsHeightBefore
      ]);
      React.useEffect(() => {
        remainingTime.current = duration;
      }, [
        duration
      ]);
      React.useEffect(() => {
        setMounted(true);
      }, []);
      React.useEffect(() => {
        const toastNode = toastRef.current;
        if (toastNode) {
          const height = toastNode.getBoundingClientRect().height;
          setInitialHeight(height);
          setHeights((h) => [
            {
              toastId: toast2.id,
              height,
              position: toast2.position
            },
            ...h
          ]);
          return () => setHeights((h) => h.filter((height2) => height2.toastId !== toast2.id));
        }
      }, [
        setHeights,
        toast2.id
      ]);
      React.useLayoutEffect(() => {
        if (!mounted) return;
        const toastNode = toastRef.current;
        const originalHeight = toastNode.style.height;
        toastNode.style.height = "auto";
        const newHeight = toastNode.getBoundingClientRect().height;
        toastNode.style.height = originalHeight;
        setInitialHeight(newHeight);
        setHeights((heights2) => {
          const alreadyExists = heights2.find((height) => height.toastId === toast2.id);
          if (!alreadyExists) {
            return [
              {
                toastId: toast2.id,
                height: newHeight,
                position: toast2.position
              },
              ...heights2
            ];
          } else {
            return heights2.map((height) => height.toastId === toast2.id ? {
              ...height,
              height: newHeight
            } : height);
          }
        });
      }, [
        mounted,
        toast2.title,
        toast2.description,
        setHeights,
        toast2.id
      ]);
      const deleteToast = React.useCallback(() => {
        setRemoved(true);
        setOffsetBeforeRemove(offset2.current);
        setHeights((h) => h.filter((height) => height.toastId !== toast2.id));
        setTimeout(() => {
          removeToast(toast2);
        }, TIME_BEFORE_UNMOUNT);
      }, [
        toast2,
        removeToast,
        setHeights,
        offset2
      ]);
      React.useEffect(() => {
        if (toast2.promise && toastType === "loading" || toast2.duration === Infinity || toast2.type === "loading") return;
        let timeoutId;
        const pauseTimer = () => {
          if (lastCloseTimerStartTimeRef.current < closeTimerStartTimeRef.current) {
            const elapsedTime = (/* @__PURE__ */ new Date()).getTime() - closeTimerStartTimeRef.current;
            remainingTime.current = remainingTime.current - elapsedTime;
          }
          lastCloseTimerStartTimeRef.current = (/* @__PURE__ */ new Date()).getTime();
        };
        const startTimer = () => {
          if (remainingTime.current === Infinity) return;
          closeTimerStartTimeRef.current = (/* @__PURE__ */ new Date()).getTime();
          timeoutId = setTimeout(() => {
            toast2.onAutoClose == null ? void 0 : toast2.onAutoClose.call(toast2, toast2);
            deleteToast();
          }, remainingTime.current);
        };
        if (expanded || interacting || isDocumentHidden) {
          pauseTimer();
        } else {
          startTimer();
        }
        return () => clearTimeout(timeoutId);
      }, [
        expanded,
        interacting,
        toast2,
        toastType,
        isDocumentHidden,
        deleteToast
      ]);
      React.useEffect(() => {
        if (toast2.delete) {
          deleteToast();
        }
      }, [
        deleteToast,
        toast2.delete
      ]);
      function getLoadingIcon() {
        var _toast_classNames9;
        if (icons == null ? void 0 : icons.loading) {
          var _toast_classNames12;
          return /* @__PURE__ */ React.createElement("div", {
            className: cn(classNames == null ? void 0 : classNames.loader, toast2 == null ? void 0 : (_toast_classNames12 = toast2.classNames) == null ? void 0 : _toast_classNames12.loader, "sonner-loader"),
            "data-visible": toastType === "loading"
          }, icons.loading);
        }
        return /* @__PURE__ */ React.createElement(Loader, {
          className: cn(classNames == null ? void 0 : classNames.loader, toast2 == null ? void 0 : (_toast_classNames9 = toast2.classNames) == null ? void 0 : _toast_classNames9.loader),
          visible: toastType === "loading"
        });
      }
      const icon = toast2.icon || (icons == null ? void 0 : icons[toastType]) || getAsset(toastType);
      var _toast_richColors, _icons_close;
      return /* @__PURE__ */ React.createElement("li", {
        tabIndex: 0,
        ref: toastRef,
        className: cn(className, toastClassname, classNames == null ? void 0 : classNames.toast, toast2 == null ? void 0 : (_toast_classNames = toast2.classNames) == null ? void 0 : _toast_classNames.toast, classNames == null ? void 0 : classNames.default, classNames == null ? void 0 : classNames[toastType], toast2 == null ? void 0 : (_toast_classNames1 = toast2.classNames) == null ? void 0 : _toast_classNames1[toastType]),
        "data-sonner-toast": "",
        "data-rich-colors": (_toast_richColors = toast2.richColors) != null ? _toast_richColors : defaultRichColors,
        "data-styled": !Boolean(toast2.jsx || toast2.unstyled || unstyled),
        "data-mounted": mounted,
        "data-promise": Boolean(toast2.promise),
        "data-swiped": isSwiped,
        "data-removed": removed,
        "data-visible": isVisible2,
        "data-y-position": y2,
        "data-x-position": x2,
        "data-index": index2,
        "data-front": isFront,
        "data-swiping": swiping,
        "data-dismissible": dismissible,
        "data-type": toastType,
        "data-invert": invert,
        "data-swipe-out": swipeOut,
        "data-swipe-direction": swipeOutDirection,
        "data-expanded": Boolean(expanded || expandByDefault && mounted),
        style: {
          "--index": index2,
          "--toasts-before": index2,
          "--z-index": toasts.length - index2,
          "--offset": `${removed ? offsetBeforeRemove : offset2.current}px`,
          "--initial-height": expandByDefault ? "auto" : `${initialHeight}px`,
          ...style,
          ...toast2.style
        },
        onDragEnd: () => {
          setSwiping(false);
          setSwipeDirection(null);
          pointerStartRef.current = null;
        },
        onPointerDown: (event) => {
          if (disabled || !dismissible) return;
          dragStartTime.current = /* @__PURE__ */ new Date();
          setOffsetBeforeRemove(offset2.current);
          event.target.setPointerCapture(event.pointerId);
          if (event.target.tagName === "BUTTON") return;
          setSwiping(true);
          pointerStartRef.current = {
            x: event.clientX,
            y: event.clientY
          };
        },
        onPointerUp: () => {
          var _toastRef_current, _toastRef_current1, _dragStartTime_current;
          if (swipeOut || !dismissible) return;
          pointerStartRef.current = null;
          const swipeAmountX = Number(((_toastRef_current = toastRef.current) == null ? void 0 : _toastRef_current.style.getPropertyValue("--swipe-amount-x").replace("px", "")) || 0);
          const swipeAmountY = Number(((_toastRef_current1 = toastRef.current) == null ? void 0 : _toastRef_current1.style.getPropertyValue("--swipe-amount-y").replace("px", "")) || 0);
          const timeTaken = (/* @__PURE__ */ new Date()).getTime() - ((_dragStartTime_current = dragStartTime.current) == null ? void 0 : _dragStartTime_current.getTime());
          const swipeAmount = swipeDirection === "x" ? swipeAmountX : swipeAmountY;
          const velocity = Math.abs(swipeAmount) / timeTaken;
          if (Math.abs(swipeAmount) >= SWIPE_THRESHOLD || velocity > 0.11) {
            setOffsetBeforeRemove(offset2.current);
            toast2.onDismiss == null ? void 0 : toast2.onDismiss.call(toast2, toast2);
            if (swipeDirection === "x") {
              setSwipeOutDirection(swipeAmountX > 0 ? "right" : "left");
            } else {
              setSwipeOutDirection(swipeAmountY > 0 ? "down" : "up");
            }
            deleteToast();
            setSwipeOut(true);
            return;
          } else {
            var _toastRef_current2, _toastRef_current3;
            (_toastRef_current2 = toastRef.current) == null ? void 0 : _toastRef_current2.style.setProperty("--swipe-amount-x", `0px`);
            (_toastRef_current3 = toastRef.current) == null ? void 0 : _toastRef_current3.style.setProperty("--swipe-amount-y", `0px`);
          }
          setIsSwiped(false);
          setSwiping(false);
          setSwipeDirection(null);
        },
        onPointerMove: (event) => {
          var _window_getSelection, _toastRef_current, _toastRef_current1;
          if (!pointerStartRef.current || !dismissible) return;
          const isHighlighted = ((_window_getSelection = window.getSelection()) == null ? void 0 : _window_getSelection.toString().length) > 0;
          if (isHighlighted) return;
          const yDelta = event.clientY - pointerStartRef.current.y;
          const xDelta = event.clientX - pointerStartRef.current.x;
          var _props_swipeDirections;
          const swipeDirections = (_props_swipeDirections = props.swipeDirections) != null ? _props_swipeDirections : getDefaultSwipeDirections(position);
          if (!swipeDirection && (Math.abs(xDelta) > 1 || Math.abs(yDelta) > 1)) {
            setSwipeDirection(Math.abs(xDelta) > Math.abs(yDelta) ? "x" : "y");
          }
          let swipeAmount = {
            x: 0,
            y: 0
          };
          const getDampening = (delta) => {
            const factor = Math.abs(delta) / 20;
            return 1 / (1.5 + factor);
          };
          if (swipeDirection === "y") {
            if (swipeDirections.includes("top") || swipeDirections.includes("bottom")) {
              if (swipeDirections.includes("top") && yDelta < 0 || swipeDirections.includes("bottom") && yDelta > 0) {
                swipeAmount.y = yDelta;
              } else {
                const dampenedDelta = yDelta * getDampening(yDelta);
                swipeAmount.y = Math.abs(dampenedDelta) < Math.abs(yDelta) ? dampenedDelta : yDelta;
              }
            }
          } else if (swipeDirection === "x") {
            if (swipeDirections.includes("left") || swipeDirections.includes("right")) {
              if (swipeDirections.includes("left") && xDelta < 0 || swipeDirections.includes("right") && xDelta > 0) {
                swipeAmount.x = xDelta;
              } else {
                const dampenedDelta = xDelta * getDampening(xDelta);
                swipeAmount.x = Math.abs(dampenedDelta) < Math.abs(xDelta) ? dampenedDelta : xDelta;
              }
            }
          }
          if (Math.abs(swipeAmount.x) > 0 || Math.abs(swipeAmount.y) > 0) {
            setIsSwiped(true);
          }
          (_toastRef_current = toastRef.current) == null ? void 0 : _toastRef_current.style.setProperty("--swipe-amount-x", `${swipeAmount.x}px`);
          (_toastRef_current1 = toastRef.current) == null ? void 0 : _toastRef_current1.style.setProperty("--swipe-amount-y", `${swipeAmount.y}px`);
        }
      }, closeButton && !toast2.jsx && toastType !== "loading" ? /* @__PURE__ */ React.createElement("button", {
        "aria-label": closeButtonAriaLabel,
        "data-disabled": disabled,
        "data-close-button": true,
        onClick: disabled || !dismissible ? () => {
        } : () => {
          deleteToast();
          toast2.onDismiss == null ? void 0 : toast2.onDismiss.call(toast2, toast2);
        },
        className: cn(classNames == null ? void 0 : classNames.closeButton, toast2 == null ? void 0 : (_toast_classNames2 = toast2.classNames) == null ? void 0 : _toast_classNames2.closeButton)
      }, (_icons_close = icons == null ? void 0 : icons.close) != null ? _icons_close : CloseIcon) : null, (toastType || toast2.icon || toast2.promise) && toast2.icon !== null && ((icons == null ? void 0 : icons[toastType]) !== null || toast2.icon) ? /* @__PURE__ */ React.createElement("div", {
        "data-icon": "",
        className: cn(classNames == null ? void 0 : classNames.icon, toast2 == null ? void 0 : (_toast_classNames3 = toast2.classNames) == null ? void 0 : _toast_classNames3.icon)
      }, toast2.promise || toast2.type === "loading" && !toast2.icon ? toast2.icon || getLoadingIcon() : null, toast2.type !== "loading" ? icon : null) : null, /* @__PURE__ */ React.createElement("div", {
        "data-content": "",
        className: cn(classNames == null ? void 0 : classNames.content, toast2 == null ? void 0 : (_toast_classNames4 = toast2.classNames) == null ? void 0 : _toast_classNames4.content)
      }, /* @__PURE__ */ React.createElement("div", {
        "data-title": "",
        className: cn(classNames == null ? void 0 : classNames.title, toast2 == null ? void 0 : (_toast_classNames5 = toast2.classNames) == null ? void 0 : _toast_classNames5.title)
      }, toast2.jsx ? toast2.jsx : typeof toast2.title === "function" ? toast2.title() : toast2.title), toast2.description ? /* @__PURE__ */ React.createElement("div", {
        "data-description": "",
        className: cn(descriptionClassName, toastDescriptionClassname, classNames == null ? void 0 : classNames.description, toast2 == null ? void 0 : (_toast_classNames6 = toast2.classNames) == null ? void 0 : _toast_classNames6.description)
      }, typeof toast2.description === "function" ? toast2.description() : toast2.description) : null), /* @__PURE__ */ React.isValidElement(toast2.cancel) ? toast2.cancel : toast2.cancel && isAction(toast2.cancel) ? /* @__PURE__ */ React.createElement("button", {
        "data-button": true,
        "data-cancel": true,
        style: toast2.cancelButtonStyle || cancelButtonStyle,
        onClick: (event) => {
          if (!isAction(toast2.cancel)) return;
          if (!dismissible) return;
          toast2.cancel.onClick == null ? void 0 : toast2.cancel.onClick.call(toast2.cancel, event);
          deleteToast();
        },
        className: cn(classNames == null ? void 0 : classNames.cancelButton, toast2 == null ? void 0 : (_toast_classNames7 = toast2.classNames) == null ? void 0 : _toast_classNames7.cancelButton)
      }, toast2.cancel.label) : null, /* @__PURE__ */ React.isValidElement(toast2.action) ? toast2.action : toast2.action && isAction(toast2.action) ? /* @__PURE__ */ React.createElement("button", {
        "data-button": true,
        "data-action": true,
        style: toast2.actionButtonStyle || actionButtonStyle,
        onClick: (event) => {
          if (!isAction(toast2.action)) return;
          toast2.action.onClick == null ? void 0 : toast2.action.onClick.call(toast2.action, event);
          if (event.defaultPrevented) return;
          deleteToast();
        },
        className: cn(classNames == null ? void 0 : classNames.actionButton, toast2 == null ? void 0 : (_toast_classNames8 = toast2.classNames) == null ? void 0 : _toast_classNames8.actionButton)
      }, toast2.action.label) : null);
    };
    function getDocumentDirection() {
      if (typeof window === "undefined") return "ltr";
      if (typeof document === "undefined") return "ltr";
      const dirAttribute = document.documentElement.getAttribute("dir");
      if (dirAttribute === "auto" || !dirAttribute) {
        return window.getComputedStyle(document.documentElement).direction;
      }
      return dirAttribute;
    }
    function assignOffset(defaultOffset, mobileOffset) {
      const styles = {};
      [
        defaultOffset,
        mobileOffset
      ].forEach((offset2, index2) => {
        const isMobile = index2 === 1;
        const prefix2 = isMobile ? "--mobile-offset" : "--offset";
        const defaultValue = isMobile ? MOBILE_VIEWPORT_OFFSET : VIEWPORT_OFFSET;
        function assignAll(offset3) {
          [
            "top",
            "right",
            "bottom",
            "left"
          ].forEach((key) => {
            styles[`${prefix2}-${key}`] = typeof offset3 === "number" ? `${offset3}px` : offset3;
          });
        }
        if (typeof offset2 === "number" || typeof offset2 === "string") {
          assignAll(offset2);
        } else if (typeof offset2 === "object") {
          [
            "top",
            "right",
            "bottom",
            "left"
          ].forEach((key) => {
            if (offset2[key] === void 0) {
              styles[`${prefix2}-${key}`] = defaultValue;
            } else {
              styles[`${prefix2}-${key}`] = typeof offset2[key] === "number" ? `${offset2[key]}px` : offset2[key];
            }
          });
        } else {
          assignAll(defaultValue);
        }
      });
      return styles;
    }
    const Toaster$1 = /* @__PURE__ */ React.forwardRef(function Toaster2(props, ref) {
      const { invert, position = "bottom-right", hotkey = [
        "altKey",
        "KeyT"
      ], expand, closeButton, className, offset: offset2, mobileOffset, theme = "light", richColors, duration, style, visibleToasts = VISIBLE_TOASTS_AMOUNT, toastOptions, dir = getDocumentDirection(), gap = GAP, icons, containerAriaLabel = "Notifications" } = props;
      const [toasts, setToasts] = React.useState([]);
      const possiblePositions = React.useMemo(() => {
        return Array.from(new Set([
          position
        ].concat(toasts.filter((toast2) => toast2.position).map((toast2) => toast2.position))));
      }, [
        toasts,
        position
      ]);
      const [heights, setHeights] = React.useState([]);
      const [expanded, setExpanded] = React.useState(false);
      const [interacting, setInteracting] = React.useState(false);
      const [actualTheme, setActualTheme] = React.useState(theme !== "system" ? theme : typeof window !== "undefined" ? window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light" : "light");
      const listRef = React.useRef(null);
      const hotkeyLabel = hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, "");
      const lastFocusedElementRef = React.useRef(null);
      const isFocusWithinRef = React.useRef(false);
      const removeToast = React.useCallback((toastToRemove) => {
        setToasts((toasts2) => {
          var _toasts_find;
          if (!((_toasts_find = toasts2.find((toast2) => toast2.id === toastToRemove.id)) == null ? void 0 : _toasts_find.delete)) {
            ToastState.dismiss(toastToRemove.id);
          }
          return toasts2.filter(({ id }) => id !== toastToRemove.id);
        });
      }, []);
      React.useEffect(() => {
        return ToastState.subscribe((toast2) => {
          if (toast2.dismiss) {
            requestAnimationFrame(() => {
              setToasts((toasts2) => toasts2.map((t) => t.id === toast2.id ? {
                ...t,
                delete: true
              } : t));
            });
            return;
          }
          setTimeout(() => {
            ReactDOM.flushSync(() => {
              setToasts((toasts2) => {
                const indexOfExistingToast = toasts2.findIndex((t) => t.id === toast2.id);
                if (indexOfExistingToast !== -1) {
                  return [
                    ...toasts2.slice(0, indexOfExistingToast),
                    {
                      ...toasts2[indexOfExistingToast],
                      ...toast2
                    },
                    ...toasts2.slice(indexOfExistingToast + 1)
                  ];
                }
                return [
                  toast2,
                  ...toasts2
                ];
              });
            });
          });
        });
      }, [
        toasts
      ]);
      React.useEffect(() => {
        if (theme !== "system") {
          setActualTheme(theme);
          return;
        }
        if (theme === "system") {
          if (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) {
            setActualTheme("dark");
          } else {
            setActualTheme("light");
          }
        }
        if (typeof window === "undefined") return;
        const darkMediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
        try {
          darkMediaQuery.addEventListener("change", ({ matches }) => {
            if (matches) {
              setActualTheme("dark");
            } else {
              setActualTheme("light");
            }
          });
        } catch (error) {
          darkMediaQuery.addListener(({ matches }) => {
            try {
              if (matches) {
                setActualTheme("dark");
              } else {
                setActualTheme("light");
              }
            } catch (e) {
              console.error(e);
            }
          });
        }
      }, [
        theme
      ]);
      React.useEffect(() => {
        if (toasts.length <= 1) {
          setExpanded(false);
        }
      }, [
        toasts
      ]);
      React.useEffect(() => {
        const handleKeyDown = (event) => {
          var _listRef_current;
          const isHotkeyPressed = hotkey.every((key) => event[key] || event.code === key);
          if (isHotkeyPressed) {
            var _listRef_current1;
            setExpanded(true);
            (_listRef_current1 = listRef.current) == null ? void 0 : _listRef_current1.focus();
          }
          if (event.code === "Escape" && (document.activeElement === listRef.current || ((_listRef_current = listRef.current) == null ? void 0 : _listRef_current.contains(document.activeElement)))) {
            setExpanded(false);
          }
        };
        document.addEventListener("keydown", handleKeyDown);
        return () => document.removeEventListener("keydown", handleKeyDown);
      }, [
        hotkey
      ]);
      React.useEffect(() => {
        if (listRef.current) {
          return () => {
            if (lastFocusedElementRef.current) {
              lastFocusedElementRef.current.focus({
                preventScroll: true
              });
              lastFocusedElementRef.current = null;
              isFocusWithinRef.current = false;
            }
          };
        }
      }, [
        listRef.current
      ]);
      return (
        // Remove item from normal navigation flow, only available via hotkey
        /* @__PURE__ */ React.createElement("section", {
          ref,
          "aria-label": `${containerAriaLabel} ${hotkeyLabel}`,
          tabIndex: -1,
          "aria-live": "polite",
          "aria-relevant": "additions text",
          "aria-atomic": "false",
          suppressHydrationWarning: true
        }, possiblePositions.map((position2, index2) => {
          var _heights_;
          const [y2, x2] = position2.split("-");
          if (!toasts.length) return null;
          return /* @__PURE__ */ React.createElement("ol", {
            key: position2,
            dir: dir === "auto" ? getDocumentDirection() : dir,
            tabIndex: -1,
            ref: listRef,
            className,
            "data-sonner-toaster": true,
            "data-sonner-theme": actualTheme,
            "data-y-position": y2,
            "data-lifted": expanded && toasts.length > 1 && !expand,
            "data-x-position": x2,
            style: {
              "--front-toast-height": `${((_heights_ = heights[0]) == null ? void 0 : _heights_.height) || 0}px`,
              "--width": `${TOAST_WIDTH}px`,
              "--gap": `${gap}px`,
              ...style,
              ...assignOffset(offset2, mobileOffset)
            },
            onBlur: (event) => {
              if (isFocusWithinRef.current && !event.currentTarget.contains(event.relatedTarget)) {
                isFocusWithinRef.current = false;
                if (lastFocusedElementRef.current) {
                  lastFocusedElementRef.current.focus({
                    preventScroll: true
                  });
                  lastFocusedElementRef.current = null;
                }
              }
            },
            onFocus: (event) => {
              const isNotDismissible = event.target instanceof HTMLElement && event.target.dataset.dismissible === "false";
              if (isNotDismissible) return;
              if (!isFocusWithinRef.current) {
                isFocusWithinRef.current = true;
                lastFocusedElementRef.current = event.relatedTarget;
              }
            },
            onMouseEnter: () => setExpanded(true),
            onMouseMove: () => setExpanded(true),
            onMouseLeave: () => {
              if (!interacting) {
                setExpanded(false);
              }
            },
            onDragEnd: () => setExpanded(false),
            onPointerDown: (event) => {
              const isNotDismissible = event.target instanceof HTMLElement && event.target.dataset.dismissible === "false";
              if (isNotDismissible) return;
              setInteracting(true);
            },
            onPointerUp: () => setInteracting(false)
          }, toasts.filter((toast2) => !toast2.position && index2 === 0 || toast2.position === position2).map((toast2, index3) => {
            var _toastOptions_duration, _toastOptions_closeButton;
            return /* @__PURE__ */ React.createElement(Toast, {
              key: toast2.id,
              icons,
              index: index3,
              toast: toast2,
              defaultRichColors: richColors,
              duration: (_toastOptions_duration = toastOptions == null ? void 0 : toastOptions.duration) != null ? _toastOptions_duration : duration,
              className: toastOptions == null ? void 0 : toastOptions.className,
              descriptionClassName: toastOptions == null ? void 0 : toastOptions.descriptionClassName,
              invert,
              visibleToasts,
              closeButton: (_toastOptions_closeButton = toastOptions == null ? void 0 : toastOptions.closeButton) != null ? _toastOptions_closeButton : closeButton,
              interacting,
              position: position2,
              style: toastOptions == null ? void 0 : toastOptions.style,
              unstyled: toastOptions == null ? void 0 : toastOptions.unstyled,
              classNames: toastOptions == null ? void 0 : toastOptions.classNames,
              cancelButtonStyle: toastOptions == null ? void 0 : toastOptions.cancelButtonStyle,
              actionButtonStyle: toastOptions == null ? void 0 : toastOptions.actionButtonStyle,
              closeButtonAriaLabel: toastOptions == null ? void 0 : toastOptions.closeButtonAriaLabel,
              removeToast,
              toasts: toasts.filter((t) => t.position == toast2.position),
              heights: heights.filter((h) => h.position == toast2.position),
              setHeights,
              expandByDefault: expand,
              gap,
              expanded,
              swipeDirections: props.swipeDirections
            });
          }));
        }))
      );
    });
    function Layout() {
      const [cookies2, _, removeCookies] = useCookies(["token"]);
      const user = useUserState((state) => state.user);
      const set2 = useUserState((state) => state.set);
      const unset2 = useUserState((state) => state.unset);
      const page = useLayoutState((state) => state.page);
      const navigate = useNavigate();
      const tokenQuery = useQuery({
        queryKey: ["token"],
        queryFn: () => {
          if (!cookies2.token) return null;
          return checkToken(cookies2.token);
        }
      });
      const logoutMutation = useMutation({
        mutationFn: logout,
        onSuccess: () => {
          removeCookies("token", { path: "/" });
        }
      });
      const onLogout = () => toast.promise(logoutMutation.mutateAsync(), {
        loading: "Memproses",
        success: () => "Berhasil keluar"
      });
      reactExports.useEffect(() => {
        if (!cookies2.token) {
          client.defaults.headers.common.Authorization = void 0;
          unset2();
          navigate("/auth/login", { replace: true });
        } else if (tokenQuery.data) {
          client.defaults.headers.common.Authorization = `Bearer ${cookies2.token}`;
          set2(tokenQuery.data);
        }
      }, [cookies2.token, tokenQuery.data]);
      reactExports.useEffect(() => {
        var _a2;
        if (tokenQuery.error && ((_a2 = tokenQuery.error.response) == null ? void 0 : _a2.status) === 401) {
          removeCookies("token", { path: "/" });
        }
      }, [tokenQuery.error]);
      if (!user) return null;
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(SidebarProvider, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Sidebar, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(SidebarHeader, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-start items-center space-x-3 p-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-12 h-12 bg-neutral-900 rounded text-white justify-center items-center flex", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Layers, {}) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "font-bold font-montserrat", children: "Admin Panel" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm", children: "PLN ULP SUKARAMI" })
            ] })
          ] }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs(SidebarContent, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(SidebarGroup, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(SidebarGroupContent, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(SidebarGroupLabel, { children: "MENU" }),
              menus.map((item, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(SidebarMenu, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(SidebarMenuItem, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                SidebarMenuButton,
                {
                  isActive: item.title === page.active,
                  asChild: true,
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(Link, { to: item.path, children: item.title })
                }
              ) }) }, `${index2}`))
            ] }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(SidebarGroup, {})
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(SidebarFooter, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(AlertDialog, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(AlertDialogTrigger, { asChild: true, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "button",
              {
                type: "button",
                className: "py-3 rounded border hover:border-red-200 flex justify-center items-center space-x-3 bg-white hover:bg-red-100 text-red-700",
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Sign Out" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(LogOut, { size: 16 })
                ]
              }
            ) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(AlertDialogContent, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(AlertDialogHeader, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(AlertDialogTitle, { children: "Yakin?" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(AlertDialogDescription, { children: "Anda akan keluar dari akun ini." })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(AlertDialogFooter, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(AlertDialogCancel, { children: "Batal" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(AlertDialogAction, { onClick: () => onLogout(), children: "Ya, Lanjutkan" })
              ] })
            ] })
          ] }) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(SidebarInset, { className: "flex flex-col", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("header", { className: "flex h-16 shrink-0 items-center gap-2 border-b px-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(SidebarTrigger, { className: "-ml-1" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "font-montserrat font-bold", children: page.title })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {})
        ] })
      ] });
    }
    const indexComplaint = () => client.get("/complaint").then(({ data }) => data.data);
    const deleteComplaint = (id) => client.delete(`/complaint/${id}`).then(({ data }) => data.data);
    const getComplaint = (id) => client.get(`/complaint/${id}`).then(({ data }) => data.data);
    const updateComplaintStatus = ({
      id,
      ...payload
    }) => client.patch(`/complaint/${id}`, payload).then(({ data }) => data.data);
    /**
       * table-core
       *
       * Copyright (c) TanStack
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE.md file in the root directory of this source tree.
       *
       * @license MIT
       */
    function functionalUpdate(updater, input) {
      return typeof updater === "function" ? updater(input) : updater;
    }
    function makeStateUpdater(key, instance) {
      return (updater) => {
        instance.setState((old) => {
          return {
            ...old,
            [key]: functionalUpdate(updater, old[key])
          };
        });
      };
    }
    function isFunction$3(d) {
      return d instanceof Function;
    }
    function isNumberArray$1(d) {
      return Array.isArray(d) && d.every((val) => typeof val === "number");
    }
    function flattenBy(arr, getChildren) {
      const flat = [];
      const recurse = (subArr) => {
        subArr.forEach((item) => {
          flat.push(item);
          const children = getChildren(item);
          if (children != null && children.length) {
            recurse(children);
          }
        });
      };
      recurse(arr);
      return flat;
    }
    function memo(getDeps, fn, opts) {
      let deps = [];
      let result;
      return (depArgs) => {
        let depTime;
        if (opts.key && opts.debug) depTime = Date.now();
        const newDeps = getDeps(depArgs);
        const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index2) => deps[index2] !== dep);
        if (!depsChanged) {
          return result;
        }
        deps = newDeps;
        let resultTime;
        if (opts.key && opts.debug) resultTime = Date.now();
        result = fn(...newDeps);
        opts == null || opts.onChange == null || opts.onChange(result);
        if (opts.key && opts.debug) {
          if (opts != null && opts.debug()) {
            const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;
            const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;
            const resultFpsPercentage = resultEndTime / 16;
            const pad2 = (str, num) => {
              str = String(str);
              while (str.length < num) {
                str = " " + str;
              }
              return str;
            };
            console.info(`%c⏱ ${pad2(resultEndTime, 5)} /${pad2(depEndTime, 5)} ms`, `
            font-size: .6rem;
            font-weight: bold;
            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);
          }
        }
        return result;
      };
    }
    function getMemoOptions(tableOptions, debugLevel, key, onChange) {
      return {
        debug: () => {
          var _tableOptions$debugAl;
          return (_tableOptions$debugAl = tableOptions == null ? void 0 : tableOptions.debugAll) != null ? _tableOptions$debugAl : tableOptions[debugLevel];
        },
        key: false,
        onChange
      };
    }
    function createCell(table, row, column, columnId) {
      const getRenderValue = () => {
        var _cell$getValue;
        return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;
      };
      const cell = {
        id: `${row.id}_${column.id}`,
        row,
        column,
        getValue: () => row.getValue(columnId),
        renderValue: getRenderValue,
        getContext: memo(() => [table, column, row, cell], (table2, column2, row2, cell2) => ({
          table: table2,
          column: column2,
          row: row2,
          cell: cell2,
          getValue: cell2.getValue,
          renderValue: cell2.renderValue
        }), getMemoOptions(table.options, "debugCells"))
      };
      table._features.forEach((feature) => {
        feature.createCell == null || feature.createCell(cell, column, row, table);
      }, {});
      return cell;
    }
    function createColumn(table, columnDef, depth, parent) {
      var _ref, _resolvedColumnDef$id;
      const defaultColumn = table._getDefaultColumnDef();
      const resolvedColumnDef = {
        ...defaultColumn,
        ...columnDef
      };
      const accessorKey = resolvedColumnDef.accessorKey;
      let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? typeof String.prototype.replaceAll === "function" ? accessorKey.replaceAll(".", "_") : accessorKey.replace(/\./g, "_") : void 0) != null ? _ref : typeof resolvedColumnDef.header === "string" ? resolvedColumnDef.header : void 0;
      let accessorFn;
      if (resolvedColumnDef.accessorFn) {
        accessorFn = resolvedColumnDef.accessorFn;
      } else if (accessorKey) {
        if (accessorKey.includes(".")) {
          accessorFn = (originalRow) => {
            let result = originalRow;
            for (const key of accessorKey.split(".")) {
              var _result;
              result = (_result = result) == null ? void 0 : _result[key];
            }
            return result;
          };
        } else {
          accessorFn = (originalRow) => originalRow[resolvedColumnDef.accessorKey];
        }
      }
      if (!id) {
        throw new Error();
      }
      let column = {
        id: `${String(id)}`,
        accessorFn,
        parent,
        depth,
        columnDef: resolvedColumnDef,
        columns: [],
        getFlatColumns: memo(() => [true], () => {
          var _column$columns;
          return [column, ...(_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap((d) => d.getFlatColumns())];
        }, getMemoOptions(table.options, "debugColumns")),
        getLeafColumns: memo(() => [table._getOrderColumnsFn()], (orderColumns2) => {
          var _column$columns2;
          if ((_column$columns2 = column.columns) != null && _column$columns2.length) {
            let leafColumns = column.columns.flatMap((column2) => column2.getLeafColumns());
            return orderColumns2(leafColumns);
          }
          return [column];
        }, getMemoOptions(table.options, "debugColumns"))
      };
      for (const feature of table._features) {
        feature.createColumn == null || feature.createColumn(column, table);
      }
      return column;
    }
    const debug = "debugHeaders";
    function createHeader(table, column, options2) {
      var _options$id;
      const id = (_options$id = options2.id) != null ? _options$id : column.id;
      let header = {
        id,
        column,
        index: options2.index,
        isPlaceholder: !!options2.isPlaceholder,
        placeholderId: options2.placeholderId,
        depth: options2.depth,
        subHeaders: [],
        colSpan: 0,
        rowSpan: 0,
        headerGroup: null,
        getLeafHeaders: () => {
          const leafHeaders = [];
          const recurseHeader = (h) => {
            if (h.subHeaders && h.subHeaders.length) {
              h.subHeaders.map(recurseHeader);
            }
            leafHeaders.push(h);
          };
          recurseHeader(header);
          return leafHeaders;
        },
        getContext: () => ({
          table,
          header,
          column
        })
      };
      table._features.forEach((feature) => {
        feature.createHeader == null || feature.createHeader(header, table);
      });
      return header;
    }
    const Headers$1 = {
      createTable: (table) => {
        table.getHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {
          var _left$map$filter, _right$map$filter;
          const leftColumns = (_left$map$filter = left == null ? void 0 : left.map((columnId) => leafColumns.find((d) => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];
          const rightColumns = (_right$map$filter = right == null ? void 0 : right.map((columnId) => leafColumns.find((d) => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];
          const centerColumns = leafColumns.filter((column) => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));
          const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);
          return headerGroups;
        }, getMemoOptions(table.options, debug));
        table.getCenterHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {
          leafColumns = leafColumns.filter((column) => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));
          return buildHeaderGroups(allColumns, leafColumns, table, "center");
        }, getMemoOptions(table.options, debug));
        table.getLeftHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {
          var _left$map$filter2;
          const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map((columnId) => leafColumns.find((d) => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];
          return buildHeaderGroups(allColumns, orderedLeafColumns, table, "left");
        }, getMemoOptions(table.options, debug));
        table.getRightHeaderGroups = memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {
          var _right$map$filter2;
          const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map((columnId) => leafColumns.find((d) => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];
          return buildHeaderGroups(allColumns, orderedLeafColumns, table, "right");
        }, getMemoOptions(table.options, debug));
        table.getFooterGroups = memo(() => [table.getHeaderGroups()], (headerGroups) => {
          return [...headerGroups].reverse();
        }, getMemoOptions(table.options, debug));
        table.getLeftFooterGroups = memo(() => [table.getLeftHeaderGroups()], (headerGroups) => {
          return [...headerGroups].reverse();
        }, getMemoOptions(table.options, debug));
        table.getCenterFooterGroups = memo(() => [table.getCenterHeaderGroups()], (headerGroups) => {
          return [...headerGroups].reverse();
        }, getMemoOptions(table.options, debug));
        table.getRightFooterGroups = memo(() => [table.getRightHeaderGroups()], (headerGroups) => {
          return [...headerGroups].reverse();
        }, getMemoOptions(table.options, debug));
        table.getFlatHeaders = memo(() => [table.getHeaderGroups()], (headerGroups) => {
          return headerGroups.map((headerGroup) => {
            return headerGroup.headers;
          }).flat();
        }, getMemoOptions(table.options, debug));
        table.getLeftFlatHeaders = memo(() => [table.getLeftHeaderGroups()], (left) => {
          return left.map((headerGroup) => {
            return headerGroup.headers;
          }).flat();
        }, getMemoOptions(table.options, debug));
        table.getCenterFlatHeaders = memo(() => [table.getCenterHeaderGroups()], (left) => {
          return left.map((headerGroup) => {
            return headerGroup.headers;
          }).flat();
        }, getMemoOptions(table.options, debug));
        table.getRightFlatHeaders = memo(() => [table.getRightHeaderGroups()], (left) => {
          return left.map((headerGroup) => {
            return headerGroup.headers;
          }).flat();
        }, getMemoOptions(table.options, debug));
        table.getCenterLeafHeaders = memo(() => [table.getCenterFlatHeaders()], (flatHeaders) => {
          return flatHeaders.filter((header) => {
            var _header$subHeaders;
            return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);
          });
        }, getMemoOptions(table.options, debug));
        table.getLeftLeafHeaders = memo(() => [table.getLeftFlatHeaders()], (flatHeaders) => {
          return flatHeaders.filter((header) => {
            var _header$subHeaders2;
            return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);
          });
        }, getMemoOptions(table.options, debug));
        table.getRightLeafHeaders = memo(() => [table.getRightFlatHeaders()], (flatHeaders) => {
          return flatHeaders.filter((header) => {
            var _header$subHeaders3;
            return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);
          });
        }, getMemoOptions(table.options, debug));
        table.getLeafHeaders = memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {
          var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;
          return [...(_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : [], ...(_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : [], ...(_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : []].map((header) => {
            return header.getLeafHeaders();
          }).flat();
        }, getMemoOptions(table.options, debug));
      }
    };
    function buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {
      var _headerGroups$0$heade, _headerGroups$;
      let maxDepth = 0;
      const findMaxDepth = function(columns, depth) {
        if (depth === void 0) {
          depth = 1;
        }
        maxDepth = Math.max(maxDepth, depth);
        columns.filter((column) => column.getIsVisible()).forEach((column) => {
          var _column$columns;
          if ((_column$columns = column.columns) != null && _column$columns.length) {
            findMaxDepth(column.columns, depth + 1);
          }
        }, 0);
      };
      findMaxDepth(allColumns);
      let headerGroups = [];
      const createHeaderGroup = (headersToGroup, depth) => {
        const headerGroup = {
          depth,
          id: [headerFamily, `${depth}`].filter(Boolean).join("_"),
          headers: []
        };
        const pendingParentHeaders = [];
        headersToGroup.forEach((headerToGroup) => {
          const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];
          const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;
          let column;
          let isPlaceholder = false;
          if (isLeafHeader && headerToGroup.column.parent) {
            column = headerToGroup.column.parent;
          } else {
            column = headerToGroup.column;
            isPlaceholder = true;
          }
          if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {
            latestPendingParentHeader.subHeaders.push(headerToGroup);
          } else {
            const header = createHeader(table, column, {
              id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join("_"),
              isPlaceholder,
              placeholderId: isPlaceholder ? `${pendingParentHeaders.filter((d) => d.column === column).length}` : void 0,
              depth,
              index: pendingParentHeaders.length
            });
            header.subHeaders.push(headerToGroup);
            pendingParentHeaders.push(header);
          }
          headerGroup.headers.push(headerToGroup);
          headerToGroup.headerGroup = headerGroup;
        });
        headerGroups.push(headerGroup);
        if (depth > 0) {
          createHeaderGroup(pendingParentHeaders, depth - 1);
        }
      };
      const bottomHeaders = columnsToGroup.map((column, index2) => createHeader(table, column, {
        depth: maxDepth,
        index: index2
      }));
      createHeaderGroup(bottomHeaders, maxDepth - 1);
      headerGroups.reverse();
      const recurseHeadersForSpans = (headers) => {
        const filteredHeaders = headers.filter((header) => header.column.getIsVisible());
        return filteredHeaders.map((header) => {
          let colSpan = 0;
          let rowSpan = 0;
          let childRowSpans = [0];
          if (header.subHeaders && header.subHeaders.length) {
            childRowSpans = [];
            recurseHeadersForSpans(header.subHeaders).forEach((_ref) => {
              let {
                colSpan: childColSpan,
                rowSpan: childRowSpan
              } = _ref;
              colSpan += childColSpan;
              childRowSpans.push(childRowSpan);
            });
          } else {
            colSpan = 1;
          }
          const minChildRowSpan = Math.min(...childRowSpans);
          rowSpan = rowSpan + minChildRowSpan;
          header.colSpan = colSpan;
          header.rowSpan = rowSpan;
          return {
            colSpan,
            rowSpan
          };
        });
      };
      recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);
      return headerGroups;
    }
    const createRow = (table, id, original, rowIndex, depth, subRows, parentId) => {
      let row = {
        id,
        index: rowIndex,
        original,
        depth,
        parentId,
        _valuesCache: {},
        _uniqueValuesCache: {},
        getValue: (columnId) => {
          if (row._valuesCache.hasOwnProperty(columnId)) {
            return row._valuesCache[columnId];
          }
          const column = table.getColumn(columnId);
          if (!(column != null && column.accessorFn)) {
            return void 0;
          }
          row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);
          return row._valuesCache[columnId];
        },
        getUniqueValues: (columnId) => {
          if (row._uniqueValuesCache.hasOwnProperty(columnId)) {
            return row._uniqueValuesCache[columnId];
          }
          const column = table.getColumn(columnId);
          if (!(column != null && column.accessorFn)) {
            return void 0;
          }
          if (!column.columnDef.getUniqueValues) {
            row._uniqueValuesCache[columnId] = [row.getValue(columnId)];
            return row._uniqueValuesCache[columnId];
          }
          row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);
          return row._uniqueValuesCache[columnId];
        },
        renderValue: (columnId) => {
          var _row$getValue;
          return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;
        },
        subRows: [],
        getLeafRows: () => flattenBy(row.subRows, (d) => d.subRows),
        getParentRow: () => row.parentId ? table.getRow(row.parentId, true) : void 0,
        getParentRows: () => {
          let parentRows = [];
          let currentRow = row;
          while (true) {
            const parentRow = currentRow.getParentRow();
            if (!parentRow) break;
            parentRows.push(parentRow);
            currentRow = parentRow;
          }
          return parentRows.reverse();
        },
        getAllCells: memo(() => [table.getAllLeafColumns()], (leafColumns) => {
          return leafColumns.map((column) => {
            return createCell(table, row, column, column.id);
          });
        }, getMemoOptions(table.options, "debugRows")),
        _getAllCellsByColumnId: memo(() => [row.getAllCells()], (allCells) => {
          return allCells.reduce((acc, cell) => {
            acc[cell.column.id] = cell;
            return acc;
          }, {});
        }, getMemoOptions(table.options, "debugRows"))
      };
      for (let i2 = 0; i2 < table._features.length; i2++) {
        const feature = table._features[i2];
        feature == null || feature.createRow == null || feature.createRow(row, table);
      }
      return row;
    };
    const ColumnFaceting = {
      createColumn: (column, table) => {
        column._getFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id);
        column.getFacetedRowModel = () => {
          if (!column._getFacetedRowModel) {
            return table.getPreFilteredRowModel();
          }
          return column._getFacetedRowModel();
        };
        column._getFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id);
        column.getFacetedUniqueValues = () => {
          if (!column._getFacetedUniqueValues) {
            return /* @__PURE__ */ new Map();
          }
          return column._getFacetedUniqueValues();
        };
        column._getFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id);
        column.getFacetedMinMaxValues = () => {
          if (!column._getFacetedMinMaxValues) {
            return void 0;
          }
          return column._getFacetedMinMaxValues();
        };
      }
    };
    const includesString = (row, columnId, filterValue) => {
      var _filterValue$toString, _row$getValue;
      const search = filterValue == null || (_filterValue$toString = filterValue.toString()) == null ? void 0 : _filterValue$toString.toLowerCase();
      return Boolean((_row$getValue = row.getValue(columnId)) == null || (_row$getValue = _row$getValue.toString()) == null || (_row$getValue = _row$getValue.toLowerCase()) == null ? void 0 : _row$getValue.includes(search));
    };
    includesString.autoRemove = (val) => testFalsey(val);
    const includesStringSensitive = (row, columnId, filterValue) => {
      var _row$getValue2;
      return Boolean((_row$getValue2 = row.getValue(columnId)) == null || (_row$getValue2 = _row$getValue2.toString()) == null ? void 0 : _row$getValue2.includes(filterValue));
    };
    includesStringSensitive.autoRemove = (val) => testFalsey(val);
    const equalsString = (row, columnId, filterValue) => {
      var _row$getValue3;
      return ((_row$getValue3 = row.getValue(columnId)) == null || (_row$getValue3 = _row$getValue3.toString()) == null ? void 0 : _row$getValue3.toLowerCase()) === (filterValue == null ? void 0 : filterValue.toLowerCase());
    };
    equalsString.autoRemove = (val) => testFalsey(val);
    const arrIncludes = (row, columnId, filterValue) => {
      var _row$getValue4;
      return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);
    };
    arrIncludes.autoRemove = (val) => testFalsey(val);
    const arrIncludesAll = (row, columnId, filterValue) => {
      return !filterValue.some((val) => {
        var _row$getValue5;
        return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));
      });
    };
    arrIncludesAll.autoRemove = (val) => testFalsey(val) || !(val != null && val.length);
    const arrIncludesSome = (row, columnId, filterValue) => {
      return filterValue.some((val) => {
        var _row$getValue6;
        return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);
      });
    };
    arrIncludesSome.autoRemove = (val) => testFalsey(val) || !(val != null && val.length);
    const equals = (row, columnId, filterValue) => {
      return row.getValue(columnId) === filterValue;
    };
    equals.autoRemove = (val) => testFalsey(val);
    const weakEquals = (row, columnId, filterValue) => {
      return row.getValue(columnId) == filterValue;
    };
    weakEquals.autoRemove = (val) => testFalsey(val);
    const inNumberRange = (row, columnId, filterValue) => {
      let [min2, max2] = filterValue;
      const rowValue = row.getValue(columnId);
      return rowValue >= min2 && rowValue <= max2;
    };
    inNumberRange.resolveFilterValue = (val) => {
      let [unsafeMin, unsafeMax] = val;
      let parsedMin = typeof unsafeMin !== "number" ? parseFloat(unsafeMin) : unsafeMin;
      let parsedMax = typeof unsafeMax !== "number" ? parseFloat(unsafeMax) : unsafeMax;
      let min2 = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;
      let max2 = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;
      if (min2 > max2) {
        const temp = min2;
        min2 = max2;
        max2 = temp;
      }
      return [min2, max2];
    };
    inNumberRange.autoRemove = (val) => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);
    const filterFns = {
      includesString,
      includesStringSensitive,
      equalsString,
      arrIncludes,
      arrIncludesAll,
      arrIncludesSome,
      equals,
      weakEquals,
      inNumberRange
    };
    function testFalsey(val) {
      return val === void 0 || val === null || val === "";
    }
    const ColumnFiltering = {
      getDefaultColumnDef: () => {
        return {
          filterFn: "auto"
        };
      },
      getInitialState: (state) => {
        return {
          columnFilters: [],
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onColumnFiltersChange: makeStateUpdater("columnFilters", table),
          filterFromLeafRows: false,
          maxLeafRowFilterDepth: 100
        };
      },
      createColumn: (column, table) => {
        column.getAutoFilterFn = () => {
          const firstRow = table.getCoreRowModel().flatRows[0];
          const value = firstRow == null ? void 0 : firstRow.getValue(column.id);
          if (typeof value === "string") {
            return filterFns.includesString;
          }
          if (typeof value === "number") {
            return filterFns.inNumberRange;
          }
          if (typeof value === "boolean") {
            return filterFns.equals;
          }
          if (value !== null && typeof value === "object") {
            return filterFns.equals;
          }
          if (Array.isArray(value)) {
            return filterFns.arrIncludes;
          }
          return filterFns.weakEquals;
        };
        column.getFilterFn = () => {
          var _table$options$filter, _table$options$filter2;
          return isFunction$3(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === "auto" ? column.getAutoFilterFn() : (
            // @ts-ignore
            (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn]
          );
        };
        column.getCanFilter = () => {
          var _column$columnDef$ena, _table$options$enable, _table$options$enable2;
          return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;
        };
        column.getIsFiltered = () => column.getFilterIndex() > -1;
        column.getFilterValue = () => {
          var _table$getState$colum;
          return (_table$getState$colum = table.getState().columnFilters) == null || (_table$getState$colum = _table$getState$colum.find((d) => d.id === column.id)) == null ? void 0 : _table$getState$colum.value;
        };
        column.getFilterIndex = () => {
          var _table$getState$colum2, _table$getState$colum3;
          return (_table$getState$colum2 = (_table$getState$colum3 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum3.findIndex((d) => d.id === column.id)) != null ? _table$getState$colum2 : -1;
        };
        column.setFilterValue = (value) => {
          table.setColumnFilters((old) => {
            const filterFn = column.getFilterFn();
            const previousFilter = old == null ? void 0 : old.find((d) => d.id === column.id);
            const newFilter = functionalUpdate(value, previousFilter ? previousFilter.value : void 0);
            if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {
              var _old$filter;
              return (_old$filter = old == null ? void 0 : old.filter((d) => d.id !== column.id)) != null ? _old$filter : [];
            }
            const newFilterObj = {
              id: column.id,
              value: newFilter
            };
            if (previousFilter) {
              var _old$map;
              return (_old$map = old == null ? void 0 : old.map((d) => {
                if (d.id === column.id) {
                  return newFilterObj;
                }
                return d;
              })) != null ? _old$map : [];
            }
            if (old != null && old.length) {
              return [...old, newFilterObj];
            }
            return [newFilterObj];
          });
        };
      },
      createRow: (row, _table) => {
        row.columnFilters = {};
        row.columnFiltersMeta = {};
      },
      createTable: (table) => {
        table.setColumnFilters = (updater) => {
          const leafColumns = table.getAllLeafColumns();
          const updateFn = (old) => {
            var _functionalUpdate;
            return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter((filter) => {
              const column = leafColumns.find((d) => d.id === filter.id);
              if (column) {
                const filterFn = column.getFilterFn();
                if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {
                  return false;
                }
              }
              return true;
            });
          };
          table.options.onColumnFiltersChange == null || table.options.onColumnFiltersChange(updateFn);
        };
        table.resetColumnFilters = (defaultState) => {
          var _table$initialState$c, _table$initialState;
          table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);
        };
        table.getPreFilteredRowModel = () => table.getCoreRowModel();
        table.getFilteredRowModel = () => {
          if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {
            table._getFilteredRowModel = table.options.getFilteredRowModel(table);
          }
          if (table.options.manualFiltering || !table._getFilteredRowModel) {
            return table.getPreFilteredRowModel();
          }
          return table._getFilteredRowModel();
        };
      }
    };
    function shouldAutoRemoveFilter(filterFn, value, column) {
      return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === "undefined" || typeof value === "string" && !value;
    }
    const sum = (columnId, _leafRows, childRows) => {
      return childRows.reduce((sum2, next) => {
        const nextValue = next.getValue(columnId);
        return sum2 + (typeof nextValue === "number" ? nextValue : 0);
      }, 0);
    };
    const min$3 = (columnId, _leafRows, childRows) => {
      let min2;
      childRows.forEach((row) => {
        const value = row.getValue(columnId);
        if (value != null && (min2 > value || min2 === void 0 && value >= value)) {
          min2 = value;
        }
      });
      return min2;
    };
    const max$3 = (columnId, _leafRows, childRows) => {
      let max2;
      childRows.forEach((row) => {
        const value = row.getValue(columnId);
        if (value != null && (max2 < value || max2 === void 0 && value >= value)) {
          max2 = value;
        }
      });
      return max2;
    };
    const extent = (columnId, _leafRows, childRows) => {
      let min2;
      let max2;
      childRows.forEach((row) => {
        const value = row.getValue(columnId);
        if (value != null) {
          if (min2 === void 0) {
            if (value >= value) min2 = max2 = value;
          } else {
            if (min2 > value) min2 = value;
            if (max2 < value) max2 = value;
          }
        }
      });
      return [min2, max2];
    };
    const mean = (columnId, leafRows) => {
      let count2 = 0;
      let sum2 = 0;
      leafRows.forEach((row) => {
        let value = row.getValue(columnId);
        if (value != null && (value = +value) >= value) {
          ++count2, sum2 += value;
        }
      });
      if (count2) return sum2 / count2;
      return;
    };
    const median = (columnId, leafRows) => {
      if (!leafRows.length) {
        return;
      }
      const values = leafRows.map((row) => row.getValue(columnId));
      if (!isNumberArray$1(values)) {
        return;
      }
      if (values.length === 1) {
        return values[0];
      }
      const mid = Math.floor(values.length / 2);
      const nums = values.sort((a2, b) => a2 - b);
      return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;
    };
    const unique = (columnId, leafRows) => {
      return Array.from(new Set(leafRows.map((d) => d.getValue(columnId))).values());
    };
    const uniqueCount = (columnId, leafRows) => {
      return new Set(leafRows.map((d) => d.getValue(columnId))).size;
    };
    const count = (_columnId, leafRows) => {
      return leafRows.length;
    };
    const aggregationFns = {
      sum,
      min: min$3,
      max: max$3,
      extent,
      mean,
      median,
      unique,
      uniqueCount,
      count
    };
    const ColumnGrouping = {
      getDefaultColumnDef: () => {
        return {
          aggregatedCell: (props) => {
            var _toString, _props$getValue;
            return (_toString = (_props$getValue = props.getValue()) == null || _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;
          },
          aggregationFn: "auto"
        };
      },
      getInitialState: (state) => {
        return {
          grouping: [],
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onGroupingChange: makeStateUpdater("grouping", table),
          groupedColumnMode: "reorder"
        };
      },
      createColumn: (column, table) => {
        column.toggleGrouping = () => {
          table.setGrouping((old) => {
            if (old != null && old.includes(column.id)) {
              return old.filter((d) => d !== column.id);
            }
            return [...old != null ? old : [], column.id];
          });
        };
        column.getCanGroup = () => {
          var _column$columnDef$ena, _table$options$enable;
          return ((_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGrouping) != null ? _table$options$enable : true) && (!!column.accessorFn || !!column.columnDef.getGroupingValue);
        };
        column.getIsGrouped = () => {
          var _table$getState$group;
          return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);
        };
        column.getGroupedIndex = () => {
          var _table$getState$group2;
          return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);
        };
        column.getToggleGroupingHandler = () => {
          const canGroup = column.getCanGroup();
          return () => {
            if (!canGroup) return;
            column.toggleGrouping();
          };
        };
        column.getAutoAggregationFn = () => {
          const firstRow = table.getCoreRowModel().flatRows[0];
          const value = firstRow == null ? void 0 : firstRow.getValue(column.id);
          if (typeof value === "number") {
            return aggregationFns.sum;
          }
          if (Object.prototype.toString.call(value) === "[object Date]") {
            return aggregationFns.extent;
          }
        };
        column.getAggregationFn = () => {
          var _table$options$aggreg, _table$options$aggreg2;
          if (!column) {
            throw new Error();
          }
          return isFunction$3(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === "auto" ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];
        };
      },
      createTable: (table) => {
        table.setGrouping = (updater) => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater);
        table.resetGrouping = (defaultState) => {
          var _table$initialState$g, _table$initialState;
          table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);
        };
        table.getPreGroupedRowModel = () => table.getFilteredRowModel();
        table.getGroupedRowModel = () => {
          if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {
            table._getGroupedRowModel = table.options.getGroupedRowModel(table);
          }
          if (table.options.manualGrouping || !table._getGroupedRowModel) {
            return table.getPreGroupedRowModel();
          }
          return table._getGroupedRowModel();
        };
      },
      createRow: (row, table) => {
        row.getIsGrouped = () => !!row.groupingColumnId;
        row.getGroupingValue = (columnId) => {
          if (row._groupingValuesCache.hasOwnProperty(columnId)) {
            return row._groupingValuesCache[columnId];
          }
          const column = table.getColumn(columnId);
          if (!(column != null && column.columnDef.getGroupingValue)) {
            return row.getValue(columnId);
          }
          row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(row.original);
          return row._groupingValuesCache[columnId];
        };
        row._groupingValuesCache = {};
      },
      createCell: (cell, column, row, table) => {
        cell.getIsGrouped = () => column.getIsGrouped() && column.id === row.groupingColumnId;
        cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped();
        cell.getIsAggregated = () => {
          var _row$subRows;
          return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);
        };
      }
    };
    function orderColumns(leafColumns, grouping, groupedColumnMode) {
      if (!(grouping != null && grouping.length) || !groupedColumnMode) {
        return leafColumns;
      }
      const nonGroupingColumns = leafColumns.filter((col) => !grouping.includes(col.id));
      if (groupedColumnMode === "remove") {
        return nonGroupingColumns;
      }
      const groupingColumns = grouping.map((g) => leafColumns.find((col) => col.id === g)).filter(Boolean);
      return [...groupingColumns, ...nonGroupingColumns];
    }
    const ColumnOrdering = {
      getInitialState: (state) => {
        return {
          columnOrder: [],
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onColumnOrderChange: makeStateUpdater("columnOrder", table)
        };
      },
      createColumn: (column, table) => {
        column.getIndex = memo((position) => [_getVisibleLeafColumns(table, position)], (columns) => columns.findIndex((d) => d.id === column.id), getMemoOptions(table.options, "debugColumns"));
        column.getIsFirstColumn = (position) => {
          var _columns$;
          const columns = _getVisibleLeafColumns(table, position);
          return ((_columns$ = columns[0]) == null ? void 0 : _columns$.id) === column.id;
        };
        column.getIsLastColumn = (position) => {
          var _columns;
          const columns = _getVisibleLeafColumns(table, position);
          return ((_columns = columns[columns.length - 1]) == null ? void 0 : _columns.id) === column.id;
        };
      },
      createTable: (table) => {
        table.setColumnOrder = (updater) => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater);
        table.resetColumnOrder = (defaultState) => {
          var _table$initialState$c;
          table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);
        };
        table._getOrderColumnsFn = memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => (columns) => {
          let orderedColumns = [];
          if (!(columnOrder != null && columnOrder.length)) {
            orderedColumns = columns;
          } else {
            const columnOrderCopy = [...columnOrder];
            const columnsCopy = [...columns];
            while (columnsCopy.length && columnOrderCopy.length) {
              const targetColumnId = columnOrderCopy.shift();
              const foundIndex = columnsCopy.findIndex((d) => d.id === targetColumnId);
              if (foundIndex > -1) {
                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);
              }
            }
            orderedColumns = [...orderedColumns, ...columnsCopy];
          }
          return orderColumns(orderedColumns, grouping, groupedColumnMode);
        }, getMemoOptions(table.options, "debugTable"));
      }
    };
    const getDefaultColumnPinningState = () => ({
      left: [],
      right: []
    });
    const ColumnPinning = {
      getInitialState: (state) => {
        return {
          columnPinning: getDefaultColumnPinningState(),
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onColumnPinningChange: makeStateUpdater("columnPinning", table)
        };
      },
      createColumn: (column, table) => {
        column.pin = (position) => {
          const columnIds = column.getLeafColumns().map((d) => d.id).filter(Boolean);
          table.setColumnPinning((old) => {
            var _old$left3, _old$right3;
            if (position === "right") {
              var _old$left, _old$right;
              return {
                left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter((d) => !(columnIds != null && columnIds.includes(d))),
                right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter((d) => !(columnIds != null && columnIds.includes(d))), ...columnIds]
              };
            }
            if (position === "left") {
              var _old$left2, _old$right2;
              return {
                left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter((d) => !(columnIds != null && columnIds.includes(d))), ...columnIds],
                right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter((d) => !(columnIds != null && columnIds.includes(d)))
              };
            }
            return {
              left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter((d) => !(columnIds != null && columnIds.includes(d))),
              right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter((d) => !(columnIds != null && columnIds.includes(d)))
            };
          });
        };
        column.getCanPin = () => {
          const leafColumns = column.getLeafColumns();
          return leafColumns.some((d) => {
            var _d$columnDef$enablePi, _ref, _table$options$enable;
            return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_ref = (_table$options$enable = table.options.enableColumnPinning) != null ? _table$options$enable : table.options.enablePinning) != null ? _ref : true);
          });
        };
        column.getIsPinned = () => {
          const leafColumnIds = column.getLeafColumns().map((d) => d.id);
          const {
            left,
            right
          } = table.getState().columnPinning;
          const isLeft = leafColumnIds.some((d) => left == null ? void 0 : left.includes(d));
          const isRight = leafColumnIds.some((d) => right == null ? void 0 : right.includes(d));
          return isLeft ? "left" : isRight ? "right" : false;
        };
        column.getPinnedIndex = () => {
          var _table$getState$colum, _table$getState$colum2;
          const position = column.getIsPinned();
          return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null || (_table$getState$colum2 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum2.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;
        };
      },
      createRow: (row, table) => {
        row.getCenterVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {
          const leftAndRight = [...left != null ? left : [], ...right != null ? right : []];
          return allCells.filter((d) => !leftAndRight.includes(d.column.id));
        }, getMemoOptions(table.options, "debugRows"));
        row.getLeftVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left], (allCells, left) => {
          const cells = (left != null ? left : []).map((columnId) => allCells.find((cell) => cell.column.id === columnId)).filter(Boolean).map((d) => ({
            ...d,
            position: "left"
          }));
          return cells;
        }, getMemoOptions(table.options, "debugRows"));
        row.getRightVisibleCells = memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {
          const cells = (right != null ? right : []).map((columnId) => allCells.find((cell) => cell.column.id === columnId)).filter(Boolean).map((d) => ({
            ...d,
            position: "right"
          }));
          return cells;
        }, getMemoOptions(table.options, "debugRows"));
      },
      createTable: (table) => {
        table.setColumnPinning = (updater) => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater);
        table.resetColumnPinning = (defaultState) => {
          var _table$initialState$c, _table$initialState;
          return table.setColumnPinning(defaultState ? getDefaultColumnPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultColumnPinningState());
        };
        table.getIsSomeColumnsPinned = (position) => {
          var _pinningState$positio;
          const pinningState = table.getState().columnPinning;
          if (!position) {
            var _pinningState$left, _pinningState$right;
            return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));
          }
          return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);
        };
        table.getLeftLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {
          return (left != null ? left : []).map((columnId) => allColumns.find((column) => column.id === columnId)).filter(Boolean);
        }, getMemoOptions(table.options, "debugColumns"));
        table.getRightLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {
          return (right != null ? right : []).map((columnId) => allColumns.find((column) => column.id === columnId)).filter(Boolean);
        }, getMemoOptions(table.options, "debugColumns"));
        table.getCenterLeafColumns = memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {
          const leftAndRight = [...left != null ? left : [], ...right != null ? right : []];
          return allColumns.filter((d) => !leftAndRight.includes(d.id));
        }, getMemoOptions(table.options, "debugColumns"));
      }
    };
    function safelyAccessDocument(_document) {
      return _document || (typeof document !== "undefined" ? document : null);
    }
    const defaultColumnSizing = {
      size: 150,
      minSize: 20,
      maxSize: Number.MAX_SAFE_INTEGER
    };
    const getDefaultColumnSizingInfoState = () => ({
      startOffset: null,
      startSize: null,
      deltaOffset: null,
      deltaPercentage: null,
      isResizingColumn: false,
      columnSizingStart: []
    });
    const ColumnSizing = {
      getDefaultColumnDef: () => {
        return defaultColumnSizing;
      },
      getInitialState: (state) => {
        return {
          columnSizing: {},
          columnSizingInfo: getDefaultColumnSizingInfoState(),
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          columnResizeMode: "onEnd",
          columnResizeDirection: "ltr",
          onColumnSizingChange: makeStateUpdater("columnSizing", table),
          onColumnSizingInfoChange: makeStateUpdater("columnSizingInfo", table)
        };
      },
      createColumn: (column, table) => {
        column.getSize = () => {
          var _column$columnDef$min, _ref, _column$columnDef$max;
          const columnSize = table.getState().columnSizing[column.id];
          return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);
        };
        column.getStart = memo((position) => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(0, column.getIndex(position)).reduce((sum2, column2) => sum2 + column2.getSize(), 0), getMemoOptions(table.options, "debugColumns"));
        column.getAfter = memo((position) => [position, _getVisibleLeafColumns(table, position), table.getState().columnSizing], (position, columns) => columns.slice(column.getIndex(position) + 1).reduce((sum2, column2) => sum2 + column2.getSize(), 0), getMemoOptions(table.options, "debugColumns"));
        column.resetSize = () => {
          table.setColumnSizing((_ref2) => {
            let {
              [column.id]: _,
              ...rest
            } = _ref2;
            return rest;
          });
        };
        column.getCanResize = () => {
          var _column$columnDef$ena, _table$options$enable;
          return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);
        };
        column.getIsResizing = () => {
          return table.getState().columnSizingInfo.isResizingColumn === column.id;
        };
      },
      createHeader: (header, table) => {
        header.getSize = () => {
          let sum2 = 0;
          const recurse = (header2) => {
            if (header2.subHeaders.length) {
              header2.subHeaders.forEach(recurse);
            } else {
              var _header$column$getSiz;
              sum2 += (_header$column$getSiz = header2.column.getSize()) != null ? _header$column$getSiz : 0;
            }
          };
          recurse(header);
          return sum2;
        };
        header.getStart = () => {
          if (header.index > 0) {
            const prevSiblingHeader = header.headerGroup.headers[header.index - 1];
            return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();
          }
          return 0;
        };
        header.getResizeHandler = (_contextDocument) => {
          const column = table.getColumn(header.column.id);
          const canResize = column == null ? void 0 : column.getCanResize();
          return (e) => {
            if (!column || !canResize) {
              return;
            }
            e.persist == null || e.persist();
            if (isTouchStartEvent(e)) {
              if (e.touches && e.touches.length > 1) {
                return;
              }
            }
            const startSize = header.getSize();
            const columnSizingStart = header ? header.getLeafHeaders().map((d) => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];
            const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;
            const newColumnSizing = {};
            const updateOffset = (eventType, clientXPos) => {
              if (typeof clientXPos !== "number") {
                return;
              }
              table.setColumnSizingInfo((old) => {
                var _old$startOffset, _old$startSize;
                const deltaDirection = table.options.columnResizeDirection === "rtl" ? -1 : 1;
                const deltaOffset = (clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0)) * deltaDirection;
                const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);
                old.columnSizingStart.forEach((_ref3) => {
                  let [columnId, headerSize] = _ref3;
                  newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;
                });
                return {
                  ...old,
                  deltaOffset,
                  deltaPercentage
                };
              });
              if (table.options.columnResizeMode === "onChange" || eventType === "end") {
                table.setColumnSizing((old) => ({
                  ...old,
                  ...newColumnSizing
                }));
              }
            };
            const onMove = (clientXPos) => updateOffset("move", clientXPos);
            const onEnd = (clientXPos) => {
              updateOffset("end", clientXPos);
              table.setColumnSizingInfo((old) => ({
                ...old,
                isResizingColumn: false,
                startOffset: null,
                startSize: null,
                deltaOffset: null,
                deltaPercentage: null,
                columnSizingStart: []
              }));
            };
            const contextDocument = safelyAccessDocument(_contextDocument);
            const mouseEvents = {
              moveHandler: (e22) => onMove(e22.clientX),
              upHandler: (e22) => {
                contextDocument == null || contextDocument.removeEventListener("mousemove", mouseEvents.moveHandler);
                contextDocument == null || contextDocument.removeEventListener("mouseup", mouseEvents.upHandler);
                onEnd(e22.clientX);
              }
            };
            const touchEvents = {
              moveHandler: (e22) => {
                if (e22.cancelable) {
                  e22.preventDefault();
                  e22.stopPropagation();
                }
                onMove(e22.touches[0].clientX);
                return false;
              },
              upHandler: (e22) => {
                var _e$touches$;
                contextDocument == null || contextDocument.removeEventListener("touchmove", touchEvents.moveHandler);
                contextDocument == null || contextDocument.removeEventListener("touchend", touchEvents.upHandler);
                if (e22.cancelable) {
                  e22.preventDefault();
                  e22.stopPropagation();
                }
                onEnd((_e$touches$ = e22.touches[0]) == null ? void 0 : _e$touches$.clientX);
              }
            };
            const passiveIfSupported = passiveEventSupported() ? {
              passive: false
            } : false;
            if (isTouchStartEvent(e)) {
              contextDocument == null || contextDocument.addEventListener("touchmove", touchEvents.moveHandler, passiveIfSupported);
              contextDocument == null || contextDocument.addEventListener("touchend", touchEvents.upHandler, passiveIfSupported);
            } else {
              contextDocument == null || contextDocument.addEventListener("mousemove", mouseEvents.moveHandler, passiveIfSupported);
              contextDocument == null || contextDocument.addEventListener("mouseup", mouseEvents.upHandler, passiveIfSupported);
            }
            table.setColumnSizingInfo((old) => ({
              ...old,
              startOffset: clientX,
              startSize,
              deltaOffset: 0,
              deltaPercentage: 0,
              columnSizingStart,
              isResizingColumn: column.id
            }));
          };
        };
      },
      createTable: (table) => {
        table.setColumnSizing = (updater) => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater);
        table.setColumnSizingInfo = (updater) => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater);
        table.resetColumnSizing = (defaultState) => {
          var _table$initialState$c;
          table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});
        };
        table.resetHeaderSizeInfo = (defaultState) => {
          var _table$initialState$c2;
          table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());
        };
        table.getTotalSize = () => {
          var _table$getHeaderGroup, _table$getHeaderGroup2;
          return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum2, header) => {
            return sum2 + header.getSize();
          }, 0)) != null ? _table$getHeaderGroup : 0;
        };
        table.getLeftTotalSize = () => {
          var _table$getLeftHeaderG, _table$getLeftHeaderG2;
          return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum2, header) => {
            return sum2 + header.getSize();
          }, 0)) != null ? _table$getLeftHeaderG : 0;
        };
        table.getCenterTotalSize = () => {
          var _table$getCenterHeade, _table$getCenterHeade2;
          return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum2, header) => {
            return sum2 + header.getSize();
          }, 0)) != null ? _table$getCenterHeade : 0;
        };
        table.getRightTotalSize = () => {
          var _table$getRightHeader, _table$getRightHeader2;
          return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum2, header) => {
            return sum2 + header.getSize();
          }, 0)) != null ? _table$getRightHeader : 0;
        };
      }
    };
    let passiveSupported = null;
    function passiveEventSupported() {
      if (typeof passiveSupported === "boolean") return passiveSupported;
      let supported = false;
      try {
        const options2 = {
          get passive() {
            supported = true;
            return false;
          }
        };
        const noop2 = () => {
        };
        window.addEventListener("test", noop2, options2);
        window.removeEventListener("test", noop2);
      } catch (err) {
        supported = false;
      }
      passiveSupported = supported;
      return passiveSupported;
    }
    function isTouchStartEvent(e) {
      return e.type === "touchstart";
    }
    const ColumnVisibility = {
      getInitialState: (state) => {
        return {
          columnVisibility: {},
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onColumnVisibilityChange: makeStateUpdater("columnVisibility", table)
        };
      },
      createColumn: (column, table) => {
        column.toggleVisibility = (value) => {
          if (column.getCanHide()) {
            table.setColumnVisibility((old) => ({
              ...old,
              [column.id]: value != null ? value : !column.getIsVisible()
            }));
          }
        };
        column.getIsVisible = () => {
          var _ref, _table$getState$colum;
          const childColumns = column.columns;
          return (_ref = childColumns.length ? childColumns.some((c2) => c2.getIsVisible()) : (_table$getState$colum = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum[column.id]) != null ? _ref : true;
        };
        column.getCanHide = () => {
          var _column$columnDef$ena, _table$options$enable;
          return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);
        };
        column.getToggleVisibilityHandler = () => {
          return (e) => {
            column.toggleVisibility == null || column.toggleVisibility(e.target.checked);
          };
        };
      },
      createRow: (row, table) => {
        row._getAllVisibleCells = memo(() => [row.getAllCells(), table.getState().columnVisibility], (cells) => {
          return cells.filter((cell) => cell.column.getIsVisible());
        }, getMemoOptions(table.options, "debugRows"));
        row.getVisibleCells = memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], getMemoOptions(table.options, "debugRows"));
      },
      createTable: (table) => {
        const makeVisibleColumnsMethod = (key, getColumns) => {
          return memo(() => [getColumns(), getColumns().filter((d) => d.getIsVisible()).map((d) => d.id).join("_")], (columns) => {
            return columns.filter((d) => d.getIsVisible == null ? void 0 : d.getIsVisible());
          }, getMemoOptions(table.options, "debugColumns"));
        };
        table.getVisibleFlatColumns = makeVisibleColumnsMethod("getVisibleFlatColumns", () => table.getAllFlatColumns());
        table.getVisibleLeafColumns = makeVisibleColumnsMethod("getVisibleLeafColumns", () => table.getAllLeafColumns());
        table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod("getLeftVisibleLeafColumns", () => table.getLeftLeafColumns());
        table.getRightVisibleLeafColumns = makeVisibleColumnsMethod("getRightVisibleLeafColumns", () => table.getRightLeafColumns());
        table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod("getCenterVisibleLeafColumns", () => table.getCenterLeafColumns());
        table.setColumnVisibility = (updater) => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater);
        table.resetColumnVisibility = (defaultState) => {
          var _table$initialState$c;
          table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});
        };
        table.toggleAllColumnsVisible = (value) => {
          var _value;
          value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();
          table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({
            ...obj,
            [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value
          }), {}));
        };
        table.getIsAllColumnsVisible = () => !table.getAllLeafColumns().some((column) => !(column.getIsVisible != null && column.getIsVisible()));
        table.getIsSomeColumnsVisible = () => table.getAllLeafColumns().some((column) => column.getIsVisible == null ? void 0 : column.getIsVisible());
        table.getToggleAllColumnsVisibilityHandler = () => {
          return (e) => {
            var _target;
            table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);
          };
        };
      }
    };
    function _getVisibleLeafColumns(table, position) {
      return !position ? table.getVisibleLeafColumns() : position === "center" ? table.getCenterVisibleLeafColumns() : position === "left" ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();
    }
    const GlobalFaceting = {
      createTable: (table) => {
        table._getGlobalFacetedRowModel = table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, "__global__");
        table.getGlobalFacetedRowModel = () => {
          if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {
            return table.getPreFilteredRowModel();
          }
          return table._getGlobalFacetedRowModel();
        };
        table._getGlobalFacetedUniqueValues = table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, "__global__");
        table.getGlobalFacetedUniqueValues = () => {
          if (!table._getGlobalFacetedUniqueValues) {
            return /* @__PURE__ */ new Map();
          }
          return table._getGlobalFacetedUniqueValues();
        };
        table._getGlobalFacetedMinMaxValues = table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, "__global__");
        table.getGlobalFacetedMinMaxValues = () => {
          if (!table._getGlobalFacetedMinMaxValues) {
            return;
          }
          return table._getGlobalFacetedMinMaxValues();
        };
      }
    };
    const GlobalFiltering = {
      getInitialState: (state) => {
        return {
          globalFilter: void 0,
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onGlobalFilterChange: makeStateUpdater("globalFilter", table),
          globalFilterFn: "auto",
          getColumnCanGlobalFilter: (column) => {
            var _table$getCoreRowMode;
            const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null || (_table$getCoreRowMode = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode.getValue();
            return typeof value === "string" || typeof value === "number";
          }
        };
      },
      createColumn: (column, table) => {
        column.getCanGlobalFilter = () => {
          var _column$columnDef$ena, _table$options$enable, _table$options$enable2, _table$options$getCol;
          return ((_column$columnDef$ena = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableGlobalFilter) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;
        };
      },
      createTable: (table) => {
        table.getGlobalAutoFilterFn = () => {
          return filterFns.includesString;
        };
        table.getGlobalFilterFn = () => {
          var _table$options$filter, _table$options$filter2;
          const {
            globalFilterFn
          } = table.options;
          return isFunction$3(globalFilterFn) ? globalFilterFn : globalFilterFn === "auto" ? table.getGlobalAutoFilterFn() : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[globalFilterFn]) != null ? _table$options$filter : filterFns[globalFilterFn];
        };
        table.setGlobalFilter = (updater) => {
          table.options.onGlobalFilterChange == null || table.options.onGlobalFilterChange(updater);
        };
        table.resetGlobalFilter = (defaultState) => {
          table.setGlobalFilter(defaultState ? void 0 : table.initialState.globalFilter);
        };
      }
    };
    const RowExpanding = {
      getInitialState: (state) => {
        return {
          expanded: {},
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onExpandedChange: makeStateUpdater("expanded", table),
          paginateExpandedRows: true
        };
      },
      createTable: (table) => {
        let registered = false;
        let queued = false;
        table._autoResetExpanded = () => {
          var _ref, _table$options$autoRe;
          if (!registered) {
            table._queue(() => {
              registered = true;
            });
            return;
          }
          if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {
            if (queued) return;
            queued = true;
            table._queue(() => {
              table.resetExpanded();
              queued = false;
            });
          }
        };
        table.setExpanded = (updater) => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater);
        table.toggleAllRowsExpanded = (expanded) => {
          if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {
            table.setExpanded(true);
          } else {
            table.setExpanded({});
          }
        };
        table.resetExpanded = (defaultState) => {
          var _table$initialState$e, _table$initialState;
          table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});
        };
        table.getCanSomeRowsExpand = () => {
          return table.getPrePaginationRowModel().flatRows.some((row) => row.getCanExpand());
        };
        table.getToggleAllRowsExpandedHandler = () => {
          return (e) => {
            e.persist == null || e.persist();
            table.toggleAllRowsExpanded();
          };
        };
        table.getIsSomeRowsExpanded = () => {
          const expanded = table.getState().expanded;
          return expanded === true || Object.values(expanded).some(Boolean);
        };
        table.getIsAllRowsExpanded = () => {
          const expanded = table.getState().expanded;
          if (typeof expanded === "boolean") {
            return expanded === true;
          }
          if (!Object.keys(expanded).length) {
            return false;
          }
          if (table.getRowModel().flatRows.some((row) => !row.getIsExpanded())) {
            return false;
          }
          return true;
        };
        table.getExpandedDepth = () => {
          let maxDepth = 0;
          const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);
          rowIds.forEach((id) => {
            const splitId = id.split(".");
            maxDepth = Math.max(maxDepth, splitId.length);
          });
          return maxDepth;
        };
        table.getPreExpandedRowModel = () => table.getSortedRowModel();
        table.getExpandedRowModel = () => {
          if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {
            table._getExpandedRowModel = table.options.getExpandedRowModel(table);
          }
          if (table.options.manualExpanding || !table._getExpandedRowModel) {
            return table.getPreExpandedRowModel();
          }
          return table._getExpandedRowModel();
        };
      },
      createRow: (row, table) => {
        row.toggleExpanded = (expanded) => {
          table.setExpanded((old) => {
            var _expanded;
            const exists = old === true ? true : !!(old != null && old[row.id]);
            let oldExpanded = {};
            if (old === true) {
              Object.keys(table.getRowModel().rowsById).forEach((rowId) => {
                oldExpanded[rowId] = true;
              });
            } else {
              oldExpanded = old;
            }
            expanded = (_expanded = expanded) != null ? _expanded : !exists;
            if (!exists && expanded) {
              return {
                ...oldExpanded,
                [row.id]: true
              };
            }
            if (exists && !expanded) {
              const {
                [row.id]: _,
                ...rest
              } = oldExpanded;
              return rest;
            }
            return old;
          });
        };
        row.getIsExpanded = () => {
          var _table$options$getIsR;
          const expanded = table.getState().expanded;
          return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));
        };
        row.getCanExpand = () => {
          var _table$options$getRow, _table$options$enable, _row$subRows;
          return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);
        };
        row.getIsAllParentsExpanded = () => {
          let isFullyExpanded = true;
          let currentRow = row;
          while (isFullyExpanded && currentRow.parentId) {
            currentRow = table.getRow(currentRow.parentId, true);
            isFullyExpanded = currentRow.getIsExpanded();
          }
          return isFullyExpanded;
        };
        row.getToggleExpandedHandler = () => {
          const canExpand = row.getCanExpand();
          return () => {
            if (!canExpand) return;
            row.toggleExpanded();
          };
        };
      }
    };
    const defaultPageIndex = 0;
    const defaultPageSize = 10;
    const getDefaultPaginationState = () => ({
      pageIndex: defaultPageIndex,
      pageSize: defaultPageSize
    });
    const RowPagination = {
      getInitialState: (state) => {
        return {
          ...state,
          pagination: {
            ...getDefaultPaginationState(),
            ...state == null ? void 0 : state.pagination
          }
        };
      },
      getDefaultOptions: (table) => {
        return {
          onPaginationChange: makeStateUpdater("pagination", table)
        };
      },
      createTable: (table) => {
        let registered = false;
        let queued = false;
        table._autoResetPageIndex = () => {
          var _ref, _table$options$autoRe;
          if (!registered) {
            table._queue(() => {
              registered = true;
            });
            return;
          }
          if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {
            if (queued) return;
            queued = true;
            table._queue(() => {
              table.resetPageIndex();
              queued = false;
            });
          }
        };
        table.setPagination = (updater) => {
          const safeUpdater = (old) => {
            let newState = functionalUpdate(updater, old);
            return newState;
          };
          return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);
        };
        table.resetPagination = (defaultState) => {
          var _table$initialState$p;
          table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());
        };
        table.setPageIndex = (updater) => {
          table.setPagination((old) => {
            let pageIndex = functionalUpdate(updater, old.pageIndex);
            const maxPageIndex = typeof table.options.pageCount === "undefined" || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;
            pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));
            return {
              ...old,
              pageIndex
            };
          });
        };
        table.resetPageIndex = (defaultState) => {
          var _table$initialState$p2, _table$initialState;
          table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null || (_table$initialState = _table$initialState.pagination) == null ? void 0 : _table$initialState.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);
        };
        table.resetPageSize = (defaultState) => {
          var _table$initialState$p3, _table$initialState2;
          table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p3 = (_table$initialState2 = table.initialState) == null || (_table$initialState2 = _table$initialState2.pagination) == null ? void 0 : _table$initialState2.pageSize) != null ? _table$initialState$p3 : defaultPageSize);
        };
        table.setPageSize = (updater) => {
          table.setPagination((old) => {
            const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));
            const topRowIndex = old.pageSize * old.pageIndex;
            const pageIndex = Math.floor(topRowIndex / pageSize);
            return {
              ...old,
              pageIndex,
              pageSize
            };
          });
        };
        table.setPageCount = (updater) => table.setPagination((old) => {
          var _table$options$pageCo;
          let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);
          if (typeof newPageCount === "number") {
            newPageCount = Math.max(-1, newPageCount);
          }
          return {
            ...old,
            pageCount: newPageCount
          };
        });
        table.getPageOptions = memo(() => [table.getPageCount()], (pageCount) => {
          let pageOptions = [];
          if (pageCount && pageCount > 0) {
            pageOptions = [...new Array(pageCount)].fill(null).map((_, i2) => i2);
          }
          return pageOptions;
        }, getMemoOptions(table.options, "debugTable"));
        table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0;
        table.getCanNextPage = () => {
          const {
            pageIndex
          } = table.getState().pagination;
          const pageCount = table.getPageCount();
          if (pageCount === -1) {
            return true;
          }
          if (pageCount === 0) {
            return false;
          }
          return pageIndex < pageCount - 1;
        };
        table.previousPage = () => {
          return table.setPageIndex((old) => old - 1);
        };
        table.nextPage = () => {
          return table.setPageIndex((old) => {
            return old + 1;
          });
        };
        table.firstPage = () => {
          return table.setPageIndex(0);
        };
        table.lastPage = () => {
          return table.setPageIndex(table.getPageCount() - 1);
        };
        table.getPrePaginationRowModel = () => table.getExpandedRowModel();
        table.getPaginationRowModel = () => {
          if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {
            table._getPaginationRowModel = table.options.getPaginationRowModel(table);
          }
          if (table.options.manualPagination || !table._getPaginationRowModel) {
            return table.getPrePaginationRowModel();
          }
          return table._getPaginationRowModel();
        };
        table.getPageCount = () => {
          var _table$options$pageCo2;
          return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getRowCount() / table.getState().pagination.pageSize);
        };
        table.getRowCount = () => {
          var _table$options$rowCou;
          return (_table$options$rowCou = table.options.rowCount) != null ? _table$options$rowCou : table.getPrePaginationRowModel().rows.length;
        };
      }
    };
    const getDefaultRowPinningState = () => ({
      top: [],
      bottom: []
    });
    const RowPinning = {
      getInitialState: (state) => {
        return {
          rowPinning: getDefaultRowPinningState(),
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onRowPinningChange: makeStateUpdater("rowPinning", table)
        };
      },
      createRow: (row, table) => {
        row.pin = (position, includeLeafRows, includeParentRows) => {
          const leafRowIds = includeLeafRows ? row.getLeafRows().map((_ref) => {
            let {
              id
            } = _ref;
            return id;
          }) : [];
          const parentRowIds = includeParentRows ? row.getParentRows().map((_ref2) => {
            let {
              id
            } = _ref2;
            return id;
          }) : [];
          const rowIds = /* @__PURE__ */ new Set([...parentRowIds, row.id, ...leafRowIds]);
          table.setRowPinning((old) => {
            var _old$top3, _old$bottom3;
            if (position === "bottom") {
              var _old$top, _old$bottom;
              return {
                top: ((_old$top = old == null ? void 0 : old.top) != null ? _old$top : []).filter((d) => !(rowIds != null && rowIds.has(d))),
                bottom: [...((_old$bottom = old == null ? void 0 : old.bottom) != null ? _old$bottom : []).filter((d) => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)]
              };
            }
            if (position === "top") {
              var _old$top2, _old$bottom2;
              return {
                top: [...((_old$top2 = old == null ? void 0 : old.top) != null ? _old$top2 : []).filter((d) => !(rowIds != null && rowIds.has(d))), ...Array.from(rowIds)],
                bottom: ((_old$bottom2 = old == null ? void 0 : old.bottom) != null ? _old$bottom2 : []).filter((d) => !(rowIds != null && rowIds.has(d)))
              };
            }
            return {
              top: ((_old$top3 = old == null ? void 0 : old.top) != null ? _old$top3 : []).filter((d) => !(rowIds != null && rowIds.has(d))),
              bottom: ((_old$bottom3 = old == null ? void 0 : old.bottom) != null ? _old$bottom3 : []).filter((d) => !(rowIds != null && rowIds.has(d)))
            };
          });
        };
        row.getCanPin = () => {
          var _ref3;
          const {
            enableRowPinning,
            enablePinning
          } = table.options;
          if (typeof enableRowPinning === "function") {
            return enableRowPinning(row);
          }
          return (_ref3 = enableRowPinning != null ? enableRowPinning : enablePinning) != null ? _ref3 : true;
        };
        row.getIsPinned = () => {
          const rowIds = [row.id];
          const {
            top,
            bottom
          } = table.getState().rowPinning;
          const isTop = rowIds.some((d) => top == null ? void 0 : top.includes(d));
          const isBottom = rowIds.some((d) => bottom == null ? void 0 : bottom.includes(d));
          return isTop ? "top" : isBottom ? "bottom" : false;
        };
        row.getPinnedIndex = () => {
          var _ref4, _visiblePinnedRowIds$;
          const position = row.getIsPinned();
          if (!position) return -1;
          const visiblePinnedRowIds = (_ref4 = position === "top" ? table.getTopRows() : table.getBottomRows()) == null ? void 0 : _ref4.map((_ref5) => {
            let {
              id
            } = _ref5;
            return id;
          });
          return (_visiblePinnedRowIds$ = visiblePinnedRowIds == null ? void 0 : visiblePinnedRowIds.indexOf(row.id)) != null ? _visiblePinnedRowIds$ : -1;
        };
      },
      createTable: (table) => {
        table.setRowPinning = (updater) => table.options.onRowPinningChange == null ? void 0 : table.options.onRowPinningChange(updater);
        table.resetRowPinning = (defaultState) => {
          var _table$initialState$r, _table$initialState;
          return table.setRowPinning(defaultState ? getDefaultRowPinningState() : (_table$initialState$r = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.rowPinning) != null ? _table$initialState$r : getDefaultRowPinningState());
        };
        table.getIsSomeRowsPinned = (position) => {
          var _pinningState$positio;
          const pinningState = table.getState().rowPinning;
          if (!position) {
            var _pinningState$top, _pinningState$bottom;
            return Boolean(((_pinningState$top = pinningState.top) == null ? void 0 : _pinningState$top.length) || ((_pinningState$bottom = pinningState.bottom) == null ? void 0 : _pinningState$bottom.length));
          }
          return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);
        };
        table._getPinnedRows = (visibleRows, pinnedRowIds, position) => {
          var _table$options$keepPi;
          const rows = ((_table$options$keepPi = table.options.keepPinnedRows) != null ? _table$options$keepPi : true) ? (
            //get all rows that are pinned even if they would not be otherwise visible
            //account for expanded parent rows, but not pagination or filtering
            (pinnedRowIds != null ? pinnedRowIds : []).map((rowId) => {
              const row = table.getRow(rowId, true);
              return row.getIsAllParentsExpanded() ? row : null;
            })
          ) : (
            //else get only visible rows that are pinned
            (pinnedRowIds != null ? pinnedRowIds : []).map((rowId) => visibleRows.find((row) => row.id === rowId))
          );
          return rows.filter(Boolean).map((d) => ({
            ...d,
            position
          }));
        };
        table.getTopRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top], (allRows, topPinnedRowIds) => table._getPinnedRows(allRows, topPinnedRowIds, "top"), getMemoOptions(table.options, "debugRows"));
        table.getBottomRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.bottom], (allRows, bottomPinnedRowIds) => table._getPinnedRows(allRows, bottomPinnedRowIds, "bottom"), getMemoOptions(table.options, "debugRows"));
        table.getCenterRows = memo(() => [table.getRowModel().rows, table.getState().rowPinning.top, table.getState().rowPinning.bottom], (allRows, top, bottom) => {
          const topAndBottom = /* @__PURE__ */ new Set([...top != null ? top : [], ...bottom != null ? bottom : []]);
          return allRows.filter((d) => !topAndBottom.has(d.id));
        }, getMemoOptions(table.options, "debugRows"));
      }
    };
    const RowSelection = {
      getInitialState: (state) => {
        return {
          rowSelection: {},
          ...state
        };
      },
      getDefaultOptions: (table) => {
        return {
          onRowSelectionChange: makeStateUpdater("rowSelection", table),
          enableRowSelection: true,
          enableMultiRowSelection: true,
          enableSubRowSelection: true
          // enableGroupingRowSelection: false,
          // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,
          // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,
        };
      },
      createTable: (table) => {
        table.setRowSelection = (updater) => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater);
        table.resetRowSelection = (defaultState) => {
          var _table$initialState$r;
          return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});
        };
        table.toggleAllRowsSelected = (value) => {
          table.setRowSelection((old) => {
            value = typeof value !== "undefined" ? value : !table.getIsAllRowsSelected();
            const rowSelection = {
              ...old
            };
            const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;
            if (value) {
              preGroupedFlatRows.forEach((row) => {
                if (!row.getCanSelect()) {
                  return;
                }
                rowSelection[row.id] = true;
              });
            } else {
              preGroupedFlatRows.forEach((row) => {
                delete rowSelection[row.id];
              });
            }
            return rowSelection;
          });
        };
        table.toggleAllPageRowsSelected = (value) => table.setRowSelection((old) => {
          const resolvedValue = typeof value !== "undefined" ? value : !table.getIsAllPageRowsSelected();
          const rowSelection = {
            ...old
          };
          table.getRowModel().rows.forEach((row) => {
            mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table);
          });
          return rowSelection;
        });
        table.getPreSelectedRowModel = () => table.getCoreRowModel();
        table.getSelectedRowModel = memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {
          if (!Object.keys(rowSelection).length) {
            return {
              rows: [],
              flatRows: [],
              rowsById: {}
            };
          }
          return selectRowsFn(table, rowModel);
        }, getMemoOptions(table.options, "debugTable"));
        table.getFilteredSelectedRowModel = memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {
          if (!Object.keys(rowSelection).length) {
            return {
              rows: [],
              flatRows: [],
              rowsById: {}
            };
          }
          return selectRowsFn(table, rowModel);
        }, getMemoOptions(table.options, "debugTable"));
        table.getGroupedSelectedRowModel = memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {
          if (!Object.keys(rowSelection).length) {
            return {
              rows: [],
              flatRows: [],
              rowsById: {}
            };
          }
          return selectRowsFn(table, rowModel);
        }, getMemoOptions(table.options, "debugTable"));
        table.getIsAllRowsSelected = () => {
          const preGroupedFlatRows = table.getFilteredRowModel().flatRows;
          const {
            rowSelection
          } = table.getState();
          let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);
          if (isAllRowsSelected) {
            if (preGroupedFlatRows.some((row) => row.getCanSelect() && !rowSelection[row.id])) {
              isAllRowsSelected = false;
            }
          }
          return isAllRowsSelected;
        };
        table.getIsAllPageRowsSelected = () => {
          const paginationFlatRows = table.getPaginationRowModel().flatRows.filter((row) => row.getCanSelect());
          const {
            rowSelection
          } = table.getState();
          let isAllPageRowsSelected = !!paginationFlatRows.length;
          if (isAllPageRowsSelected && paginationFlatRows.some((row) => !rowSelection[row.id])) {
            isAllPageRowsSelected = false;
          }
          return isAllPageRowsSelected;
        };
        table.getIsSomeRowsSelected = () => {
          var _table$getState$rowSe;
          const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;
          return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;
        };
        table.getIsSomePageRowsSelected = () => {
          const paginationFlatRows = table.getPaginationRowModel().flatRows;
          return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter((row) => row.getCanSelect()).some((d) => d.getIsSelected() || d.getIsSomeSelected());
        };
        table.getToggleAllRowsSelectedHandler = () => {
          return (e) => {
            table.toggleAllRowsSelected(e.target.checked);
          };
        };
        table.getToggleAllPageRowsSelectedHandler = () => {
          return (e) => {
            table.toggleAllPageRowsSelected(e.target.checked);
          };
        };
      },
      createRow: (row, table) => {
        row.toggleSelected = (value, opts) => {
          const isSelected = row.getIsSelected();
          table.setRowSelection((old) => {
            var _opts$selectChildren;
            value = typeof value !== "undefined" ? value : !isSelected;
            if (row.getCanSelect() && isSelected === value) {
              return old;
            }
            const selectedRowIds = {
              ...old
            };
            mutateRowIsSelected(selectedRowIds, row.id, value, (_opts$selectChildren = opts == null ? void 0 : opts.selectChildren) != null ? _opts$selectChildren : true, table);
            return selectedRowIds;
          });
        };
        row.getIsSelected = () => {
          const {
            rowSelection
          } = table.getState();
          return isRowSelected(row, rowSelection);
        };
        row.getIsSomeSelected = () => {
          const {
            rowSelection
          } = table.getState();
          return isSubRowSelected(row, rowSelection) === "some";
        };
        row.getIsAllSubRowsSelected = () => {
          const {
            rowSelection
          } = table.getState();
          return isSubRowSelected(row, rowSelection) === "all";
        };
        row.getCanSelect = () => {
          var _table$options$enable;
          if (typeof table.options.enableRowSelection === "function") {
            return table.options.enableRowSelection(row);
          }
          return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;
        };
        row.getCanSelectSubRows = () => {
          var _table$options$enable2;
          if (typeof table.options.enableSubRowSelection === "function") {
            return table.options.enableSubRowSelection(row);
          }
          return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;
        };
        row.getCanMultiSelect = () => {
          var _table$options$enable3;
          if (typeof table.options.enableMultiRowSelection === "function") {
            return table.options.enableMultiRowSelection(row);
          }
          return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;
        };
        row.getToggleSelectedHandler = () => {
          const canSelect = row.getCanSelect();
          return (e) => {
            var _target;
            if (!canSelect) return;
            row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);
          };
        };
      }
    };
    const mutateRowIsSelected = (selectedRowIds, id, value, includeChildren, table) => {
      var _row$subRows;
      const row = table.getRow(id, true);
      if (value) {
        if (!row.getCanMultiSelect()) {
          Object.keys(selectedRowIds).forEach((key) => delete selectedRowIds[key]);
        }
        if (row.getCanSelect()) {
          selectedRowIds[id] = true;
        }
      } else {
        delete selectedRowIds[id];
      }
      if (includeChildren && (_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {
        row.subRows.forEach((row2) => mutateRowIsSelected(selectedRowIds, row2.id, value, includeChildren, table));
      }
    };
    function selectRowsFn(table, rowModel) {
      const rowSelection = table.getState().rowSelection;
      const newSelectedFlatRows = [];
      const newSelectedRowsById = {};
      const recurseRows = function(rows, depth) {
        return rows.map((row) => {
          var _row$subRows2;
          const isSelected = isRowSelected(row, rowSelection);
          if (isSelected) {
            newSelectedFlatRows.push(row);
            newSelectedRowsById[row.id] = row;
          }
          if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {
            row = {
              ...row,
              subRows: recurseRows(row.subRows)
            };
          }
          if (isSelected) {
            return row;
          }
        }).filter(Boolean);
      };
      return {
        rows: recurseRows(rowModel.rows),
        flatRows: newSelectedFlatRows,
        rowsById: newSelectedRowsById
      };
    }
    function isRowSelected(row, selection) {
      var _selection$row$id;
      return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;
    }
    function isSubRowSelected(row, selection, table) {
      var _row$subRows3;
      if (!((_row$subRows3 = row.subRows) != null && _row$subRows3.length)) return false;
      let allChildrenSelected = true;
      let someSelected = false;
      row.subRows.forEach((subRow) => {
        if (someSelected && !allChildrenSelected) {
          return;
        }
        if (subRow.getCanSelect()) {
          if (isRowSelected(subRow, selection)) {
            someSelected = true;
          } else {
            allChildrenSelected = false;
          }
        }
        if (subRow.subRows && subRow.subRows.length) {
          const subRowChildrenSelected = isSubRowSelected(subRow, selection);
          if (subRowChildrenSelected === "all") {
            someSelected = true;
          } else if (subRowChildrenSelected === "some") {
            someSelected = true;
            allChildrenSelected = false;
          } else {
            allChildrenSelected = false;
          }
        }
      });
      return allChildrenSelected ? "all" : someSelected ? "some" : false;
    }
    const reSplitAlphaNumeric = /([0-9]+)/gm;
    const alphanumeric = (rowA, rowB, columnId) => {
      return compareAlphanumeric(toString$2(rowA.getValue(columnId)).toLowerCase(), toString$2(rowB.getValue(columnId)).toLowerCase());
    };
    const alphanumericCaseSensitive = (rowA, rowB, columnId) => {
      return compareAlphanumeric(toString$2(rowA.getValue(columnId)), toString$2(rowB.getValue(columnId)));
    };
    const text = (rowA, rowB, columnId) => {
      return compareBasic(toString$2(rowA.getValue(columnId)).toLowerCase(), toString$2(rowB.getValue(columnId)).toLowerCase());
    };
    const textCaseSensitive = (rowA, rowB, columnId) => {
      return compareBasic(toString$2(rowA.getValue(columnId)), toString$2(rowB.getValue(columnId)));
    };
    const datetime = (rowA, rowB, columnId) => {
      const a2 = rowA.getValue(columnId);
      const b = rowB.getValue(columnId);
      return a2 > b ? 1 : a2 < b ? -1 : 0;
    };
    const basic = (rowA, rowB, columnId) => {
      return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));
    };
    function compareBasic(a2, b) {
      return a2 === b ? 0 : a2 > b ? 1 : -1;
    }
    function toString$2(a2) {
      if (typeof a2 === "number") {
        if (isNaN(a2) || a2 === Infinity || a2 === -Infinity) {
          return "";
        }
        return String(a2);
      }
      if (typeof a2 === "string") {
        return a2;
      }
      return "";
    }
    function compareAlphanumeric(aStr, bStr) {
      const a2 = aStr.split(reSplitAlphaNumeric).filter(Boolean);
      const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);
      while (a2.length && b.length) {
        const aa = a2.shift();
        const bb = b.shift();
        const an = parseInt(aa, 10);
        const bn = parseInt(bb, 10);
        const combo = [an, bn].sort();
        if (isNaN(combo[0])) {
          if (aa > bb) {
            return 1;
          }
          if (bb > aa) {
            return -1;
          }
          continue;
        }
        if (isNaN(combo[1])) {
          return isNaN(an) ? -1 : 1;
        }
        if (an > bn) {
          return 1;
        }
        if (bn > an) {
          return -1;
        }
      }
      return a2.length - b.length;
    }
    const sortingFns = {
      alphanumeric,
      alphanumericCaseSensitive,
      text,
      textCaseSensitive,
      datetime,
      basic
    };
    const RowSorting = {
      getInitialState: (state) => {
        return {
          sorting: [],
          ...state
        };
      },
      getDefaultColumnDef: () => {
        return {
          sortingFn: "auto",
          sortUndefined: 1
        };
      },
      getDefaultOptions: (table) => {
        return {
          onSortingChange: makeStateUpdater("sorting", table),
          isMultiSortEvent: (e) => {
            return e.shiftKey;
          }
        };
      },
      createColumn: (column, table) => {
        column.getAutoSortingFn = () => {
          const firstRows = table.getFilteredRowModel().flatRows.slice(10);
          let isString2 = false;
          for (const row of firstRows) {
            const value = row == null ? void 0 : row.getValue(column.id);
            if (Object.prototype.toString.call(value) === "[object Date]") {
              return sortingFns.datetime;
            }
            if (typeof value === "string") {
              isString2 = true;
              if (value.split(reSplitAlphaNumeric).length > 1) {
                return sortingFns.alphanumeric;
              }
            }
          }
          if (isString2) {
            return sortingFns.text;
          }
          return sortingFns.basic;
        };
        column.getAutoSortDir = () => {
          const firstRow = table.getFilteredRowModel().flatRows[0];
          const value = firstRow == null ? void 0 : firstRow.getValue(column.id);
          if (typeof value === "string") {
            return "asc";
          }
          return "desc";
        };
        column.getSortingFn = () => {
          var _table$options$sortin, _table$options$sortin2;
          if (!column) {
            throw new Error();
          }
          return isFunction$3(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === "auto" ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];
        };
        column.toggleSorting = (desc, multi) => {
          const nextSortingOrder = column.getNextSortingOrder();
          const hasManualValue = typeof desc !== "undefined" && desc !== null;
          table.setSorting((old) => {
            const existingSorting = old == null ? void 0 : old.find((d) => d.id === column.id);
            const existingIndex = old == null ? void 0 : old.findIndex((d) => d.id === column.id);
            let newSorting = [];
            let sortAction;
            let nextDesc = hasManualValue ? desc : nextSortingOrder === "desc";
            if (old != null && old.length && column.getCanMultiSort() && multi) {
              if (existingSorting) {
                sortAction = "toggle";
              } else {
                sortAction = "add";
              }
            } else {
              if (old != null && old.length && existingIndex !== old.length - 1) {
                sortAction = "replace";
              } else if (existingSorting) {
                sortAction = "toggle";
              } else {
                sortAction = "replace";
              }
            }
            if (sortAction === "toggle") {
              if (!hasManualValue) {
                if (!nextSortingOrder) {
                  sortAction = "remove";
                }
              }
            }
            if (sortAction === "add") {
              var _table$options$maxMul;
              newSorting = [...old, {
                id: column.id,
                desc: nextDesc
              }];
              newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));
            } else if (sortAction === "toggle") {
              newSorting = old.map((d) => {
                if (d.id === column.id) {
                  return {
                    ...d,
                    desc: nextDesc
                  };
                }
                return d;
              });
            } else if (sortAction === "remove") {
              newSorting = old.filter((d) => d.id !== column.id);
            } else {
              newSorting = [{
                id: column.id,
                desc: nextDesc
              }];
            }
            return newSorting;
          });
        };
        column.getFirstSortDir = () => {
          var _ref, _column$columnDef$sor;
          const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === "desc";
          return sortDescFirst ? "desc" : "asc";
        };
        column.getNextSortingOrder = (multi) => {
          var _table$options$enable, _table$options$enable2;
          const firstSortDirection = column.getFirstSortDir();
          const isSorted = column.getIsSorted();
          if (!isSorted) {
            return firstSortDirection;
          }
          if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && // If enableSortRemove, enable in general
          (multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true)) {
            return false;
          }
          return isSorted === "desc" ? "asc" : "desc";
        };
        column.getCanSort = () => {
          var _column$columnDef$ena, _table$options$enable3;
          return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;
        };
        column.getCanMultiSort = () => {
          var _ref2, _column$columnDef$ena2;
          return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;
        };
        column.getIsSorted = () => {
          var _table$getState$sorti;
          const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find((d) => d.id === column.id);
          return !columnSort ? false : columnSort.desc ? "desc" : "asc";
        };
        column.getSortIndex = () => {
          var _table$getState$sorti2, _table$getState$sorti3;
          return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex((d) => d.id === column.id)) != null ? _table$getState$sorti2 : -1;
        };
        column.clearSorting = () => {
          table.setSorting((old) => old != null && old.length ? old.filter((d) => d.id !== column.id) : []);
        };
        column.getToggleSortingHandler = () => {
          const canSort = column.getCanSort();
          return (e) => {
            if (!canSort) return;
            e.persist == null || e.persist();
            column.toggleSorting == null || column.toggleSorting(void 0, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);
          };
        };
      },
      createTable: (table) => {
        table.setSorting = (updater) => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater);
        table.resetSorting = (defaultState) => {
          var _table$initialState$s, _table$initialState;
          table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);
        };
        table.getPreSortedRowModel = () => table.getGroupedRowModel();
        table.getSortedRowModel = () => {
          if (!table._getSortedRowModel && table.options.getSortedRowModel) {
            table._getSortedRowModel = table.options.getSortedRowModel(table);
          }
          if (table.options.manualSorting || !table._getSortedRowModel) {
            return table.getPreSortedRowModel();
          }
          return table._getSortedRowModel();
        };
      }
    };
    const builtInFeatures = [
      Headers$1,
      ColumnVisibility,
      ColumnOrdering,
      ColumnPinning,
      ColumnFaceting,
      ColumnFiltering,
      GlobalFaceting,
      //depends on ColumnFaceting
      GlobalFiltering,
      //depends on ColumnFiltering
      RowSorting,
      ColumnGrouping,
      //depends on RowSorting
      RowExpanding,
      RowPagination,
      RowPinning,
      RowSelection,
      ColumnSizing
    ];
    function createTable(options2) {
      var _options$_features, _options$initialState;
      const _features = [...builtInFeatures, ...(_options$_features = options2._features) != null ? _options$_features : []];
      let table = {
        _features
      };
      const defaultOptions2 = table._features.reduce((obj, feature) => {
        return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));
      }, {});
      const mergeOptions = (options22) => {
        if (table.options.mergeOptions) {
          return table.options.mergeOptions(defaultOptions2, options22);
        }
        return {
          ...defaultOptions2,
          ...options22
        };
      };
      const coreInitialState = {};
      let initialState = {
        ...coreInitialState,
        ...(_options$initialState = options2.initialState) != null ? _options$initialState : {}
      };
      table._features.forEach((feature) => {
        var _feature$getInitialSt;
        initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;
      });
      const queued = [];
      let queuedTimeout = false;
      const coreInstance = {
        _features,
        options: {
          ...defaultOptions2,
          ...options2
        },
        initialState,
        _queue: (cb) => {
          queued.push(cb);
          if (!queuedTimeout) {
            queuedTimeout = true;
            Promise.resolve().then(() => {
              while (queued.length) {
                queued.shift()();
              }
              queuedTimeout = false;
            }).catch((error) => setTimeout(() => {
              throw error;
            }));
          }
        },
        reset: () => {
          table.setState(table.initialState);
        },
        setOptions: (updater) => {
          const newOptions = functionalUpdate(updater, table.options);
          table.options = mergeOptions(newOptions);
        },
        getState: () => {
          return table.options.state;
        },
        setState: (updater) => {
          table.options.onStateChange == null || table.options.onStateChange(updater);
        },
        _getRowId: (row, index2, parent) => {
          var _table$options$getRow;
          return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index2, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index2].join(".") : index2}`;
        },
        getCoreRowModel: () => {
          if (!table._getCoreRowModel) {
            table._getCoreRowModel = table.options.getCoreRowModel(table);
          }
          return table._getCoreRowModel();
        },
        // The final calls start at the bottom of the model,
        // expanded rows, which then work their way up
        getRowModel: () => {
          return table.getPaginationRowModel();
        },
        //in next version, we should just pass in the row model as the optional 2nd arg
        getRow: (id, searchAll) => {
          let row = (searchAll ? table.getPrePaginationRowModel() : table.getRowModel()).rowsById[id];
          if (!row) {
            row = table.getCoreRowModel().rowsById[id];
            if (!row) {
              throw new Error();
            }
          }
          return row;
        },
        _getDefaultColumnDef: memo(() => [table.options.defaultColumn], (defaultColumn) => {
          var _defaultColumn;
          defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};
          return {
            header: (props) => {
              const resolvedColumnDef = props.header.column.columnDef;
              if (resolvedColumnDef.accessorKey) {
                return resolvedColumnDef.accessorKey;
              }
              if (resolvedColumnDef.accessorFn) {
                return resolvedColumnDef.id;
              }
              return null;
            },
            // footer: props => props.header.column.id,
            cell: (props) => {
              var _props$renderValue$to, _props$renderValue;
              return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null || _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;
            },
            ...table._features.reduce((obj, feature) => {
              return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());
            }, {}),
            ...defaultColumn
          };
        }, getMemoOptions(options2, "debugColumns")),
        _getColumnDefs: () => table.options.columns,
        getAllColumns: memo(() => [table._getColumnDefs()], (columnDefs) => {
          const recurseColumns = function(columnDefs2, parent, depth) {
            if (depth === void 0) {
              depth = 0;
            }
            return columnDefs2.map((columnDef) => {
              const column = createColumn(table, columnDef, depth, parent);
              const groupingColumnDef = columnDef;
              column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];
              return column;
            });
          };
          return recurseColumns(columnDefs);
        }, getMemoOptions(options2, "debugColumns")),
        getAllFlatColumns: memo(() => [table.getAllColumns()], (allColumns) => {
          return allColumns.flatMap((column) => {
            return column.getFlatColumns();
          });
        }, getMemoOptions(options2, "debugColumns")),
        _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], (flatColumns) => {
          return flatColumns.reduce((acc, column) => {
            acc[column.id] = column;
            return acc;
          }, {});
        }, getMemoOptions(options2, "debugColumns")),
        getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns2) => {
          let leafColumns = allColumns.flatMap((column) => column.getLeafColumns());
          return orderColumns2(leafColumns);
        }, getMemoOptions(options2, "debugColumns")),
        getColumn: (columnId) => {
          const column = table._getAllFlatColumnsById()[columnId];
          return column;
        }
      };
      Object.assign(table, coreInstance);
      for (let index2 = 0; index2 < table._features.length; index2++) {
        const feature = table._features[index2];
        feature == null || feature.createTable == null || feature.createTable(table);
      }
      return table;
    }
    function getCoreRowModel() {
      return (table) => memo(() => [table.options.data], (data) => {
        const rowModel = {
          rows: [],
          flatRows: [],
          rowsById: {}
        };
        const accessRows = function(originalRows, depth, parentRow) {
          if (depth === void 0) {
            depth = 0;
          }
          const rows = [];
          for (let i2 = 0; i2 < originalRows.length; i2++) {
            const row = createRow(table, table._getRowId(originalRows[i2], i2, parentRow), originalRows[i2], i2, depth, void 0, parentRow == null ? void 0 : parentRow.id);
            rowModel.flatRows.push(row);
            rowModel.rowsById[row.id] = row;
            rows.push(row);
            if (table.options.getSubRows) {
              var _row$originalSubRows;
              row.originalSubRows = table.options.getSubRows(originalRows[i2], i2);
              if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {
                row.subRows = accessRows(row.originalSubRows, depth + 1, row);
              }
            }
          }
          return rows;
        };
        rowModel.rows = accessRows(data);
        return rowModel;
      }, getMemoOptions(table.options, "debugTable", "getRowModel", () => table._autoResetPageIndex()));
    }
    /**
       * react-table
       *
       * Copyright (c) TanStack
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE.md file in the root directory of this source tree.
       *
       * @license MIT
       */
    function flexRender(Comp, props) {
      return !Comp ? null : isReactComponent(Comp) ? /* @__PURE__ */ reactExports.createElement(Comp, props) : Comp;
    }
    function isReactComponent(component) {
      return isClassComponent(component) || typeof component === "function" || isExoticComponent(component);
    }
    function isClassComponent(component) {
      return typeof component === "function" && (() => {
        const proto2 = Object.getPrototypeOf(component);
        return proto2.prototype && proto2.prototype.isReactComponent;
      })();
    }
    function isExoticComponent(component) {
      return typeof component === "object" && typeof component.$$typeof === "symbol" && ["react.memo", "react.forward_ref"].includes(component.$$typeof.description);
    }
    function useReactTable(options2) {
      const resolvedOptions = {
        state: {},
        // Dummy state
        onStateChange: () => {
        },
        // noop
        renderFallbackValue: null,
        ...options2
      };
      const [tableRef] = reactExports.useState(() => ({
        current: createTable(resolvedOptions)
      }));
      const [state, setState] = reactExports.useState(() => tableRef.current.initialState);
      tableRef.current.setOptions((prev) => ({
        ...prev,
        ...options2,
        state: {
          ...state,
          ...options2.state
        },
        // Similarly, we'll maintain both our internal state and any user-provided
        // state.
        onStateChange: (updater) => {
          setState(updater);
          options2.onStateChange == null || options2.onStateChange(updater);
        }
      }));
      return tableRef.current;
    }
    function Table({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          "data-slot": "table-container",
          className: "relative w-full overflow-x-auto",
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            "table",
            {
              "data-slot": "table",
              className: cn$1("w-full caption-bottom text-sm", className),
              ...props
            }
          )
        }
      );
    }
    function TableHeader({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "thead",
        {
          "data-slot": "table-header",
          className: cn$1("[&_tr]:border-b", className),
          ...props
        }
      );
    }
    function TableBody({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "tbody",
        {
          "data-slot": "table-body",
          className: cn$1("[&_tr:last-child]:border-0", className),
          ...props
        }
      );
    }
    function TableRow({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "tr",
        {
          "data-slot": "table-row",
          className: cn$1(
            "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
            className
          ),
          ...props
        }
      );
    }
    function TableHead({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "th",
        {
          "data-slot": "table-head",
          className: cn$1(
            "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
            className
          ),
          ...props
        }
      );
    }
    function TableCell({ className, ...props }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "td",
        {
          "data-slot": "table-cell",
          className: cn$1(
            "p-2 align-middle truncate [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
            className
          ),
          ...props
        }
      );
    }
    function useDebounce(set2, initial, timing = 2e3) {
      const [mounted, setMounted] = reactExports.useState(false);
      const [state, setState] = reactExports.useState(initial);
      reactExports.useEffect(() => {
        if (!mounted) return;
        let timeout = setTimeout(() => {
          set2(state);
        }, timing);
        return () => {
          clearTimeout(timeout);
        };
      }, [state]);
      reactExports.useEffect(() => {
        if (!mounted) setMounted(true);
      }, []);
      return setState;
    }
    function DataTable({
      columns,
      queryFn,
      queryKey,
      buttons,
      searchFilter
    }) {
      var _a2, _b2;
      const [search, setSearch] = reactExports.useState("");
      const [data, setData] = reactExports.useState([]);
      const debounce = useDebounce((value) => setSearch(value), "", 1e3);
      const query = useQuery({
        queryKey,
        queryFn: () => queryFn()
      });
      const table = useReactTable({
        data,
        columns,
        getCoreRowModel: getCoreRowModel()
      });
      reactExports.useEffect(() => {
        setData((query.data || []).filter(searchFilter(search)));
      }, [query.data, search]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 relative", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "absolute top-0 left-0 w-full h-full overflow-auto p-5", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex space-x-3 items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Input,
            {
              placeholder: "Cari...",
              className: "flex-1",
              onChange: (e) => debounce(e.target.value)
            }
          ),
          buttons
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "rounded-md border relative overflow-hidden mt-5", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Table, { className: "table-fixed", children: [
            Boolean((_a2 = table.getRowModel().rows) == null ? void 0 : _a2.length) && /* @__PURE__ */ jsxRuntimeExports.jsx(TableHeader, { children: table.getHeaderGroups().map((headerGroup) => /* @__PURE__ */ jsxRuntimeExports.jsx(TableRow, { children: headerGroup.headers.map((header) => {
              if (header.column.id === "id") return null;
              return /* @__PURE__ */ jsxRuntimeExports.jsx(
                TableHead,
                {
                  style: {
                    width: header.column.getSize()
                  },
                  className: "uppercase",
                  children: header.isPlaceholder ? null : flexRender(
                    header.column.columnDef.header,
                    header.getContext()
                  )
                },
                header.id
              );
            }) }, headerGroup.id)) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(TableBody, { children: ((_b2 = table.getRowModel().rows) == null ? void 0 : _b2.length) ? table.getRowModel().rows.map((row) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              TableRow,
              {
                "data-state": row.getIsSelected() && "selected",
                children: row.getVisibleCells().map(
                  (cell) => cell.column.id === "id" ? null : /* @__PURE__ */ jsxRuntimeExports.jsx(TableCell, { children: flexRender(
                    cell.column.columnDef.cell,
                    cell.getContext()
                  ) }, cell.id)
                )
              },
              row.id
            )) : /* @__PURE__ */ jsxRuntimeExports.jsx(TableRow, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              TableCell,
              {
                colSpan: columns.length,
                className: "h-72 text-center",
                children: "Tidak ada data"
              }
            ) }) })
          ] }),
          query.isFetching && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-0 left-0 w-full h-full bg-black/20" })
        ] })
      ] }) });
    }
    function createCollection(name) {
      const PROVIDER_NAME2 = name + "CollectionProvider";
      const [createCollectionContext, createCollectionScope2] = createContextScope(PROVIDER_NAME2);
      const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(
        PROVIDER_NAME2,
        { collectionRef: { current: null }, itemMap: /* @__PURE__ */ new Map() }
      );
      const CollectionProvider = (props) => {
        const { scope, children } = props;
        const ref = React.useRef(null);
        const itemMap = React.useRef(/* @__PURE__ */ new Map()).current;
        return /* @__PURE__ */ jsxRuntimeExports.jsx(CollectionProviderImpl, { scope, itemMap, collectionRef: ref, children });
      };
      CollectionProvider.displayName = PROVIDER_NAME2;
      const COLLECTION_SLOT_NAME = name + "CollectionSlot";
      const CollectionSlotImpl = /* @__PURE__ */ createSlot(COLLECTION_SLOT_NAME);
      const CollectionSlot = React.forwardRef(
        (props, forwardedRef) => {
          const { scope, children } = props;
          const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
          const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);
          return /* @__PURE__ */ jsxRuntimeExports.jsx(CollectionSlotImpl, { ref: composedRefs, children });
        }
      );
      CollectionSlot.displayName = COLLECTION_SLOT_NAME;
      const ITEM_SLOT_NAME = name + "CollectionItemSlot";
      const ITEM_DATA_ATTR = "data-radix-collection-item";
      const CollectionItemSlotImpl = /* @__PURE__ */ createSlot(ITEM_SLOT_NAME);
      const CollectionItemSlot = React.forwardRef(
        (props, forwardedRef) => {
          const { scope, children, ...itemData } = props;
          const ref = React.useRef(null);
          const composedRefs = useComposedRefs(forwardedRef, ref);
          const context = useCollectionContext(ITEM_SLOT_NAME, scope);
          React.useEffect(() => {
            context.itemMap.set(ref, { ref, ...itemData });
            return () => void context.itemMap.delete(ref);
          });
          return /* @__PURE__ */ jsxRuntimeExports.jsx(CollectionItemSlotImpl, { ...{ [ITEM_DATA_ATTR]: "" }, ref: composedRefs, children });
        }
      );
      CollectionItemSlot.displayName = ITEM_SLOT_NAME;
      function useCollection2(scope) {
        const context = useCollectionContext(name + "CollectionConsumer", scope);
        const getItems = React.useCallback(() => {
          const collectionNode = context.collectionRef.current;
          if (!collectionNode) return [];
          const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
          const items = Array.from(context.itemMap.values());
          const orderedItems = items.sort(
            (a2, b) => orderedNodes.indexOf(a2.ref.current) - orderedNodes.indexOf(b.ref.current)
          );
          return orderedItems;
        }, [context.collectionRef, context.itemMap]);
        return getItems;
      }
      return [
        { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },
        useCollection2,
        createCollectionScope2
      ];
    }
    var DirectionContext = reactExports.createContext(void 0);
    function useDirection(localDir) {
      const globalDir = reactExports.useContext(DirectionContext);
      return localDir || globalDir || "ltr";
    }
    var ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
    var EVENT_OPTIONS = { bubbles: false, cancelable: true };
    var GROUP_NAME$2 = "RovingFocusGroup";
    var [Collection$1, useCollection$1, createCollectionScope$1] = createCollection(GROUP_NAME$2);
    var [createRovingFocusGroupContext, createRovingFocusGroupScope] = createContextScope(
      GROUP_NAME$2,
      [createCollectionScope$1]
    );
    var [RovingFocusProvider, useRovingFocusContext] = createRovingFocusGroupContext(GROUP_NAME$2);
    var RovingFocusGroup = reactExports.forwardRef(
      (props, forwardedRef) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Collection$1.Provider, { scope: props.__scopeRovingFocusGroup, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Collection$1.Slot, { scope: props.__scopeRovingFocusGroup, children: /* @__PURE__ */ jsxRuntimeExports.jsx(RovingFocusGroupImpl, { ...props, ref: forwardedRef }) }) });
      }
    );
    RovingFocusGroup.displayName = GROUP_NAME$2;
    var RovingFocusGroupImpl = reactExports.forwardRef((props, forwardedRef) => {
      const {
        __scopeRovingFocusGroup,
        orientation,
        loop = false,
        dir,
        currentTabStopId: currentTabStopIdProp,
        defaultCurrentTabStopId,
        onCurrentTabStopIdChange,
        onEntryFocus,
        preventScrollOnEntryFocus = false,
        ...groupProps
      } = props;
      const ref = reactExports.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref);
      const direction = useDirection(dir);
      const [currentTabStopId, setCurrentTabStopId] = useControllableState({
        prop: currentTabStopIdProp,
        defaultProp: defaultCurrentTabStopId ?? null,
        onChange: onCurrentTabStopIdChange,
        caller: GROUP_NAME$2
      });
      const [isTabbingBackOut, setIsTabbingBackOut] = reactExports.useState(false);
      const handleEntryFocus = useCallbackRef$1(onEntryFocus);
      const getItems = useCollection$1(__scopeRovingFocusGroup);
      const isClickFocusRef = reactExports.useRef(false);
      const [focusableItemsCount, setFocusableItemsCount] = reactExports.useState(0);
      reactExports.useEffect(() => {
        const node = ref.current;
        if (node) {
          node.addEventListener(ENTRY_FOCUS, handleEntryFocus);
          return () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);
        }
      }, [handleEntryFocus]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        RovingFocusProvider,
        {
          scope: __scopeRovingFocusGroup,
          orientation,
          dir: direction,
          loop,
          currentTabStopId,
          onItemFocus: reactExports.useCallback(
            (tabStopId) => setCurrentTabStopId(tabStopId),
            [setCurrentTabStopId]
          ),
          onItemShiftTab: reactExports.useCallback(() => setIsTabbingBackOut(true), []),
          onFocusableItemAdd: reactExports.useCallback(
            () => setFocusableItemsCount((prevCount) => prevCount + 1),
            []
          ),
          onFocusableItemRemove: reactExports.useCallback(
            () => setFocusableItemsCount((prevCount) => prevCount - 1),
            []
          ),
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            Primitive.div,
            {
              tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
              "data-orientation": orientation,
              ...groupProps,
              ref: composedRefs,
              style: { outline: "none", ...props.style },
              onMouseDown: composeEventHandlers(props.onMouseDown, () => {
                isClickFocusRef.current = true;
              }),
              onFocus: composeEventHandlers(props.onFocus, (event) => {
                const isKeyboardFocus = !isClickFocusRef.current;
                if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
                  const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS);
                  event.currentTarget.dispatchEvent(entryFocusEvent);
                  if (!entryFocusEvent.defaultPrevented) {
                    const items = getItems().filter((item) => item.focusable);
                    const activeItem = items.find((item) => item.active);
                    const currentItem = items.find((item) => item.id === currentTabStopId);
                    const candidateItems = [activeItem, currentItem, ...items].filter(
                      Boolean
                    );
                    const candidateNodes = candidateItems.map((item) => item.ref.current);
                    focusFirst$1(candidateNodes, preventScrollOnEntryFocus);
                  }
                }
                isClickFocusRef.current = false;
              }),
              onBlur: composeEventHandlers(props.onBlur, () => setIsTabbingBackOut(false))
            }
          )
        }
      );
    });
    var ITEM_NAME$2 = "RovingFocusGroupItem";
    var RovingFocusGroupItem = reactExports.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopeRovingFocusGroup,
          focusable = true,
          active = false,
          tabStopId,
          children,
          ...itemProps
        } = props;
        const autoId = useId();
        const id = tabStopId || autoId;
        const context = useRovingFocusContext(ITEM_NAME$2, __scopeRovingFocusGroup);
        const isCurrentTabStop = context.currentTabStopId === id;
        const getItems = useCollection$1(__scopeRovingFocusGroup);
        const { onFocusableItemAdd, onFocusableItemRemove, currentTabStopId } = context;
        reactExports.useEffect(() => {
          if (focusable) {
            onFocusableItemAdd();
            return () => onFocusableItemRemove();
          }
        }, [focusable, onFocusableItemAdd, onFocusableItemRemove]);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Collection$1.ItemSlot,
          {
            scope: __scopeRovingFocusGroup,
            id,
            focusable,
            active,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Primitive.span,
              {
                tabIndex: isCurrentTabStop ? 0 : -1,
                "data-orientation": context.orientation,
                ...itemProps,
                ref: forwardedRef,
                onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
                  if (!focusable) event.preventDefault();
                  else context.onItemFocus(id);
                }),
                onFocus: composeEventHandlers(props.onFocus, () => context.onItemFocus(id)),
                onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
                  if (event.key === "Tab" && event.shiftKey) {
                    context.onItemShiftTab();
                    return;
                  }
                  if (event.target !== event.currentTarget) return;
                  const focusIntent = getFocusIntent(event, context.orientation, context.dir);
                  if (focusIntent !== void 0) {
                    if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) return;
                    event.preventDefault();
                    const items = getItems().filter((item) => item.focusable);
                    let candidateNodes = items.map((item) => item.ref.current);
                    if (focusIntent === "last") candidateNodes.reverse();
                    else if (focusIntent === "prev" || focusIntent === "next") {
                      if (focusIntent === "prev") candidateNodes.reverse();
                      const currentIndex = candidateNodes.indexOf(event.currentTarget);
                      candidateNodes = context.loop ? wrapArray$1(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
                    }
                    setTimeout(() => focusFirst$1(candidateNodes));
                  }
                }),
                children: typeof children === "function" ? children({ isCurrentTabStop, hasTabStop: currentTabStopId != null }) : children
              }
            )
          }
        );
      }
    );
    RovingFocusGroupItem.displayName = ITEM_NAME$2;
    var MAP_KEY_TO_FOCUS_INTENT = {
      ArrowLeft: "prev",
      ArrowUp: "prev",
      ArrowRight: "next",
      ArrowDown: "next",
      PageUp: "first",
      Home: "first",
      PageDown: "last",
      End: "last"
    };
    function getDirectionAwareKey(key, dir) {
      if (dir !== "rtl") return key;
      return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
    }
    function getFocusIntent(event, orientation, dir) {
      const key = getDirectionAwareKey(event.key, dir);
      if (orientation === "vertical" && ["ArrowLeft", "ArrowRight"].includes(key)) return void 0;
      if (orientation === "horizontal" && ["ArrowUp", "ArrowDown"].includes(key)) return void 0;
      return MAP_KEY_TO_FOCUS_INTENT[key];
    }
    function focusFirst$1(candidates, preventScroll = false) {
      const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
      for (const candidate of candidates) {
        if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
        candidate.focus({ preventScroll });
        if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
      }
    }
    function wrapArray$1(array2, startIndex) {
      return array2.map((_, index2) => array2[(startIndex + index2) % array2.length]);
    }
    var Root$1 = RovingFocusGroup;
    var Item = RovingFocusGroupItem;
    var SELECTION_KEYS = ["Enter", " "];
    var FIRST_KEYS = ["ArrowDown", "PageUp", "Home"];
    var LAST_KEYS = ["ArrowUp", "PageDown", "End"];
    var FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];
    var SUB_OPEN_KEYS = {
      ltr: [...SELECTION_KEYS, "ArrowRight"],
      rtl: [...SELECTION_KEYS, "ArrowLeft"]
    };
    var SUB_CLOSE_KEYS = {
      ltr: ["ArrowLeft"],
      rtl: ["ArrowRight"]
    };
    var MENU_NAME = "Menu";
    var [Collection, useCollection, createCollectionScope] = createCollection(MENU_NAME);
    var [createMenuContext, createMenuScope] = createContextScope(MENU_NAME, [
      createCollectionScope,
      createPopperScope,
      createRovingFocusGroupScope
    ]);
    var usePopperScope$1 = createPopperScope();
    var useRovingFocusGroupScope = createRovingFocusGroupScope();
    var [MenuProvider, useMenuContext] = createMenuContext(MENU_NAME);
    var [MenuRootProvider, useMenuRootContext] = createMenuContext(MENU_NAME);
    var Menu = (props) => {
      const { __scopeMenu, open = false, children, dir, onOpenChange, modal = true } = props;
      const popperScope = usePopperScope$1(__scopeMenu);
      const [content, setContent] = reactExports.useState(null);
      const isUsingKeyboardRef = reactExports.useRef(false);
      const handleOpenChange = useCallbackRef$1(onOpenChange);
      const direction = useDirection(dir);
      reactExports.useEffect(() => {
        const handleKeyDown = () => {
          isUsingKeyboardRef.current = true;
          document.addEventListener("pointerdown", handlePointer, { capture: true, once: true });
          document.addEventListener("pointermove", handlePointer, { capture: true, once: true });
        };
        const handlePointer = () => isUsingKeyboardRef.current = false;
        document.addEventListener("keydown", handleKeyDown, { capture: true });
        return () => {
          document.removeEventListener("keydown", handleKeyDown, { capture: true });
          document.removeEventListener("pointerdown", handlePointer, { capture: true });
          document.removeEventListener("pointermove", handlePointer, { capture: true });
        };
      }, []);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Root2$2, { ...popperScope, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        MenuProvider,
        {
          scope: __scopeMenu,
          open,
          onOpenChange: handleOpenChange,
          content,
          onContentChange: setContent,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            MenuRootProvider,
            {
              scope: __scopeMenu,
              onClose: reactExports.useCallback(() => handleOpenChange(false), [handleOpenChange]),
              isUsingKeyboardRef,
              dir: direction,
              modal,
              children
            }
          )
        }
      ) });
    };
    Menu.displayName = MENU_NAME;
    var ANCHOR_NAME$1 = "MenuAnchor";
    var MenuAnchor = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeMenu, ...anchorProps } = props;
        const popperScope = usePopperScope$1(__scopeMenu);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Anchor, { ...popperScope, ...anchorProps, ref: forwardedRef });
      }
    );
    MenuAnchor.displayName = ANCHOR_NAME$1;
    var PORTAL_NAME$2 = "MenuPortal";
    var [PortalProvider$1, usePortalContext$1] = createMenuContext(PORTAL_NAME$2, {
      forceMount: void 0
    });
    var MenuPortal = (props) => {
      const { __scopeMenu, forceMount, children, container } = props;
      const context = useMenuContext(PORTAL_NAME$2, __scopeMenu);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PortalProvider$1, { scope: __scopeMenu, forceMount, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$4, { asChild: true, container, children }) }) });
    };
    MenuPortal.displayName = PORTAL_NAME$2;
    var CONTENT_NAME$2 = "MenuContent";
    var [MenuContentProvider, useMenuContentContext] = createMenuContext(CONTENT_NAME$2);
    var MenuContent = reactExports.forwardRef(
      (props, forwardedRef) => {
        const portalContext = usePortalContext$1(CONTENT_NAME$2, props.__scopeMenu);
        const { forceMount = portalContext.forceMount, ...contentProps } = props;
        const context = useMenuContext(CONTENT_NAME$2, props.__scopeMenu);
        const rootContext = useMenuRootContext(CONTENT_NAME$2, props.__scopeMenu);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Collection.Provider, { scope: props.__scopeMenu, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Collection.Slot, { scope: props.__scopeMenu, children: rootContext.modal ? /* @__PURE__ */ jsxRuntimeExports.jsx(MenuRootContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ jsxRuntimeExports.jsx(MenuRootContentNonModal, { ...contentProps, ref: forwardedRef }) }) }) });
      }
    );
    var MenuRootContentModal = reactExports.forwardRef(
      (props, forwardedRef) => {
        const context = useMenuContext(CONTENT_NAME$2, props.__scopeMenu);
        const ref = reactExports.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, ref);
        reactExports.useEffect(() => {
          const content = ref.current;
          if (content) return hideOthers(content);
        }, []);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          MenuContentImpl,
          {
            ...props,
            ref: composedRefs,
            trapFocus: context.open,
            disableOutsidePointerEvents: context.open,
            disableOutsideScroll: true,
            onFocusOutside: composeEventHandlers(
              props.onFocusOutside,
              (event) => event.preventDefault(),
              { checkForDefaultPrevented: false }
            ),
            onDismiss: () => context.onOpenChange(false)
          }
        );
      }
    );
    var MenuRootContentNonModal = reactExports.forwardRef((props, forwardedRef) => {
      const context = useMenuContext(CONTENT_NAME$2, props.__scopeMenu);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        MenuContentImpl,
        {
          ...props,
          ref: forwardedRef,
          trapFocus: false,
          disableOutsidePointerEvents: false,
          disableOutsideScroll: false,
          onDismiss: () => context.onOpenChange(false)
        }
      );
    });
    var Slot$1 = /* @__PURE__ */ createSlot("MenuContent.ScrollLock");
    var MenuContentImpl = reactExports.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopeMenu,
          loop = false,
          trapFocus,
          onOpenAutoFocus,
          onCloseAutoFocus,
          disableOutsidePointerEvents,
          onEntryFocus,
          onEscapeKeyDown,
          onPointerDownOutside,
          onFocusOutside,
          onInteractOutside,
          onDismiss,
          disableOutsideScroll,
          ...contentProps
        } = props;
        const context = useMenuContext(CONTENT_NAME$2, __scopeMenu);
        const rootContext = useMenuRootContext(CONTENT_NAME$2, __scopeMenu);
        const popperScope = usePopperScope$1(__scopeMenu);
        const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);
        const getItems = useCollection(__scopeMenu);
        const [currentItemId, setCurrentItemId] = reactExports.useState(null);
        const contentRef = reactExports.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, contentRef, context.onContentChange);
        const timerRef = reactExports.useRef(0);
        const searchRef = reactExports.useRef("");
        const pointerGraceTimerRef = reactExports.useRef(0);
        const pointerGraceIntentRef = reactExports.useRef(null);
        const pointerDirRef = reactExports.useRef("right");
        const lastPointerXRef = reactExports.useRef(0);
        const ScrollLockWrapper = disableOutsideScroll ? ReactRemoveScroll : reactExports.Fragment;
        const scrollLockWrapperProps = disableOutsideScroll ? { as: Slot$1, allowPinchZoom: true } : void 0;
        const handleTypeaheadSearch = (key) => {
          var _a2, _b2;
          const search = searchRef.current + key;
          const items = getItems().filter((item) => !item.disabled);
          const currentItem = document.activeElement;
          const currentMatch = (_a2 = items.find((item) => item.ref.current === currentItem)) == null ? void 0 : _a2.textValue;
          const values = items.map((item) => item.textValue);
          const nextMatch = getNextMatch(values, search, currentMatch);
          const newItem = (_b2 = items.find((item) => item.textValue === nextMatch)) == null ? void 0 : _b2.ref.current;
          (function updateSearch(value) {
            searchRef.current = value;
            window.clearTimeout(timerRef.current);
            if (value !== "") timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
          })(search);
          if (newItem) {
            setTimeout(() => newItem.focus());
          }
        };
        reactExports.useEffect(() => {
          return () => window.clearTimeout(timerRef.current);
        }, []);
        useFocusGuards();
        const isPointerMovingToSubmenu = reactExports.useCallback((event) => {
          var _a2, _b2;
          const isMovingTowards = pointerDirRef.current === ((_a2 = pointerGraceIntentRef.current) == null ? void 0 : _a2.side);
          return isMovingTowards && isPointerInGraceArea(event, (_b2 = pointerGraceIntentRef.current) == null ? void 0 : _b2.area);
        }, []);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          MenuContentProvider,
          {
            scope: __scopeMenu,
            searchRef,
            onItemEnter: reactExports.useCallback(
              (event) => {
                if (isPointerMovingToSubmenu(event)) event.preventDefault();
              },
              [isPointerMovingToSubmenu]
            ),
            onItemLeave: reactExports.useCallback(
              (event) => {
                var _a2;
                if (isPointerMovingToSubmenu(event)) return;
                (_a2 = contentRef.current) == null ? void 0 : _a2.focus();
                setCurrentItemId(null);
              },
              [isPointerMovingToSubmenu]
            ),
            onTriggerLeave: reactExports.useCallback(
              (event) => {
                if (isPointerMovingToSubmenu(event)) event.preventDefault();
              },
              [isPointerMovingToSubmenu]
            ),
            pointerGraceTimerRef,
            onPointerGraceIntentChange: reactExports.useCallback((intent) => {
              pointerGraceIntentRef.current = intent;
            }, []),
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(ScrollLockWrapper, { ...scrollLockWrapperProps, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              FocusScope,
              {
                asChild: true,
                trapped: trapFocus,
                onMountAutoFocus: composeEventHandlers(onOpenAutoFocus, (event) => {
                  var _a2;
                  event.preventDefault();
                  (_a2 = contentRef.current) == null ? void 0 : _a2.focus({ preventScroll: true });
                }),
                onUnmountAutoFocus: onCloseAutoFocus,
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  DismissableLayer,
                  {
                    asChild: true,
                    disableOutsidePointerEvents,
                    onEscapeKeyDown,
                    onPointerDownOutside,
                    onFocusOutside,
                    onInteractOutside,
                    onDismiss,
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      Root$1,
                      {
                        asChild: true,
                        ...rovingFocusGroupScope,
                        dir: rootContext.dir,
                        orientation: "vertical",
                        loop,
                        currentTabStopId: currentItemId,
                        onCurrentTabStopIdChange: setCurrentItemId,
                        onEntryFocus: composeEventHandlers(onEntryFocus, (event) => {
                          if (!rootContext.isUsingKeyboardRef.current) event.preventDefault();
                        }),
                        preventScrollOnEntryFocus: true,
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                          Content,
                          {
                            role: "menu",
                            "aria-orientation": "vertical",
                            "data-state": getOpenState(context.open),
                            "data-radix-menu-content": "",
                            dir: rootContext.dir,
                            ...popperScope,
                            ...contentProps,
                            ref: composedRefs,
                            style: { outline: "none", ...contentProps.style },
                            onKeyDown: composeEventHandlers(contentProps.onKeyDown, (event) => {
                              const target = event.target;
                              const isKeyDownInside = target.closest("[data-radix-menu-content]") === event.currentTarget;
                              const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
                              const isCharacterKey = event.key.length === 1;
                              if (isKeyDownInside) {
                                if (event.key === "Tab") event.preventDefault();
                                if (!isModifierKey && isCharacterKey) handleTypeaheadSearch(event.key);
                              }
                              const content = contentRef.current;
                              if (event.target !== content) return;
                              if (!FIRST_LAST_KEYS.includes(event.key)) return;
                              event.preventDefault();
                              const items = getItems().filter((item) => !item.disabled);
                              const candidateNodes = items.map((item) => item.ref.current);
                              if (LAST_KEYS.includes(event.key)) candidateNodes.reverse();
                              focusFirst(candidateNodes);
                            }),
                            onBlur: composeEventHandlers(props.onBlur, (event) => {
                              if (!event.currentTarget.contains(event.target)) {
                                window.clearTimeout(timerRef.current);
                                searchRef.current = "";
                              }
                            }),
                            onPointerMove: composeEventHandlers(
                              props.onPointerMove,
                              whenMouse((event) => {
                                const target = event.target;
                                const pointerXHasChanged = lastPointerXRef.current !== event.clientX;
                                if (event.currentTarget.contains(target) && pointerXHasChanged) {
                                  const newDir = event.clientX > lastPointerXRef.current ? "right" : "left";
                                  pointerDirRef.current = newDir;
                                  lastPointerXRef.current = event.clientX;
                                }
                              })
                            )
                          }
                        )
                      }
                    )
                  }
                )
              }
            ) })
          }
        );
      }
    );
    MenuContent.displayName = CONTENT_NAME$2;
    var GROUP_NAME$1 = "MenuGroup";
    var MenuGroup = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeMenu, ...groupProps } = props;
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, { role: "group", ...groupProps, ref: forwardedRef });
      }
    );
    MenuGroup.displayName = GROUP_NAME$1;
    var LABEL_NAME$1 = "MenuLabel";
    var MenuLabel = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeMenu, ...labelProps } = props;
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Primitive.div, { ...labelProps, ref: forwardedRef });
      }
    );
    MenuLabel.displayName = LABEL_NAME$1;
    var ITEM_NAME$1 = "MenuItem";
    var ITEM_SELECT = "menu.itemSelect";
    var MenuItem = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { disabled = false, onSelect, ...itemProps } = props;
        const ref = reactExports.useRef(null);
        const rootContext = useMenuRootContext(ITEM_NAME$1, props.__scopeMenu);
        const contentContext = useMenuContentContext(ITEM_NAME$1, props.__scopeMenu);
        const composedRefs = useComposedRefs(forwardedRef, ref);
        const isPointerDownRef = reactExports.useRef(false);
        const handleSelect = () => {
          const menuItem = ref.current;
          if (!disabled && menuItem) {
            const itemSelectEvent = new CustomEvent(ITEM_SELECT, { bubbles: true, cancelable: true });
            menuItem.addEventListener(ITEM_SELECT, (event) => onSelect == null ? void 0 : onSelect(event), { once: true });
            dispatchDiscreteCustomEvent(menuItem, itemSelectEvent);
            if (itemSelectEvent.defaultPrevented) {
              isPointerDownRef.current = false;
            } else {
              rootContext.onClose();
            }
          }
        };
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          MenuItemImpl,
          {
            ...itemProps,
            ref: composedRefs,
            disabled,
            onClick: composeEventHandlers(props.onClick, handleSelect),
            onPointerDown: (event) => {
              var _a2;
              (_a2 = props.onPointerDown) == null ? void 0 : _a2.call(props, event);
              isPointerDownRef.current = true;
            },
            onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
              var _a2;
              if (!isPointerDownRef.current) (_a2 = event.currentTarget) == null ? void 0 : _a2.click();
            }),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              const isTypingAhead = contentContext.searchRef.current !== "";
              if (disabled || isTypingAhead && event.key === " ") return;
              if (SELECTION_KEYS.includes(event.key)) {
                event.currentTarget.click();
                event.preventDefault();
              }
            })
          }
        );
      }
    );
    MenuItem.displayName = ITEM_NAME$1;
    var MenuItemImpl = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeMenu, disabled = false, textValue, ...itemProps } = props;
        const contentContext = useMenuContentContext(ITEM_NAME$1, __scopeMenu);
        const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);
        const ref = reactExports.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, ref);
        const [isFocused, setIsFocused] = reactExports.useState(false);
        const [textContent, setTextContent] = reactExports.useState("");
        reactExports.useEffect(() => {
          const menuItem = ref.current;
          if (menuItem) {
            setTextContent((menuItem.textContent ?? "").trim());
          }
        }, [itemProps.children]);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Collection.ItemSlot,
          {
            scope: __scopeMenu,
            disabled,
            textValue: textValue ?? textContent,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Item, { asChild: true, ...rovingFocusGroupScope, focusable: !disabled, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Primitive.div,
              {
                role: "menuitem",
                "data-highlighted": isFocused ? "" : void 0,
                "aria-disabled": disabled || void 0,
                "data-disabled": disabled ? "" : void 0,
                ...itemProps,
                ref: composedRefs,
                onPointerMove: composeEventHandlers(
                  props.onPointerMove,
                  whenMouse((event) => {
                    if (disabled) {
                      contentContext.onItemLeave(event);
                    } else {
                      contentContext.onItemEnter(event);
                      if (!event.defaultPrevented) {
                        const item = event.currentTarget;
                        item.focus({ preventScroll: true });
                      }
                    }
                  })
                ),
                onPointerLeave: composeEventHandlers(
                  props.onPointerLeave,
                  whenMouse((event) => contentContext.onItemLeave(event))
                ),
                onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),
                onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false))
              }
            ) })
          }
        );
      }
    );
    var CHECKBOX_ITEM_NAME$1 = "MenuCheckboxItem";
    var MenuCheckboxItem = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { checked = false, onCheckedChange, ...checkboxItemProps } = props;
        return /* @__PURE__ */ jsxRuntimeExports.jsx(ItemIndicatorProvider, { scope: props.__scopeMenu, checked, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          MenuItem,
          {
            role: "menuitemcheckbox",
            "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
            ...checkboxItemProps,
            ref: forwardedRef,
            "data-state": getCheckedState(checked),
            onSelect: composeEventHandlers(
              checkboxItemProps.onSelect,
              () => onCheckedChange == null ? void 0 : onCheckedChange(isIndeterminate(checked) ? true : !checked),
              { checkForDefaultPrevented: false }
            )
          }
        ) });
      }
    );
    MenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME$1;
    var RADIO_GROUP_NAME$1 = "MenuRadioGroup";
    var [RadioGroupProvider, useRadioGroupContext] = createMenuContext(
      RADIO_GROUP_NAME$1,
      { value: void 0, onValueChange: () => {
      } }
    );
    var MenuRadioGroup = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { value, onValueChange, ...groupProps } = props;
        const handleValueChange = useCallbackRef$1(onValueChange);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(RadioGroupProvider, { scope: props.__scopeMenu, value, onValueChange: handleValueChange, children: /* @__PURE__ */ jsxRuntimeExports.jsx(MenuGroup, { ...groupProps, ref: forwardedRef }) });
      }
    );
    MenuRadioGroup.displayName = RADIO_GROUP_NAME$1;
    var RADIO_ITEM_NAME$1 = "MenuRadioItem";
    var MenuRadioItem = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { value, ...radioItemProps } = props;
        const context = useRadioGroupContext(RADIO_ITEM_NAME$1, props.__scopeMenu);
        const checked = value === context.value;
        return /* @__PURE__ */ jsxRuntimeExports.jsx(ItemIndicatorProvider, { scope: props.__scopeMenu, checked, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          MenuItem,
          {
            role: "menuitemradio",
            "aria-checked": checked,
            ...radioItemProps,
            ref: forwardedRef,
            "data-state": getCheckedState(checked),
            onSelect: composeEventHandlers(
              radioItemProps.onSelect,
              () => {
                var _a2;
                return (_a2 = context.onValueChange) == null ? void 0 : _a2.call(context, value);
              },
              { checkForDefaultPrevented: false }
            )
          }
        ) });
      }
    );
    MenuRadioItem.displayName = RADIO_ITEM_NAME$1;
    var ITEM_INDICATOR_NAME = "MenuItemIndicator";
    var [ItemIndicatorProvider, useItemIndicatorContext] = createMenuContext(
      ITEM_INDICATOR_NAME,
      { checked: false }
    );
    var MenuItemIndicator = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeMenu, forceMount, ...itemIndicatorProps } = props;
        const indicatorContext = useItemIndicatorContext(ITEM_INDICATOR_NAME, __scopeMenu);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Presence,
          {
            present: forceMount || isIndeterminate(indicatorContext.checked) || indicatorContext.checked === true,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Primitive.span,
              {
                ...itemIndicatorProps,
                ref: forwardedRef,
                "data-state": getCheckedState(indicatorContext.checked)
              }
            )
          }
        );
      }
    );
    MenuItemIndicator.displayName = ITEM_INDICATOR_NAME;
    var SEPARATOR_NAME$1 = "MenuSeparator";
    var MenuSeparator = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeMenu, ...separatorProps } = props;
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Primitive.div,
          {
            role: "separator",
            "aria-orientation": "horizontal",
            ...separatorProps,
            ref: forwardedRef
          }
        );
      }
    );
    MenuSeparator.displayName = SEPARATOR_NAME$1;
    var ARROW_NAME$2 = "MenuArrow";
    var MenuArrow = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeMenu, ...arrowProps } = props;
        const popperScope = usePopperScope$1(__scopeMenu);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
      }
    );
    MenuArrow.displayName = ARROW_NAME$2;
    var SUB_NAME = "MenuSub";
    var [MenuSubProvider, useMenuSubContext] = createMenuContext(SUB_NAME);
    var SUB_TRIGGER_NAME$1 = "MenuSubTrigger";
    var MenuSubTrigger = reactExports.forwardRef(
      (props, forwardedRef) => {
        const context = useMenuContext(SUB_TRIGGER_NAME$1, props.__scopeMenu);
        const rootContext = useMenuRootContext(SUB_TRIGGER_NAME$1, props.__scopeMenu);
        const subContext = useMenuSubContext(SUB_TRIGGER_NAME$1, props.__scopeMenu);
        const contentContext = useMenuContentContext(SUB_TRIGGER_NAME$1, props.__scopeMenu);
        const openTimerRef = reactExports.useRef(null);
        const { pointerGraceTimerRef, onPointerGraceIntentChange } = contentContext;
        const scope = { __scopeMenu: props.__scopeMenu };
        const clearOpenTimer = reactExports.useCallback(() => {
          if (openTimerRef.current) window.clearTimeout(openTimerRef.current);
          openTimerRef.current = null;
        }, []);
        reactExports.useEffect(() => clearOpenTimer, [clearOpenTimer]);
        reactExports.useEffect(() => {
          const pointerGraceTimer = pointerGraceTimerRef.current;
          return () => {
            window.clearTimeout(pointerGraceTimer);
            onPointerGraceIntentChange(null);
          };
        }, [pointerGraceTimerRef, onPointerGraceIntentChange]);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(MenuAnchor, { asChild: true, ...scope, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          MenuItemImpl,
          {
            id: subContext.triggerId,
            "aria-haspopup": "menu",
            "aria-expanded": context.open,
            "aria-controls": subContext.contentId,
            "data-state": getOpenState(context.open),
            ...props,
            ref: composeRefs(forwardedRef, subContext.onTriggerChange),
            onClick: (event) => {
              var _a2;
              (_a2 = props.onClick) == null ? void 0 : _a2.call(props, event);
              if (props.disabled || event.defaultPrevented) return;
              event.currentTarget.focus();
              if (!context.open) context.onOpenChange(true);
            },
            onPointerMove: composeEventHandlers(
              props.onPointerMove,
              whenMouse((event) => {
                contentContext.onItemEnter(event);
                if (event.defaultPrevented) return;
                if (!props.disabled && !context.open && !openTimerRef.current) {
                  contentContext.onPointerGraceIntentChange(null);
                  openTimerRef.current = window.setTimeout(() => {
                    context.onOpenChange(true);
                    clearOpenTimer();
                  }, 100);
                }
              })
            ),
            onPointerLeave: composeEventHandlers(
              props.onPointerLeave,
              whenMouse((event) => {
                var _a2, _b2;
                clearOpenTimer();
                const contentRect = (_a2 = context.content) == null ? void 0 : _a2.getBoundingClientRect();
                if (contentRect) {
                  const side = (_b2 = context.content) == null ? void 0 : _b2.dataset.side;
                  const rightSide = side === "right";
                  const bleed = rightSide ? -5 : 5;
                  const contentNearEdge = contentRect[rightSide ? "left" : "right"];
                  const contentFarEdge = contentRect[rightSide ? "right" : "left"];
                  contentContext.onPointerGraceIntentChange({
                    area: [
                      // Apply a bleed on clientX to ensure that our exit point is
                      // consistently within polygon bounds
                      { x: event.clientX + bleed, y: event.clientY },
                      { x: contentNearEdge, y: contentRect.top },
                      { x: contentFarEdge, y: contentRect.top },
                      { x: contentFarEdge, y: contentRect.bottom },
                      { x: contentNearEdge, y: contentRect.bottom }
                    ],
                    side
                  });
                  window.clearTimeout(pointerGraceTimerRef.current);
                  pointerGraceTimerRef.current = window.setTimeout(
                    () => contentContext.onPointerGraceIntentChange(null),
                    300
                  );
                } else {
                  contentContext.onTriggerLeave(event);
                  if (event.defaultPrevented) return;
                  contentContext.onPointerGraceIntentChange(null);
                }
              })
            ),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              var _a2;
              const isTypingAhead = contentContext.searchRef.current !== "";
              if (props.disabled || isTypingAhead && event.key === " ") return;
              if (SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {
                context.onOpenChange(true);
                (_a2 = context.content) == null ? void 0 : _a2.focus();
                event.preventDefault();
              }
            })
          }
        ) });
      }
    );
    MenuSubTrigger.displayName = SUB_TRIGGER_NAME$1;
    var SUB_CONTENT_NAME$1 = "MenuSubContent";
    var MenuSubContent = reactExports.forwardRef(
      (props, forwardedRef) => {
        const portalContext = usePortalContext$1(CONTENT_NAME$2, props.__scopeMenu);
        const { forceMount = portalContext.forceMount, ...subContentProps } = props;
        const context = useMenuContext(CONTENT_NAME$2, props.__scopeMenu);
        const rootContext = useMenuRootContext(CONTENT_NAME$2, props.__scopeMenu);
        const subContext = useMenuSubContext(SUB_CONTENT_NAME$1, props.__scopeMenu);
        const ref = reactExports.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, ref);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Collection.Provider, { scope: props.__scopeMenu, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Collection.Slot, { scope: props.__scopeMenu, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          MenuContentImpl,
          {
            id: subContext.contentId,
            "aria-labelledby": subContext.triggerId,
            ...subContentProps,
            ref: composedRefs,
            align: "start",
            side: rootContext.dir === "rtl" ? "left" : "right",
            disableOutsidePointerEvents: false,
            disableOutsideScroll: false,
            trapFocus: false,
            onOpenAutoFocus: (event) => {
              var _a2;
              if (rootContext.isUsingKeyboardRef.current) (_a2 = ref.current) == null ? void 0 : _a2.focus();
              event.preventDefault();
            },
            onCloseAutoFocus: (event) => event.preventDefault(),
            onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => {
              if (event.target !== subContext.trigger) context.onOpenChange(false);
            }),
            onEscapeKeyDown: composeEventHandlers(props.onEscapeKeyDown, (event) => {
              rootContext.onClose();
              event.preventDefault();
            }),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              var _a2;
              const isKeyDownInside = event.currentTarget.contains(event.target);
              const isCloseKey = SUB_CLOSE_KEYS[rootContext.dir].includes(event.key);
              if (isKeyDownInside && isCloseKey) {
                context.onOpenChange(false);
                (_a2 = subContext.trigger) == null ? void 0 : _a2.focus();
                event.preventDefault();
              }
            })
          }
        ) }) }) });
      }
    );
    MenuSubContent.displayName = SUB_CONTENT_NAME$1;
    function getOpenState(open) {
      return open ? "open" : "closed";
    }
    function isIndeterminate(checked) {
      return checked === "indeterminate";
    }
    function getCheckedState(checked) {
      return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
    }
    function focusFirst(candidates) {
      const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
      for (const candidate of candidates) {
        if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
        candidate.focus();
        if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
      }
    }
    function wrapArray(array2, startIndex) {
      return array2.map((_, index2) => array2[(startIndex + index2) % array2.length]);
    }
    function getNextMatch(values, search, currentMatch) {
      const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);
      const normalizedSearch = isRepeated ? search[0] : search;
      const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;
      let wrappedValues = wrapArray(values, Math.max(currentMatchIndex, 0));
      const excludeCurrentMatch = normalizedSearch.length === 1;
      if (excludeCurrentMatch) wrappedValues = wrappedValues.filter((v) => v !== currentMatch);
      const nextMatch = wrappedValues.find(
        (value) => value.toLowerCase().startsWith(normalizedSearch.toLowerCase())
      );
      return nextMatch !== currentMatch ? nextMatch : void 0;
    }
    function isPointInPolygon(point2, polygon) {
      const { x: x2, y: y2 } = point2;
      let inside = false;
      for (let i2 = 0, j = polygon.length - 1; i2 < polygon.length; j = i2++) {
        const ii = polygon[i2];
        const jj = polygon[j];
        const xi = ii.x;
        const yi = ii.y;
        const xj = jj.x;
        const yj = jj.y;
        const intersect = yi > y2 !== yj > y2 && x2 < (xj - xi) * (y2 - yi) / (yj - yi) + xi;
        if (intersect) inside = !inside;
      }
      return inside;
    }
    function isPointerInGraceArea(event, area) {
      if (!area) return false;
      const cursorPos = { x: event.clientX, y: event.clientY };
      return isPointInPolygon(cursorPos, area);
    }
    function whenMouse(handler) {
      return (event) => event.pointerType === "mouse" ? handler(event) : void 0;
    }
    var Root3 = Menu;
    var Anchor2 = MenuAnchor;
    var Portal$1 = MenuPortal;
    var Content2$2 = MenuContent;
    var Group = MenuGroup;
    var Label$3 = MenuLabel;
    var Item2$1 = MenuItem;
    var CheckboxItem = MenuCheckboxItem;
    var RadioGroup = MenuRadioGroup;
    var RadioItem = MenuRadioItem;
    var ItemIndicator = MenuItemIndicator;
    var Separator = MenuSeparator;
    var Arrow2 = MenuArrow;
    var SubTrigger = MenuSubTrigger;
    var SubContent = MenuSubContent;
    var DROPDOWN_MENU_NAME = "DropdownMenu";
    var [createDropdownMenuContext, createDropdownMenuScope] = createContextScope(
      DROPDOWN_MENU_NAME,
      [createMenuScope]
    );
    var useMenuScope = createMenuScope();
    var [DropdownMenuProvider, useDropdownMenuContext] = createDropdownMenuContext(DROPDOWN_MENU_NAME);
    var DropdownMenu$1 = (props) => {
      const {
        __scopeDropdownMenu,
        children,
        dir,
        open: openProp,
        defaultOpen,
        onOpenChange,
        modal = true
      } = props;
      const menuScope = useMenuScope(__scopeDropdownMenu);
      const triggerRef = reactExports.useRef(null);
      const [open, setOpen] = useControllableState({
        prop: openProp,
        defaultProp: defaultOpen ?? false,
        onChange: onOpenChange,
        caller: DROPDOWN_MENU_NAME
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        DropdownMenuProvider,
        {
          scope: __scopeDropdownMenu,
          triggerId: useId(),
          triggerRef,
          contentId: useId(),
          open,
          onOpenChange: setOpen,
          onOpenToggle: reactExports.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
          modal,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(Root3, { ...menuScope, open, onOpenChange: setOpen, dir, modal, children })
        }
      );
    };
    DropdownMenu$1.displayName = DROPDOWN_MENU_NAME;
    var TRIGGER_NAME$1 = "DropdownMenuTrigger";
    var DropdownMenuTrigger$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDropdownMenu, disabled = false, ...triggerProps } = props;
        const context = useDropdownMenuContext(TRIGGER_NAME$1, __scopeDropdownMenu);
        const menuScope = useMenuScope(__scopeDropdownMenu);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Anchor2, { asChild: true, ...menuScope, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Primitive.button,
          {
            type: "button",
            id: context.triggerId,
            "aria-haspopup": "menu",
            "aria-expanded": context.open,
            "aria-controls": context.open ? context.contentId : void 0,
            "data-state": context.open ? "open" : "closed",
            "data-disabled": disabled ? "" : void 0,
            disabled,
            ...triggerProps,
            ref: composeRefs(forwardedRef, context.triggerRef),
            onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
              if (!disabled && event.button === 0 && event.ctrlKey === false) {
                context.onOpenToggle();
                if (!context.open) event.preventDefault();
              }
            }),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              if (disabled) return;
              if (["Enter", " "].includes(event.key)) context.onOpenToggle();
              if (event.key === "ArrowDown") context.onOpenChange(true);
              if (["Enter", " ", "ArrowDown"].includes(event.key)) event.preventDefault();
            })
          }
        ) });
      }
    );
    DropdownMenuTrigger$1.displayName = TRIGGER_NAME$1;
    var PORTAL_NAME$1 = "DropdownMenuPortal";
    var DropdownMenuPortal = (props) => {
      const { __scopeDropdownMenu, ...portalProps } = props;
      const menuScope = useMenuScope(__scopeDropdownMenu);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$1, { ...menuScope, ...portalProps });
    };
    DropdownMenuPortal.displayName = PORTAL_NAME$1;
    var CONTENT_NAME$1 = "DropdownMenuContent";
    var DropdownMenuContent$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDropdownMenu, ...contentProps } = props;
        const context = useDropdownMenuContext(CONTENT_NAME$1, __scopeDropdownMenu);
        const menuScope = useMenuScope(__scopeDropdownMenu);
        const hasInteractedOutsideRef = reactExports.useRef(false);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Content2$2,
          {
            id: context.contentId,
            "aria-labelledby": context.triggerId,
            ...menuScope,
            ...contentProps,
            ref: forwardedRef,
            onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
              var _a2;
              if (!hasInteractedOutsideRef.current) (_a2 = context.triggerRef.current) == null ? void 0 : _a2.focus();
              hasInteractedOutsideRef.current = false;
              event.preventDefault();
            }),
            onInteractOutside: composeEventHandlers(props.onInteractOutside, (event) => {
              const originalEvent = event.detail.originalEvent;
              const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
              const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
              if (!context.modal || isRightClick) hasInteractedOutsideRef.current = true;
            }),
            style: {
              ...props.style,
              // re-namespace exposed content custom properties
              ...{
                "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
                "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
                "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
                "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
                "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
              }
            }
          }
        );
      }
    );
    DropdownMenuContent$1.displayName = CONTENT_NAME$1;
    var GROUP_NAME = "DropdownMenuGroup";
    var DropdownMenuGroup = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDropdownMenu, ...groupProps } = props;
        const menuScope = useMenuScope(__scopeDropdownMenu);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Group, { ...menuScope, ...groupProps, ref: forwardedRef });
      }
    );
    DropdownMenuGroup.displayName = GROUP_NAME;
    var LABEL_NAME = "DropdownMenuLabel";
    var DropdownMenuLabel = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDropdownMenu, ...labelProps } = props;
        const menuScope = useMenuScope(__scopeDropdownMenu);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Label$3, { ...menuScope, ...labelProps, ref: forwardedRef });
      }
    );
    DropdownMenuLabel.displayName = LABEL_NAME;
    var ITEM_NAME = "DropdownMenuItem";
    var DropdownMenuItem$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDropdownMenu, ...itemProps } = props;
        const menuScope = useMenuScope(__scopeDropdownMenu);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Item2$1, { ...menuScope, ...itemProps, ref: forwardedRef });
      }
    );
    DropdownMenuItem$1.displayName = ITEM_NAME;
    var CHECKBOX_ITEM_NAME = "DropdownMenuCheckboxItem";
    var DropdownMenuCheckboxItem = reactExports.forwardRef((props, forwardedRef) => {
      const { __scopeDropdownMenu, ...checkboxItemProps } = props;
      const menuScope = useMenuScope(__scopeDropdownMenu);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(CheckboxItem, { ...menuScope, ...checkboxItemProps, ref: forwardedRef });
    });
    DropdownMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;
    var RADIO_GROUP_NAME = "DropdownMenuRadioGroup";
    var DropdownMenuRadioGroup = reactExports.forwardRef((props, forwardedRef) => {
      const { __scopeDropdownMenu, ...radioGroupProps } = props;
      const menuScope = useMenuScope(__scopeDropdownMenu);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(RadioGroup, { ...menuScope, ...radioGroupProps, ref: forwardedRef });
    });
    DropdownMenuRadioGroup.displayName = RADIO_GROUP_NAME;
    var RADIO_ITEM_NAME = "DropdownMenuRadioItem";
    var DropdownMenuRadioItem = reactExports.forwardRef((props, forwardedRef) => {
      const { __scopeDropdownMenu, ...radioItemProps } = props;
      const menuScope = useMenuScope(__scopeDropdownMenu);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(RadioItem, { ...menuScope, ...radioItemProps, ref: forwardedRef });
    });
    DropdownMenuRadioItem.displayName = RADIO_ITEM_NAME;
    var INDICATOR_NAME = "DropdownMenuItemIndicator";
    var DropdownMenuItemIndicator = reactExports.forwardRef((props, forwardedRef) => {
      const { __scopeDropdownMenu, ...itemIndicatorProps } = props;
      const menuScope = useMenuScope(__scopeDropdownMenu);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ItemIndicator, { ...menuScope, ...itemIndicatorProps, ref: forwardedRef });
    });
    DropdownMenuItemIndicator.displayName = INDICATOR_NAME;
    var SEPARATOR_NAME = "DropdownMenuSeparator";
    var DropdownMenuSeparator = reactExports.forwardRef((props, forwardedRef) => {
      const { __scopeDropdownMenu, ...separatorProps } = props;
      const menuScope = useMenuScope(__scopeDropdownMenu);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Separator, { ...menuScope, ...separatorProps, ref: forwardedRef });
    });
    DropdownMenuSeparator.displayName = SEPARATOR_NAME;
    var ARROW_NAME$1 = "DropdownMenuArrow";
    var DropdownMenuArrow = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDropdownMenu, ...arrowProps } = props;
        const menuScope = useMenuScope(__scopeDropdownMenu);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Arrow2, { ...menuScope, ...arrowProps, ref: forwardedRef });
      }
    );
    DropdownMenuArrow.displayName = ARROW_NAME$1;
    var SUB_TRIGGER_NAME = "DropdownMenuSubTrigger";
    var DropdownMenuSubTrigger = reactExports.forwardRef((props, forwardedRef) => {
      const { __scopeDropdownMenu, ...subTriggerProps } = props;
      const menuScope = useMenuScope(__scopeDropdownMenu);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(SubTrigger, { ...menuScope, ...subTriggerProps, ref: forwardedRef });
    });
    DropdownMenuSubTrigger.displayName = SUB_TRIGGER_NAME;
    var SUB_CONTENT_NAME = "DropdownMenuSubContent";
    var DropdownMenuSubContent = reactExports.forwardRef((props, forwardedRef) => {
      const { __scopeDropdownMenu, ...subContentProps } = props;
      const menuScope = useMenuScope(__scopeDropdownMenu);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        SubContent,
        {
          ...menuScope,
          ...subContentProps,
          ref: forwardedRef,
          style: {
            ...props.style,
            // re-namespace exposed content custom properties
            ...{
              "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
              "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
              "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
              "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
              "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
            }
          }
        }
      );
    });
    DropdownMenuSubContent.displayName = SUB_CONTENT_NAME;
    var Root2$1 = DropdownMenu$1;
    var Trigger$1 = DropdownMenuTrigger$1;
    var Portal2 = DropdownMenuPortal;
    var Content2$1 = DropdownMenuContent$1;
    var Item2 = DropdownMenuItem$1;
    function DropdownMenu({
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Root2$1, { "data-slot": "dropdown-menu", ...props });
    }
    function DropdownMenuTrigger({
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Trigger$1,
        {
          "data-slot": "dropdown-menu-trigger",
          ...props
        }
      );
    }
    function DropdownMenuContent({
      className,
      sideOffset = 4,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal2, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Content2$1,
        {
          "data-slot": "dropdown-menu-content",
          sideOffset,
          className: cn$1(
            "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
            className
          ),
          ...props
        }
      ) });
    }
    function DropdownMenuItem({
      className,
      inset,
      variant = "default",
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Item2,
        {
          "data-slot": "dropdown-menu-item",
          "data-inset": inset,
          "data-variant": variant,
          className: cn$1(
            "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
            className
          ),
          ...props
        }
      );
    }
    const badgeVariants = cva(
      "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
      {
        variants: {
          variant: {
            default: "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
            secondary: "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
            destructive: "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
            outline: "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground"
          }
        },
        defaultVariants: {
          variant: "default"
        }
      }
    );
    function Badge({
      className,
      variant,
      asChild = false,
      ...props
    }) {
      const Comp = asChild ? Slot$3 : "span";
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Comp,
        {
          "data-slot": "badge",
          className: cn$1(badgeVariants({ variant }), className),
          ...props
        }
      );
    }
    const statusLookup = {
      SENT: { label: "TERKIRIM", coloring: "bg-neutral-100 text-neutral-700" },
      RECEIVED: { label: "DITERIMA", coloring: "bg-neutral-800 text-white" },
      HANDLED: { label: "DITANGANI", coloring: "bg-yellow-500 text-neutral-700" },
      ON_PROGRESS: { label: "SEDANG PROSES", coloring: "bg-blue-500 text-white" },
      RESOLVED: { label: "SELESAI", coloring: "bg-green-500 text-white" }
    };
    //! moment.js
    //! version : 2.30.1
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    var hookCallback;
    function hooks() {
      return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
      hookCallback = callback;
    }
    function isArray$1(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
    }
    function isObject$2(input) {
      return input != null && Object.prototype.toString.call(input) === "[object Object]";
    }
    function hasOwnProp(a2, b) {
      return Object.prototype.hasOwnProperty.call(a2, b);
    }
    function isObjectEmpty(obj) {
      if (Object.getOwnPropertyNames) {
        return Object.getOwnPropertyNames(obj).length === 0;
      } else {
        var k2;
        for (k2 in obj) {
          if (hasOwnProp(obj, k2)) {
            return false;
          }
        }
        return true;
      }
    }
    function isUndefined$1(input) {
      return input === void 0;
    }
    function isNumber$2(input) {
      return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
    }
    function isDate(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
    }
    function map$2(arr, fn) {
      var res = [], i2, arrLen = arr.length;
      for (i2 = 0; i2 < arrLen; ++i2) {
        res.push(fn(arr[i2], i2));
      }
      return res;
    }
    function extend$1(a2, b) {
      for (var i2 in b) {
        if (hasOwnProp(b, i2)) {
          a2[i2] = b[i2];
        }
      }
      if (hasOwnProp(b, "toString")) {
        a2.toString = b.toString;
      }
      if (hasOwnProp(b, "valueOf")) {
        a2.valueOf = b.valueOf;
      }
      return a2;
    }
    function createUTC(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, true).utc();
    }
    function defaultParsingFlags() {
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidEra: null,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false,
        parsedDateParts: [],
        era: null,
        meridiem: null,
        rfc2822: false,
        weekdayMismatch: false
      };
    }
    function getParsingFlags(m2) {
      if (m2._pf == null) {
        m2._pf = defaultParsingFlags();
      }
      return m2._pf;
    }
    var some$1;
    if (Array.prototype.some) {
      some$1 = Array.prototype.some;
    } else {
      some$1 = function(fun) {
        var t = Object(this), len = t.length >>> 0, i2;
        for (i2 = 0; i2 < len; i2++) {
          if (i2 in t && fun.call(this, t[i2], i2, t)) {
            return true;
          }
        }
        return false;
      };
    }
    function isValid$1(m2) {
      var flags = null, parsedParts = false, isNowValid = m2._d && !isNaN(m2._d.getTime());
      if (isNowValid) {
        flags = getParsingFlags(m2);
        parsedParts = some$1.call(flags.parsedDateParts, function(i2) {
          return i2 != null;
        });
        isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
        if (m2._strict) {
          isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
        }
      }
      if (Object.isFrozen == null || !Object.isFrozen(m2)) {
        m2._isValid = isNowValid;
      } else {
        return isNowValid;
      }
      return m2._isValid;
    }
    function createInvalid(flags) {
      var m2 = createUTC(NaN);
      if (flags != null) {
        extend$1(getParsingFlags(m2), flags);
      } else {
        getParsingFlags(m2).userInvalidated = true;
      }
      return m2;
    }
    var momentProperties = hooks.momentProperties = [], updateInProgress = false;
    function copyConfig(to2, from2) {
      var i2, prop, val, momentPropertiesLen = momentProperties.length;
      if (!isUndefined$1(from2._isAMomentObject)) {
        to2._isAMomentObject = from2._isAMomentObject;
      }
      if (!isUndefined$1(from2._i)) {
        to2._i = from2._i;
      }
      if (!isUndefined$1(from2._f)) {
        to2._f = from2._f;
      }
      if (!isUndefined$1(from2._l)) {
        to2._l = from2._l;
      }
      if (!isUndefined$1(from2._strict)) {
        to2._strict = from2._strict;
      }
      if (!isUndefined$1(from2._tzm)) {
        to2._tzm = from2._tzm;
      }
      if (!isUndefined$1(from2._isUTC)) {
        to2._isUTC = from2._isUTC;
      }
      if (!isUndefined$1(from2._offset)) {
        to2._offset = from2._offset;
      }
      if (!isUndefined$1(from2._pf)) {
        to2._pf = getParsingFlags(from2);
      }
      if (!isUndefined$1(from2._locale)) {
        to2._locale = from2._locale;
      }
      if (momentPropertiesLen > 0) {
        for (i2 = 0; i2 < momentPropertiesLen; i2++) {
          prop = momentProperties[i2];
          val = from2[prop];
          if (!isUndefined$1(val)) {
            to2[prop] = val;
          }
        }
      }
      return to2;
    }
    function Moment(config2) {
      copyConfig(this, config2);
      this._d = new Date(config2._d != null ? config2._d.getTime() : NaN);
      if (!this.isValid()) {
        this._d = /* @__PURE__ */ new Date(NaN);
      }
      if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn$1(msg) {
      if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
        console.warn("Deprecation warning: " + msg);
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true;
      return extend$1(function() {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
          var args = [], arg, i2, key, argLen = arguments.length;
          for (i2 = 0; i2 < argLen; i2++) {
            arg = "";
            if (typeof arguments[i2] === "object") {
              arg += "\n[" + i2 + "] ";
              for (key in arguments[0]) {
                if (hasOwnProp(arguments[0], key)) {
                  arg += key + ": " + arguments[0][key] + ", ";
                }
              }
              arg = arg.slice(0, -2);
            } else {
              arg = arguments[i2];
            }
            args.push(arg);
          }
          warn$1(
            msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
          );
          firstTime = false;
        }
        return fn.apply(this, arguments);
      }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
      }
      if (!deprecations[name]) {
        warn$1(msg);
        deprecations[name] = true;
      }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction$2(input) {
      return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
    }
    function set$1(config2) {
      var prop, i2;
      for (i2 in config2) {
        if (hasOwnProp(config2, i2)) {
          prop = config2[i2];
          if (isFunction$2(prop)) {
            this[i2] = prop;
          } else {
            this["_" + i2] = prop;
          }
        }
      }
      this._config = config2;
      this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
      );
    }
    function mergeConfigs(parentConfig, childConfig) {
      var res = extend$1({}, parentConfig), prop;
      for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
          if (isObject$2(parentConfig[prop]) && isObject$2(childConfig[prop])) {
            res[prop] = {};
            extend$1(res[prop], parentConfig[prop]);
            extend$1(res[prop], childConfig[prop]);
          } else if (childConfig[prop] != null) {
            res[prop] = childConfig[prop];
          } else {
            delete res[prop];
          }
        }
      }
      for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject$2(parentConfig[prop])) {
          res[prop] = extend$1({}, res[prop]);
        }
      }
      return res;
    }
    function Locale(config2) {
      if (config2 != null) {
        this.set(config2);
      }
    }
    var keys$1;
    if (Object.keys) {
      keys$1 = Object.keys;
    } else {
      keys$1 = function(obj) {
        var i2, res = [];
        for (i2 in obj) {
          if (hasOwnProp(obj, i2)) {
            res.push(i2);
          }
        }
        return res;
      };
    }
    var defaultCalendar = {
      sameDay: "[Today at] LT",
      nextDay: "[Tomorrow at] LT",
      nextWeek: "dddd [at] LT",
      lastDay: "[Yesterday at] LT",
      lastWeek: "[Last] dddd [at] LT",
      sameElse: "L"
    };
    function calendar$1(key, mom, now2) {
      var output = this._calendar[key] || this._calendar["sameElse"];
      return isFunction$2(output) ? output.call(mom, now2) : output;
    }
    function zeroFill(number2, targetLength, forceSign) {
      var absNumber = "" + Math.abs(number2), zerosToFill = targetLength - absNumber.length, sign2 = number2 >= 0;
      return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
    function addFormatToken(token2, padded, ordinal2, callback) {
      var func = callback;
      if (typeof callback === "string") {
        func = function() {
          return this[callback]();
        };
      }
      if (token2) {
        formatTokenFunctions[token2] = func;
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function() {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
      }
      if (ordinal2) {
        formatTokenFunctions[ordinal2] = function() {
          return this.localeData().ordinal(
            func.apply(this, arguments),
            token2
          );
        };
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, "");
      }
      return input.replace(/\\/g, "");
    }
    function makeFormatFunction(format2) {
      var array2 = format2.match(formattingTokens), i2, length;
      for (i2 = 0, length = array2.length; i2 < length; i2++) {
        if (formatTokenFunctions[array2[i2]]) {
          array2[i2] = formatTokenFunctions[array2[i2]];
        } else {
          array2[i2] = removeFormattingTokens(array2[i2]);
        }
      }
      return function(mom) {
        var output = "", i3;
        for (i3 = 0; i3 < length; i3++) {
          output += isFunction$2(array2[i3]) ? array2[i3].call(mom, format2) : array2[i3];
        }
        return output;
      };
    }
    function formatMoment(m2, format2) {
      if (!m2.isValid()) {
        return m2.localeData().invalidDate();
      }
      format2 = expandFormat(format2, m2.localeData());
      formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
      return formatFunctions[format2](m2);
    }
    function expandFormat(format2, locale2) {
      var i2 = 5;
      function replaceLongDateFormatTokens(input) {
        return locale2.longDateFormat(input) || input;
      }
      localFormattingTokens.lastIndex = 0;
      while (i2 >= 0 && localFormattingTokens.test(format2)) {
        format2 = format2.replace(
          localFormattingTokens,
          replaceLongDateFormatTokens
        );
        localFormattingTokens.lastIndex = 0;
        i2 -= 1;
      }
      return format2;
    }
    var defaultLongDateFormat = {
      LTS: "h:mm:ss A",
      LT: "h:mm A",
      L: "MM/DD/YYYY",
      LL: "MMMM D, YYYY",
      LLL: "MMMM D, YYYY h:mm A",
      LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    function longDateFormat(key) {
      var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
      if (format2 || !formatUpper) {
        return format2;
      }
      this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
        if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
          return tok.slice(1);
        }
        return tok;
      }).join("");
      return this._longDateFormat[key];
    }
    var defaultInvalidDate = "Invalid date";
    function invalidDate() {
      return this._invalidDate;
    }
    var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal$1(number2) {
      return this._ordinal.replace("%d", number2);
    }
    var defaultRelativeTime = {
      future: "in %s",
      past: "%s ago",
      s: "a few seconds",
      ss: "%d seconds",
      m: "a minute",
      mm: "%d minutes",
      h: "an hour",
      hh: "%d hours",
      d: "a day",
      dd: "%d days",
      w: "a week",
      ww: "%d weeks",
      M: "a month",
      MM: "%d months",
      y: "a year",
      yy: "%d years"
    };
    function relativeTime(number2, withoutSuffix, string2, isFuture) {
      var output = this._relativeTime[string2];
      return isFunction$2(output) ? output(number2, withoutSuffix, string2, isFuture) : output.replace(/%d/i, number2);
    }
    function pastFuture(diff2, output) {
      var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
      return isFunction$2(format2) ? format2(output) : format2.replace(/%s/i, output);
    }
    var aliases = {
      D: "date",
      dates: "date",
      date: "date",
      d: "day",
      days: "day",
      day: "day",
      e: "weekday",
      weekdays: "weekday",
      weekday: "weekday",
      E: "isoWeekday",
      isoweekdays: "isoWeekday",
      isoweekday: "isoWeekday",
      DDD: "dayOfYear",
      dayofyears: "dayOfYear",
      dayofyear: "dayOfYear",
      h: "hour",
      hours: "hour",
      hour: "hour",
      ms: "millisecond",
      milliseconds: "millisecond",
      millisecond: "millisecond",
      m: "minute",
      minutes: "minute",
      minute: "minute",
      M: "month",
      months: "month",
      month: "month",
      Q: "quarter",
      quarters: "quarter",
      quarter: "quarter",
      s: "second",
      seconds: "second",
      second: "second",
      gg: "weekYear",
      weekyears: "weekYear",
      weekyear: "weekYear",
      GG: "isoWeekYear",
      isoweekyears: "isoWeekYear",
      isoweekyear: "isoWeekYear",
      w: "week",
      weeks: "week",
      week: "week",
      W: "isoWeek",
      isoweeks: "isoWeek",
      isoweek: "isoWeek",
      y: "year",
      years: "year",
      year: "year"
    };
    function normalizeUnits(units) {
      return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {}, normalizedProp, prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop];
          }
        }
      }
      return normalizedInput;
    }
    var priorities = {
      date: 9,
      day: 11,
      weekday: 11,
      isoWeekday: 11,
      dayOfYear: 4,
      hour: 13,
      millisecond: 16,
      minute: 14,
      month: 8,
      quarter: 7,
      second: 15,
      weekYear: 1,
      isoWeekYear: 1,
      week: 5,
      isoWeek: 5,
      year: 1
    };
    function getPrioritizedUnits(unitsObj) {
      var units = [], u2;
      for (u2 in unitsObj) {
        if (hasOwnProp(unitsObj, u2)) {
          units.push({ unit: u2, priority: priorities[u2] });
        }
      }
      units.sort(function(a2, b) {
        return a2.priority - b.priority;
      });
      return units;
    }
    var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, match1to2NoLeadingZero = /^[1-9]\d?/, match1to2HasZero = /^([1-9]\d|\d)/, regexes;
    regexes = {};
    function addRegexToken(token2, regex, strictRegex) {
      regexes[token2] = isFunction$2(regex) ? regex : function(isStrict, localeData2) {
        return isStrict && strictRegex ? strictRegex : regex;
      };
    }
    function getParseRegexForToken(token2, config2) {
      if (!hasOwnProp(regexes, token2)) {
        return new RegExp(unescapeFormat(token2));
      }
      return regexes[token2](config2._strict, config2._locale);
    }
    function unescapeFormat(s2) {
      return regexEscape(
        s2.replace("\\", "").replace(
          /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
          function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
          }
        )
      );
    }
    function regexEscape(s2) {
      return s2.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    function absFloor(number2) {
      if (number2 < 0) {
        return Math.ceil(number2) || 0;
      } else {
        return Math.floor(number2);
      }
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion, value = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
      }
      return value;
    }
    var tokens = {};
    function addParseToken(token2, callback) {
      var i2, func = callback, tokenLen;
      if (typeof token2 === "string") {
        token2 = [token2];
      }
      if (isNumber$2(callback)) {
        func = function(input, array2) {
          array2[callback] = toInt(input);
        };
      }
      tokenLen = token2.length;
      for (i2 = 0; i2 < tokenLen; i2++) {
        tokens[token2[i2]] = func;
      }
    }
    function addWeekParseToken(token2, callback) {
      addParseToken(token2, function(input, array2, config2, token3) {
        config2._w = config2._w || {};
        callback(input, config2._w, config2, token3);
      });
    }
    function addTimeToArrayFromToken(token2, input, config2) {
      if (input != null && hasOwnProp(tokens, token2)) {
        tokens[token2](input, config2._a, config2, token2);
      }
    }
    function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
    addFormatToken("Y", 0, 0, function() {
      var y2 = this.year();
      return y2 <= 9999 ? zeroFill(y2, 4) : "+" + y2;
    });
    addFormatToken(0, ["YY", 2], 0, function() {
      return this.year() % 100;
    });
    addFormatToken(0, ["YYYY", 4], 0, "year");
    addFormatToken(0, ["YYYYY", 5], 0, "year");
    addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken(["YYYYY", "YYYYYY"], YEAR);
    addParseToken("YYYY", function(input, array2) {
      array2[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array2) {
      array2[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array2) {
      array2[YEAR] = parseInt(input, 10);
    });
    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }
    hooks.parseTwoDigitYear = function(input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
    };
    var getSetYear = makeGetSet("FullYear", true);
    function getIsLeapYear() {
      return isLeapYear(this.year());
    }
    function makeGetSet(unit2, keepTime) {
      return function(value) {
        if (value != null) {
          set$1$1(this, unit2, value);
          hooks.updateOffset(this, keepTime);
          return this;
        } else {
          return get$2(this, unit2);
        }
      };
    }
    function get$2(mom, unit2) {
      if (!mom.isValid()) {
        return NaN;
      }
      var d = mom._d, isUTC = mom._isUTC;
      switch (unit2) {
        case "Milliseconds":
          return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
        case "Seconds":
          return isUTC ? d.getUTCSeconds() : d.getSeconds();
        case "Minutes":
          return isUTC ? d.getUTCMinutes() : d.getMinutes();
        case "Hours":
          return isUTC ? d.getUTCHours() : d.getHours();
        case "Date":
          return isUTC ? d.getUTCDate() : d.getDate();
        case "Day":
          return isUTC ? d.getUTCDay() : d.getDay();
        case "Month":
          return isUTC ? d.getUTCMonth() : d.getMonth();
        case "FullYear":
          return isUTC ? d.getUTCFullYear() : d.getFullYear();
        default:
          return NaN;
      }
    }
    function set$1$1(mom, unit2, value) {
      var d, isUTC, year, month, date2;
      if (!mom.isValid() || isNaN(value)) {
        return;
      }
      d = mom._d;
      isUTC = mom._isUTC;
      switch (unit2) {
        case "Milliseconds":
          return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
        case "Seconds":
          return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
        case "Minutes":
          return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
        case "Hours":
          return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
        case "Date":
          return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
        // case 'Day': // Not real
        //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
        // case 'Month': // Not used because we need to pass two variables
        //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
        case "FullYear":
          break;
        // See below ...
        default:
          return;
      }
      year = value;
      month = mom.month();
      date2 = mom.date();
      date2 = date2 === 29 && month === 1 && !isLeapYear(year) ? 28 : date2;
      void (isUTC ? d.setUTCFullYear(year, month, date2) : d.setFullYear(year, month, date2));
    }
    function stringGet(units) {
      units = normalizeUnits(units);
      if (isFunction$2(this[units])) {
        return this[units]();
      }
      return this;
    }
    function stringSet(units, value) {
      if (typeof units === "object") {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units), i2, prioritizedLen = prioritized.length;
        for (i2 = 0; i2 < prioritizedLen; i2++) {
          this[prioritized[i2].unit](units[prioritized[i2].unit]);
        }
      } else {
        units = normalizeUnits(units);
        if (isFunction$2(this[units])) {
          return this[units](value);
        }
      }
      return this;
    }
    function mod(n2, x2) {
      return (n2 % x2 + x2) % x2;
    }
    var indexOf;
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function(o2) {
        var i2;
        for (i2 = 0; i2 < this.length; ++i2) {
          if (this[i2] === o2) {
            return i2;
          }
        }
        return -1;
      };
    }
    function daysInMonth(year, month) {
      if (isNaN(year) || isNaN(month)) {
        return NaN;
      }
      var modMonth = mod(month, 12);
      year += (month - modMonth) / 12;
      return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    addFormatToken("M", ["MM", 2], "Mo", function() {
      return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format2) {
      return this.localeData().monthsShort(this, format2);
    });
    addFormatToken("MMMM", 0, 0, function(format2) {
      return this.localeData().months(this, format2);
    });
    addRegexToken("M", match1to2, match1to2NoLeadingZero);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale2) {
      return locale2.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale2) {
      return locale2.monthsRegex(isStrict);
    });
    addParseToken(["M", "MM"], function(input, array2) {
      array2[MONTH] = toInt(input) - 1;
    });
    addParseToken(["MMM", "MMMM"], function(input, array2, config2, token2) {
      var month = config2._locale.monthsParse(input, token2, config2._strict);
      if (month != null) {
        array2[MONTH] = month;
      } else {
        getParsingFlags(config2).invalidMonth = input;
      }
    });
    var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
      "_"
    ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
    function localeMonths(m2, format2) {
      if (!m2) {
        return isArray$1(this._months) ? this._months : this._months["standalone"];
      }
      return isArray$1(this._months) ? this._months[m2.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m2.month()];
    }
    function localeMonthsShort(m2, format2) {
      if (!m2) {
        return isArray$1(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
      }
      return isArray$1(this._monthsShort) ? this._monthsShort[m2.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m2.month()];
    }
    function handleStrictParse(monthName, format2, strict) {
      var i2, ii, mom, llc = monthName.toLocaleLowerCase();
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i2 = 0; i2 < 12; ++i2) {
          mom = createUTC([2e3, i2]);
          this._shortMonthsParse[i2] = this.monthsShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._longMonthsParse[i2] = this.months(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "MMM") {
          ii = indexOf.call(this._shortMonthsParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._longMonthsParse, llc);
          return ii !== -1 ? ii : null;
        }
      } else {
        if (format2 === "MMM") {
          ii = indexOf.call(this._shortMonthsParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._longMonthsParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._longMonthsParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortMonthsParse, llc);
          return ii !== -1 ? ii : null;
        }
      }
    }
    function localeMonthsParse(monthName, format2, strict) {
      var i2, mom, regex;
      if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format2, strict);
      }
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }
      for (i2 = 0; i2 < 12; i2++) {
        mom = createUTC([2e3, i2]);
        if (strict && !this._longMonthsParse[i2]) {
          this._longMonthsParse[i2] = new RegExp(
            "^" + this.months(mom, "").replace(".", "") + "$",
            "i"
          );
          this._shortMonthsParse[i2] = new RegExp(
            "^" + this.monthsShort(mom, "").replace(".", "") + "$",
            "i"
          );
        }
        if (!strict && !this._monthsParse[i2]) {
          regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
          this._monthsParse[i2] = new RegExp(regex.replace(".", ""), "i");
        }
        if (strict && format2 === "MMMM" && this._longMonthsParse[i2].test(monthName)) {
          return i2;
        } else if (strict && format2 === "MMM" && this._shortMonthsParse[i2].test(monthName)) {
          return i2;
        } else if (!strict && this._monthsParse[i2].test(monthName)) {
          return i2;
        }
      }
    }
    function setMonth(mom, value) {
      if (!mom.isValid()) {
        return mom;
      }
      if (typeof value === "string") {
        if (/^\d+$/.test(value)) {
          value = toInt(value);
        } else {
          value = mom.localeData().monthsParse(value);
          if (!isNumber$2(value)) {
            return mom;
          }
        }
      }
      var month = value, date2 = mom.date();
      date2 = date2 < 29 ? date2 : Math.min(date2, daysInMonth(mom.year(), month));
      void (mom._isUTC ? mom._d.setUTCMonth(month, date2) : mom._d.setMonth(month, date2));
      return mom;
    }
    function getSetMonth(value) {
      if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
      } else {
        return get$2(this, "Month");
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsShortStrictRegex;
        } else {
          return this._monthsShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsShortRegex")) {
          this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
      }
    }
    function monthsRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsStrictRegex;
        } else {
          return this._monthsRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsRegex")) {
          this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
      }
    }
    function computeMonthsParse() {
      function cmpLenRev(a2, b) {
        return b.length - a2.length;
      }
      var shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, shortP, longP;
      for (i2 = 0; i2 < 12; i2++) {
        mom = createUTC([2e3, i2]);
        shortP = regexEscape(this.monthsShort(mom, ""));
        longP = regexEscape(this.months(mom, ""));
        shortPieces.push(shortP);
        longPieces.push(longP);
        mixedPieces.push(longP);
        mixedPieces.push(shortP);
      }
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._monthsShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
    }
    function createDate(y2, m2, d, h, M2, s2, ms) {
      var date2;
      if (y2 < 100 && y2 >= 0) {
        date2 = new Date(y2 + 400, m2, d, h, M2, s2, ms);
        if (isFinite(date2.getFullYear())) {
          date2.setFullYear(y2);
        }
      } else {
        date2 = new Date(y2, m2, d, h, M2, s2, ms);
      }
      return date2;
    }
    function createUTCDate(y2) {
      var date2, args;
      if (y2 < 100 && y2 >= 0) {
        args = Array.prototype.slice.call(arguments);
        args[0] = y2 + 400;
        date2 = new Date(Date.UTC.apply(null, args));
        if (isFinite(date2.getUTCFullYear())) {
          date2.setUTCFullYear(y2);
        }
      } else {
        date2 = new Date(Date.UTC.apply(null, arguments));
      }
      return date2;
    }
    function firstWeekOffset(year, dow, doy) {
      var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
      return -fwdlw + fwd - 1;
    }
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
      if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
      } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
      } else {
        resYear = year;
        resDayOfYear = dayOfYear;
      }
      return {
        year: resYear,
        dayOfYear: resDayOfYear
      };
    }
    function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
      if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
      } else {
        resYear = mom.year();
        resWeek = week;
      }
      return {
        week: resWeek,
        year: resYear
      };
    }
    function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    addFormatToken("w", ["ww", 2], "wo", "week");
    addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
    addRegexToken("w", match1to2, match1to2NoLeadingZero);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2, match1to2NoLeadingZero);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken(
      ["w", "ww", "W", "WW"],
      function(input, week, config2, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      }
    );
    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6
      // The week that contains Jan 6th is the first week of the year.
    };
    function localeFirstDayOfWeek() {
      return this._week.dow;
    }
    function localeFirstDayOfYear() {
      return this._week.doy;
    }
    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format2) {
      return this.localeData().weekdaysMin(this, format2);
    });
    addFormatToken("ddd", 0, 0, function(format2) {
      return this.localeData().weekdaysShort(this, format2);
    });
    addFormatToken("dddd", 0, 0, function(format2) {
      return this.localeData().weekdays(this, format2);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale2) {
      return locale2.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale2) {
      return locale2.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale2) {
      return locale2.weekdaysRegex(isStrict);
    });
    addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config2, token2) {
      var weekday = config2._locale.weekdaysParse(input, token2, config2._strict);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config2).invalidWeekday = input;
      }
    });
    addWeekParseToken(["d", "e", "E"], function(input, week, config2, token2) {
      week[token2] = toInt(input);
    });
    function parseWeekday(input, locale2) {
      if (typeof input !== "string") {
        return input;
      }
      if (!isNaN(input)) {
        return parseInt(input, 10);
      }
      input = locale2.weekdaysParse(input);
      if (typeof input === "number") {
        return input;
      }
      return null;
    }
    function parseIsoWeekday(input, locale2) {
      if (typeof input === "string") {
        return locale2.weekdaysParse(input) % 7 || 7;
      }
      return isNaN(input) ? null : input;
    }
    function shiftWeekdays(ws, n2) {
      return ws.slice(n2, 7).concat(ws.slice(0, n2));
    }
    var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m2, format2) {
      var weekdays = isArray$1(this._weekdays) ? this._weekdays : this._weekdays[m2 && m2 !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
      return m2 === true ? shiftWeekdays(weekdays, this._week.dow) : m2 ? weekdays[m2.day()] : weekdays;
    }
    function localeWeekdaysShort(m2) {
      return m2 === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m2 ? this._weekdaysShort[m2.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m2) {
      return m2 === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m2 ? this._weekdaysMin[m2.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format2, strict) {
      var i2, ii, mom, llc = weekdayName.toLocaleLowerCase();
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];
        for (i2 = 0; i2 < 7; ++i2) {
          mom = createUTC([2e3, 1]).day(i2);
          this._minWeekdaysParse[i2] = this.weekdaysMin(
            mom,
            ""
          ).toLocaleLowerCase();
          this._shortWeekdaysParse[i2] = this.weekdaysShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._weekdaysParse[i2] = this.weekdays(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "dddd") {
          ii = indexOf.call(this._weekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else if (format2 === "ddd") {
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        }
      } else {
        if (format2 === "dddd") {
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else if (format2 === "ddd") {
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._minWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        }
      }
    }
    function localeWeekdaysParse(weekdayName, format2, strict) {
      var i2, mom, regex;
      if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format2, strict);
      }
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
      }
      for (i2 = 0; i2 < 7; i2++) {
        mom = createUTC([2e3, 1]).day(i2);
        if (strict && !this._fullWeekdaysParse[i2]) {
          this._fullWeekdaysParse[i2] = new RegExp(
            "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._shortWeekdaysParse[i2] = new RegExp(
            "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._minWeekdaysParse[i2] = new RegExp(
            "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
        }
        if (!this._weekdaysParse[i2]) {
          regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
          this._weekdaysParse[i2] = new RegExp(regex.replace(".", ""), "i");
        }
        if (strict && format2 === "dddd" && this._fullWeekdaysParse[i2].test(weekdayName)) {
          return i2;
        } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i2].test(weekdayName)) {
          return i2;
        } else if (strict && format2 === "dd" && this._minWeekdaysParse[i2].test(weekdayName)) {
          return i2;
        } else if (!strict && this._weekdaysParse[i2].test(weekdayName)) {
          return i2;
        }
      }
    }
    function getSetDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var day = get$2(this, "Day");
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, "d");
      } else {
        return day;
      }
    }
    function getSetLocaleDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, "d");
    }
    function getSetISODayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
      } else {
        return this.day() || 7;
      }
    }
    function weekdaysRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysStrictRegex;
        } else {
          return this._weekdaysRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
      }
    }
    function weekdaysShortRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysShortStrictRegex;
        } else {
          return this._weekdaysShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysShortRegex")) {
          this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
      }
    }
    function weekdaysMinRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysMinStrictRegex;
        } else {
          return this._weekdaysMinRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysMinRegex")) {
          this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
      }
    }
    function computeWeekdaysParse() {
      function cmpLenRev(a2, b) {
        return b.length - a2.length;
      }
      var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, minp, shortp, longp;
      for (i2 = 0; i2 < 7; i2++) {
        mom = createUTC([2e3, 1]).day(i2);
        minp = regexEscape(this.weekdaysMin(mom, ""));
        shortp = regexEscape(this.weekdaysShort(mom, ""));
        longp = regexEscape(this.weekdays(mom, ""));
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
      }
      minPieces.sort(cmpLenRev);
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._weekdaysShortRegex = this._weekdaysRegex;
      this._weekdaysMinRegex = this._weekdaysRegex;
      this._weekdaysStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._weekdaysShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
      this._weekdaysMinStrictRegex = new RegExp(
        "^(" + minPieces.join("|") + ")",
        "i"
      );
    }
    function hFormat() {
      return this.hours() % 12 || 12;
    }
    function kFormat() {
      return this.hours() || 24;
    }
    addFormatToken("H", ["HH", 2], 0, "hour");
    addFormatToken("h", ["hh", 2], 0, hFormat);
    addFormatToken("k", ["kk", 2], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token2, lowercase) {
      addFormatToken(token2, 0, 0, function() {
        return this.localeData().meridiem(
          this.hours(),
          this.minutes(),
          lowercase
        );
      });
    }
    meridiem("a", true);
    meridiem("A", false);
    function matchMeridiem(isStrict, locale2) {
      return locale2._meridiemParse;
    }
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2, match1to2HasZero);
    addRegexToken("h", match1to2, match1to2NoLeadingZero);
    addRegexToken("k", match1to2, match1to2NoLeadingZero);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("kk", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken(["H", "HH"], HOUR);
    addParseToken(["k", "kk"], function(input, array2, config2) {
      var kInput = toInt(input);
      array2[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(["a", "A"], function(input, array2, config2) {
      config2._isPm = config2._locale.isPM(input);
      config2._meridiem = input;
    });
    addParseToken(["h", "hh"], function(input, array2, config2) {
      array2[HOUR] = toInt(input);
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("hmm", function(input, array2, config2) {
      var pos = input.length - 2;
      array2[HOUR] = toInt(input.substr(0, pos));
      array2[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("hmmss", function(input, array2, config2) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array2[HOUR] = toInt(input.substr(0, pos1));
      array2[MINUTE] = toInt(input.substr(pos1, 2));
      array2[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("Hmm", function(input, array2, config2) {
      var pos = input.length - 2;
      array2[HOUR] = toInt(input.substr(0, pos));
      array2[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array2, config2) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array2[HOUR] = toInt(input.substr(0, pos1));
      array2[MINUTE] = toInt(input.substr(pos1, 2));
      array2[SECOND] = toInt(input.substr(pos2));
    });
    function localeIsPM(input) {
      return (input + "").toLowerCase().charAt(0) === "p";
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
    function localeMeridiem(hours2, minutes2, isLower) {
      if (hours2 > 11) {
        return isLower ? "pm" : "PM";
      } else {
        return isLower ? "am" : "AM";
      }
    }
    var baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };
    var locales = {}, localeFamilies = {}, globalLocale;
    function commonPrefix(arr1, arr2) {
      var i2, minl = Math.min(arr1.length, arr2.length);
      for (i2 = 0; i2 < minl; i2 += 1) {
        if (arr1[i2] !== arr2[i2]) {
          return i2;
        }
      }
      return minl;
    }
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace("_", "-") : key;
    }
    function chooseLocale(names) {
      var i2 = 0, j, next, locale2, split;
      while (i2 < names.length) {
        split = normalizeLocale(names[i2]).split("-");
        j = split.length;
        next = normalizeLocale(names[i2 + 1]);
        next = next ? next.split("-") : null;
        while (j > 0) {
          locale2 = loadLocale(split.slice(0, j).join("-"));
          if (locale2) {
            return locale2;
          }
          if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
            break;
          }
          j--;
        }
        i2++;
      }
      return globalLocale;
    }
    function isLocaleNameSane(name) {
      return !!(name && name.match("^[^/\\\\]*$"));
    }
    function loadLocale(name) {
      var oldLocale = null, aliasedRequire;
      if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
        try {
          oldLocale = globalLocale._abbr;
          aliasedRequire = require;
          aliasedRequire("./locale/" + name);
          getSetGlobalLocale(oldLocale);
        } catch (e) {
          locales[name] = null;
        }
      }
      return locales[name];
    }
    function getSetGlobalLocale(key, values) {
      var data;
      if (key) {
        if (isUndefined$1(values)) {
          data = getLocale(key);
        } else {
          data = defineLocale(key, values);
        }
        if (data) {
          globalLocale = data;
        } else {
          if (typeof console !== "undefined" && console.warn) {
            console.warn(
              "Locale " + key + " not found. Did you forget to load it?"
            );
          }
        }
      }
      return globalLocale._abbr;
    }
    function defineLocale(name, config2) {
      if (config2 !== null) {
        var locale2, parentConfig = baseConfig;
        config2.abbr = name;
        if (locales[name] != null) {
          deprecateSimple(
            "defineLocaleOverride",
            "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
          );
          parentConfig = locales[name]._config;
        } else if (config2.parentLocale != null) {
          if (locales[config2.parentLocale] != null) {
            parentConfig = locales[config2.parentLocale]._config;
          } else {
            locale2 = loadLocale(config2.parentLocale);
            if (locale2 != null) {
              parentConfig = locale2._config;
            } else {
              if (!localeFamilies[config2.parentLocale]) {
                localeFamilies[config2.parentLocale] = [];
              }
              localeFamilies[config2.parentLocale].push({
                name,
                config: config2
              });
              return null;
            }
          }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config2));
        if (localeFamilies[name]) {
          localeFamilies[name].forEach(function(x2) {
            defineLocale(x2.name, x2.config);
          });
        }
        getSetGlobalLocale(name);
        return locales[name];
      } else {
        delete locales[name];
        return null;
      }
    }
    function updateLocale(name, config2) {
      if (config2 != null) {
        var locale2, tmpLocale, parentConfig = baseConfig;
        if (locales[name] != null && locales[name].parentLocale != null) {
          locales[name].set(mergeConfigs(locales[name]._config, config2));
        } else {
          tmpLocale = loadLocale(name);
          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }
          config2 = mergeConfigs(parentConfig, config2);
          if (tmpLocale == null) {
            config2.abbr = name;
          }
          locale2 = new Locale(config2);
          locale2.parentLocale = locales[name];
          locales[name] = locale2;
        }
        getSetGlobalLocale(name);
      } else {
        if (locales[name] != null) {
          if (locales[name].parentLocale != null) {
            locales[name] = locales[name].parentLocale;
            if (name === getSetGlobalLocale()) {
              getSetGlobalLocale(name);
            }
          } else if (locales[name] != null) {
            delete locales[name];
          }
        }
      }
      return locales[name];
    }
    function getLocale(key) {
      var locale2;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
      }
      if (!key) {
        return globalLocale;
      }
      if (!isArray$1(key)) {
        locale2 = loadLocale(key);
        if (locale2) {
          return locale2;
        }
        key = [key];
      }
      return chooseLocale(key);
    }
    function listLocales() {
      return keys$1(locales);
    }
    function checkOverflow(m2) {
      var overflow, a2 = m2._a;
      if (a2 && getParsingFlags(m2).overflow === -2) {
        overflow = a2[MONTH] < 0 || a2[MONTH] > 11 ? MONTH : a2[DATE] < 1 || a2[DATE] > daysInMonth(a2[YEAR], a2[MONTH]) ? DATE : a2[HOUR] < 0 || a2[HOUR] > 24 || a2[HOUR] === 24 && (a2[MINUTE] !== 0 || a2[SECOND] !== 0 || a2[MILLISECOND] !== 0) ? HOUR : a2[MINUTE] < 0 || a2[MINUTE] > 59 ? MINUTE : a2[SECOND] < 0 || a2[SECOND] > 59 ? SECOND : a2[MILLISECOND] < 0 || a2[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m2)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE;
        }
        if (getParsingFlags(m2)._overflowWeeks && overflow === -1) {
          overflow = WEEK;
        }
        if (getParsingFlags(m2)._overflowWeekday && overflow === -1) {
          overflow = WEEKDAY;
        }
        getParsingFlags(m2).overflow = overflow;
      }
      return m2;
    }
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
      ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
      ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
      ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
      ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
      ["YYYY-DDD", /\d{4}-\d{3}/],
      ["YYYY-MM", /\d{4}-\d\d/, false],
      ["YYYYYYMMDD", /[+-]\d{10}/],
      ["YYYYMMDD", /\d{8}/],
      ["GGGG[W]WWE", /\d{4}W\d{3}/],
      ["GGGG[W]WW", /\d{4}W\d{2}/, false],
      ["YYYYDDD", /\d{7}/],
      ["YYYYMM", /\d{6}/, false],
      ["YYYY", /\d{4}/, false]
    ], isoTimes = [
      ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
      ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
      ["HH:mm:ss", /\d\d:\d\d:\d\d/],
      ["HH:mm", /\d\d:\d\d/],
      ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
      ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
      ["HHmmss", /\d\d\d\d\d\d/],
      ["HHmm", /\d\d\d\d/],
      ["HH", /\d\d/]
    ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
      UT: 0,
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    function configFromISO(config2) {
      var i2, l, string2 = config2._i, match = extendedIsoRegex.exec(string2) || basicIsoRegex.exec(string2), allowTime, dateFormat, timeFormat2, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
      if (match) {
        getParsingFlags(config2).iso = true;
        for (i2 = 0, l = isoDatesLen; i2 < l; i2++) {
          if (isoDates[i2][1].exec(match[1])) {
            dateFormat = isoDates[i2][0];
            allowTime = isoDates[i2][2] !== false;
            break;
          }
        }
        if (dateFormat == null) {
          config2._isValid = false;
          return;
        }
        if (match[3]) {
          for (i2 = 0, l = isoTimesLen; i2 < l; i2++) {
            if (isoTimes[i2][1].exec(match[3])) {
              timeFormat2 = (match[2] || " ") + isoTimes[i2][0];
              break;
            }
          }
          if (timeFormat2 == null) {
            config2._isValid = false;
            return;
          }
        }
        if (!allowTime && timeFormat2 != null) {
          config2._isValid = false;
          return;
        }
        if (match[4]) {
          if (tzRegex.exec(match[4])) {
            tzFormat = "Z";
          } else {
            config2._isValid = false;
            return;
          }
        }
        config2._f = dateFormat + (timeFormat2 || "") + (tzFormat || "");
        configFromStringAndFormat(config2);
      } else {
        config2._isValid = false;
      }
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
      var result = [
        untruncateYear(yearStr),
        defaultLocaleMonthsShort.indexOf(monthStr),
        parseInt(dayStr, 10),
        parseInt(hourStr, 10),
        parseInt(minuteStr, 10)
      ];
      if (secondStr) {
        result.push(parseInt(secondStr, 10));
      }
      return result;
    }
    function untruncateYear(yearStr) {
      var year = parseInt(yearStr, 10);
      if (year <= 49) {
        return 2e3 + year;
      } else if (year <= 999) {
        return 1900 + year;
      }
      return year;
    }
    function preprocessRFC2822(s2) {
      return s2.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
    }
    function checkWeekday(weekdayStr, parsedInput, config2) {
      if (weekdayStr) {
        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
          parsedInput[0],
          parsedInput[1],
          parsedInput[2]
        ).getDay();
        if (weekdayProvided !== weekdayActual) {
          getParsingFlags(config2).weekdayMismatch = true;
          config2._isValid = false;
          return false;
        }
      }
      return true;
    }
    function calculateOffset$1(obsOffset, militaryOffset, numOffset) {
      if (obsOffset) {
        return obsOffsets[obsOffset];
      } else if (militaryOffset) {
        return 0;
      } else {
        var hm = parseInt(numOffset, 10), m2 = hm % 100, h = (hm - m2) / 100;
        return h * 60 + m2;
      }
    }
    function configFromRFC2822(config2) {
      var match = rfc2822.exec(preprocessRFC2822(config2._i)), parsedArray;
      if (match) {
        parsedArray = extractFromRFC2822Strings(
          match[4],
          match[3],
          match[2],
          match[5],
          match[6],
          match[7]
        );
        if (!checkWeekday(match[1], parsedArray, config2)) {
          return;
        }
        config2._a = parsedArray;
        config2._tzm = calculateOffset$1(match[8], match[9], match[10]);
        config2._d = createUTCDate.apply(null, config2._a);
        config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
        getParsingFlags(config2).rfc2822 = true;
      } else {
        config2._isValid = false;
      }
    }
    function configFromString(config2) {
      var matched = aspNetJsonRegex.exec(config2._i);
      if (matched !== null) {
        config2._d = /* @__PURE__ */ new Date(+matched[1]);
        return;
      }
      configFromISO(config2);
      if (config2._isValid === false) {
        delete config2._isValid;
      } else {
        return;
      }
      configFromRFC2822(config2);
      if (config2._isValid === false) {
        delete config2._isValid;
      } else {
        return;
      }
      if (config2._strict) {
        config2._isValid = false;
      } else {
        hooks.createFromInputFallback(config2);
      }
    }
    hooks.createFromInputFallback = deprecate(
      "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
      function(config2) {
        config2._d = /* @__PURE__ */ new Date(config2._i + (config2._useUTC ? " UTC" : ""));
      }
    );
    function defaults$1(a2, b, c2) {
      if (a2 != null) {
        return a2;
      }
      if (b != null) {
        return b;
      }
      return c2;
    }
    function currentDateArray(config2) {
      var nowValue = new Date(hooks.now());
      if (config2._useUTC) {
        return [
          nowValue.getUTCFullYear(),
          nowValue.getUTCMonth(),
          nowValue.getUTCDate()
        ];
      }
      return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }
    function configFromArray(config2) {
      var i2, date2, input = [], currentDate, expectedWeekday, yearToUse;
      if (config2._d) {
        return;
      }
      currentDate = currentDateArray(config2);
      if (config2._w && config2._a[DATE] == null && config2._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config2);
      }
      if (config2._dayOfYear != null) {
        yearToUse = defaults$1(config2._a[YEAR], currentDate[YEAR]);
        if (config2._dayOfYear > daysInYear(yearToUse) || config2._dayOfYear === 0) {
          getParsingFlags(config2)._overflowDayOfYear = true;
        }
        date2 = createUTCDate(yearToUse, 0, config2._dayOfYear);
        config2._a[MONTH] = date2.getUTCMonth();
        config2._a[DATE] = date2.getUTCDate();
      }
      for (i2 = 0; i2 < 3 && config2._a[i2] == null; ++i2) {
        config2._a[i2] = input[i2] = currentDate[i2];
      }
      for (; i2 < 7; i2++) {
        config2._a[i2] = input[i2] = config2._a[i2] == null ? i2 === 2 ? 1 : 0 : config2._a[i2];
      }
      if (config2._a[HOUR] === 24 && config2._a[MINUTE] === 0 && config2._a[SECOND] === 0 && config2._a[MILLISECOND] === 0) {
        config2._nextDay = true;
        config2._a[HOUR] = 0;
      }
      config2._d = (config2._useUTC ? createUTCDate : createDate).apply(
        null,
        input
      );
      expectedWeekday = config2._useUTC ? config2._d.getUTCDay() : config2._d.getDay();
      if (config2._tzm != null) {
        config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
      }
      if (config2._nextDay) {
        config2._a[HOUR] = 24;
      }
      if (config2._w && typeof config2._w.d !== "undefined" && config2._w.d !== expectedWeekday) {
        getParsingFlags(config2).weekdayMismatch = true;
      }
    }
    function dayOfYearFromWeekInfo(config2) {
      var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
      w = config2._w;
      if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;
        weekYear = defaults$1(
          w.GG,
          config2._a[YEAR],
          weekOfYear(createLocal(), 1, 4).year
        );
        week = defaults$1(w.W, 1);
        weekday = defaults$1(w.E, 1);
        if (weekday < 1 || weekday > 7) {
          weekdayOverflow = true;
        }
      } else {
        dow = config2._locale._week.dow;
        doy = config2._locale._week.doy;
        curWeek = weekOfYear(createLocal(), dow, doy);
        weekYear = defaults$1(w.gg, config2._a[YEAR], curWeek.year);
        week = defaults$1(w.w, curWeek.week);
        if (w.d != null) {
          weekday = w.d;
          if (weekday < 0 || weekday > 6) {
            weekdayOverflow = true;
          }
        } else if (w.e != null) {
          weekday = w.e + dow;
          if (w.e < 0 || w.e > 6) {
            weekdayOverflow = true;
          }
        } else {
          weekday = dow;
        }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config2)._overflowWeeks = true;
      } else if (weekdayOverflow != null) {
        getParsingFlags(config2)._overflowWeekday = true;
      } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config2._a[YEAR] = temp.year;
        config2._dayOfYear = temp.dayOfYear;
      }
    }
    hooks.ISO_8601 = function() {
    };
    hooks.RFC_2822 = function() {
    };
    function configFromStringAndFormat(config2) {
      if (config2._f === hooks.ISO_8601) {
        configFromISO(config2);
        return;
      }
      if (config2._f === hooks.RFC_2822) {
        configFromRFC2822(config2);
        return;
      }
      config2._a = [];
      getParsingFlags(config2).empty = true;
      var string2 = "" + config2._i, i2, parsedInput, tokens2, token2, skipped, stringLength = string2.length, totalParsedInputLength = 0, era, tokenLen;
      tokens2 = expandFormat(config2._f, config2._locale).match(formattingTokens) || [];
      tokenLen = tokens2.length;
      for (i2 = 0; i2 < tokenLen; i2++) {
        token2 = tokens2[i2];
        parsedInput = (string2.match(getParseRegexForToken(token2, config2)) || [])[0];
        if (parsedInput) {
          skipped = string2.substr(0, string2.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config2).unusedInput.push(skipped);
          }
          string2 = string2.slice(
            string2.indexOf(parsedInput) + parsedInput.length
          );
          totalParsedInputLength += parsedInput.length;
        }
        if (formatTokenFunctions[token2]) {
          if (parsedInput) {
            getParsingFlags(config2).empty = false;
          } else {
            getParsingFlags(config2).unusedTokens.push(token2);
          }
          addTimeToArrayFromToken(token2, parsedInput, config2);
        } else if (config2._strict && !parsedInput) {
          getParsingFlags(config2).unusedTokens.push(token2);
        }
      }
      getParsingFlags(config2).charsLeftOver = stringLength - totalParsedInputLength;
      if (string2.length > 0) {
        getParsingFlags(config2).unusedInput.push(string2);
      }
      if (config2._a[HOUR] <= 12 && getParsingFlags(config2).bigHour === true && config2._a[HOUR] > 0) {
        getParsingFlags(config2).bigHour = void 0;
      }
      getParsingFlags(config2).parsedDateParts = config2._a.slice(0);
      getParsingFlags(config2).meridiem = config2._meridiem;
      config2._a[HOUR] = meridiemFixWrap(
        config2._locale,
        config2._a[HOUR],
        config2._meridiem
      );
      era = getParsingFlags(config2).era;
      if (era !== null) {
        config2._a[YEAR] = config2._locale.erasConvertYear(era, config2._a[YEAR]);
      }
      configFromArray(config2);
      checkOverflow(config2);
    }
    function meridiemFixWrap(locale2, hour, meridiem2) {
      var isPm;
      if (meridiem2 == null) {
        return hour;
      }
      if (locale2.meridiemHour != null) {
        return locale2.meridiemHour(hour, meridiem2);
      } else if (locale2.isPM != null) {
        isPm = locale2.isPM(meridiem2);
        if (isPm && hour < 12) {
          hour += 12;
        }
        if (!isPm && hour === 12) {
          hour = 0;
        }
        return hour;
      } else {
        return hour;
      }
    }
    function configFromStringAndArray(config2) {
      var tempConfig, bestMoment, scoreToBeat, i2, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config2._f.length;
      if (configfLen === 0) {
        getParsingFlags(config2).invalidFormat = true;
        config2._d = /* @__PURE__ */ new Date(NaN);
        return;
      }
      for (i2 = 0; i2 < configfLen; i2++) {
        currentScore = 0;
        validFormatFound = false;
        tempConfig = copyConfig({}, config2);
        if (config2._useUTC != null) {
          tempConfig._useUTC = config2._useUTC;
        }
        tempConfig._f = config2._f[i2];
        configFromStringAndFormat(tempConfig);
        if (isValid$1(tempConfig)) {
          validFormatFound = true;
        }
        currentScore += getParsingFlags(tempConfig).charsLeftOver;
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (!bestFormatIsValid) {
          if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
            if (validFormatFound) {
              bestFormatIsValid = true;
            }
          }
        } else {
          if (currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }
      }
      extend$1(config2, bestMoment || tempConfig);
    }
    function configFromObject(config2) {
      if (config2._d) {
        return;
      }
      var i2 = normalizeObjectUnits(config2._i), dayOrDate = i2.day === void 0 ? i2.date : i2.day;
      config2._a = map$2(
        [i2.year, i2.month, dayOrDate, i2.hour, i2.minute, i2.second, i2.millisecond],
        function(obj) {
          return obj && parseInt(obj, 10);
        }
      );
      configFromArray(config2);
    }
    function createFromConfig(config2) {
      var res = new Moment(checkOverflow(prepareConfig(config2)));
      if (res._nextDay) {
        res.add(1, "d");
        res._nextDay = void 0;
      }
      return res;
    }
    function prepareConfig(config2) {
      var input = config2._i, format2 = config2._f;
      config2._locale = config2._locale || getLocale(config2._l);
      if (input === null || format2 === void 0 && input === "") {
        return createInvalid({ nullInput: true });
      }
      if (typeof input === "string") {
        config2._i = input = config2._locale.preparse(input);
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input));
      } else if (isDate(input)) {
        config2._d = input;
      } else if (isArray$1(format2)) {
        configFromStringAndArray(config2);
      } else if (format2) {
        configFromStringAndFormat(config2);
      } else {
        configFromInput(config2);
      }
      if (!isValid$1(config2)) {
        config2._d = null;
      }
      return config2;
    }
    function configFromInput(config2) {
      var input = config2._i;
      if (isUndefined$1(input)) {
        config2._d = new Date(hooks.now());
      } else if (isDate(input)) {
        config2._d = new Date(input.valueOf());
      } else if (typeof input === "string") {
        configFromString(config2);
      } else if (isArray$1(input)) {
        config2._a = map$2(input.slice(0), function(obj) {
          return parseInt(obj, 10);
        });
        configFromArray(config2);
      } else if (isObject$2(input)) {
        configFromObject(config2);
      } else if (isNumber$2(input)) {
        config2._d = new Date(input);
      } else {
        hooks.createFromInputFallback(config2);
      }
    }
    function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
      var c2 = {};
      if (format2 === true || format2 === false) {
        strict = format2;
        format2 = void 0;
      }
      if (locale2 === true || locale2 === false) {
        strict = locale2;
        locale2 = void 0;
      }
      if (isObject$2(input) && isObjectEmpty(input) || isArray$1(input) && input.length === 0) {
        input = void 0;
      }
      c2._isAMomentObject = true;
      c2._useUTC = c2._isUTC = isUTC;
      c2._l = locale2;
      c2._i = input;
      c2._f = format2;
      c2._strict = strict;
      return createFromConfig(c2);
    }
    function createLocal(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, false);
    }
    var prototypeMin = deprecate(
      "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }
    ), prototypeMax = deprecate(
      "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    function pickBy(fn, moments) {
      var res, i2;
      if (moments.length === 1 && isArray$1(moments[0])) {
        moments = moments[0];
      }
      if (!moments.length) {
        return createLocal();
      }
      res = moments[0];
      for (i2 = 1; i2 < moments.length; ++i2) {
        if (!moments[i2].isValid() || moments[i2][fn](res)) {
          res = moments[i2];
        }
      }
      return res;
    }
    function min$2() {
      var args = [].slice.call(arguments, 0);
      return pickBy("isBefore", args);
    }
    function max$2() {
      var args = [].slice.call(arguments, 0);
      return pickBy("isAfter", args);
    }
    var now = function() {
      return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
    };
    var ordering = [
      "year",
      "quarter",
      "month",
      "week",
      "day",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    function isDurationValid(m2) {
      var key, unitHasDecimal = false, i2, orderLen = ordering.length;
      for (key in m2) {
        if (hasOwnProp(m2, key) && !(indexOf.call(ordering, key) !== -1 && (m2[key] == null || !isNaN(m2[key])))) {
          return false;
        }
      }
      for (i2 = 0; i2 < orderLen; ++i2) {
        if (m2[ordering[i2]]) {
          if (unitHasDecimal) {
            return false;
          }
          if (parseFloat(m2[ordering[i2]]) !== toInt(m2[ordering[i2]])) {
            unitHasDecimal = true;
          }
        }
      }
      return true;
    }
    function isValid$1$1() {
      return this._isValid;
    }
    function createInvalid$1() {
      return createDuration(NaN);
    }
    function Duration(duration) {
      var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
      this._isValid = isDurationValid(normalizedInput);
      this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
      minutes2 * 6e4 + // 1000 * 60
      hours2 * 1e3 * 60 * 60;
      this._days = +days2 + weeks2 * 7;
      this._months = +months2 + quarters * 3 + years2 * 12;
      this._data = {};
      this._locale = getLocale();
      this._bubble();
    }
    function isDuration(obj) {
      return obj instanceof Duration;
    }
    function absRound(number2) {
      if (number2 < 0) {
        return Math.round(-1 * number2) * -1;
      } else {
        return Math.round(number2);
      }
    }
    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i2;
      for (i2 = 0; i2 < len; i2++) {
        if (toInt(array1[i2]) !== toInt(array2[i2])) {
          diffs++;
        }
      }
      return diffs + lengthDiff;
    }
    function offset(token2, separator) {
      addFormatToken(token2, 0, 0, function() {
        var offset2 = this.utcOffset(), sign2 = "+";
        if (offset2 < 0) {
          offset2 = -offset2;
          sign2 = "-";
        }
        return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
      });
    }
    offset("Z", ":");
    offset("ZZ", "");
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken(["Z", "ZZ"], function(input, array2, config2) {
      config2._useUTC = true;
      config2._tzm = offsetFromString(matchShortOffset, input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string2) {
      var matches = (string2 || "").match(matcher), chunk, parts, minutes2;
      if (matches === null) {
        return null;
      }
      chunk = matches[matches.length - 1] || [];
      parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
      minutes2 = +(parts[1] * 60) + toInt(parts[2]);
      return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
    }
    function cloneWithOffset(input, model) {
      var res, diff2;
      if (model._isUTC) {
        res = model.clone();
        diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        res._d.setTime(res._d.valueOf() + diff2);
        hooks.updateOffset(res, false);
        return res;
      } else {
        return createLocal(input).local();
      }
    }
    function getDateOffset(m2) {
      return -Math.round(m2._d.getTimezoneOffset());
    }
    hooks.updateOffset = function() {
    };
    function getSetOffset(input, keepLocalTime, keepMinutes) {
      var offset2 = this._offset || 0, localAdjust;
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        if (typeof input === "string") {
          input = offsetFromString(matchShortOffset, input);
          if (input === null) {
            return this;
          }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, "m");
        }
        if (offset2 !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            addSubtract(
              this,
              createDuration(input - offset2, "m"),
              1,
              false
            );
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            hooks.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
        return this;
      } else {
        return this._isUTC ? offset2 : getDateOffset(this);
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== "string") {
          input = -input;
        }
        this.utcOffset(input, keepLocalTime);
        return this;
      } else {
        return -this.utcOffset();
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), "m");
        }
      }
      return this;
    }
    function setOffsetToParsedOffset() {
      if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
      } else if (typeof this._i === "string") {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
          this.utcOffset(tZone);
        } else {
          this.utcOffset(0, true);
        }
      }
      return this;
    }
    function hasAlignedHourOffset(input) {
      if (!this.isValid()) {
        return false;
      }
      input = input ? createLocal(input).utcOffset() : 0;
      return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
      return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
      if (!isUndefined$1(this._isDSTShifted)) {
        return this._isDSTShifted;
      }
      var c2 = {}, other;
      copyConfig(c2, this);
      c2 = prepareConfig(c2);
      if (c2._a) {
        other = c2._isUTC ? createUTC(c2._a) : createLocal(c2._a);
        this._isDSTShifted = this.isValid() && compareArrays(c2._a, other.toArray()) > 0;
      } else {
        this._isDSTShifted = false;
      }
      return this._isDSTShifted;
    }
    function isLocal() {
      return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
      return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
      return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
      var duration = input, match = null, sign2, ret, diffRes;
      if (isDuration(input)) {
        duration = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        };
      } else if (isNumber$2(input) || !isNaN(+input)) {
        duration = {};
        if (key) {
          duration[key] = +input;
        } else {
          duration.milliseconds = +input;
        }
      } else if (match = aspNetRegex.exec(input)) {
        sign2 = match[1] === "-" ? -1 : 1;
        duration = {
          y: 0,
          d: toInt(match[DATE]) * sign2,
          h: toInt(match[HOUR]) * sign2,
          m: toInt(match[MINUTE]) * sign2,
          s: toInt(match[SECOND]) * sign2,
          ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
          // the millisecond decimal point is included in the match
        };
      } else if (match = isoRegex.exec(input)) {
        sign2 = match[1] === "-" ? -1 : 1;
        duration = {
          y: parseIso(match[2], sign2),
          M: parseIso(match[3], sign2),
          w: parseIso(match[4], sign2),
          d: parseIso(match[5], sign2),
          h: parseIso(match[6], sign2),
          m: parseIso(match[7], sign2),
          s: parseIso(match[8], sign2)
        };
      } else if (duration == null) {
        duration = {};
      } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
        diffRes = momentsDifference(
          createLocal(duration.from),
          createLocal(duration.to)
        );
        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
      }
      ret = new Duration(duration);
      if (isDuration(input) && hasOwnProp(input, "_locale")) {
        ret._locale = input._locale;
      }
      if (isDuration(input) && hasOwnProp(input, "_isValid")) {
        ret._isValid = input._isValid;
      }
      return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign2) {
      var res = inp && parseFloat(inp.replace(",", "."));
      return (isNaN(res) ? 0 : res) * sign2;
    }
    function positiveMomentsDifference(base, other) {
      var res = {};
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, "M").isAfter(other)) {
        --res.months;
      }
      res.milliseconds = +other - +base.clone().add(res.months, "M");
      return res;
    }
    function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
        return { milliseconds: 0, months: 0 };
      }
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
      }
      return res;
    }
    function createAdder(direction, name) {
      return function(val, period) {
        var dur, tmp;
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(
            name,
            "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
          );
          tmp = val;
          val = period;
          period = tmp;
        }
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
      };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
      var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
      if (!mom.isValid()) {
        return;
      }
      updateOffset = updateOffset == null ? true : updateOffset;
      if (months2) {
        setMonth(mom, get$2(mom, "Month") + months2 * isAdding);
      }
      if (days2) {
        set$1$1(mom, "Date", get$2(mom, "Date") + days2 * isAdding);
      }
      if (milliseconds2) {
        mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
      }
      if (updateOffset) {
        hooks.updateOffset(mom, days2 || months2);
      }
    }
    var add$1 = createAdder(1, "add"), subtract$1 = createAdder(-1, "subtract");
    function isString$2(input) {
      return typeof input === "string" || input instanceof String;
    }
    function isMomentInput(input) {
      return isMoment(input) || isDate(input) || isString$2(input) || isNumber$2(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
    }
    function isMomentInputObject(input) {
      var objectTest = isObject$2(input) && !isObjectEmpty(input), propertyTest = false, properties = [
        "years",
        "year",
        "y",
        "months",
        "month",
        "M",
        "days",
        "day",
        "d",
        "dates",
        "date",
        "D",
        "hours",
        "hour",
        "h",
        "minutes",
        "minute",
        "m",
        "seconds",
        "second",
        "s",
        "milliseconds",
        "millisecond",
        "ms"
      ], i2, property, propertyLen = properties.length;
      for (i2 = 0; i2 < propertyLen; i2 += 1) {
        property = properties[i2];
        propertyTest = propertyTest || hasOwnProp(input, property);
      }
      return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
      var arrayTest = isArray$1(input), dataTypeTest = false;
      if (arrayTest) {
        dataTypeTest = input.filter(function(item) {
          return !isNumber$2(item) && isString$2(input);
        }).length === 0;
      }
      return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
      var objectTest = isObject$2(input) && !isObjectEmpty(input), propertyTest = false, properties = [
        "sameDay",
        "nextDay",
        "lastDay",
        "nextWeek",
        "lastWeek",
        "sameElse"
      ], i2, property;
      for (i2 = 0; i2 < properties.length; i2 += 1) {
        property = properties[i2];
        propertyTest = propertyTest || hasOwnProp(input, property);
      }
      return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now2) {
      var diff2 = myMoment.diff(now2, "days", true);
      return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
    }
    function calendar$1$1(time2, formats) {
      if (arguments.length === 1) {
        if (!arguments[0]) {
          time2 = void 0;
          formats = void 0;
        } else if (isMomentInput(arguments[0])) {
          time2 = arguments[0];
          formats = void 0;
        } else if (isCalendarSpec(arguments[0])) {
          formats = arguments[0];
          time2 = void 0;
        }
      }
      var now2 = time2 || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction$2(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
      return this.format(
        output || this.localeData().calendar(format2, this, createLocal(now2))
      );
    }
    function clone$1() {
      return new Moment(this);
    }
    function isAfter(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() > localInput.valueOf();
      } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
      }
    }
    function isBefore(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() < localInput.valueOf();
      } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
      }
    }
    function isBetween(from2, to2, units, inclusivity) {
      var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
      if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
        return false;
      }
      inclusivity = inclusivity || "()";
      return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input), inputMs;
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() === localInput.valueOf();
      } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
      }
    }
    function isSameOrAfter(input, units) {
      return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
      return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
      var that, zoneDelta, output;
      if (!this.isValid()) {
        return NaN;
      }
      that = cloneWithOffset(input, this);
      if (!that.isValid()) {
        return NaN;
      }
      zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
      units = normalizeUnits(units);
      switch (units) {
        case "year":
          output = monthDiff(this, that) / 12;
          break;
        case "month":
          output = monthDiff(this, that);
          break;
        case "quarter":
          output = monthDiff(this, that) / 3;
          break;
        case "second":
          output = (this - that) / 1e3;
          break;
        // 1000
        case "minute":
          output = (this - that) / 6e4;
          break;
        // 1000 * 60
        case "hour":
          output = (this - that) / 36e5;
          break;
        // 1000 * 60 * 60
        case "day":
          output = (this - that - zoneDelta) / 864e5;
          break;
        // 1000 * 60 * 60 * 24, negate dst
        case "week":
          output = (this - that - zoneDelta) / 6048e5;
          break;
        // 1000 * 60 * 60 * 24 * 7, negate dst
        default:
          output = this - that;
      }
      return asFloat ? output : absFloor(output);
    }
    function monthDiff(a2, b) {
      if (a2.date() < b.date()) {
        return -monthDiff(b, a2);
      }
      var wholeMonthDiff = (b.year() - a2.year()) * 12 + (b.month() - a2.month()), anchor = a2.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
      if (b - anchor < 0) {
        anchor2 = a2.clone().add(wholeMonthDiff - 1, "months");
        adjust = (b - anchor) / (anchor - anchor2);
      } else {
        anchor2 = a2.clone().add(wholeMonthDiff + 1, "months");
        adjust = (b - anchor) / (anchor2 - anchor);
      }
      return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    function toString$1() {
      return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
    }
    function toISOString(keepOffset) {
      if (!this.isValid()) {
        return null;
      }
      var utc = keepOffset !== true, m2 = utc ? this.clone().utc() : this;
      if (m2.year() < 0 || m2.year() > 9999) {
        return formatMoment(
          m2,
          utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      if (isFunction$2(Date.prototype.toISOString)) {
        if (utc) {
          return this.toDate().toISOString();
        } else {
          return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m2, "Z"));
        }
      }
      return formatMoment(
        m2,
        utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
      );
    }
    function inspect() {
      if (!this.isValid()) {
        return "moment.invalid(/* " + this._i + " */)";
      }
      var func = "moment", zone = "", prefix2, year, datetime2, suffix;
      if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
        zone = "Z";
      }
      prefix2 = "[" + func + '("]';
      year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
      datetime2 = "-MM-DD[T]HH:mm:ss.SSS";
      suffix = zone + '[")]';
      return this.format(prefix2 + year + datetime2 + suffix);
    }
    function format$1(inputString) {
      if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
      }
      var output = formatMoment(this, inputString);
      return this.localeData().postformat(output);
    }
    function from(time2, withoutSuffix) {
      if (this.isValid() && (isMoment(time2) && time2.isValid() || createLocal(time2).isValid())) {
        return createDuration({ to: this, from: time2 }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function fromNow(withoutSuffix) {
      return this.from(createLocal(), withoutSuffix);
    }
    function to(time2, withoutSuffix) {
      if (this.isValid() && (isMoment(time2) && time2.isValid() || createLocal(time2).isValid())) {
        return createDuration({ from: this, to: time2 }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function toNow(withoutSuffix) {
      return this.to(createLocal(), withoutSuffix);
    }
    function locale$2(key) {
      var newLocaleData;
      if (key === void 0) {
        return this._locale._abbr;
      } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    }
    var lang = deprecate(
      "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
      function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      }
    );
    function localeData() {
      return this._locale;
    }
    var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    function mod$1(dividend, divisor) {
      return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y2, m2, d) {
      if (y2 < 100 && y2 >= 0) {
        return new Date(y2 + 400, m2, d) - MS_PER_400_YEARS;
      } else {
        return new Date(y2, m2, d).valueOf();
      }
    }
    function utcStartOfDate(y2, m2, d) {
      if (y2 < 100 && y2 >= 0) {
        return Date.UTC(y2 + 400, m2, d) - MS_PER_400_YEARS;
      } else {
        return Date.UTC(y2, m2, d);
      }
    }
    function startOf(units) {
      var time2, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time2 = startOfDate(this.year(), 0, 1);
          break;
        case "quarter":
          time2 = startOfDate(
            this.year(),
            this.month() - this.month() % 3,
            1
          );
          break;
        case "month":
          time2 = startOfDate(this.year(), this.month(), 1);
          break;
        case "week":
          time2 = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday()
          );
          break;
        case "isoWeek":
          time2 = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1)
          );
          break;
        case "day":
        case "date":
          time2 = startOfDate(this.year(), this.month(), this.date());
          break;
        case "hour":
          time2 = this._d.valueOf();
          time2 -= mod$1(
            time2 + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          );
          break;
        case "minute":
          time2 = this._d.valueOf();
          time2 -= mod$1(time2, MS_PER_MINUTE);
          break;
        case "second":
          time2 = this._d.valueOf();
          time2 -= mod$1(time2, MS_PER_SECOND);
          break;
      }
      this._d.setTime(time2);
      hooks.updateOffset(this, true);
      return this;
    }
    function endOf(units) {
      var time2, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time2 = startOfDate(this.year() + 1, 0, 1) - 1;
          break;
        case "quarter":
          time2 = startOfDate(
            this.year(),
            this.month() - this.month() % 3 + 3,
            1
          ) - 1;
          break;
        case "month":
          time2 = startOfDate(this.year(), this.month() + 1, 1) - 1;
          break;
        case "week":
          time2 = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday() + 7
          ) - 1;
          break;
        case "isoWeek":
          time2 = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1) + 7
          ) - 1;
          break;
        case "day":
        case "date":
          time2 = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
          break;
        case "hour":
          time2 = this._d.valueOf();
          time2 += MS_PER_HOUR - mod$1(
            time2 + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          ) - 1;
          break;
        case "minute":
          time2 = this._d.valueOf();
          time2 += MS_PER_MINUTE - mod$1(time2, MS_PER_MINUTE) - 1;
          break;
        case "second":
          time2 = this._d.valueOf();
          time2 += MS_PER_SECOND - mod$1(time2, MS_PER_SECOND) - 1;
          break;
      }
      this._d.setTime(time2);
      hooks.updateOffset(this, true);
      return this;
    }
    function valueOf() {
      return this._d.valueOf() - (this._offset || 0) * 6e4;
    }
    function unix() {
      return Math.floor(this.valueOf() / 1e3);
    }
    function toDate() {
      return new Date(this.valueOf());
    }
    function toArray$1() {
      var m2 = this;
      return [
        m2.year(),
        m2.month(),
        m2.date(),
        m2.hour(),
        m2.minute(),
        m2.second(),
        m2.millisecond()
      ];
    }
    function toObject() {
      var m2 = this;
      return {
        years: m2.year(),
        months: m2.month(),
        date: m2.date(),
        hours: m2.hours(),
        minutes: m2.minutes(),
        seconds: m2.seconds(),
        milliseconds: m2.milliseconds()
      };
    }
    function toJSON() {
      return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
      return isValid$1(this);
    }
    function parsingFlags() {
      return extend$1({}, getParsingFlags(this));
    }
    function invalidAt() {
      return getParsingFlags(this).overflow;
    }
    function creationData() {
      return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
      };
    }
    addFormatToken("N", 0, 0, "eraAbbr");
    addFormatToken("NN", 0, 0, "eraAbbr");
    addFormatToken("NNN", 0, 0, "eraAbbr");
    addFormatToken("NNNN", 0, 0, "eraName");
    addFormatToken("NNNNN", 0, 0, "eraNarrow");
    addFormatToken("y", ["y", 1], "yo", "eraYear");
    addFormatToken("y", ["yy", 2], 0, "eraYear");
    addFormatToken("y", ["yyy", 3], 0, "eraYear");
    addFormatToken("y", ["yyyy", 4], 0, "eraYear");
    addRegexToken("N", matchEraAbbr);
    addRegexToken("NN", matchEraAbbr);
    addRegexToken("NNN", matchEraAbbr);
    addRegexToken("NNNN", matchEraName);
    addRegexToken("NNNNN", matchEraNarrow);
    addParseToken(
      ["N", "NN", "NNN", "NNNN", "NNNNN"],
      function(input, array2, config2, token2) {
        var era = config2._locale.erasParse(input, token2, config2._strict);
        if (era) {
          getParsingFlags(config2).era = era;
        } else {
          getParsingFlags(config2).invalidEra = input;
        }
      }
    );
    addRegexToken("y", matchUnsigned);
    addRegexToken("yy", matchUnsigned);
    addRegexToken("yyy", matchUnsigned);
    addRegexToken("yyyy", matchUnsigned);
    addRegexToken("yo", matchEraYearOrdinal);
    addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
    addParseToken(["yo"], function(input, array2, config2, token2) {
      var match;
      if (config2._locale._eraYearOrdinalRegex) {
        match = input.match(config2._locale._eraYearOrdinalRegex);
      }
      if (config2._locale.eraYearOrdinalParse) {
        array2[YEAR] = config2._locale.eraYearOrdinalParse(input, match);
      } else {
        array2[YEAR] = parseInt(input, 10);
      }
    });
    function localeEras(m2, format2) {
      var i2, l, date2, eras = this._eras || getLocale("en")._eras;
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        switch (typeof eras[i2].since) {
          case "string":
            date2 = hooks(eras[i2].since).startOf("day");
            eras[i2].since = date2.valueOf();
            break;
        }
        switch (typeof eras[i2].until) {
          case "undefined":
            eras[i2].until = Infinity;
            break;
          case "string":
            date2 = hooks(eras[i2].until).startOf("day").valueOf();
            eras[i2].until = date2.valueOf();
            break;
        }
      }
      return eras;
    }
    function localeErasParse(eraName, format2, strict) {
      var i2, l, eras = this.eras(), name, abbr, narrow;
      eraName = eraName.toUpperCase();
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        name = eras[i2].name.toUpperCase();
        abbr = eras[i2].abbr.toUpperCase();
        narrow = eras[i2].narrow.toUpperCase();
        if (strict) {
          switch (format2) {
            case "N":
            case "NN":
            case "NNN":
              if (abbr === eraName) {
                return eras[i2];
              }
              break;
            case "NNNN":
              if (name === eraName) {
                return eras[i2];
              }
              break;
            case "NNNNN":
              if (narrow === eraName) {
                return eras[i2];
              }
              break;
          }
        } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
          return eras[i2];
        }
      }
    }
    function localeErasConvertYear(era, year) {
      var dir = era.since <= era.until ? 1 : -1;
      if (year === void 0) {
        return hooks(era.since).year();
      } else {
        return hooks(era.since).year() + (year - era.offset) * dir;
      }
    }
    function getEraName() {
      var i2, l, val, eras = this.localeData().eras();
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i2].since <= val && val <= eras[i2].until) {
          return eras[i2].name;
        }
        if (eras[i2].until <= val && val <= eras[i2].since) {
          return eras[i2].name;
        }
      }
      return "";
    }
    function getEraNarrow() {
      var i2, l, val, eras = this.localeData().eras();
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i2].since <= val && val <= eras[i2].until) {
          return eras[i2].narrow;
        }
        if (eras[i2].until <= val && val <= eras[i2].since) {
          return eras[i2].narrow;
        }
      }
      return "";
    }
    function getEraAbbr() {
      var i2, l, val, eras = this.localeData().eras();
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i2].since <= val && val <= eras[i2].until) {
          return eras[i2].abbr;
        }
        if (eras[i2].until <= val && val <= eras[i2].since) {
          return eras[i2].abbr;
        }
      }
      return "";
    }
    function getEraYear() {
      var i2, l, dir, val, eras = this.localeData().eras();
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        dir = eras[i2].since <= eras[i2].until ? 1 : -1;
        val = this.clone().startOf("day").valueOf();
        if (eras[i2].since <= val && val <= eras[i2].until || eras[i2].until <= val && val <= eras[i2].since) {
          return (this.year() - hooks(eras[i2].since).year()) * dir + eras[i2].offset;
        }
      }
      return this.year();
    }
    function erasNameRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNameRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
      if (!hasOwnProp(this, "_erasAbbrRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNarrowRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale2) {
      return locale2.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale2) {
      return locale2.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale2) {
      return locale2.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale2) {
      return locale2._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
      var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i2, l, erasName, erasAbbr, erasNarrow, eras = this.eras();
      for (i2 = 0, l = eras.length; i2 < l; ++i2) {
        erasName = regexEscape(eras[i2].name);
        erasAbbr = regexEscape(eras[i2].abbr);
        erasNarrow = regexEscape(eras[i2].narrow);
        namePieces.push(erasName);
        abbrPieces.push(erasAbbr);
        narrowPieces.push(erasNarrow);
        mixedPieces.push(erasName);
        mixedPieces.push(erasAbbr);
        mixedPieces.push(erasNarrow);
      }
      this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
      this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
      this._erasNarrowRegex = new RegExp(
        "^(" + narrowPieces.join("|") + ")",
        "i"
      );
    }
    addFormatToken(0, ["gg", 2], 0, function() {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ["GG", 2], 0, function() {
      return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token2, getter) {
      addFormatToken(0, [token2, token2.length], 0, getter);
    }
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken(
      ["gggg", "ggggg", "GGGG", "GGGGG"],
      function(input, week, config2, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      }
    );
    addWeekParseToken(["gg", "GG"], function(input, week, config2, token2) {
      week[token2] = hooks.parseTwoDigitYear(input);
    });
    function getSetWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.week(),
        this.weekday() + this.localeData()._week.dow,
        this.localeData()._week.dow,
        this.localeData()._week.doy
      );
    }
    function getSetISOWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.isoWeek(),
        this.isoWeekday(),
        1,
        4
      );
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
      return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
        return weekOfYear(this, dow, doy).year;
      } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
          week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
      }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date2 = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
      this.year(date2.getUTCFullYear());
      this.month(date2.getUTCMonth());
      this.date(date2.getUTCDate());
      return this;
    }
    addFormatToken("Q", 0, "Qo", "quarter");
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array2) {
      array2[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken("D", ["DD", 2], "Do", "date");
    addRegexToken("D", match1to2, match1to2NoLeadingZero);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale2) {
      return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(["D", "DD"], DATE);
    addParseToken("Do", function(input, array2) {
      array2[DATE] = toInt(input.match(match1to2)[0]);
    });
    var getSetDayOfMonth = makeGetSet("Date", true);
    addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken(["DDD", "DDDD"], function(input, array2, config2) {
      config2._dayOfYear = toInt(input);
    });
    function getSetDayOfYear(input) {
      var dayOfYear = Math.round(
        (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
      ) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
    }
    addFormatToken("m", ["mm", 2], 0, "minute");
    addRegexToken("m", match1to2, match1to2HasZero);
    addRegexToken("mm", match1to2, match2);
    addParseToken(["m", "mm"], MINUTE);
    var getSetMinute = makeGetSet("Minutes", false);
    addFormatToken("s", ["ss", 2], 0, "second");
    addRegexToken("s", match1to2, match1to2HasZero);
    addRegexToken("ss", match1to2, match2);
    addParseToken(["s", "ss"], SECOND);
    var getSetSecond = makeGetSet("Seconds", false);
    addFormatToken("S", 0, 0, function() {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ["SS", 2], 0, function() {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ["SSS", 3], 0, "millisecond");
    addFormatToken(0, ["SSSS", 4], 0, function() {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ["SSSSS", 5], 0, function() {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ["SSSSSS", 6], 0, function() {
      return this.millisecond() * 1e3;
    });
    addFormatToken(0, ["SSSSSSS", 7], 0, function() {
      return this.millisecond() * 1e4;
    });
    addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
      return this.millisecond() * 1e5;
    });
    addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
      return this.millisecond() * 1e6;
    });
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    var token, getSetMillisecond;
    for (token = "SSSS"; token.length <= 9; token += "S") {
      addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array2) {
      array2[MILLISECOND] = toInt(("0." + input) * 1e3);
    }
    for (token = "S"; token.length <= 9; token += "S") {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet("Milliseconds", false);
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    function getZoneAbbr() {
      return this._isUTC ? "UTC" : "";
    }
    function getZoneName() {
      return this._isUTC ? "Coordinated Universal Time" : "";
    }
    var proto = Moment.prototype;
    proto.add = add$1;
    proto.calendar = calendar$1$1;
    proto.clone = clone$1;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format$1;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale$2;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract$1;
    proto.toArray = toArray$1;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== "undefined" && Symbol.for != null) {
      proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString$1;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
      "dates accessor is deprecated. Use date instead.",
      getSetDayOfMonth
    );
    proto.months = deprecate(
      "months accessor is deprecated. Use month instead",
      getSetMonth
    );
    proto.years = deprecate(
      "years accessor is deprecated. Use year instead",
      getSetYear
    );
    proto.zone = deprecate(
      "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
      getSetZone
    );
    proto.isDSTShifted = deprecate(
      "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
      isDaylightSavingTimeShifted
    );
    function createUnix(input) {
      return createLocal(input * 1e3);
    }
    function createInZone() {
      return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string2) {
      return string2;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar$1;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal$1;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set$1;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1$1(format2, index2, field, setter) {
      var locale2 = getLocale(), utc = createUTC().set(setter, index2);
      return locale2[field](utc, format2);
    }
    function listMonthsImpl(format2, index2, field) {
      if (isNumber$2(format2)) {
        index2 = format2;
        format2 = void 0;
      }
      format2 = format2 || "";
      if (index2 != null) {
        return get$1$1(format2, index2, field, "month");
      }
      var i2, out = [];
      for (i2 = 0; i2 < 12; i2++) {
        out[i2] = get$1$1(format2, i2, field, "month");
      }
      return out;
    }
    function listWeekdaysImpl(localeSorted, format2, index2, field) {
      if (typeof localeSorted === "boolean") {
        if (isNumber$2(format2)) {
          index2 = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      } else {
        format2 = localeSorted;
        index2 = format2;
        localeSorted = false;
        if (isNumber$2(format2)) {
          index2 = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      }
      var locale2 = getLocale(), shift2 = localeSorted ? locale2._week.dow : 0, i2, out = [];
      if (index2 != null) {
        return get$1$1(format2, (index2 + shift2) % 7, field, "day");
      }
      for (i2 = 0; i2 < 7; i2++) {
        out[i2] = get$1$1(format2, (i2 + shift2) % 7, field, "day");
      }
      return out;
    }
    function listMonths(format2, index2) {
      return listMonthsImpl(format2, index2, "months");
    }
    function listMonthsShort(format2, index2) {
      return listMonthsImpl(format2, index2, "monthsShort");
    }
    function listWeekdays(localeSorted, format2, index2) {
      return listWeekdaysImpl(localeSorted, format2, index2, "weekdays");
    }
    function listWeekdaysShort(localeSorted, format2, index2) {
      return listWeekdaysImpl(localeSorted, format2, index2, "weekdaysShort");
    }
    function listWeekdaysMin(localeSorted, format2, index2) {
      return listWeekdaysImpl(localeSorted, format2, index2, "weekdaysMin");
    }
    getSetGlobalLocale("en", {
      eras: [
        {
          since: "0001-01-01",
          until: Infinity,
          offset: 1,
          name: "Anno Domini",
          narrow: "AD",
          abbr: "AD"
        },
        {
          since: "0000-12-31",
          until: -Infinity,
          offset: 1,
          name: "Before Christ",
          narrow: "BC",
          abbr: "BC"
        }
      ],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function(number2) {
        var b = number2 % 10, output = toInt(number2 % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
        return number2 + output;
      }
    });
    hooks.lang = deprecate(
      "moment.lang is deprecated. Use moment.locale instead.",
      getSetGlobalLocale
    );
    hooks.langData = deprecate(
      "moment.langData is deprecated. Use moment.localeData instead.",
      getLocale
    );
    var mathAbs = Math.abs;
    function abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this;
    }
    function addSubtract$1(duration, input, value, direction) {
      var other = createDuration(input, value);
      duration._milliseconds += direction * other._milliseconds;
      duration._days += direction * other._days;
      duration._months += direction * other._months;
      return duration._bubble();
    }
    function add$1$1(input, value) {
      return addSubtract$1(this, input, value, 1);
    }
    function subtract$1$1(input, value) {
      return addSubtract$1(this, input, value, -1);
    }
    function absCeil(number2) {
      if (number2 < 0) {
        return Math.floor(number2);
      } else {
        return Math.ceil(number2);
      }
    }
    function bubble() {
      var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
      if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
        milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
        days2 = 0;
        months2 = 0;
      }
      data.milliseconds = milliseconds2 % 1e3;
      seconds2 = absFloor(milliseconds2 / 1e3);
      data.seconds = seconds2 % 60;
      minutes2 = absFloor(seconds2 / 60);
      data.minutes = minutes2 % 60;
      hours2 = absFloor(minutes2 / 60);
      data.hours = hours2 % 24;
      days2 += absFloor(hours2 / 24);
      monthsFromDays = absFloor(daysToMonths(days2));
      months2 += monthsFromDays;
      days2 -= absCeil(monthsToDays(monthsFromDays));
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      data.days = days2;
      data.months = months2;
      data.years = years2;
      return this;
    }
    function daysToMonths(days2) {
      return days2 * 4800 / 146097;
    }
    function monthsToDays(months2) {
      return months2 * 146097 / 4800;
    }
    function as(units) {
      if (!this.isValid()) {
        return NaN;
      }
      var days2, months2, milliseconds2 = this._milliseconds;
      units = normalizeUnits(units);
      if (units === "month" || units === "quarter" || units === "year") {
        days2 = this._days + milliseconds2 / 864e5;
        months2 = this._months + daysToMonths(days2);
        switch (units) {
          case "month":
            return months2;
          case "quarter":
            return months2 / 3;
          case "year":
            return months2 / 12;
        }
      } else {
        days2 = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
          case "week":
            return days2 / 7 + milliseconds2 / 6048e5;
          case "day":
            return days2 + milliseconds2 / 864e5;
          case "hour":
            return days2 * 24 + milliseconds2 / 36e5;
          case "minute":
            return days2 * 1440 + milliseconds2 / 6e4;
          case "second":
            return days2 * 86400 + milliseconds2 / 1e3;
          // Math.floor prevents floating point math errors here
          case "millisecond":
            return Math.floor(days2 * 864e5) + milliseconds2;
          default:
            throw new Error("Unknown unit " + units);
        }
      }
    }
    function makeAs(alias) {
      return function() {
        return this.as(alias);
      };
    }
    var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y"), valueOf$1 = asMilliseconds;
    function clone$1$1() {
      return createDuration(this);
    }
    function get$2$1(units) {
      units = normalizeUnits(units);
      return this.isValid() ? this[units + "s"]() : NaN;
    }
    function makeGetter(name) {
      return function() {
        return this.isValid() ? this._data[name] : NaN;
      };
    }
    var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
    function weeks() {
      return absFloor(this.days() / 7);
    }
    var round$1 = Math.round, thresholds = {
      ss: 44,
      // a few seconds to seconds
      s: 45,
      // seconds to minute
      m: 45,
      // minutes to hour
      h: 22,
      // hours to day
      d: 26,
      // days to month/week
      w: null,
      // weeks to month
      M: 11
      // months to year
    };
    function substituteTimeAgo(string2, number2, withoutSuffix, isFuture, locale2) {
      return locale2.relativeTime(number2 || 1, !!withoutSuffix, string2, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
      var duration = createDuration(posNegDuration).abs(), seconds2 = round$1(duration.as("s")), minutes2 = round$1(duration.as("m")), hours2 = round$1(duration.as("h")), days2 = round$1(duration.as("d")), months2 = round$1(duration.as("M")), weeks2 = round$1(duration.as("w")), years2 = round$1(duration.as("y")), a2 = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
      if (thresholds2.w != null) {
        a2 = a2 || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
      }
      a2 = a2 || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
      a2[2] = withoutSuffix;
      a2[3] = +posNegDuration > 0;
      a2[4] = locale2;
      return substituteTimeAgo.apply(null, a2);
    }
    function getSetRelativeTimeRounding(roundingFunction) {
      if (roundingFunction === void 0) {
        return round$1;
      }
      if (typeof roundingFunction === "function") {
        round$1 = roundingFunction;
        return true;
      }
      return false;
    }
    function getSetRelativeTimeThreshold(threshold2, limit) {
      if (thresholds[threshold2] === void 0) {
        return false;
      }
      if (limit === void 0) {
        return thresholds[threshold2];
      }
      thresholds[threshold2] = limit;
      if (threshold2 === "s") {
        thresholds.ss = limit - 1;
      }
      return true;
    }
    function humanize(argWithSuffix, argThresholds) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var withSuffix = false, th = thresholds, locale2, output;
      if (typeof argWithSuffix === "object") {
        argThresholds = argWithSuffix;
        argWithSuffix = false;
      }
      if (typeof argWithSuffix === "boolean") {
        withSuffix = argWithSuffix;
      }
      if (typeof argThresholds === "object") {
        th = Object.assign({}, thresholds, argThresholds);
        if (argThresholds.s != null && argThresholds.ss == null) {
          th.ss = argThresholds.s - 1;
        }
      }
      locale2 = this.localeData();
      output = relativeTime$1(this, !withSuffix, th, locale2);
      if (withSuffix) {
        output = locale2.pastFuture(+this, output);
      }
      return locale2.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign$1(x2) {
      return (x2 > 0) - (x2 < 0) || +x2;
    }
    function toISOString$1() {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s2, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
      if (!total) {
        return "P0D";
      }
      minutes2 = absFloor(seconds2 / 60);
      hours2 = absFloor(minutes2 / 60);
      seconds2 %= 60;
      minutes2 %= 60;
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      s2 = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
      totalSign = total < 0 ? "-" : "";
      ymSign = sign$1(this._months) !== sign$1(total) ? "-" : "";
      daysSign = sign$1(this._days) !== sign$1(total) ? "-" : "";
      hmsSign = sign$1(this._milliseconds) !== sign$1(total) ? "-" : "";
      return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s2 + "S" : "");
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1$1;
    proto$2.abs = abs;
    proto$2.add = add$1$1;
    proto$2.subtract = subtract$1$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1$1;
    proto$2.get = get$2$1;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale$2;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate(
      "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
      toISOString$1
    );
    proto$2.lang = lang;
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array2, config2) {
      config2._d = new Date(parseFloat(input) * 1e3);
    });
    addParseToken("x", function(input, array2, config2) {
      config2._d = new Date(toInt(input));
    });
    //! moment.js
    hooks.version = "2.30.1";
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min$2;
    hooks.max = max$2;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
      // <input type="datetime-local" />
      DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
      // <input type="datetime-local" step="1" />
      DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
      // <input type="datetime-local" step="0.001" />
      DATE: "YYYY-MM-DD",
      // <input type="date" />
      TIME: "HH:mm",
      // <input type="time" />
      TIME_SECONDS: "HH:mm:ss",
      // <input type="time" step="1" />
      TIME_MS: "HH:mm:ss.SSS",
      // <input type="time" step="0.001" />
      WEEK: "GGGG-[W]WW",
      // <input type="week" />
      MONTH: "YYYY-MM"
      // <input type="month" />
    };
    const complaintColumns = [
      {
        accessorKey: "title",
        header: "Judul",
        size: 300
      },
      {
        accessorKey: "address",
        header: "Alamat",
        size: 300
      },
      {
        accessorKey: "createdAt",
        header: "Dibuat Pada",
        size: 150,
        cell: ({ row }) => hooks(row.getValue("createdAt")).format("DD MMM YYYY, HH:mm")
      },
      {
        accessorKey: "user",
        header: "Pelapor",
        size: 200,
        cell: ({ row }) => row.getValue("user").fullname
      },
      {
        accessorKey: "status",
        header: "Status",
        size: 150,
        cell: ({ row }) => {
          const status = row.getValue("status");
          const lookup = statusLookup[status];
          return /* @__PURE__ */ jsxRuntimeExports.jsx(Badge, { className: lookup.coloring, children: lookup.label });
        }
      }
    ];
    function Complaint() {
      const queryClient2 = useQueryClient();
      const setPage = useLayoutState((state) => state.set);
      const [deleteState, setDeleteState] = reactExports.useState(null);
      const deleteMutation = useMutation({
        mutationFn: deleteComplaint,
        onSuccess: () => {
          queryClient2.invalidateQueries({ queryKey: ["complaints"] });
        }
      });
      reactExports.useEffect(() => {
        setPage({
          title: "Pengaduan",
          active: "Pengaduan"
        });
      }, []);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          DataTable,
          {
            columns: [
              {
                accessorKey: "id",
                header: "",
                cell: () => null
              },
              {
                id: "actions",
                size: 60,
                cell: ({ row }) => {
                  const id = row.getValue("id");
                  return /* @__PURE__ */ jsxRuntimeExports.jsxs(DropdownMenu, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(DropdownMenuTrigger, { asChild: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "ghost", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Ellipsis, { className: "h-4 w-4" }) }) }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(DropdownMenuContent, { align: "start", className: "w-40", children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        DropdownMenuItem,
                        {
                          onClick: () => {
                            setDeleteState({ id });
                          },
                          asChild: true,
                          children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Link, { to: `/complaint/${id}`, children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Eye, {}),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Lihat" })
                          ] })
                        }
                      ),
                      /* @__PURE__ */ jsxRuntimeExports.jsxs(
                        DropdownMenuItem,
                        {
                          onClick: () => {
                            setDeleteState({ id });
                          },
                          children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsx(Trash, {}),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Hapus" })
                          ]
                        }
                      )
                    ] })
                  ] });
                }
              },
              ...complaintColumns
            ],
            queryKey: ["complaints"],
            queryFn: indexComplaint,
            searchFilter: (value) => (el) => el.title.includes(value)
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          AlertDialog,
          {
            open: Boolean(deleteState),
            onOpenChange: (value) => setDeleteState((state) => value ? state : null),
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs(AlertDialogContent, { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(AlertDialogHeader, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(AlertDialogTitle, { children: "Yakin?" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(AlertDialogDescription, { children: "Anda akan menghapus laporan ini" })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(AlertDialogFooter, { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(AlertDialogCancel, { children: "Batal" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  AlertDialogAction,
                  {
                    onClick: () => {
                      toast.promise(deleteMutation.mutateAsync(deleteState.id), {
                        loading: "Menghapus",
                        success: "Berhasil dihapus"
                      });
                    },
                    children: "Ya, Lanjutkan"
                  }
                )
              ] })
            ] })
          }
        )
      ] });
    }
    var NAME = "Label";
    var Label$2 = reactExports.forwardRef((props, forwardedRef) => {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Primitive.label,
        {
          ...props,
          ref: forwardedRef,
          onMouseDown: (event) => {
            var _a2;
            const target = event.target;
            if (target.closest("button, input, select, textarea")) return;
            (_a2 = props.onMouseDown) == null ? void 0 : _a2.call(props, event);
            if (!event.defaultPrevented && event.detail > 1) event.preventDefault();
          }
        }
      );
    });
    Label$2.displayName = NAME;
    var Root = Label$2;
    var isCheckBoxInput = (element) => element.type === "checkbox";
    var isDateObject = (value) => value instanceof Date;
    var isNullOrUndefined = (value) => value == null;
    const isObjectType = (value) => typeof value === "object";
    var isObject$1 = (value) => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);
    var getEventValue = (event) => isObject$1(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;
    var getNodeParentName = (name) => name.substring(0, name.search(/\.\d+(\.|$)/)) || name;
    var isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));
    var isPlainObject$1 = (tempObject) => {
      const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
      return isObject$1(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
    };
    var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
    function cloneObject(data) {
      let copy2;
      const isArray2 = Array.isArray(data);
      const isFileListInstance = typeof FileList !== "undefined" ? data instanceof FileList : false;
      if (data instanceof Date) {
        copy2 = new Date(data);
      } else if (data instanceof Set) {
        copy2 = new Set(data);
      } else if (!(isWeb && (data instanceof Blob || isFileListInstance)) && (isArray2 || isObject$1(data))) {
        copy2 = isArray2 ? [] : {};
        if (!isArray2 && !isPlainObject$1(data)) {
          copy2 = data;
        } else {
          for (const key in data) {
            if (data.hasOwnProperty(key)) {
              copy2[key] = cloneObject(data[key]);
            }
          }
        }
      } else {
        return data;
      }
      return copy2;
    }
    var compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];
    var isUndefined = (val) => val === void 0;
    var get$1 = (object2, path, defaultValue) => {
      if (!path || !isObject$1(object2)) {
        return defaultValue;
      }
      const result = compact(path.split(/[,[\].]+?/)).reduce((result2, key) => isNullOrUndefined(result2) ? result2 : result2[key], object2);
      return isUndefined(result) || result === object2 ? isUndefined(object2[path]) ? defaultValue : object2[path] : result;
    };
    var isBoolean$1 = (value) => typeof value === "boolean";
    var isKey = (value) => /^\w*$/.test(value);
    var stringToPath = (input) => compact(input.replace(/["|']|\]/g, "").split(/\.|\[/));
    var set = (object2, path, value) => {
      let index2 = -1;
      const tempPath = isKey(path) ? [path] : stringToPath(path);
      const length = tempPath.length;
      const lastIndex = length - 1;
      while (++index2 < length) {
        const key = tempPath[index2];
        let newValue = value;
        if (index2 !== lastIndex) {
          const objValue = object2[key];
          newValue = isObject$1(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index2 + 1]) ? [] : {};
        }
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return;
        }
        object2[key] = newValue;
        object2 = object2[key];
      }
    };
    const EVENTS = {
      BLUR: "blur",
      FOCUS_OUT: "focusout",
      CHANGE: "change"
    };
    const VALIDATION_MODE = {
      onBlur: "onBlur",
      onChange: "onChange",
      onSubmit: "onSubmit",
      onTouched: "onTouched",
      all: "all"
    };
    const INPUT_VALIDATION_RULES = {
      max: "max",
      min: "min",
      maxLength: "maxLength",
      minLength: "minLength",
      pattern: "pattern",
      required: "required",
      validate: "validate"
    };
    const HookFormContext = React.createContext(null);
    const useFormContext = () => React.useContext(HookFormContext);
    const FormProvider = (props) => {
      const { children, ...data } = props;
      return React.createElement(HookFormContext.Provider, { value: data }, children);
    };
    var getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {
      const result = {
        defaultValues: control._defaultValues
      };
      for (const key in formState) {
        Object.defineProperty(result, key, {
          get: () => {
            const _key = key;
            if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
              control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
            }
            localProxyFormState && (localProxyFormState[_key] = true);
            return formState[_key];
          }
        });
      }
      return result;
    };
    const useIsomorphicLayoutEffect = typeof window !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
    function useFormState(props) {
      const methods = useFormContext();
      const { control = methods.control, disabled, name, exact } = props || {};
      const [formState, updateFormState] = React.useState(control._formState);
      const _localProxyFormState = React.useRef({
        isDirty: false,
        isLoading: false,
        dirtyFields: false,
        touchedFields: false,
        validatingFields: false,
        isValidating: false,
        isValid: false,
        errors: false
      });
      useIsomorphicLayoutEffect(() => control._subscribe({
        name,
        formState: _localProxyFormState.current,
        exact,
        callback: (formState2) => {
          !disabled && updateFormState({
            ...control._formState,
            ...formState2
          });
        }
      }), [name, disabled, exact]);
      React.useEffect(() => {
        _localProxyFormState.current.isValid && control._setValid(true);
      }, [control]);
      return React.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);
    }
    var isString$1 = (value) => typeof value === "string";
    var generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {
      if (isString$1(names)) {
        isGlobal && _names.watch.add(names);
        return get$1(formValues, names, defaultValue);
      }
      if (Array.isArray(names)) {
        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get$1(formValues, fieldName)));
      }
      isGlobal && (_names.watchAll = true);
      return formValues;
    };
    function useWatch(props) {
      const methods = useFormContext();
      const { control = methods.control, name, defaultValue, disabled, exact } = props || {};
      const _defaultValue = React.useRef(defaultValue);
      const [value, updateValue] = React.useState(control._getWatch(name, _defaultValue.current));
      useIsomorphicLayoutEffect(() => control._subscribe({
        name,
        formState: {
          values: true
        },
        exact,
        callback: (formState) => !disabled && updateValue(generateWatchOutput(name, control._names, formState.values || control._formValues, false, _defaultValue.current))
      }), [name, control, disabled, exact]);
      React.useEffect(() => control._removeUnmounted());
      return value;
    }
    function useController(props) {
      const methods = useFormContext();
      const { name, disabled, control = methods.control, shouldUnregister } = props;
      const isArrayField = isNameInFieldArray(control._names.array, name);
      const value = useWatch({
        control,
        name,
        defaultValue: get$1(control._formValues, name, get$1(control._defaultValues, name, props.defaultValue)),
        exact: true
      });
      const formState = useFormState({
        control,
        name,
        exact: true
      });
      const _props = React.useRef(props);
      const _registerProps = React.useRef(control.register(name, {
        ...props.rules,
        value,
        ...isBoolean$1(props.disabled) ? { disabled: props.disabled } : {}
      }));
      const fieldState = React.useMemo(() => Object.defineProperties({}, {
        invalid: {
          enumerable: true,
          get: () => !!get$1(formState.errors, name)
        },
        isDirty: {
          enumerable: true,
          get: () => !!get$1(formState.dirtyFields, name)
        },
        isTouched: {
          enumerable: true,
          get: () => !!get$1(formState.touchedFields, name)
        },
        isValidating: {
          enumerable: true,
          get: () => !!get$1(formState.validatingFields, name)
        },
        error: {
          enumerable: true,
          get: () => get$1(formState.errors, name)
        }
      }), [formState, name]);
      const onChange = React.useCallback((event) => _registerProps.current.onChange({
        target: {
          value: getEventValue(event),
          name
        },
        type: EVENTS.CHANGE
      }), [name]);
      const onBlur = React.useCallback(() => _registerProps.current.onBlur({
        target: {
          value: get$1(control._formValues, name),
          name
        },
        type: EVENTS.BLUR
      }), [name, control._formValues]);
      const ref = React.useCallback((elm) => {
        const field2 = get$1(control._fields, name);
        if (field2 && elm) {
          field2._f.ref = {
            focus: () => elm.focus(),
            select: () => elm.select(),
            setCustomValidity: (message) => elm.setCustomValidity(message),
            reportValidity: () => elm.reportValidity()
          };
        }
      }, [control._fields, name]);
      const field = React.useMemo(() => ({
        name,
        value,
        ...isBoolean$1(disabled) || formState.disabled ? { disabled: formState.disabled || disabled } : {},
        onChange,
        onBlur,
        ref
      }), [name, disabled, formState.disabled, onChange, onBlur, ref, value]);
      React.useEffect(() => {
        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;
        control.register(name, {
          ..._props.current.rules,
          ...isBoolean$1(_props.current.disabled) ? { disabled: _props.current.disabled } : {}
        });
        const updateMounted = (name2, value2) => {
          const field2 = get$1(control._fields, name2);
          if (field2 && field2._f) {
            field2._f.mount = value2;
          }
        };
        updateMounted(name, true);
        if (_shouldUnregisterField) {
          const value2 = cloneObject(get$1(control._options.defaultValues, name));
          set(control._defaultValues, name, value2);
          if (isUndefined(get$1(control._formValues, name))) {
            set(control._formValues, name, value2);
          }
        }
        !isArrayField && control.register(name);
        return () => {
          (isArrayField ? _shouldUnregisterField && !control._state.action : _shouldUnregisterField) ? control.unregister(name) : updateMounted(name, false);
        };
      }, [name, control, isArrayField, shouldUnregister]);
      React.useEffect(() => {
        control._setDisabledField({
          disabled,
          name
        });
      }, [disabled, name, control]);
      return React.useMemo(() => ({
        field,
        formState,
        fieldState
      }), [field, formState, fieldState]);
    }
    const Controller = (props) => props.render(useController(props));
    var appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? {
      ...errors[name],
      types: {
        ...errors[name] && errors[name].types ? errors[name].types : {},
        [type]: message || true
      }
    } : {};
    var convertToArrayPayload = (value) => Array.isArray(value) ? value : [value];
    var createSubject = () => {
      let _observers2 = [];
      const next = (value) => {
        for (const observer of _observers2) {
          observer.next && observer.next(value);
        }
      };
      const subscribe = (observer) => {
        _observers2.push(observer);
        return {
          unsubscribe: () => {
            _observers2 = _observers2.filter((o2) => o2 !== observer);
          }
        };
      };
      const unsubscribe = () => {
        _observers2 = [];
      };
      return {
        get observers() {
          return _observers2;
        },
        next,
        subscribe,
        unsubscribe
      };
    };
    var isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);
    function deepEqual$1(object1, object2) {
      if (isPrimitive(object1) || isPrimitive(object2)) {
        return object1 === object2;
      }
      if (isDateObject(object1) && isDateObject(object2)) {
        return object1.getTime() === object2.getTime();
      }
      const keys1 = Object.keys(object1);
      const keys2 = Object.keys(object2);
      if (keys1.length !== keys2.length) {
        return false;
      }
      for (const key of keys1) {
        const val1 = object1[key];
        if (!keys2.includes(key)) {
          return false;
        }
        if (key !== "ref") {
          const val2 = object2[key];
          if (isDateObject(val1) && isDateObject(val2) || isObject$1(val1) && isObject$1(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual$1(val1, val2) : val1 !== val2) {
            return false;
          }
        }
      }
      return true;
    }
    var isEmptyObject = (value) => isObject$1(value) && !Object.keys(value).length;
    var isFileInput = (element) => element.type === "file";
    var isFunction$1 = (value) => typeof value === "function";
    var isHTMLElement = (value) => {
      if (!isWeb) {
        return false;
      }
      const owner = value ? value.ownerDocument : 0;
      return value instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
    };
    var isMultipleSelect = (element) => element.type === `select-multiple`;
    var isRadioInput = (element) => element.type === "radio";
    var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
    var live = (ref) => isHTMLElement(ref) && ref.isConnected;
    function baseGet(object2, updatePath) {
      const length = updatePath.slice(0, -1).length;
      let index2 = 0;
      while (index2 < length) {
        object2 = isUndefined(object2) ? index2++ : object2[updatePath[index2++]];
      }
      return object2;
    }
    function isEmptyArray(obj) {
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {
          return false;
        }
      }
      return true;
    }
    function unset(object2, path) {
      const paths = Array.isArray(path) ? path : isKey(path) ? [path] : stringToPath(path);
      const childObject = paths.length === 1 ? object2 : baseGet(object2, paths);
      const index2 = paths.length - 1;
      const key = paths[index2];
      if (childObject) {
        delete childObject[key];
      }
      if (index2 !== 0 && (isObject$1(childObject) && isEmptyObject(childObject) || Array.isArray(childObject) && isEmptyArray(childObject))) {
        unset(object2, paths.slice(0, -1));
      }
      return object2;
    }
    var objectHasFunction = (data) => {
      for (const key in data) {
        if (isFunction$1(data[key])) {
          return true;
        }
      }
      return false;
    };
    function markFieldsDirty(data, fields = {}) {
      const isParentNodeArray = Array.isArray(data);
      if (isObject$1(data) || isParentNodeArray) {
        for (const key in data) {
          if (Array.isArray(data[key]) || isObject$1(data[key]) && !objectHasFunction(data[key])) {
            fields[key] = Array.isArray(data[key]) ? [] : {};
            markFieldsDirty(data[key], fields[key]);
          } else if (!isNullOrUndefined(data[key])) {
            fields[key] = true;
          }
        }
      }
      return fields;
    }
    function getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {
      const isParentNodeArray = Array.isArray(data);
      if (isObject$1(data) || isParentNodeArray) {
        for (const key in data) {
          if (Array.isArray(data[key]) || isObject$1(data[key]) && !objectHasFunction(data[key])) {
            if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {
              dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : { ...markFieldsDirty(data[key]) };
            } else {
              getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);
            }
          } else {
            dirtyFieldsFromValues[key] = !deepEqual$1(data[key], formValues[key]);
          }
        }
      }
      return dirtyFieldsFromValues;
    }
    var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));
    const defaultResult = {
      value: false,
      isValid: false
    };
    const validResult = { value: true, isValid: true };
    var getCheckboxValue = (options2) => {
      if (Array.isArray(options2)) {
        if (options2.length > 1) {
          const values = options2.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
          return { value: values, isValid: !!values.length };
        }
        return options2[0].checked && !options2[0].disabled ? (
          // @ts-expect-error expected to work in the browser
          options2[0].attributes && !isUndefined(options2[0].attributes.value) ? isUndefined(options2[0].value) || options2[0].value === "" ? validResult : { value: options2[0].value, isValid: true } : validResult
        ) : defaultResult;
      }
      return defaultResult;
    };
    var getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value) ? value : valueAsNumber ? value === "" ? NaN : value ? +value : value : valueAsDate && isString$1(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;
    const defaultReturn = {
      isValid: false,
      value: null
    };
    var getRadioValue = (options2) => Array.isArray(options2) ? options2.reduce((previous, option) => option && option.checked && !option.disabled ? {
      isValid: true,
      value: option.value
    } : previous, defaultReturn) : defaultReturn;
    function getFieldValue(_f2) {
      const ref = _f2.ref;
      if (isFileInput(ref)) {
        return ref.files;
      }
      if (isRadioInput(ref)) {
        return getRadioValue(_f2.refs).value;
      }
      if (isMultipleSelect(ref)) {
        return [...ref.selectedOptions].map(({ value }) => value);
      }
      if (isCheckBoxInput(ref)) {
        return getCheckboxValue(_f2.refs).value;
      }
      return getFieldValueAs(isUndefined(ref.value) ? _f2.ref.value : ref.value, _f2);
    }
    var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
      const fields = {};
      for (const name of fieldsNames) {
        const field = get$1(_fields, name);
        field && set(fields, name, field._f);
      }
      return {
        criteriaMode,
        names: [...fieldsNames],
        fields,
        shouldUseNativeValidation
      };
    };
    var isRegex = (value) => value instanceof RegExp;
    var getRuleValue = (rule) => isUndefined(rule) ? rule : isRegex(rule) ? rule.source : isObject$1(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;
    var getValidationModes = (mode) => ({
      isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
      isOnBlur: mode === VALIDATION_MODE.onBlur,
      isOnChange: mode === VALIDATION_MODE.onChange,
      isOnAll: mode === VALIDATION_MODE.all,
      isOnTouch: mode === VALIDATION_MODE.onTouched
    });
    const ASYNC_FUNCTION = "AsyncFunction";
    var hasPromiseValidation = (fieldReference) => !!fieldReference && !!fieldReference.validate && !!(isFunction$1(fieldReference.validate) && fieldReference.validate.constructor.name === ASYNC_FUNCTION || isObject$1(fieldReference.validate) && Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION));
    var hasValidation = (options2) => options2.mount && (options2.required || options2.min || options2.max || options2.maxLength || options2.minLength || options2.pattern || options2.validate);
    var isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some((watchName) => name.startsWith(watchName) && /^\.\w+/.test(name.slice(watchName.length))));
    const iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {
      for (const key of fieldsNames || Object.keys(fields)) {
        const field = get$1(fields, key);
        if (field) {
          const { _f: _f2, ...currentField } = field;
          if (_f2) {
            if (_f2.refs && _f2.refs[0] && action(_f2.refs[0], key) && !abortEarly) {
              return true;
            } else if (_f2.ref && action(_f2.ref, _f2.name) && !abortEarly) {
              return true;
            } else {
              if (iterateFieldsByAction(currentField, action)) {
                break;
              }
            }
          } else if (isObject$1(currentField)) {
            if (iterateFieldsByAction(currentField, action)) {
              break;
            }
          }
        }
      }
      return;
    };
    function schemaErrorLookup(errors, _fields, name) {
      const error = get$1(errors, name);
      if (error || isKey(name)) {
        return {
          error,
          name
        };
      }
      const names = name.split(".");
      while (names.length) {
        const fieldName = names.join(".");
        const field = get$1(_fields, fieldName);
        const foundError = get$1(errors, fieldName);
        if (field && !Array.isArray(field) && name !== fieldName) {
          return { name };
        }
        if (foundError && foundError.type) {
          return {
            name: fieldName,
            error: foundError
          };
        }
        names.pop();
      }
      return {
        name
      };
    }
    var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
      updateFormState(formStateData);
      const { name, ...formState } = formStateData;
      return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key) => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));
    };
    var shouldSubscribeByName = (name, signalName, exact) => !name || !signalName || name === signalName || convertToArrayPayload(name).some((currentName) => currentName && (exact ? currentName === signalName : currentName.startsWith(signalName) || signalName.startsWith(currentName)));
    var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
      if (mode.isOnAll) {
        return false;
      } else if (!isSubmitted && mode.isOnTouch) {
        return !(isTouched || isBlurEvent);
      } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
        return !isBlurEvent;
      } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
        return isBlurEvent;
      }
      return true;
    };
    var unsetEmptyArray = (ref, name) => !compact(get$1(ref, name)).length && unset(ref, name);
    var updateFieldArrayRootError = (errors, error, name) => {
      const fieldArrayErrors = convertToArrayPayload(get$1(errors, name));
      set(fieldArrayErrors, "root", error[name]);
      set(errors, name, fieldArrayErrors);
      return errors;
    };
    var isMessage = (value) => isString$1(value);
    function getValidateError(result, ref, type = "validate") {
      if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean$1(result) && !result) {
        return {
          type,
          message: isMessage(result) ? result : "",
          ref
        };
      }
    }
    var getValueAndMessage = (validationData) => isObject$1(validationData) && !isRegex(validationData) ? validationData : {
      value: validationData,
      message: ""
    };
    var validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
      const { ref, refs, required, maxLength, minLength, min: min2, max: max2, pattern, validate, name, valueAsNumber, mount } = field._f;
      const inputValue = get$1(formValues, name);
      if (!mount || disabledFieldNames.has(name)) {
        return {};
      }
      const inputRef = refs ? refs[0] : ref;
      const setCustomValidity = (message) => {
        if (shouldUseNativeValidation && inputRef.reportValidity) {
          inputRef.setCustomValidity(isBoolean$1(message) ? "" : message || "");
          inputRef.reportValidity();
        }
      };
      const error = {};
      const isRadio = isRadioInput(ref);
      const isCheckBox = isCheckBoxInput(ref);
      const isRadioOrCheckbox2 = isRadio || isCheckBox;
      const isEmpty = (valueAsNumber || isFileInput(ref)) && isUndefined(ref.value) && isUndefined(inputValue) || isHTMLElement(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
      const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);
      const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
        const message = exceedMax ? maxLengthMessage : minLengthMessage;
        error[name] = {
          type: exceedMax ? maxType : minType,
          message,
          ref,
          ...appendErrorsCurry(exceedMax ? maxType : minType, message)
        };
      };
      if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean$1(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {
        const { value, message } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
        if (value) {
          error[name] = {
            type: INPUT_VALIDATION_RULES.required,
            message,
            ref: inputRef,
            ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message)
          };
          if (!validateAllFieldCriteria) {
            setCustomValidity(message);
            return error;
          }
        }
      }
      if (!isEmpty && (!isNullOrUndefined(min2) || !isNullOrUndefined(max2))) {
        let exceedMax;
        let exceedMin;
        const maxOutput = getValueAndMessage(max2);
        const minOutput = getValueAndMessage(min2);
        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
          const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
          if (!isNullOrUndefined(maxOutput.value)) {
            exceedMax = valueNumber > maxOutput.value;
          }
          if (!isNullOrUndefined(minOutput.value)) {
            exceedMin = valueNumber < minOutput.value;
          }
        } else {
          const valueDate = ref.valueAsDate || new Date(inputValue);
          const convertTimeToDate = (time2) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time2);
          const isTime = ref.type == "time";
          const isWeek = ref.type == "week";
          if (isString$1(maxOutput.value) && inputValue) {
            exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
          }
          if (isString$1(minOutput.value) && inputValue) {
            exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
          }
        }
        if (exceedMax || exceedMin) {
          getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
          if (!validateAllFieldCriteria) {
            setCustomValidity(error[name].message);
            return error;
          }
        }
      }
      if ((maxLength || minLength) && !isEmpty && (isString$1(inputValue) || isFieldArray && Array.isArray(inputValue))) {
        const maxLengthOutput = getValueAndMessage(maxLength);
        const minLengthOutput = getValueAndMessage(minLength);
        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
        const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
        if (exceedMax || exceedMin) {
          getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
          if (!validateAllFieldCriteria) {
            setCustomValidity(error[name].message);
            return error;
          }
        }
      }
      if (pattern && !isEmpty && isString$1(inputValue)) {
        const { value: patternValue, message } = getValueAndMessage(pattern);
        if (isRegex(patternValue) && !inputValue.match(patternValue)) {
          error[name] = {
            type: INPUT_VALIDATION_RULES.pattern,
            message,
            ref,
            ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message)
          };
          if (!validateAllFieldCriteria) {
            setCustomValidity(message);
            return error;
          }
        }
      }
      if (validate) {
        if (isFunction$1(validate)) {
          const result = await validate(inputValue, formValues);
          const validateError = getValidateError(result, inputRef);
          if (validateError) {
            error[name] = {
              ...validateError,
              ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message)
            };
            if (!validateAllFieldCriteria) {
              setCustomValidity(validateError.message);
              return error;
            }
          }
        } else if (isObject$1(validate)) {
          let validationResult = {};
          for (const key in validate) {
            if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {
              break;
            }
            const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);
            if (validateError) {
              validationResult = {
                ...validateError,
                ...appendErrorsCurry(key, validateError.message)
              };
              setCustomValidity(validateError.message);
              if (validateAllFieldCriteria) {
                error[name] = validationResult;
              }
            }
          }
          if (!isEmptyObject(validationResult)) {
            error[name] = {
              ref: inputRef,
              ...validationResult
            };
            if (!validateAllFieldCriteria) {
              return error;
            }
          }
        }
      }
      setCustomValidity(true);
      return error;
    };
    const defaultOptions = {
      mode: VALIDATION_MODE.onSubmit,
      reValidateMode: VALIDATION_MODE.onChange,
      shouldFocusError: true
    };
    function createFormControl(props = {}) {
      let _options = {
        ...defaultOptions,
        ...props
      };
      let _formState = {
        submitCount: 0,
        isDirty: false,
        isReady: false,
        isLoading: isFunction$1(_options.defaultValues),
        isValidating: false,
        isSubmitted: false,
        isSubmitting: false,
        isSubmitSuccessful: false,
        isValid: false,
        touchedFields: {},
        dirtyFields: {},
        validatingFields: {},
        errors: _options.errors || {},
        disabled: _options.disabled || false
      };
      const _fields = {};
      let _defaultValues = isObject$1(_options.defaultValues) || isObject$1(_options.values) ? cloneObject(_options.defaultValues || _options.values) || {} : {};
      let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
      let _state = {
        action: false,
        mount: false,
        watch: false
      };
      let _names = {
        mount: /* @__PURE__ */ new Set(),
        disabled: /* @__PURE__ */ new Set(),
        unMount: /* @__PURE__ */ new Set(),
        array: /* @__PURE__ */ new Set(),
        watch: /* @__PURE__ */ new Set()
      };
      let delayErrorCallback;
      let timer = 0;
      const _proxyFormState = {
        isDirty: false,
        dirtyFields: false,
        validatingFields: false,
        touchedFields: false,
        isValidating: false,
        isValid: false,
        errors: false
      };
      let _proxySubscribeFormState = {
        ..._proxyFormState
      };
      const _subjects = {
        array: createSubject(),
        state: createSubject()
      };
      const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
      const debounce = (callback) => (wait) => {
        clearTimeout(timer);
        timer = setTimeout(callback, wait);
      };
      const _setValid = async (shouldUpdateValid) => {
        if (!_options.disabled && (_proxyFormState.isValid || _proxySubscribeFormState.isValid || shouldUpdateValid)) {
          const isValid2 = _options.resolver ? isEmptyObject((await _runSchema()).errors) : await executeBuiltInValidation(_fields, true);
          if (isValid2 !== _formState.isValid) {
            _subjects.state.next({
              isValid: isValid2
            });
          }
        }
      };
      const _updateIsValidating = (names, isValidating) => {
        if (!_options.disabled && (_proxyFormState.isValidating || _proxyFormState.validatingFields || _proxySubscribeFormState.isValidating || _proxySubscribeFormState.validatingFields)) {
          (names || Array.from(_names.mount)).forEach((name) => {
            if (name) {
              isValidating ? set(_formState.validatingFields, name, isValidating) : unset(_formState.validatingFields, name);
            }
          });
          _subjects.state.next({
            validatingFields: _formState.validatingFields,
            isValidating: !isEmptyObject(_formState.validatingFields)
          });
        }
      };
      const _setFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
        if (args && method && !_options.disabled) {
          _state.action = true;
          if (shouldUpdateFieldsAndState && Array.isArray(get$1(_fields, name))) {
            const fieldValues = method(get$1(_fields, name), args.argA, args.argB);
            shouldSetValues && set(_fields, name, fieldValues);
          }
          if (shouldUpdateFieldsAndState && Array.isArray(get$1(_formState.errors, name))) {
            const errors = method(get$1(_formState.errors, name), args.argA, args.argB);
            shouldSetValues && set(_formState.errors, name, errors);
            unsetEmptyArray(_formState.errors, name);
          }
          if ((_proxyFormState.touchedFields || _proxySubscribeFormState.touchedFields) && shouldUpdateFieldsAndState && Array.isArray(get$1(_formState.touchedFields, name))) {
            const touchedFields = method(get$1(_formState.touchedFields, name), args.argA, args.argB);
            shouldSetValues && set(_formState.touchedFields, name, touchedFields);
          }
          if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {
            _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
          }
          _subjects.state.next({
            name,
            isDirty: _getDirty(name, values),
            dirtyFields: _formState.dirtyFields,
            errors: _formState.errors,
            isValid: _formState.isValid
          });
        } else {
          set(_formValues, name, values);
        }
      };
      const updateErrors = (name, error) => {
        set(_formState.errors, name, error);
        _subjects.state.next({
          errors: _formState.errors
        });
      };
      const _setErrors = (errors) => {
        _formState.errors = errors;
        _subjects.state.next({
          errors: _formState.errors,
          isValid: false
        });
      };
      const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {
        const field = get$1(_fields, name);
        if (field) {
          const defaultValue = get$1(_formValues, name, isUndefined(value) ? get$1(_defaultValues, name) : value);
          isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);
          _state.mount && _setValid();
        }
      };
      const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
        let shouldUpdateField = false;
        let isPreviousDirty = false;
        const output = {
          name
        };
        if (!_options.disabled) {
          if (!isBlurEvent || shouldDirty) {
            if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {
              isPreviousDirty = _formState.isDirty;
              _formState.isDirty = output.isDirty = _getDirty();
              shouldUpdateField = isPreviousDirty !== output.isDirty;
            }
            const isCurrentFieldPristine = deepEqual$1(get$1(_defaultValues, name), fieldValue);
            isPreviousDirty = !!get$1(_formState.dirtyFields, name);
            isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);
            output.dirtyFields = _formState.dirtyFields;
            shouldUpdateField = shouldUpdateField || (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) && isPreviousDirty !== !isCurrentFieldPristine;
          }
          if (isBlurEvent) {
            const isPreviousFieldTouched = get$1(_formState.touchedFields, name);
            if (!isPreviousFieldTouched) {
              set(_formState.touchedFields, name, isBlurEvent);
              output.touchedFields = _formState.touchedFields;
              shouldUpdateField = shouldUpdateField || (_proxyFormState.touchedFields || _proxySubscribeFormState.touchedFields) && isPreviousFieldTouched !== isBlurEvent;
            }
          }
          shouldUpdateField && shouldRender && _subjects.state.next(output);
        }
        return shouldUpdateField ? output : {};
      };
      const shouldRenderByError = (name, isValid2, error, fieldState) => {
        const previousFieldError = get$1(_formState.errors, name);
        const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) && isBoolean$1(isValid2) && _formState.isValid !== isValid2;
        if (_options.delayError && error) {
          delayErrorCallback = debounce(() => updateErrors(name, error));
          delayErrorCallback(_options.delayError);
        } else {
          clearTimeout(timer);
          delayErrorCallback = null;
          error ? set(_formState.errors, name, error) : unset(_formState.errors, name);
        }
        if ((error ? !deepEqual$1(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) {
          const updatedFormState = {
            ...fieldState,
            ...shouldUpdateValid && isBoolean$1(isValid2) ? { isValid: isValid2 } : {},
            errors: _formState.errors,
            name
          };
          _formState = {
            ..._formState,
            ...updatedFormState
          };
          _subjects.state.next(updatedFormState);
        }
      };
      const _runSchema = async (name) => {
        _updateIsValidating(name, true);
        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
        _updateIsValidating(name);
        return result;
      };
      const executeSchemaAndUpdateState = async (names) => {
        const { errors } = await _runSchema(names);
        if (names) {
          for (const name of names) {
            const error = get$1(errors, name);
            error ? set(_formState.errors, name, error) : unset(_formState.errors, name);
          }
        } else {
          _formState.errors = errors;
        }
        return errors;
      };
      const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {
        valid: true
      }) => {
        for (const name in fields) {
          const field = fields[name];
          if (field) {
            const { _f: _f2, ...fieldValue } = field;
            if (_f2) {
              const isFieldArrayRoot = _names.array.has(_f2.name);
              const isPromiseFunction = field._f && hasPromiseValidation(field._f);
              if (isPromiseFunction && _proxyFormState.validatingFields) {
                _updateIsValidating([name], true);
              }
              const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
              if (isPromiseFunction && _proxyFormState.validatingFields) {
                _updateIsValidating([name]);
              }
              if (fieldError[_f2.name]) {
                context.valid = false;
                if (shouldOnlyCheckValid) {
                  break;
                }
              }
              !shouldOnlyCheckValid && (get$1(fieldError, _f2.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f2.name) : set(_formState.errors, _f2.name, fieldError[_f2.name]) : unset(_formState.errors, _f2.name));
            }
            !isEmptyObject(fieldValue) && await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context);
          }
        }
        return context.valid;
      };
      const _removeUnmounted = () => {
        for (const name of _names.unMount) {
          const field = get$1(_fields, name);
          field && (field._f.refs ? field._f.refs.every((ref) => !live(ref)) : !live(field._f.ref)) && unregister(name);
        }
        _names.unMount = /* @__PURE__ */ new Set();
      };
      const _getDirty = (name, data) => !_options.disabled && (name && data && set(_formValues, name, data), !deepEqual$1(getValues(), _defaultValues));
      const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {
        ..._state.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString$1(names) ? { [names]: defaultValue } : defaultValue
      }, isGlobal, defaultValue);
      const _getFieldArray = (name) => compact(get$1(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get$1(_defaultValues, name, []) : []));
      const setFieldValue = (name, value, options2 = {}) => {
        const field = get$1(_fields, name);
        let fieldValue = value;
        if (field) {
          const fieldReference = field._f;
          if (fieldReference) {
            !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));
            fieldValue = isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? "" : value;
            if (isMultipleSelect(fieldReference.ref)) {
              [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
            } else if (fieldReference.refs) {
              if (isCheckBoxInput(fieldReference.ref)) {
                fieldReference.refs.forEach((checkboxRef) => {
                  if (!checkboxRef.defaultChecked || !checkboxRef.disabled) {
                    if (Array.isArray(fieldValue)) {
                      checkboxRef.checked = !!fieldValue.find((data) => data === checkboxRef.value);
                    } else {
                      checkboxRef.checked = fieldValue === checkboxRef.value || !!fieldValue;
                    }
                  }
                });
              } else {
                fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
              }
            } else if (isFileInput(fieldReference.ref)) {
              fieldReference.ref.value = "";
            } else {
              fieldReference.ref.value = fieldValue;
              if (!fieldReference.ref.type) {
                _subjects.state.next({
                  name,
                  values: cloneObject(_formValues)
                });
              }
            }
          }
        }
        (options2.shouldDirty || options2.shouldTouch) && updateTouchAndDirty(name, fieldValue, options2.shouldTouch, options2.shouldDirty, true);
        options2.shouldValidate && trigger(name);
      };
      const setValues = (name, value, options2) => {
        for (const fieldKey in value) {
          if (!value.hasOwnProperty(fieldKey)) {
            return;
          }
          const fieldValue = value[fieldKey];
          const fieldName = `${name}.${fieldKey}`;
          const field = get$1(_fields, fieldName);
          (_names.array.has(name) || isObject$1(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options2) : setFieldValue(fieldName, fieldValue, options2);
        }
      };
      const setValue = (name, value, options2 = {}) => {
        const field = get$1(_fields, name);
        const isFieldArray = _names.array.has(name);
        const cloneValue = cloneObject(value);
        set(_formValues, name, cloneValue);
        if (isFieldArray) {
          _subjects.array.next({
            name,
            values: cloneObject(_formValues)
          });
          if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields || _proxySubscribeFormState.isDirty || _proxySubscribeFormState.dirtyFields) && options2.shouldDirty) {
            _subjects.state.next({
              name,
              dirtyFields: getDirtyFields(_defaultValues, _formValues),
              isDirty: _getDirty(name, cloneValue)
            });
          }
        } else {
          field && !field._f && !isNullOrUndefined(cloneValue) ? setValues(name, cloneValue, options2) : setFieldValue(name, cloneValue, options2);
        }
        isWatched(name, _names) && _subjects.state.next({ ..._formState });
        _subjects.state.next({
          name: _state.mount ? name : void 0,
          values: cloneObject(_formValues)
        });
      };
      const onChange = async (event) => {
        _state.mount = true;
        const target = event.target;
        let name = target.name;
        let isFieldValueUpdated = true;
        const field = get$1(_fields, name);
        const _updateIsFieldValueUpdated = (fieldValue) => {
          isFieldValueUpdated = Number.isNaN(fieldValue) || isDateObject(fieldValue) && isNaN(fieldValue.getTime()) || deepEqual$1(fieldValue, get$1(_formValues, name, fieldValue));
        };
        const validationModeBeforeSubmit = getValidationModes(_options.mode);
        const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
        if (field) {
          let error;
          let isValid2;
          const fieldValue = target.type ? getFieldValue(field._f) : getEventValue(event);
          const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;
          const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get$1(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get$1(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
          const watched = isWatched(name, _names, isBlurEvent);
          set(_formValues, name, fieldValue);
          if (isBlurEvent) {
            field._f.onBlur && field._f.onBlur(event);
            delayErrorCallback && delayErrorCallback(0);
          } else if (field._f.onChange) {
            field._f.onChange(event);
          }
          const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);
          const shouldRender = !isEmptyObject(fieldState) || watched;
          !isBlurEvent && _subjects.state.next({
            name,
            type: event.type,
            values: cloneObject(_formValues)
          });
          if (shouldSkipValidation) {
            if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {
              if (_options.mode === "onBlur") {
                if (isBlurEvent) {
                  _setValid();
                }
              } else if (!isBlurEvent) {
                _setValid();
              }
            }
            return shouldRender && _subjects.state.next({ name, ...watched ? {} : fieldState });
          }
          !isBlurEvent && watched && _subjects.state.next({ ..._formState });
          if (_options.resolver) {
            const { errors } = await _runSchema([name]);
            _updateIsFieldValueUpdated(fieldValue);
            if (isFieldValueUpdated) {
              const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);
              const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);
              error = errorLookupResult.error;
              name = errorLookupResult.name;
              isValid2 = isEmptyObject(errors);
            }
          } else {
            _updateIsValidating([name], true);
            error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];
            _updateIsValidating([name]);
            _updateIsFieldValueUpdated(fieldValue);
            if (isFieldValueUpdated) {
              if (error) {
                isValid2 = false;
              } else if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {
                isValid2 = await executeBuiltInValidation(_fields, true);
              }
            }
          }
          if (isFieldValueUpdated) {
            field._f.deps && trigger(field._f.deps);
            shouldRenderByError(name, isValid2, error, fieldState);
          }
        }
      };
      const _focusInput = (ref, key) => {
        if (get$1(_formState.errors, key) && ref.focus) {
          ref.focus();
          return 1;
        }
        return;
      };
      const trigger = async (name, options2 = {}) => {
        let isValid2;
        let validationResult;
        const fieldNames = convertToArrayPayload(name);
        if (_options.resolver) {
          const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);
          isValid2 = isEmptyObject(errors);
          validationResult = name ? !fieldNames.some((name2) => get$1(errors, name2)) : isValid2;
        } else if (name) {
          validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
            const field = get$1(_fields, fieldName);
            return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);
          }))).every(Boolean);
          !(!validationResult && !_formState.isValid) && _setValid();
        } else {
          validationResult = isValid2 = await executeBuiltInValidation(_fields);
        }
        _subjects.state.next({
          ...!isString$1(name) || (_proxyFormState.isValid || _proxySubscribeFormState.isValid) && isValid2 !== _formState.isValid ? {} : { name },
          ..._options.resolver || !name ? { isValid: isValid2 } : {},
          errors: _formState.errors
        });
        options2.shouldFocus && !validationResult && iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);
        return validationResult;
      };
      const getValues = (fieldNames) => {
        const values = {
          ..._state.mount ? _formValues : _defaultValues
        };
        return isUndefined(fieldNames) ? values : isString$1(fieldNames) ? get$1(values, fieldNames) : fieldNames.map((name) => get$1(values, name));
      };
      const getFieldState = (name, formState) => ({
        invalid: !!get$1((formState || _formState).errors, name),
        isDirty: !!get$1((formState || _formState).dirtyFields, name),
        error: get$1((formState || _formState).errors, name),
        isValidating: !!get$1(_formState.validatingFields, name),
        isTouched: !!get$1((formState || _formState).touchedFields, name)
      });
      const clearErrors = (name) => {
        name && convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));
        _subjects.state.next({
          errors: name ? _formState.errors : {}
        });
      };
      const setError = (name, error, options2) => {
        const ref = (get$1(_fields, name, { _f: {} })._f || {}).ref;
        const currentError = get$1(_formState.errors, name) || {};
        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;
        set(_formState.errors, name, {
          ...restOfErrorTree,
          ...error,
          ref
        });
        _subjects.state.next({
          name,
          errors: _formState.errors,
          isValid: false
        });
        options2 && options2.shouldFocus && ref && ref.focus && ref.focus();
      };
      const watch = (name, defaultValue) => isFunction$1(name) ? _subjects.state.subscribe({
        next: (payload) => name(_getWatch(void 0, defaultValue), payload)
      }) : _getWatch(name, defaultValue, true);
      const _subscribe = (props2) => _subjects.state.subscribe({
        next: (formState) => {
          if (shouldSubscribeByName(props2.name, formState.name, props2.exact) && shouldRenderFormState(formState, props2.formState || _proxyFormState, _setFormState, props2.reRenderRoot)) {
            props2.callback({
              values: { ..._formValues },
              ..._formState,
              ...formState
            });
          }
        }
      }).unsubscribe;
      const subscribe = (props2) => {
        _state.mount = true;
        _proxySubscribeFormState = {
          ..._proxySubscribeFormState,
          ...props2.formState
        };
        return _subscribe({
          ...props2,
          formState: _proxySubscribeFormState
        });
      };
      const unregister = (name, options2 = {}) => {
        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {
          _names.mount.delete(fieldName);
          _names.array.delete(fieldName);
          if (!options2.keepValue) {
            unset(_fields, fieldName);
            unset(_formValues, fieldName);
          }
          !options2.keepError && unset(_formState.errors, fieldName);
          !options2.keepDirty && unset(_formState.dirtyFields, fieldName);
          !options2.keepTouched && unset(_formState.touchedFields, fieldName);
          !options2.keepIsValidating && unset(_formState.validatingFields, fieldName);
          !_options.shouldUnregister && !options2.keepDefaultValue && unset(_defaultValues, fieldName);
        }
        _subjects.state.next({
          values: cloneObject(_formValues)
        });
        _subjects.state.next({
          ..._formState,
          ...!options2.keepDirty ? {} : { isDirty: _getDirty() }
        });
        !options2.keepIsValid && _setValid();
      };
      const _setDisabledField = ({ disabled, name }) => {
        if (isBoolean$1(disabled) && _state.mount || !!disabled || _names.disabled.has(name)) {
          disabled ? _names.disabled.add(name) : _names.disabled.delete(name);
        }
      };
      const register = (name, options2 = {}) => {
        let field = get$1(_fields, name);
        const disabledIsDefined = isBoolean$1(options2.disabled) || isBoolean$1(_options.disabled);
        set(_fields, name, {
          ...field || {},
          _f: {
            ...field && field._f ? field._f : { ref: { name } },
            name,
            mount: true,
            ...options2
          }
        });
        _names.mount.add(name);
        if (field) {
          _setDisabledField({
            disabled: isBoolean$1(options2.disabled) ? options2.disabled : _options.disabled,
            name
          });
        } else {
          updateValidAndValue(name, true, options2.value);
        }
        return {
          ...disabledIsDefined ? { disabled: options2.disabled || _options.disabled } : {},
          ..._options.progressive ? {
            required: !!options2.required,
            min: getRuleValue(options2.min),
            max: getRuleValue(options2.max),
            minLength: getRuleValue(options2.minLength),
            maxLength: getRuleValue(options2.maxLength),
            pattern: getRuleValue(options2.pattern)
          } : {},
          name,
          onChange,
          onBlur: onChange,
          ref: (ref) => {
            if (ref) {
              register(name, options2);
              field = get$1(_fields, name);
              const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
              const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
              const refs = field._f.refs || [];
              if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field._f.ref) {
                return;
              }
              set(_fields, name, {
                _f: {
                  ...field._f,
                  ...radioOrCheckbox ? {
                    refs: [
                      ...refs.filter(live),
                      fieldRef,
                      ...Array.isArray(get$1(_defaultValues, name)) ? [{}] : []
                    ],
                    ref: { type: fieldRef.type, name }
                  } : { ref: fieldRef }
                }
              });
              updateValidAndValue(name, false, void 0, fieldRef);
            } else {
              field = get$1(_fields, name, {});
              if (field._f) {
                field._f.mount = false;
              }
              (_options.shouldUnregister || options2.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _state.action) && _names.unMount.add(name);
            }
          }
        };
      };
      const _focusError = () => _options.shouldFocusError && iterateFieldsByAction(_fields, _focusInput, _names.mount);
      const _disableForm = (disabled) => {
        if (isBoolean$1(disabled)) {
          _subjects.state.next({ disabled });
          iterateFieldsByAction(_fields, (ref, name) => {
            const currentField = get$1(_fields, name);
            if (currentField) {
              ref.disabled = currentField._f.disabled || disabled;
              if (Array.isArray(currentField._f.refs)) {
                currentField._f.refs.forEach((inputRef) => {
                  inputRef.disabled = currentField._f.disabled || disabled;
                });
              }
            }
          }, 0, false);
        }
      };
      const handleSubmit = (onValid, onInvalid) => async (e) => {
        let onValidError = void 0;
        if (e) {
          e.preventDefault && e.preventDefault();
          e.persist && e.persist();
        }
        let fieldValues = cloneObject(_formValues);
        _subjects.state.next({
          isSubmitting: true
        });
        if (_options.resolver) {
          const { errors, values } = await _runSchema();
          _formState.errors = errors;
          fieldValues = values;
        } else {
          await executeBuiltInValidation(_fields);
        }
        if (_names.disabled.size) {
          for (const name of _names.disabled) {
            set(fieldValues, name, void 0);
          }
        }
        unset(_formState.errors, "root");
        if (isEmptyObject(_formState.errors)) {
          _subjects.state.next({
            errors: {}
          });
          try {
            await onValid(fieldValues, e);
          } catch (error) {
            onValidError = error;
          }
        } else {
          if (onInvalid) {
            await onInvalid({ ..._formState.errors }, e);
          }
          _focusError();
          setTimeout(_focusError);
        }
        _subjects.state.next({
          isSubmitted: true,
          isSubmitting: false,
          isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,
          submitCount: _formState.submitCount + 1,
          errors: _formState.errors
        });
        if (onValidError) {
          throw onValidError;
        }
      };
      const resetField = (name, options2 = {}) => {
        if (get$1(_fields, name)) {
          if (isUndefined(options2.defaultValue)) {
            setValue(name, cloneObject(get$1(_defaultValues, name)));
          } else {
            setValue(name, options2.defaultValue);
            set(_defaultValues, name, cloneObject(options2.defaultValue));
          }
          if (!options2.keepTouched) {
            unset(_formState.touchedFields, name);
          }
          if (!options2.keepDirty) {
            unset(_formState.dirtyFields, name);
            _formState.isDirty = options2.defaultValue ? _getDirty(name, cloneObject(get$1(_defaultValues, name))) : _getDirty();
          }
          if (!options2.keepError) {
            unset(_formState.errors, name);
            _proxyFormState.isValid && _setValid();
          }
          _subjects.state.next({ ..._formState });
        }
      };
      const _reset = (formValues, keepStateOptions = {}) => {
        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
        const cloneUpdatedValues = cloneObject(updatedValues);
        const isEmptyResetValues = isEmptyObject(formValues);
        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;
        if (!keepStateOptions.keepDefaultValues) {
          _defaultValues = updatedValues;
        }
        if (!keepStateOptions.keepValues) {
          if (keepStateOptions.keepDirtyValues) {
            const fieldsToCheck = /* @__PURE__ */ new Set([
              ..._names.mount,
              ...Object.keys(getDirtyFields(_defaultValues, _formValues))
            ]);
            for (const fieldName of Array.from(fieldsToCheck)) {
              get$1(_formState.dirtyFields, fieldName) ? set(values, fieldName, get$1(_formValues, fieldName)) : setValue(fieldName, get$1(values, fieldName));
            }
          } else {
            if (isWeb && isUndefined(formValues)) {
              for (const name of _names.mount) {
                const field = get$1(_fields, name);
                if (field && field._f) {
                  const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;
                  if (isHTMLElement(fieldReference)) {
                    const form = fieldReference.closest("form");
                    if (form) {
                      form.reset();
                      break;
                    }
                  }
                }
              }
            }
            for (const fieldName of _names.mount) {
              setValue(fieldName, get$1(values, fieldName));
            }
          }
          _formValues = cloneObject(values);
          _subjects.array.next({
            values: { ...values }
          });
          _subjects.state.next({
            values: { ...values }
          });
        }
        _names = {
          mount: keepStateOptions.keepDirtyValues ? _names.mount : /* @__PURE__ */ new Set(),
          unMount: /* @__PURE__ */ new Set(),
          array: /* @__PURE__ */ new Set(),
          disabled: /* @__PURE__ */ new Set(),
          watch: /* @__PURE__ */ new Set(),
          watchAll: false,
          focus: ""
        };
        _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid || !!keepStateOptions.keepDirtyValues;
        _state.watch = !!_options.shouldUnregister;
        _subjects.state.next({
          submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
          isDirty: isEmptyResetValues ? false : keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual$1(formValues, _defaultValues)),
          isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
          dirtyFields: isEmptyResetValues ? {} : keepStateOptions.keepDirtyValues ? keepStateOptions.keepDefaultValues && _formValues ? getDirtyFields(_defaultValues, _formValues) : _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : keepStateOptions.keepDirty ? _formState.dirtyFields : {},
          touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
          errors: keepStateOptions.keepErrors ? _formState.errors : {},
          isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful ? _formState.isSubmitSuccessful : false,
          isSubmitting: false
        });
      };
      const reset = (formValues, keepStateOptions) => _reset(isFunction$1(formValues) ? formValues(_formValues) : formValues, keepStateOptions);
      const setFocus = (name, options2 = {}) => {
        const field = get$1(_fields, name);
        const fieldReference = field && field._f;
        if (fieldReference) {
          const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
          if (fieldRef.focus) {
            fieldRef.focus();
            options2.shouldSelect && isFunction$1(fieldRef.select) && fieldRef.select();
          }
        }
      };
      const _setFormState = (updatedFormState) => {
        _formState = {
          ..._formState,
          ...updatedFormState
        };
      };
      const _resetDefaultValues = () => isFunction$1(_options.defaultValues) && _options.defaultValues().then((values) => {
        reset(values, _options.resetOptions);
        _subjects.state.next({
          isLoading: false
        });
      });
      const methods = {
        control: {
          register,
          unregister,
          getFieldState,
          handleSubmit,
          setError,
          _subscribe,
          _runSchema,
          _getWatch,
          _getDirty,
          _setValid,
          _setFieldArray,
          _setDisabledField,
          _setErrors,
          _getFieldArray,
          _reset,
          _resetDefaultValues,
          _removeUnmounted,
          _disableForm,
          _subjects,
          _proxyFormState,
          get _fields() {
            return _fields;
          },
          get _formValues() {
            return _formValues;
          },
          get _state() {
            return _state;
          },
          set _state(value) {
            _state = value;
          },
          get _defaultValues() {
            return _defaultValues;
          },
          get _names() {
            return _names;
          },
          set _names(value) {
            _names = value;
          },
          get _formState() {
            return _formState;
          },
          get _options() {
            return _options;
          },
          set _options(value) {
            _options = {
              ..._options,
              ...value
            };
          }
        },
        subscribe,
        trigger,
        register,
        handleSubmit,
        watch,
        setValue,
        getValues,
        reset,
        resetField,
        clearErrors,
        unregister,
        setError,
        setFocus,
        getFieldState
      };
      return {
        ...methods,
        formControl: methods
      };
    }
    function useForm(props = {}) {
      const _formControl = React.useRef(void 0);
      const _values = React.useRef(void 0);
      const [formState, updateFormState] = React.useState({
        isDirty: false,
        isValidating: false,
        isLoading: isFunction$1(props.defaultValues),
        isSubmitted: false,
        isSubmitting: false,
        isSubmitSuccessful: false,
        isValid: false,
        submitCount: 0,
        dirtyFields: {},
        touchedFields: {},
        validatingFields: {},
        errors: props.errors || {},
        disabled: props.disabled || false,
        isReady: false,
        defaultValues: isFunction$1(props.defaultValues) ? void 0 : props.defaultValues
      });
      if (!_formControl.current) {
        _formControl.current = {
          ...props.formControl ? props.formControl : createFormControl(props),
          formState
        };
        if (props.formControl && props.defaultValues && !isFunction$1(props.defaultValues)) {
          props.formControl.reset(props.defaultValues, props.resetOptions);
        }
      }
      const control = _formControl.current.control;
      control._options = props;
      useIsomorphicLayoutEffect(() => {
        const sub = control._subscribe({
          formState: control._proxyFormState,
          callback: () => updateFormState({ ...control._formState }),
          reRenderRoot: true
        });
        updateFormState((data) => ({
          ...data,
          isReady: true
        }));
        control._formState.isReady = true;
        return sub;
      }, [control]);
      React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);
      React.useEffect(() => {
        if (props.mode) {
          control._options.mode = props.mode;
        }
        if (props.reValidateMode) {
          control._options.reValidateMode = props.reValidateMode;
        }
        if (props.errors && !isEmptyObject(props.errors)) {
          control._setErrors(props.errors);
        }
      }, [control, props.errors, props.mode, props.reValidateMode]);
      React.useEffect(() => {
        props.shouldUnregister && control._subjects.state.next({
          values: control._getWatch()
        });
      }, [control, props.shouldUnregister]);
      React.useEffect(() => {
        if (control._proxyFormState.isDirty) {
          const isDirty2 = control._getDirty();
          if (isDirty2 !== formState.isDirty) {
            control._subjects.state.next({
              isDirty: isDirty2
            });
          }
        }
      }, [control, formState.isDirty]);
      React.useEffect(() => {
        if (props.values && !deepEqual$1(props.values, _values.current)) {
          control._reset(props.values, control._options.resetOptions);
          _values.current = props.values;
          updateFormState((state) => ({ ...state }));
        } else {
          control._resetDefaultValues();
        }
      }, [control, props.values]);
      React.useEffect(() => {
        if (!control._state.mount) {
          control._setValid();
          control._state.mount = true;
        }
        if (control._state.watch) {
          control._state.watch = false;
          control._subjects.state.next({ ...control._formState });
        }
        control._removeUnmounted();
      });
      _formControl.current.formState = getProxyFormState(formState, control);
      return _formControl.current;
    }
    function Label$1({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Root,
        {
          "data-slot": "label",
          className: cn$1(
            "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
            className
          ),
          ...props
        }
      );
    }
    const Form = FormProvider;
    const FormFieldContext = reactExports.createContext(
      {}
    );
    const FormField = ({
      ...props
    }) => {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(FormFieldContext.Provider, { value: { name: props.name }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Controller, { ...props }) });
    };
    const useFormField = () => {
      const fieldContext = reactExports.useContext(FormFieldContext);
      const itemContext = reactExports.useContext(FormItemContext);
      const { getFieldState } = useFormContext();
      const formState = useFormState({ name: fieldContext.name });
      const fieldState = getFieldState(fieldContext.name, formState);
      if (!fieldContext) {
        throw new Error("useFormField should be used within <FormField>");
      }
      const { id } = itemContext;
      return {
        id,
        name: fieldContext.name,
        formItemId: `${id}-form-item`,
        formDescriptionId: `${id}-form-item-description`,
        formMessageId: `${id}-form-item-message`,
        ...fieldState
      };
    };
    const FormItemContext = reactExports.createContext(
      {}
    );
    function FormItem({ className, ...props }) {
      const id = reactExports.useId();
      return /* @__PURE__ */ jsxRuntimeExports.jsx(FormItemContext.Provider, { value: { id }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          "data-slot": "form-item",
          className: cn$1("grid gap-2", className),
          ...props
        }
      ) });
    }
    function FormLabel({
      className,
      ...props
    }) {
      const { error, formItemId } = useFormField();
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Label$1,
        {
          "data-slot": "form-label",
          "data-error": !!error,
          className: cn$1("data-[error=true]:text-destructive", className),
          htmlFor: formItemId,
          ...props
        }
      );
    }
    function FormControl({ ...props }) {
      const { error, formItemId, formDescriptionId, formMessageId } = useFormField();
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Slot$3,
        {
          "data-slot": "form-control",
          id: formItemId,
          "aria-describedby": !error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`,
          "aria-invalid": !!error,
          ...props
        }
      );
    }
    function FormMessage({ className, ...props }) {
      const { error, formMessageId } = useFormField();
      const body = error ? String((error == null ? void 0 : error.message) ?? "") : props.children;
      if (!body) {
        return null;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "p",
        {
          "data-slot": "form-message",
          id: formMessageId,
          className: cn$1("text-destructive text-sm", className),
          ...props,
          children: body
        }
      );
    }
    var util;
    (function(util2) {
      util2.assertEqual = (_) => {
      };
      function assertIs(_arg) {
      }
      util2.assertIs = assertIs;
      function assertNever(_x) {
        throw new Error();
      }
      util2.assertNever = assertNever;
      util2.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
          obj[item] = item;
        }
        return obj;
      };
      util2.getValidEnumValues = (obj) => {
        const validKeys = util2.objectKeys(obj).filter((k2) => typeof obj[obj[k2]] !== "number");
        const filtered = {};
        for (const k2 of validKeys) {
          filtered[k2] = obj[k2];
        }
        return util2.objectValues(filtered);
      };
      util2.objectValues = (obj) => {
        return util2.objectKeys(obj).map(function(e) {
          return obj[e];
        });
      };
      util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object2) => {
        const keys2 = [];
        for (const key in object2) {
          if (Object.prototype.hasOwnProperty.call(object2, key)) {
            keys2.push(key);
          }
        }
        return keys2;
      };
      util2.find = (arr, checker) => {
        for (const item of arr) {
          if (checker(item))
            return item;
        }
        return void 0;
      };
      util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
      function joinValues(array2, separator = " | ") {
        return array2.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
      }
      util2.joinValues = joinValues;
      util2.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
          return value.toString();
        }
        return value;
      };
    })(util || (util = {}));
    var objectUtil;
    (function(objectUtil2) {
      objectUtil2.mergeShapes = (first, second2) => {
        return {
          ...first,
          ...second2
          // second overwrites first
        };
      };
    })(objectUtil || (objectUtil = {}));
    const ZodParsedType = util.arrayToEnum([
      "string",
      "nan",
      "number",
      "integer",
      "float",
      "boolean",
      "date",
      "bigint",
      "symbol",
      "function",
      "undefined",
      "null",
      "array",
      "object",
      "unknown",
      "promise",
      "void",
      "never",
      "map",
      "set"
    ]);
    const getParsedType = (data) => {
      const t = typeof data;
      switch (t) {
        case "undefined":
          return ZodParsedType.undefined;
        case "string":
          return ZodParsedType.string;
        case "number":
          return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
          return ZodParsedType.boolean;
        case "function":
          return ZodParsedType.function;
        case "bigint":
          return ZodParsedType.bigint;
        case "symbol":
          return ZodParsedType.symbol;
        case "object":
          if (Array.isArray(data)) {
            return ZodParsedType.array;
          }
          if (data === null) {
            return ZodParsedType.null;
          }
          if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
            return ZodParsedType.promise;
          }
          if (typeof Map !== "undefined" && data instanceof Map) {
            return ZodParsedType.map;
          }
          if (typeof Set !== "undefined" && data instanceof Set) {
            return ZodParsedType.set;
          }
          if (typeof Date !== "undefined" && data instanceof Date) {
            return ZodParsedType.date;
          }
          return ZodParsedType.object;
        default:
          return ZodParsedType.unknown;
      }
    };
    const ZodIssueCode = util.arrayToEnum([
      "invalid_type",
      "invalid_literal",
      "custom",
      "invalid_union",
      "invalid_union_discriminator",
      "invalid_enum_value",
      "unrecognized_keys",
      "invalid_arguments",
      "invalid_return_type",
      "invalid_date",
      "invalid_string",
      "too_small",
      "too_big",
      "invalid_intersection_types",
      "not_multiple_of",
      "not_finite"
    ]);
    class ZodError extends Error {
      get errors() {
        return this.issues;
      }
      constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
          this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
          this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(this, actualProto);
        } else {
          this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
      }
      format(_mapper) {
        const mapper = _mapper || function(issue) {
          return issue.message;
        };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
          for (const issue of error.issues) {
            if (issue.code === "invalid_union") {
              issue.unionErrors.map(processError);
            } else if (issue.code === "invalid_return_type") {
              processError(issue.returnTypeError);
            } else if (issue.code === "invalid_arguments") {
              processError(issue.argumentsError);
            } else if (issue.path.length === 0) {
              fieldErrors._errors.push(mapper(issue));
            } else {
              let curr = fieldErrors;
              let i2 = 0;
              while (i2 < issue.path.length) {
                const el = issue.path[i2];
                const terminal = i2 === issue.path.length - 1;
                if (!terminal) {
                  curr[el] = curr[el] || { _errors: [] };
                } else {
                  curr[el] = curr[el] || { _errors: [] };
                  curr[el]._errors.push(mapper(issue));
                }
                curr = curr[el];
                i2++;
              }
            }
          }
        };
        processError(this);
        return fieldErrors;
      }
      static assert(value) {
        if (!(value instanceof ZodError)) {
          throw new Error(`Not a ZodError: ${value}`);
        }
      }
      toString() {
        return this.message;
      }
      get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
      }
      get isEmpty() {
        return this.issues.length === 0;
      }
      flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
          if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
          } else {
            formErrors.push(mapper(sub));
          }
        }
        return { formErrors, fieldErrors };
      }
      get formErrors() {
        return this.flatten();
      }
    }
    ZodError.create = (issues) => {
      const error = new ZodError(issues);
      return error;
    };
    const errorMap = (issue, _ctx) => {
      let message;
      switch (issue.code) {
        case ZodIssueCode.invalid_type:
          if (issue.received === ZodParsedType.undefined) {
            message = "Required";
          } else {
            message = `Expected ${issue.expected}, received ${issue.received}`;
          }
          break;
        case ZodIssueCode.invalid_literal:
          message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
          break;
        case ZodIssueCode.unrecognized_keys:
          message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
          break;
        case ZodIssueCode.invalid_union:
          message = `Invalid input`;
          break;
        case ZodIssueCode.invalid_union_discriminator:
          message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
          break;
        case ZodIssueCode.invalid_enum_value:
          message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
          break;
        case ZodIssueCode.invalid_arguments:
          message = `Invalid function arguments`;
          break;
        case ZodIssueCode.invalid_return_type:
          message = `Invalid function return type`;
          break;
        case ZodIssueCode.invalid_date:
          message = `Invalid date`;
          break;
        case ZodIssueCode.invalid_string:
          if (typeof issue.validation === "object") {
            if ("includes" in issue.validation) {
              message = `Invalid input: must include "${issue.validation.includes}"`;
              if (typeof issue.validation.position === "number") {
                message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
              }
            } else if ("startsWith" in issue.validation) {
              message = `Invalid input: must start with "${issue.validation.startsWith}"`;
            } else if ("endsWith" in issue.validation) {
              message = `Invalid input: must end with "${issue.validation.endsWith}"`;
            } else {
              util.assertNever(issue.validation);
            }
          } else if (issue.validation !== "regex") {
            message = `Invalid ${issue.validation}`;
          } else {
            message = "Invalid";
          }
          break;
        case ZodIssueCode.too_small:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
          else
            message = "Invalid input";
          break;
        case ZodIssueCode.too_big:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "bigint")
            message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
          else
            message = "Invalid input";
          break;
        case ZodIssueCode.custom:
          message = `Invalid input`;
          break;
        case ZodIssueCode.invalid_intersection_types:
          message = `Intersection results could not be merged`;
          break;
        case ZodIssueCode.not_multiple_of:
          message = `Number must be a multiple of ${issue.multipleOf}`;
          break;
        case ZodIssueCode.not_finite:
          message = "Number must be finite";
          break;
        default:
          message = _ctx.defaultError;
          util.assertNever(issue);
      }
      return { message };
    };
    let overrideErrorMap = errorMap;
    function getErrorMap() {
      return overrideErrorMap;
    }
    const makeIssue = (params) => {
      const { data, path, errorMaps, issueData } = params;
      const fullPath = [...path, ...issueData.path || []];
      const fullIssue = {
        ...issueData,
        path: fullPath
      };
      if (issueData.message !== void 0) {
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message
        };
      }
      let errorMessage = "";
      const maps = errorMaps.filter((m2) => !!m2).slice().reverse();
      for (const map2 of maps) {
        errorMessage = map2(fullIssue, { data, defaultError: errorMessage }).message;
      }
      return {
        ...issueData,
        path: fullPath,
        message: errorMessage
      };
    };
    function addIssueToContext(ctx, issueData) {
      const overrideMap = getErrorMap();
      const issue = makeIssue({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          // contextual error map is first priority
          ctx.schemaErrorMap,
          // then schema-bound map if available
          overrideMap,
          // then global override map
          overrideMap === errorMap ? void 0 : errorMap
          // then global default map
        ].filter((x2) => !!x2)
      });
      ctx.common.issues.push(issue);
    }
    class ParseStatus {
      constructor() {
        this.value = "valid";
      }
      dirty() {
        if (this.value === "valid")
          this.value = "dirty";
      }
      abort() {
        if (this.value !== "aborted")
          this.value = "aborted";
      }
      static mergeArray(status, results) {
        const arrayValue = [];
        for (const s2 of results) {
          if (s2.status === "aborted")
            return INVALID;
          if (s2.status === "dirty")
            status.dirty();
          arrayValue.push(s2.value);
        }
        return { status: status.value, value: arrayValue };
      }
      static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value
          });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
          const { key, value } = pair;
          if (key.status === "aborted")
            return INVALID;
          if (value.status === "aborted")
            return INVALID;
          if (key.status === "dirty")
            status.dirty();
          if (value.status === "dirty")
            status.dirty();
          if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
            finalObject[key.value] = value.value;
          }
        }
        return { status: status.value, value: finalObject };
      }
    }
    const INVALID = Object.freeze({
      status: "aborted"
    });
    const DIRTY = (value) => ({ status: "dirty", value });
    const OK = (value) => ({ status: "valid", value });
    const isAborted = (x2) => x2.status === "aborted";
    const isDirty = (x2) => x2.status === "dirty";
    const isValid = (x2) => x2.status === "valid";
    const isAsync = (x2) => typeof Promise !== "undefined" && x2 instanceof Promise;
    var errorUtil;
    (function(errorUtil2) {
      errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
      errorUtil2.toString = (message) => typeof message === "string" ? message : message == null ? void 0 : message.message;
    })(errorUtil || (errorUtil = {}));
    var __classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _ZodEnum_cache, _ZodNativeEnum_cache;
    class ParseInputLazyPath {
      constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
      }
      get path() {
        if (!this._cachedPath.length) {
          if (Array.isArray(this._key)) {
            this._cachedPath.push(...this._path, ...this._key);
          } else {
            this._cachedPath.push(...this._path, this._key);
          }
        }
        return this._cachedPath;
      }
    }
    const handleResult = (ctx, result) => {
      if (isValid(result)) {
        return { success: true, data: result.value };
      } else {
        if (!ctx.common.issues.length) {
          throw new Error("Validation failed but no issues detected.");
        }
        return {
          success: false,
          get error() {
            if (this._error)
              return this._error;
            const error = new ZodError(ctx.common.issues);
            this._error = error;
            return this._error;
          }
        };
      }
    };
    function processCreateParams(params) {
      if (!params)
        return {};
      const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
      if (errorMap2 && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
      }
      if (errorMap2)
        return { errorMap: errorMap2, description };
      const customMap = (iss, ctx) => {
        const { message } = params;
        if (iss.code === "invalid_enum_value") {
          return { message: message ?? ctx.defaultError };
        }
        if (typeof ctx.data === "undefined") {
          return { message: message ?? required_error ?? ctx.defaultError };
        }
        if (iss.code !== "invalid_type")
          return { message: ctx.defaultError };
        return { message: message ?? invalid_type_error ?? ctx.defaultError };
      };
      return { errorMap: customMap, description };
    }
    class ZodType {
      get description() {
        return this._def.description;
      }
      _getType(input) {
        return getParsedType(input.data);
      }
      _getOrReturnCtx(input, ctx) {
        return ctx || {
          common: input.parent.common,
          data: input.data,
          parsedType: getParsedType(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        };
      }
      _processInputParams(input) {
        return {
          status: new ParseStatus(),
          ctx: {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        };
      }
      _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
          throw new Error("Synchronous parse encountered promise.");
        }
        return result;
      }
      _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
      }
      parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      safeParse(data, params) {
        const ctx = {
          common: {
            issues: [],
            async: (params == null ? void 0 : params.async) ?? false,
            contextualErrorMap: params == null ? void 0 : params.errorMap
          },
          path: (params == null ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
      }
      "~validate"(data) {
        var _a2, _b2;
        const ctx = {
          common: {
            issues: [],
            async: !!this["~standard"].async
          },
          path: [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        if (!this["~standard"].async) {
          try {
            const result = this._parseSync({ data, path: [], parent: ctx });
            return isValid(result) ? {
              value: result.value
            } : {
              issues: ctx.common.issues
            };
          } catch (err) {
            if ((_b2 = (_a2 = err == null ? void 0 : err.message) == null ? void 0 : _a2.toLowerCase()) == null ? void 0 : _b2.includes("encountered")) {
              this["~standard"].async = true;
            }
            ctx.common = {
              issues: [],
              async: true
            };
          }
        }
        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        });
      }
      async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      async safeParseAsync(data, params) {
        const ctx = {
          common: {
            issues: [],
            contextualErrorMap: params == null ? void 0 : params.errorMap,
            async: true
          },
          path: (params == null ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
      }
      refine(check, message) {
        const getIssueProperties = (val) => {
          if (typeof message === "string" || typeof message === "undefined") {
            return { message };
          } else if (typeof message === "function") {
            return message(val);
          } else {
            return message;
          }
        };
        return this._refinement((val, ctx) => {
          const result = check(val);
          const setError = () => ctx.addIssue({
            code: ZodIssueCode.custom,
            ...getIssueProperties(val)
          });
          if (typeof Promise !== "undefined" && result instanceof Promise) {
            return result.then((data) => {
              if (!data) {
                setError();
                return false;
              } else {
                return true;
              }
            });
          }
          if (!result) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
          if (!check(val)) {
            ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
            return false;
          } else {
            return true;
          }
        });
      }
      _refinement(refinement) {
        return new ZodEffects({
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "refinement", refinement }
        });
      }
      superRefine(refinement) {
        return this._refinement(refinement);
      }
      constructor(def) {
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
        this["~standard"] = {
          version: 1,
          vendor: "zod",
          validate: (data) => this["~validate"](data)
        };
      }
      optional() {
        return ZodOptional.create(this, this._def);
      }
      nullable() {
        return ZodNullable.create(this, this._def);
      }
      nullish() {
        return this.nullable().optional();
      }
      array() {
        return ZodArray.create(this);
      }
      promise() {
        return ZodPromise.create(this, this._def);
      }
      or(option) {
        return ZodUnion.create([this, option], this._def);
      }
      and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
      }
      transform(transform) {
        return new ZodEffects({
          ...processCreateParams(this._def),
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "transform", transform }
        });
      }
      default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
          ...processCreateParams(this._def),
          innerType: this,
          defaultValue: defaultValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodDefault
        });
      }
      brand() {
        return new ZodBranded({
          typeName: ZodFirstPartyTypeKind.ZodBranded,
          type: this,
          ...processCreateParams(this._def)
        });
      }
      catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
          ...processCreateParams(this._def),
          innerType: this,
          catchValue: catchValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodCatch
        });
      }
      describe(description) {
        const This = this.constructor;
        return new This({
          ...this._def,
          description
        });
      }
      pipe(target) {
        return ZodPipeline.create(this, target);
      }
      readonly() {
        return ZodReadonly.create(this);
      }
      isOptional() {
        return this.safeParse(void 0).success;
      }
      isNullable() {
        return this.safeParse(null).success;
      }
    }
    const cuidRegex = /^c[^\s-]{8,}$/i;
    const cuid2Regex = /^[0-9a-z]+$/;
    const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
    const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
    const nanoidRegex = /^[a-z0-9_-]{21}$/i;
    const jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
    const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
    const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
    const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
    let emojiRegex;
    const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    const ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
    const ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
    const ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
    const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    const base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
    const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
    const dateRegex = new RegExp(`^${dateRegexSource}$`);
    function timeRegexSource(args) {
      let secondsRegexSource = `[0-5]\\d`;
      if (args.precision) {
        secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
      } else if (args.precision == null) {
        secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
      }
      const secondsQuantifier = args.precision ? "+" : "?";
      return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
    }
    function timeRegex(args) {
      return new RegExp(`^${timeRegexSource(args)}$`);
    }
    function datetimeRegex(args) {
      let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
      const opts = [];
      opts.push(args.local ? `Z?` : `Z`);
      if (args.offset)
        opts.push(`([+-]\\d{2}:?\\d{2})`);
      regex = `${regex}(${opts.join("|")})`;
      return new RegExp(`^${regex}$`);
    }
    function isValidIP(ip, version) {
      if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
        return true;
      }
      if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
        return true;
      }
      return false;
    }
    function isValidJWT(jwt, alg) {
      if (!jwtRegex.test(jwt))
        return false;
      try {
        const [header] = jwt.split(".");
        const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
        const decoded = JSON.parse(atob(base64));
        if (typeof decoded !== "object" || decoded === null)
          return false;
        if ("typ" in decoded && (decoded == null ? void 0 : decoded.typ) !== "JWT")
          return false;
        if (!decoded.alg)
          return false;
        if (alg && decoded.alg !== alg)
          return false;
        return true;
      } catch {
        return false;
      }
    }
    function isValidCidr(ip, version) {
      if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
        return true;
      }
      if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
        return true;
      }
      return false;
    }
    class ZodString extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.string,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.length < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.length > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "length") {
            const tooBig = input.data.length > check.value;
            const tooSmall = input.data.length < check.value;
            if (tooBig || tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              if (tooBig) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              } else if (tooSmall) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              }
              status.dirty();
            }
          } else if (check.kind === "email") {
            if (!emailRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "email",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "emoji") {
            if (!emojiRegex) {
              emojiRegex = new RegExp(_emojiRegex, "u");
            }
            if (!emojiRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "emoji",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "uuid") {
            if (!uuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "uuid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "nanoid") {
            if (!nanoidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "nanoid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid") {
            if (!cuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cuid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid2") {
            if (!cuid2Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cuid2",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ulid") {
            if (!ulidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "ulid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "url") {
            try {
              new URL(input.data);
            } catch {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "url",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "regex") {
            check.regex.lastIndex = 0;
            const testResult = check.regex.test(input.data);
            if (!testResult) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "regex",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "trim") {
            input.data = input.data.trim();
          } else if (check.kind === "includes") {
            if (!input.data.includes(check.value, check.position)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { includes: check.value, position: check.position },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "toLowerCase") {
            input.data = input.data.toLowerCase();
          } else if (check.kind === "toUpperCase") {
            input.data = input.data.toUpperCase();
          } else if (check.kind === "startsWith") {
            if (!input.data.startsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { startsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "endsWith") {
            if (!input.data.endsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { endsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "datetime") {
            const regex = datetimeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "datetime",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "date") {
            const regex = dateRegex;
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "date",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "time") {
            const regex = timeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "time",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "duration") {
            if (!durationRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "duration",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ip") {
            if (!isValidIP(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "ip",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "jwt") {
            if (!isValidJWT(input.data, check.alg)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "jwt",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cidr") {
            if (!isValidCidr(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cidr",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64") {
            if (!base64Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "base64",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64url") {
            if (!base64urlRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "base64url",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _regex(regex, validation, message) {
        return this.refinement((data) => regex.test(data), {
          validation,
          code: ZodIssueCode.invalid_string,
          ...errorUtil.errToObj(message)
        });
      }
      _addCheck(check) {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      email(message) {
        return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
      }
      url(message) {
        return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
      }
      emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
      }
      uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
      }
      nanoid(message) {
        return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
      }
      cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
      }
      cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
      }
      ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
      }
      base64(message) {
        return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
      }
      base64url(message) {
        return this._addCheck({
          kind: "base64url",
          ...errorUtil.errToObj(message)
        });
      }
      jwt(options2) {
        return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options2) });
      }
      ip(options2) {
        return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options2) });
      }
      cidr(options2) {
        return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options2) });
      }
      datetime(options2) {
        if (typeof options2 === "string") {
          return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            local: false,
            message: options2
          });
        }
        return this._addCheck({
          kind: "datetime",
          precision: typeof (options2 == null ? void 0 : options2.precision) === "undefined" ? null : options2 == null ? void 0 : options2.precision,
          offset: (options2 == null ? void 0 : options2.offset) ?? false,
          local: (options2 == null ? void 0 : options2.local) ?? false,
          ...errorUtil.errToObj(options2 == null ? void 0 : options2.message)
        });
      }
      date(message) {
        return this._addCheck({ kind: "date", message });
      }
      time(options2) {
        if (typeof options2 === "string") {
          return this._addCheck({
            kind: "time",
            precision: null,
            message: options2
          });
        }
        return this._addCheck({
          kind: "time",
          precision: typeof (options2 == null ? void 0 : options2.precision) === "undefined" ? null : options2 == null ? void 0 : options2.precision,
          ...errorUtil.errToObj(options2 == null ? void 0 : options2.message)
        });
      }
      duration(message) {
        return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
      }
      regex(regex, message) {
        return this._addCheck({
          kind: "regex",
          regex,
          ...errorUtil.errToObj(message)
        });
      }
      includes(value, options2) {
        return this._addCheck({
          kind: "includes",
          value,
          position: options2 == null ? void 0 : options2.position,
          ...errorUtil.errToObj(options2 == null ? void 0 : options2.message)
        });
      }
      startsWith(value, message) {
        return this._addCheck({
          kind: "startsWith",
          value,
          ...errorUtil.errToObj(message)
        });
      }
      endsWith(value, message) {
        return this._addCheck({
          kind: "endsWith",
          value,
          ...errorUtil.errToObj(message)
        });
      }
      min(minLength, message) {
        return this._addCheck({
          kind: "min",
          value: minLength,
          ...errorUtil.errToObj(message)
        });
      }
      max(maxLength, message) {
        return this._addCheck({
          kind: "max",
          value: maxLength,
          ...errorUtil.errToObj(message)
        });
      }
      length(len, message) {
        return this._addCheck({
          kind: "length",
          value: len,
          ...errorUtil.errToObj(message)
        });
      }
      /**
       * Equivalent to `.min(1)`
       */
      nonempty(message) {
        return this.min(1, errorUtil.errToObj(message));
      }
      trim() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "trim" }]
        });
      }
      toLowerCase() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toLowerCase" }]
        });
      }
      toUpperCase() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toUpperCase" }]
        });
      }
      get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
      }
      get isDate() {
        return !!this._def.checks.find((ch) => ch.kind === "date");
      }
      get isTime() {
        return !!this._def.checks.find((ch) => ch.kind === "time");
      }
      get isDuration() {
        return !!this._def.checks.find((ch) => ch.kind === "duration");
      }
      get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
      }
      get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
      }
      get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
      }
      get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
      }
      get isNANOID() {
        return !!this._def.checks.find((ch) => ch.kind === "nanoid");
      }
      get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
      }
      get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
      }
      get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
      }
      get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
      }
      get isCIDR() {
        return !!this._def.checks.find((ch) => ch.kind === "cidr");
      }
      get isBase64() {
        return !!this._def.checks.find((ch) => ch.kind === "base64");
      }
      get isBase64url() {
        return !!this._def.checks.find((ch) => ch.kind === "base64url");
      }
      get minLength() {
        let min2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min2 === null || ch.value > min2)
              min2 = ch.value;
          }
        }
        return min2;
      }
      get maxLength() {
        let max2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max2 === null || ch.value < max2)
              max2 = ch.value;
          }
        }
        return max2;
      }
    }
    ZodString.create = (params) => {
      return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (params == null ? void 0 : params.coerce) ?? false,
        ...processCreateParams(params)
      });
    };
    function floatSafeRemainder(val, step) {
      const valDecCount = (val.toString().split(".")[1] || "").length;
      const stepDecCount = (step.toString().split(".")[1] || "").length;
      const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
      const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
      const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
      return valInt % stepInt / 10 ** decCount;
    }
    class ZodNumber extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.number,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "int") {
            if (!util.isInteger(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: "integer",
                received: "float",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (floatSafeRemainder(input.data, check.value) !== 0) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "finite") {
            if (!Number.isFinite(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_finite,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new ZodNumber({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      int(message) {
        return this._addCheck({
          kind: "int",
          message: errorUtil.toString(message)
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil.toString(message)
        });
      }
      finite(message) {
        return this._addCheck({
          kind: "finite",
          message: errorUtil.toString(message)
        });
      }
      safe(message) {
        return this._addCheck({
          kind: "min",
          inclusive: true,
          value: Number.MIN_SAFE_INTEGER,
          message: errorUtil.toString(message)
        })._addCheck({
          kind: "max",
          inclusive: true,
          value: Number.MAX_SAFE_INTEGER,
          message: errorUtil.toString(message)
        });
      }
      get minValue() {
        let min2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min2 === null || ch.value > min2)
              min2 = ch.value;
          }
        }
        return min2;
      }
      get maxValue() {
        let max2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max2 === null || ch.value < max2)
              max2 = ch.value;
          }
        }
        return max2;
      }
      get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
      }
      get isFinite() {
        let max2 = null;
        let min2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
            return true;
          } else if (ch.kind === "min") {
            if (min2 === null || ch.value > min2)
              min2 = ch.value;
          } else if (ch.kind === "max") {
            if (max2 === null || ch.value < max2)
              max2 = ch.value;
          }
        }
        return Number.isFinite(min2) && Number.isFinite(max2);
      }
    }
    ZodNumber.create = (params) => {
      return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params == null ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    class ZodBigInt extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
      }
      _parse(input) {
        if (this._def.coerce) {
          try {
            input.data = BigInt(input.data);
          } catch {
            return this._getInvalidInput(input);
          }
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
          return this._getInvalidInput(input);
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                type: "bigint",
                minimum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                type: "bigint",
                maximum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (input.data % check.value !== BigInt(0)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _getInvalidInput(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.bigint,
          received: ctx.parsedType
        });
        return INVALID;
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new ZodBigInt({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil.toString(message)
        });
      }
      get minValue() {
        let min2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min2 === null || ch.value > min2)
              min2 = ch.value;
          }
        }
        return min2;
      }
      get maxValue() {
        let max2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max2 === null || ch.value < max2)
              max2 = ch.value;
          }
        }
        return max2;
      }
    }
    ZodBigInt.create = (params) => {
      return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (params == null ? void 0 : params.coerce) ?? false,
        ...processCreateParams(params)
      });
    };
    class ZodBoolean extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.boolean,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodBoolean.create = (params) => {
      return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params == null ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    class ZodDate extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.date,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        if (Number.isNaN(input.data.getTime())) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_date
          });
          return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.getTime() < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                message: check.message,
                inclusive: true,
                exact: false,
                minimum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.getTime() > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                message: check.message,
                inclusive: true,
                exact: false,
                maximum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return {
          status: status.value,
          value: new Date(input.data.getTime())
        };
      }
      _addCheck(check) {
        return new ZodDate({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      min(minDate, message) {
        return this._addCheck({
          kind: "min",
          value: minDate.getTime(),
          message: errorUtil.toString(message)
        });
      }
      max(maxDate, message) {
        return this._addCheck({
          kind: "max",
          value: maxDate.getTime(),
          message: errorUtil.toString(message)
        });
      }
      get minDate() {
        let min2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min2 === null || ch.value > min2)
              min2 = ch.value;
          }
        }
        return min2 != null ? new Date(min2) : null;
      }
      get maxDate() {
        let max2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max2 === null || ch.value < max2)
              max2 = ch.value;
          }
        }
        return max2 != null ? new Date(max2) : null;
      }
    }
    ZodDate.create = (params) => {
      return new ZodDate({
        checks: [],
        coerce: (params == null ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
      });
    };
    class ZodSymbol extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.symbol,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodSymbol.create = (params) => {
      return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params)
      });
    };
    class ZodUndefined extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.undefined,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodUndefined.create = (params) => {
      return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
      });
    };
    class ZodNull extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.null,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodNull.create = (params) => {
      return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
      });
    };
    class ZodAny extends ZodType {
      constructor() {
        super(...arguments);
        this._any = true;
      }
      _parse(input) {
        return OK(input.data);
      }
    }
    ZodAny.create = (params) => {
      return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
      });
    };
    class ZodUnknown extends ZodType {
      constructor() {
        super(...arguments);
        this._unknown = true;
      }
      _parse(input) {
        return OK(input.data);
      }
    }
    ZodUnknown.create = (params) => {
      return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
      });
    };
    class ZodNever extends ZodType {
      _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.never,
          received: ctx.parsedType
        });
        return INVALID;
      }
    }
    ZodNever.create = (params) => {
      return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
      });
    };
    class ZodVoid extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.void,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodVoid.create = (params) => {
      return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
      });
    };
    class ZodArray extends ZodType {
      _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.array,
            received: ctx.parsedType
          });
          return INVALID;
        }
        if (def.exactLength !== null) {
          const tooBig = ctx.data.length > def.exactLength.value;
          const tooSmall = ctx.data.length < def.exactLength.value;
          if (tooBig || tooSmall) {
            addIssueToContext(ctx, {
              code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
              minimum: tooSmall ? def.exactLength.value : void 0,
              maximum: tooBig ? def.exactLength.value : void 0,
              type: "array",
              inclusive: true,
              exact: true,
              message: def.exactLength.message
            });
            status.dirty();
          }
        }
        if (def.minLength !== null) {
          if (ctx.data.length < def.minLength.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: def.minLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.minLength.message
            });
            status.dirty();
          }
        }
        if (def.maxLength !== null) {
          if (ctx.data.length > def.maxLength.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: def.maxLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.maxLength.message
            });
            status.dirty();
          }
        }
        if (ctx.common.async) {
          return Promise.all([...ctx.data].map((item, i2) => {
            return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
          })).then((result2) => {
            return ParseStatus.mergeArray(status, result2);
          });
        }
        const result = [...ctx.data].map((item, i2) => {
          return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
        });
        return ParseStatus.mergeArray(status, result);
      }
      get element() {
        return this._def.type;
      }
      min(minLength, message) {
        return new ZodArray({
          ...this._def,
          minLength: { value: minLength, message: errorUtil.toString(message) }
        });
      }
      max(maxLength, message) {
        return new ZodArray({
          ...this._def,
          maxLength: { value: maxLength, message: errorUtil.toString(message) }
        });
      }
      length(len, message) {
        return new ZodArray({
          ...this._def,
          exactLength: { value: len, message: errorUtil.toString(message) }
        });
      }
      nonempty(message) {
        return this.min(1, message);
      }
    }
    ZodArray.create = (schema, params) => {
      return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
      });
    };
    function deepPartialify(schema) {
      if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
          const fieldSchema = schema.shape[key];
          newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
          ...schema._def,
          shape: () => newShape
        });
      } else if (schema instanceof ZodArray) {
        return new ZodArray({
          ...schema._def,
          type: deepPartialify(schema.element)
        });
      } else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
      } else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
      } else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
      } else {
        return schema;
      }
    }
    class ZodObject extends ZodType {
      constructor() {
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = this.extend;
      }
      _getCached() {
        if (this._cached !== null)
          return this._cached;
        const shape = this._def.shape();
        const keys2 = util.objectKeys(shape);
        this._cached = { shape, keys: keys2 };
        return this._cached;
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
          for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
              extraKeys.push(key);
            }
          }
        }
        const pairs = [];
        for (const key of shapeKeys) {
          const keyValidator = shape[key];
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (this._def.catchall instanceof ZodNever) {
          const unknownKeys = this._def.unknownKeys;
          if (unknownKeys === "passthrough") {
            for (const key of extraKeys) {
              pairs.push({
                key: { status: "valid", value: key },
                value: { status: "valid", value: ctx.data[key] }
              });
            }
          } else if (unknownKeys === "strict") {
            if (extraKeys.length > 0) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.unrecognized_keys,
                keys: extraKeys
              });
              status.dirty();
            }
          } else if (unknownKeys === "strip") ;
          else {
            throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
          }
        } else {
          const catchall = this._def.catchall;
          for (const key of extraKeys) {
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: catchall._parse(
                new ParseInputLazyPath(ctx, value, ctx.path, key)
                //, ctx.child(key), value, getParsedType(value)
              ),
              alwaysSet: key in ctx.data
            });
          }
        }
        if (ctx.common.async) {
          return Promise.resolve().then(async () => {
            const syncPairs = [];
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              syncPairs.push({
                key,
                value,
                alwaysSet: pair.alwaysSet
              });
            }
            return syncPairs;
          }).then((syncPairs) => {
            return ParseStatus.mergeObjectSync(status, syncPairs);
          });
        } else {
          return ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get shape() {
        return this._def.shape();
      }
      strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
          ...this._def,
          unknownKeys: "strict",
          ...message !== void 0 ? {
            errorMap: (issue, ctx) => {
              var _a2, _b2;
              const defaultError = ((_b2 = (_a2 = this._def).errorMap) == null ? void 0 : _b2.call(_a2, issue, ctx).message) ?? ctx.defaultError;
              if (issue.code === "unrecognized_keys")
                return {
                  message: errorUtil.errToObj(message).message ?? defaultError
                };
              return {
                message: defaultError
              };
            }
          } : {}
        });
      }
      strip() {
        return new ZodObject({
          ...this._def,
          unknownKeys: "strip"
        });
      }
      passthrough() {
        return new ZodObject({
          ...this._def,
          unknownKeys: "passthrough"
        });
      }
      // const AugmentFactory =
      //   <Def extends ZodObjectDef>(def: Def) =>
      //   <Augmentation extends ZodRawShape>(
      //     augmentation: Augmentation
      //   ): ZodObject<
      //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
      //     Def["unknownKeys"],
      //     Def["catchall"]
      //   > => {
      //     return new ZodObject({
      //       ...def,
      //       shape: () => ({
      //         ...def.shape(),
      //         ...augmentation,
      //       }),
      //     }) as any;
      //   };
      extend(augmentation) {
        return new ZodObject({
          ...this._def,
          shape: () => ({
            ...this._def.shape(),
            ...augmentation
          })
        });
      }
      /**
       * Prior to zod@1.0.12 there was a bug in the
       * inferred type of merged objects. Please
       * upgrade if you are experiencing issues.
       */
      merge(merging) {
        const merged = new ZodObject({
          unknownKeys: merging._def.unknownKeys,
          catchall: merging._def.catchall,
          shape: () => ({
            ...this._def.shape(),
            ...merging._def.shape()
          }),
          typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
      }
      // merge<
      //   Incoming extends AnyZodObject,
      //   Augmentation extends Incoming["shape"],
      //   NewOutput extends {
      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
      //       ? Augmentation[k]["_output"]
      //       : k extends keyof Output
      //       ? Output[k]
      //       : never;
      //   },
      //   NewInput extends {
      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
      //       ? Augmentation[k]["_input"]
      //       : k extends keyof Input
      //       ? Input[k]
      //       : never;
      //   }
      // >(
      //   merging: Incoming
      // ): ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"],
      //   NewOutput,
      //   NewInput
      // > {
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      setKey(key, schema) {
        return this.augment({ [key]: schema });
      }
      // merge<Incoming extends AnyZodObject>(
      //   merging: Incoming
      // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
      // ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"]
      // > {
      //   // const mergedShape = objectUtil.mergeShapes(
      //   //   this._def.shape(),
      //   //   merging._def.shape()
      //   // );
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      catchall(index2) {
        return new ZodObject({
          ...this._def,
          catchall: index2
        });
      }
      pick(mask) {
        const shape = {};
        for (const key of util.objectKeys(mask)) {
          if (mask[key] && this.shape[key]) {
            shape[key] = this.shape[key];
          }
        }
        return new ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      omit(mask) {
        const shape = {};
        for (const key of util.objectKeys(this.shape)) {
          if (!mask[key]) {
            shape[key] = this.shape[key];
          }
        }
        return new ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      /**
       * @deprecated
       */
      deepPartial() {
        return deepPartialify(this);
      }
      partial(mask) {
        const newShape = {};
        for (const key of util.objectKeys(this.shape)) {
          const fieldSchema = this.shape[key];
          if (mask && !mask[key]) {
            newShape[key] = fieldSchema;
          } else {
            newShape[key] = fieldSchema.optional();
          }
        }
        return new ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      required(mask) {
        const newShape = {};
        for (const key of util.objectKeys(this.shape)) {
          if (mask && !mask[key]) {
            newShape[key] = this.shape[key];
          } else {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional) {
              newField = newField._def.innerType;
            }
            newShape[key] = newField;
          }
        }
        return new ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      keyof() {
        return createZodEnum(util.objectKeys(this.shape));
      }
    }
    ZodObject.create = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.strictCreate = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.lazycreate = (shape, params) => {
      return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    class ZodUnion extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options2 = this._def.options;
        function handleResults(results) {
          for (const result of results) {
            if (result.result.status === "valid") {
              return result.result;
            }
          }
          for (const result of results) {
            if (result.result.status === "dirty") {
              ctx.common.issues.push(...result.ctx.common.issues);
              return result.result;
            }
          }
          const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union,
            unionErrors
          });
          return INVALID;
        }
        if (ctx.common.async) {
          return Promise.all(options2.map(async (option) => {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            return {
              result: await option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              }),
              ctx: childCtx
            };
          })).then(handleResults);
        } else {
          let dirty = void 0;
          const issues = [];
          for (const option of options2) {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            const result = option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            });
            if (result.status === "valid") {
              return result;
            } else if (result.status === "dirty" && !dirty) {
              dirty = { result, ctx: childCtx };
            }
            if (childCtx.common.issues.length) {
              issues.push(childCtx.common.issues);
            }
          }
          if (dirty) {
            ctx.common.issues.push(...dirty.ctx.common.issues);
            return dirty.result;
          }
          const unionErrors = issues.map((issues2) => new ZodError(issues2));
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union,
            unionErrors
          });
          return INVALID;
        }
      }
      get options() {
        return this._def.options;
      }
    }
    ZodUnion.create = (types, params) => {
      return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
      });
    };
    function mergeValues(a2, b) {
      const aType = getParsedType(a2);
      const bType = getParsedType(b);
      if (a2 === b) {
        return { valid: true, data: a2 };
      } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b);
        const sharedKeys = util.objectKeys(a2).filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a2, ...b };
        for (const key of sharedKeys) {
          const sharedValue = mergeValues(a2[key], b[key]);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
      } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a2.length !== b.length) {
          return { valid: false };
        }
        const newArray = [];
        for (let index2 = 0; index2 < a2.length; index2++) {
          const itemA = a2[index2];
          const itemB = b[index2];
          const sharedValue = mergeValues(itemA, itemB);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
      } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a2 === +b) {
        return { valid: true, data: a2 };
      } else {
        return { valid: false };
      }
    }
    class ZodIntersection extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
          if (isAborted(parsedLeft) || isAborted(parsedRight)) {
            return INVALID;
          }
          const merged = mergeValues(parsedLeft.value, parsedRight.value);
          if (!merged.valid) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_intersection_types
            });
            return INVALID;
          }
          if (isDirty(parsedLeft) || isDirty(parsedRight)) {
            status.dirty();
          }
          return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
          return Promise.all([
            this._def.left._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }),
            this._def.right._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
          ]).then(([left, right]) => handleParsed(left, right));
        } else {
          return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }));
        }
      }
    }
    ZodIntersection.create = (left, right, params) => {
      return new ZodIntersection({
        left,
        right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
      });
    };
    class ZodTuple extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.array,
            received: ctx.parsedType
          });
          return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          status.dirty();
        }
        const items = [...ctx.data].map((item, itemIndex) => {
          const schema = this._def.items[itemIndex] || this._def.rest;
          if (!schema)
            return null;
          return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x2) => !!x2);
        if (ctx.common.async) {
          return Promise.all(items).then((results) => {
            return ParseStatus.mergeArray(status, results);
          });
        } else {
          return ParseStatus.mergeArray(status, items);
        }
      }
      get items() {
        return this._def.items;
      }
      rest(rest) {
        return new ZodTuple({
          ...this._def,
          rest
        });
      }
    }
    ZodTuple.create = (schemas, params) => {
      if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
      }
      return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
      });
    };
    class ZodMap extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.map,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index2) => {
          return {
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index2, "key"])),
            value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index2, "value"]))
          };
        });
        if (ctx.common.async) {
          const finalMap = /* @__PURE__ */ new Map();
          return Promise.resolve().then(async () => {
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          });
        } else {
          const finalMap = /* @__PURE__ */ new Map();
          for (const pair of pairs) {
            const key = pair.key;
            const value = pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        }
      }
    }
    ZodMap.create = (keyType, valueType, params) => {
      return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
      });
    };
    class ZodSet extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.set,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
          if (ctx.data.size < def.minSize.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: def.minSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.minSize.message
            });
            status.dirty();
          }
        }
        if (def.maxSize !== null) {
          if (ctx.data.size > def.maxSize.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: def.maxSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.maxSize.message
            });
            status.dirty();
          }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
          const parsedSet = /* @__PURE__ */ new Set();
          for (const element of elements2) {
            if (element.status === "aborted")
              return INVALID;
            if (element.status === "dirty")
              status.dirty();
            parsedSet.add(element.value);
          }
          return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i2) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i2)));
        if (ctx.common.async) {
          return Promise.all(elements).then((elements2) => finalizeSet(elements2));
        } else {
          return finalizeSet(elements);
        }
      }
      min(minSize, message) {
        return new ZodSet({
          ...this._def,
          minSize: { value: minSize, message: errorUtil.toString(message) }
        });
      }
      max(maxSize, message) {
        return new ZodSet({
          ...this._def,
          maxSize: { value: maxSize, message: errorUtil.toString(message) }
        });
      }
      size(size2, message) {
        return this.min(size2, message).max(size2, message);
      }
      nonempty(message) {
        return this.min(1, message);
      }
    }
    ZodSet.create = (valueType, params) => {
      return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
      });
    };
    class ZodLazy extends ZodType {
      get schema() {
        return this._def.getter();
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
      }
    }
    ZodLazy.create = (getter, params) => {
      return new ZodLazy({
        getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
      });
    };
    class ZodLiteral extends ZodType {
      _parse(input) {
        if (input.data !== this._def.value) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_literal,
            expected: this._def.value
          });
          return INVALID;
        }
        return { status: "valid", value: input.data };
      }
      get value() {
        return this._def.value;
      }
    }
    ZodLiteral.create = (value, params) => {
      return new ZodLiteral({
        value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
      });
    };
    function createZodEnum(values, params) {
      return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params)
      });
    }
    class ZodEnum extends ZodType {
      constructor() {
        super(...arguments);
        _ZodEnum_cache.set(this, void 0);
      }
      _parse(input) {
        if (typeof input.data !== "string") {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          addIssueToContext(ctx, {
            expected: util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode.invalid_type
          });
          return INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
          __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return INVALID;
        }
        return OK(input.data);
      }
      get options() {
        return this._def.values;
      }
      get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      extract(values, newDef = this._def) {
        return ZodEnum.create(values, {
          ...this._def,
          ...newDef
        });
      }
      exclude(values, newDef = this._def) {
        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
          ...this._def,
          ...newDef
        });
      }
    }
    _ZodEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodEnum.create = createZodEnum;
    class ZodNativeEnum extends ZodType {
      constructor() {
        super(...arguments);
        _ZodNativeEnum_cache.set(this, void 0);
      }
      _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
          const expectedValues = util.objectValues(nativeEnumValues);
          addIssueToContext(ctx, {
            expected: util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode.invalid_type
          });
          return INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
          __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), "f");
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
          const expectedValues = util.objectValues(nativeEnumValues);
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return INVALID;
        }
        return OK(input.data);
      }
      get enum() {
        return this._def.values;
      }
    }
    _ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodNativeEnum.create = (values, params) => {
      return new ZodNativeEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
      });
    };
    class ZodPromise extends ZodType {
      unwrap() {
        return this._def.type;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.promise,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return OK(promisified.then((data) => {
          return this._def.type.parseAsync(data, {
            path: ctx.path,
            errorMap: ctx.common.contextualErrorMap
          });
        }));
      }
    }
    ZodPromise.create = (schema, params) => {
      return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
      });
    };
    class ZodEffects extends ZodType {
      innerType() {
        return this._def.schema;
      }
      sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
          addIssue: (arg) => {
            addIssueToContext(ctx, arg);
            if (arg.fatal) {
              status.abort();
            } else {
              status.dirty();
            }
          },
          get path() {
            return ctx.path;
          }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
          const processed = effect.transform(ctx.data, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(processed).then(async (processed2) => {
              if (status.value === "aborted")
                return INVALID;
              const result = await this._def.schema._parseAsync({
                data: processed2,
                path: ctx.path,
                parent: ctx
              });
              if (result.status === "aborted")
                return INVALID;
              if (result.status === "dirty")
                return DIRTY(result.value);
              if (status.value === "dirty")
                return DIRTY(result.value);
              return result;
            });
          } else {
            if (status.value === "aborted")
              return INVALID;
            const result = this._def.schema._parseSync({
              data: processed,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted")
              return INVALID;
            if (result.status === "dirty")
              return DIRTY(result.value);
            if (status.value === "dirty")
              return DIRTY(result.value);
            return result;
          }
        }
        if (effect.type === "refinement") {
          const executeRefinement = (acc) => {
            const result = effect.refinement(acc, checkCtx);
            if (ctx.common.async) {
              return Promise.resolve(result);
            }
            if (result instanceof Promise) {
              throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
            }
            return acc;
          };
          if (ctx.common.async === false) {
            const inner = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inner.status === "aborted")
              return INVALID;
            if (inner.status === "dirty")
              status.dirty();
            executeRefinement(inner.value);
            return { status: status.value, value: inner.value };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
              if (inner.status === "aborted")
                return INVALID;
              if (inner.status === "dirty")
                status.dirty();
              return executeRefinement(inner.value).then(() => {
                return { status: status.value, value: inner.value };
              });
            });
          }
        }
        if (effect.type === "transform") {
          if (ctx.common.async === false) {
            const base = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (!isValid(base))
              return base;
            const result = effect.transform(base.value, checkCtx);
            if (result instanceof Promise) {
              throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
            }
            return { status: status.value, value: result };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
              if (!isValid(base))
                return base;
              return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({
                status: status.value,
                value: result
              }));
            });
          }
        }
        util.assertNever(effect);
      }
    }
    ZodEffects.create = (schema, effect, params) => {
      return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
      });
    };
    ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
      return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
      });
    };
    class ZodOptional extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
          return OK(void 0);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    }
    ZodOptional.create = (type, params) => {
      return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
      });
    };
    class ZodNullable extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
          return OK(null);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    }
    ZodNullable.create = (type, params) => {
      return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
      });
    };
    class ZodDefault extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
          data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      removeDefault() {
        return this._def.innerType;
      }
    }
    ZodDefault.create = (type, params) => {
      return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : () => params.default,
        ...processCreateParams(params)
      });
    };
    class ZodCatch extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const newCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          }
        };
        const result = this._def.innerType._parse({
          data: newCtx.data,
          path: newCtx.path,
          parent: {
            ...newCtx
          }
        });
        if (isAsync(result)) {
          return result.then((result2) => {
            return {
              status: "valid",
              value: result2.status === "valid" ? result2.value : this._def.catchValue({
                get error() {
                  return new ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          });
        } else {
          return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
              get error() {
                return new ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        }
      }
      removeCatch() {
        return this._def.innerType;
      }
    }
    ZodCatch.create = (type, params) => {
      return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params)
      });
    };
    class ZodNaN extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.nan,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return { status: "valid", value: input.data };
      }
    }
    ZodNaN.create = (params) => {
      return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
      });
    };
    class ZodBranded extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      unwrap() {
        return this._def.type;
      }
    }
    class ZodPipeline extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
          const handleAsync = async () => {
            const inResult = await this._def.in._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return DIRTY(inResult.value);
            } else {
              return this._def.out._parseAsync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          };
          return handleAsync();
        } else {
          const inResult = this._def.in._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return {
              status: "dirty",
              value: inResult.value
            };
          } else {
            return this._def.out._parseSync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        }
      }
      static create(a2, b) {
        return new ZodPipeline({
          in: a2,
          out: b,
          typeName: ZodFirstPartyTypeKind.ZodPipeline
        });
      }
    }
    class ZodReadonly extends ZodType {
      _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze = (data) => {
          if (isValid(data)) {
            data.value = Object.freeze(data.value);
          }
          return data;
        };
        return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
      }
      unwrap() {
        return this._def.innerType;
      }
    }
    ZodReadonly.create = (type, params) => {
      return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params)
      });
    };
    var ZodFirstPartyTypeKind;
    (function(ZodFirstPartyTypeKind2) {
      ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
      ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
      ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
      ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
      ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
      ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
      ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
      ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
      ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
      ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
      ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
      ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
      ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
      ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
      ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
      ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
      ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
      ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
      ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
      ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
      ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
      ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
      ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
      ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
      ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
      ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
      ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
      ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
      ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
      ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
      ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
      ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
      ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
      ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
      ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
      ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
    })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
    const stringType = ZodString.create;
    ZodNever.create;
    ZodArray.create;
    const objectType = ZodObject.create;
    ZodUnion.create;
    ZodIntersection.create;
    ZodTuple.create;
    ZodEnum.create;
    ZodPromise.create;
    ZodOptional.create;
    ZodNullable.create;
    const loginForm = objectType({
      email: stringType().email(),
      password: stringType()
    });
    const r = (t, r2, o2) => {
      if (t && "reportValidity" in t) {
        const s2 = get$1(o2, r2);
        t.setCustomValidity(s2 && s2.message || ""), t.reportValidity();
      }
    }, o = (e, t) => {
      for (const o2 in t.fields) {
        const s2 = t.fields[o2];
        s2 && s2.ref && "reportValidity" in s2.ref ? r(s2.ref, o2, e) : s2 && s2.refs && s2.refs.forEach((t2) => r(t2, o2, e));
      }
    }, s$2 = (r2, s2) => {
      s2.shouldUseNativeValidation && o(r2, s2);
      const n2 = {};
      for (const o2 in r2) {
        const f = get$1(s2.fields, o2), c2 = Object.assign(r2[o2] || {}, { ref: f && f.ref });
        if (i(s2.names || Object.keys(r2), o2)) {
          const r3 = Object.assign({}, get$1(n2, o2));
          set(r3, "root", c2), set(n2, o2, r3);
        } else set(n2, o2, c2);
      }
      return n2;
    }, i = (e, t) => {
      const r2 = n$1(t);
      return e.some((e3) => n$1(e3).match(`^${r2}\\.\\d+`));
    };
    function n$1(e) {
      return e.replace(/\]|\[/g, "");
    }
    function n(r2, e) {
      for (var n2 = {}; r2.length; ) {
        var s2 = r2[0], t = s2.code, i2 = s2.message, a2 = s2.path.join(".");
        if (!n2[a2]) if ("unionErrors" in s2) {
          var u2 = s2.unionErrors[0].errors[0];
          n2[a2] = { message: u2.message, type: u2.code };
        } else n2[a2] = { message: i2, type: t };
        if ("unionErrors" in s2 && s2.unionErrors.forEach(function(e3) {
          return e3.errors.forEach(function(e4) {
            return r2.push(e4);
          });
        }), e) {
          var c2 = n2[a2].types, f = c2 && c2[s2.code];
          n2[a2] = appendErrors(a2, e, n2, t, f ? [].concat(f, s2.message) : s2.message);
        }
        r2.shift();
      }
      return n2;
    }
    function s$1(o$1, s2, t) {
      return void 0 === t && (t = {}), function(i2, a2, u2) {
        try {
          return Promise.resolve(function(e, n2) {
            try {
              var a3 = Promise.resolve(o$1["sync" === t.mode ? "parse" : "parseAsync"](i2, s2)).then(function(e3) {
                return u2.shouldUseNativeValidation && o({}, u2), { errors: {}, values: t.raw ? Object.assign({}, i2) : e3 };
              });
            } catch (r2) {
              return n2(r2);
            }
            return a3 && a3.then ? a3.then(void 0, n2) : a3;
          }(0, function(r2) {
            if (function(r3) {
              return Array.isArray(null == r3 ? void 0 : r3.errors);
            }(r2)) return { values: {}, errors: s$2(n(r2.errors, !u2.shouldUseNativeValidation && "all" === u2.criteriaMode), u2) };
            throw r2;
          }));
        } catch (r2) {
          return Promise.reject(r2);
        }
      };
    }
    function Login() {
      const [cookies2, setCookies] = useCookies(["token"]);
      const navigate = useNavigate();
      const loginMutation = useMutation({
        mutationFn: login,
        onSuccess: (data) => {
          setCookies("token", data.token, {
            path: "/"
          });
          navigate("/", { replace: true });
        }
      });
      const form = useForm({
        resolver: s$1(loginForm),
        defaultValues: {
          email: "",
          password: ""
        }
      });
      const onSubmit = form.handleSubmit(
        (data) => toast.promise(loginMutation.mutateAsync(data), {
          loading: "Memproses autentikasi...",
          success: () => "Berhasil masuk",
          error: (e) => {
            var _a2;
            return ((_a2 = e.response) == null ? void 0 : _a2.status) === 401 ? "Email atau password salah" : "Terjadi kesalahan";
          }
        })
      );
      reactExports.useEffect(() => {
        if (cookies2.token) {
          navigate("/", { replace: true });
        }
      }, [cookies2.token]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full min-h-screen bg-neutral-100 flex flex-col justify-center items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Form, { ...form, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "form",
        {
          onSubmit,
          className: "w-full min-h-screen lg:min-h-auto lg:w-[400px] bg-white rounded-none lg:rounded-md shadow-none lg:shadow-sm p-8 flex flex-col justify-center",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-xl font-montserrat font-bold", children: "Sign In" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mb-8", children: "Silahkan masuk menggunakan akun admin Anda" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              FormField,
              {
                control: form.control,
                name: "email",
                render: ({ field }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(FormItem, { className: "mb-5", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(FormLabel, { children: "Email" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(FormControl, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Input, { disabled: loginMutation.isPending, ...field }) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(FormMessage, {})
                ] })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              FormField,
              {
                control: form.control,
                name: "password",
                render: ({ field }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(FormItem, { className: "mb-5", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(FormLabel, { children: "Password" }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(FormControl, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Input,
                    {
                      disabled: loginMutation.isPending,
                      type: "password",
                      ...field
                    }
                  ) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(FormMessage, {})
                ] })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsxs(Button, { type: "submit", disabled: loginMutation.isPending, children: [
              "Masuk ",
              /* @__PURE__ */ jsxRuntimeExports.jsx(ArrowRight, {})
            ] })
          ]
        }
      ) }) });
    }
    var U$1 = 1, Y$1 = 0.9, H = 0.8, J = 0.17, p = 0.1, u = 0.999, $ = 0.9999;
    var k$2 = 0.99, m = /[\\\/_+.#"@\[\(\{&]/, B$1 = /[\\\/_+.#"@\[\(\{&]/g, K$1 = /[\s-]/, X = /[\s-]/g;
    function G(_, C, h, P2, A, f, O) {
      if (f === C.length) return A === _.length ? U$1 : k$2;
      var T2 = `${A},${f}`;
      if (O[T2] !== void 0) return O[T2];
      for (var L2 = P2.charAt(f), c2 = h.indexOf(L2, A), S = 0, E, N2, R, M2; c2 >= 0; ) E = G(_, C, h, P2, c2 + 1, f + 1, O), E > S && (c2 === A ? E *= U$1 : m.test(_.charAt(c2 - 1)) ? (E *= H, R = _.slice(A, c2 - 1).match(B$1), R && A > 0 && (E *= Math.pow(u, R.length))) : K$1.test(_.charAt(c2 - 1)) ? (E *= Y$1, M2 = _.slice(A, c2 - 1).match(X), M2 && A > 0 && (E *= Math.pow(u, M2.length))) : (E *= J, A > 0 && (E *= Math.pow(u, c2 - A))), _.charAt(c2) !== C.charAt(f) && (E *= $)), (E < p && h.charAt(c2 - 1) === P2.charAt(f + 1) || P2.charAt(f + 1) === P2.charAt(f) && h.charAt(c2 - 1) !== P2.charAt(f)) && (N2 = G(_, C, h, P2, c2 + 1, f + 2, O), N2 * p > E && (E = N2 * p)), E > S && (S = E), c2 = h.indexOf(L2, c2 + 1);
      return O[T2] = S, S;
    }
    function D(_) {
      return _.toLowerCase().replace(X, " ");
    }
    function W(_, C, h) {
      return _ = h && h.length > 0 ? `${_ + " " + h.join(" ")}` : _, G(_, C, D(_), D(C), 0, 0, {});
    }
    var N = '[cmdk-group=""]', Y = '[cmdk-group-items=""]', be = '[cmdk-group-heading=""]', le = '[cmdk-item=""]', ce = `${le}:not([aria-disabled="true"])`, Z = "cmdk-item-select", T = "data-value", Re = (r2, o2, n2) => W(r2, o2, n2), ue = reactExports.createContext(void 0), K = () => reactExports.useContext(ue), de = reactExports.createContext(void 0), ee = () => reactExports.useContext(de), fe = reactExports.createContext(void 0), me = reactExports.forwardRef((r2, o2) => {
      let n2 = L(() => {
        var e, a2;
        return { search: "", value: (a2 = (e = r2.value) != null ? e : r2.defaultValue) != null ? a2 : "", selectedItemId: void 0, filtered: { count: 0, items: /* @__PURE__ */ new Map(), groups: /* @__PURE__ */ new Set() } };
      }), u2 = L(() => /* @__PURE__ */ new Set()), c2 = L(() => /* @__PURE__ */ new Map()), d = L(() => /* @__PURE__ */ new Map()), f = L(() => /* @__PURE__ */ new Set()), p2 = pe(r2), { label: b, children: m2, value: R, onValueChange: x2, filter: C, shouldFilter: S, loop: A, disablePointerSelection: ge = false, vimBindings: j = true, ...O } = r2, $2 = useId(), q = useId(), _ = useId(), I = reactExports.useRef(null), v = ke();
      k$1(() => {
        if (R !== void 0) {
          let e = R.trim();
          n2.current.value = e, E.emit();
        }
      }, [R]), k$1(() => {
        v(6, ne);
      }, []);
      let E = reactExports.useMemo(() => ({ subscribe: (e) => (f.current.add(e), () => f.current.delete(e)), snapshot: () => n2.current, setState: (e, a2, s2) => {
        var i2, l, g, y2;
        if (!Object.is(n2.current[e], a2)) {
          if (n2.current[e] = a2, e === "search") J2(), z2(), v(1, W2);
          else if (e === "value") {
            if (document.activeElement.hasAttribute("cmdk-input") || document.activeElement.hasAttribute("cmdk-root")) {
              let h = document.getElementById(_);
              h ? h.focus() : (i2 = document.getElementById($2)) == null || i2.focus();
            }
            if (v(7, () => {
              var h;
              n2.current.selectedItemId = (h = M2()) == null ? void 0 : h.id, E.emit();
            }), s2 || v(5, ne), ((l = p2.current) == null ? void 0 : l.value) !== void 0) {
              let h = a2 != null ? a2 : "";
              (y2 = (g = p2.current).onValueChange) == null || y2.call(g, h);
              return;
            }
          }
          E.emit();
        }
      }, emit: () => {
        f.current.forEach((e) => e());
      } }), []), U2 = reactExports.useMemo(() => ({ value: (e, a2, s2) => {
        var i2;
        a2 !== ((i2 = d.current.get(e)) == null ? void 0 : i2.value) && (d.current.set(e, { value: a2, keywords: s2 }), n2.current.filtered.items.set(e, te(a2, s2)), v(2, () => {
          z2(), E.emit();
        }));
      }, item: (e, a2) => (u2.current.add(e), a2 && (c2.current.has(a2) ? c2.current.get(a2).add(e) : c2.current.set(a2, /* @__PURE__ */ new Set([e]))), v(3, () => {
        J2(), z2(), n2.current.value || W2(), E.emit();
      }), () => {
        d.current.delete(e), u2.current.delete(e), n2.current.filtered.items.delete(e);
        let s2 = M2();
        v(4, () => {
          J2(), (s2 == null ? void 0 : s2.getAttribute("id")) === e && W2(), E.emit();
        });
      }), group: (e) => (c2.current.has(e) || c2.current.set(e, /* @__PURE__ */ new Set()), () => {
        d.current.delete(e), c2.current.delete(e);
      }), filter: () => p2.current.shouldFilter, label: b || r2["aria-label"], getDisablePointerSelection: () => p2.current.disablePointerSelection, listId: $2, inputId: _, labelId: q, listInnerRef: I }), []);
      function te(e, a2) {
        var i2, l;
        let s2 = (l = (i2 = p2.current) == null ? void 0 : i2.filter) != null ? l : Re;
        return e ? s2(e, n2.current.search, a2) : 0;
      }
      function z2() {
        if (!n2.current.search || p2.current.shouldFilter === false) return;
        let e = n2.current.filtered.items, a2 = [];
        n2.current.filtered.groups.forEach((i2) => {
          let l = c2.current.get(i2), g = 0;
          l.forEach((y2) => {
            let h = e.get(y2);
            g = Math.max(h, g);
          }), a2.push([i2, g]);
        });
        let s2 = I.current;
        V().sort((i2, l) => {
          var h, F;
          let g = i2.getAttribute("id"), y2 = l.getAttribute("id");
          return ((h = e.get(y2)) != null ? h : 0) - ((F = e.get(g)) != null ? F : 0);
        }).forEach((i2) => {
          let l = i2.closest(Y);
          l ? l.appendChild(i2.parentElement === l ? i2 : i2.closest(`${Y} > *`)) : s2.appendChild(i2.parentElement === s2 ? i2 : i2.closest(`${Y} > *`));
        }), a2.sort((i2, l) => l[1] - i2[1]).forEach((i2) => {
          var g;
          let l = (g = I.current) == null ? void 0 : g.querySelector(`${N}[${T}="${encodeURIComponent(i2[0])}"]`);
          l == null || l.parentElement.appendChild(l);
        });
      }
      function W2() {
        let e = V().find((s2) => s2.getAttribute("aria-disabled") !== "true"), a2 = e == null ? void 0 : e.getAttribute(T);
        E.setState("value", a2 || void 0);
      }
      function J2() {
        var a2, s2, i2, l;
        if (!n2.current.search || p2.current.shouldFilter === false) {
          n2.current.filtered.count = u2.current.size;
          return;
        }
        n2.current.filtered.groups = /* @__PURE__ */ new Set();
        let e = 0;
        for (let g of u2.current) {
          let y2 = (s2 = (a2 = d.current.get(g)) == null ? void 0 : a2.value) != null ? s2 : "", h = (l = (i2 = d.current.get(g)) == null ? void 0 : i2.keywords) != null ? l : [], F = te(y2, h);
          n2.current.filtered.items.set(g, F), F > 0 && e++;
        }
        for (let [g, y2] of c2.current) for (let h of y2) if (n2.current.filtered.items.get(h) > 0) {
          n2.current.filtered.groups.add(g);
          break;
        }
        n2.current.filtered.count = e;
      }
      function ne() {
        var a2, s2, i2;
        let e = M2();
        e && (((a2 = e.parentElement) == null ? void 0 : a2.firstChild) === e && ((i2 = (s2 = e.closest(N)) == null ? void 0 : s2.querySelector(be)) == null || i2.scrollIntoView({ block: "nearest" })), e.scrollIntoView({ block: "nearest" }));
      }
      function M2() {
        var e;
        return (e = I.current) == null ? void 0 : e.querySelector(`${le}[aria-selected="true"]`);
      }
      function V() {
        var e;
        return Array.from(((e = I.current) == null ? void 0 : e.querySelectorAll(ce)) || []);
      }
      function X2(e) {
        let s2 = V()[e];
        s2 && E.setState("value", s2.getAttribute(T));
      }
      function Q(e) {
        var g;
        let a2 = M2(), s2 = V(), i2 = s2.findIndex((y2) => y2 === a2), l = s2[i2 + e];
        (g = p2.current) != null && g.loop && (l = i2 + e < 0 ? s2[s2.length - 1] : i2 + e === s2.length ? s2[0] : s2[i2 + e]), l && E.setState("value", l.getAttribute(T));
      }
      function re2(e) {
        let a2 = M2(), s2 = a2 == null ? void 0 : a2.closest(N), i2;
        for (; s2 && !i2; ) s2 = e > 0 ? we(s2, N) : De(s2, N), i2 = s2 == null ? void 0 : s2.querySelector(ce);
        i2 ? E.setState("value", i2.getAttribute(T)) : Q(e);
      }
      let oe = () => X2(V().length - 1), ie = (e) => {
        e.preventDefault(), e.metaKey ? oe() : e.altKey ? re2(1) : Q(1);
      }, se = (e) => {
        e.preventDefault(), e.metaKey ? X2(0) : e.altKey ? re2(-1) : Q(-1);
      };
      return reactExports.createElement(Primitive.div, { ref: o2, tabIndex: -1, ...O, "cmdk-root": "", onKeyDown: (e) => {
        var s2;
        (s2 = O.onKeyDown) == null || s2.call(O, e);
        let a2 = e.nativeEvent.isComposing || e.keyCode === 229;
        if (!(e.defaultPrevented || a2)) switch (e.key) {
          case "n":
          case "j": {
            j && e.ctrlKey && ie(e);
            break;
          }
          case "ArrowDown": {
            ie(e);
            break;
          }
          case "p":
          case "k": {
            j && e.ctrlKey && se(e);
            break;
          }
          case "ArrowUp": {
            se(e);
            break;
          }
          case "Home": {
            e.preventDefault(), X2(0);
            break;
          }
          case "End": {
            e.preventDefault(), oe();
            break;
          }
          case "Enter": {
            e.preventDefault();
            let i2 = M2();
            if (i2) {
              let l = new Event(Z);
              i2.dispatchEvent(l);
            }
          }
        }
      } }, reactExports.createElement("label", { "cmdk-label": "", htmlFor: U2.inputId, id: U2.labelId, style: Te }, b), B(r2, (e) => reactExports.createElement(de.Provider, { value: E }, reactExports.createElement(ue.Provider, { value: U2 }, e))));
    }), he = reactExports.forwardRef((r2, o2) => {
      var _, I;
      let n2 = useId(), u2 = reactExports.useRef(null), c2 = reactExports.useContext(fe), d = K(), f = pe(r2), p2 = (I = (_ = f.current) == null ? void 0 : _.forceMount) != null ? I : c2 == null ? void 0 : c2.forceMount;
      k$1(() => {
        if (!p2) return d.item(n2, c2 == null ? void 0 : c2.id);
      }, [p2]);
      let b = ve(n2, u2, [r2.value, r2.children, u2], r2.keywords), m2 = ee(), R = P$1((v) => v.value && v.value === b.current), x2 = P$1((v) => p2 || d.filter() === false ? true : v.search ? v.filtered.items.get(n2) > 0 : true);
      reactExports.useEffect(() => {
        let v = u2.current;
        if (!(!v || r2.disabled)) return v.addEventListener(Z, C), () => v.removeEventListener(Z, C);
      }, [x2, r2.onSelect, r2.disabled]);
      function C() {
        var v, E;
        S(), (E = (v = f.current).onSelect) == null || E.call(v, b.current);
      }
      function S() {
        m2.setState("value", b.current, true);
      }
      if (!x2) return null;
      let { disabled: A, value: ge, onSelect: j, forceMount: O, keywords: $2, ...q } = r2;
      return reactExports.createElement(Primitive.div, { ref: composeRefs(u2, o2), ...q, id: n2, "cmdk-item": "", role: "option", "aria-disabled": !!A, "aria-selected": !!R, "data-disabled": !!A, "data-selected": !!R, onPointerMove: A || d.getDisablePointerSelection() ? void 0 : S, onClick: A ? void 0 : C }, r2.children);
    }), Ee = reactExports.forwardRef((r2, o2) => {
      let { heading: n2, children: u2, forceMount: c2, ...d } = r2, f = useId(), p2 = reactExports.useRef(null), b = reactExports.useRef(null), m2 = useId(), R = K(), x2 = P$1((S) => c2 || R.filter() === false ? true : S.search ? S.filtered.groups.has(f) : true);
      k$1(() => R.group(f), []), ve(f, p2, [r2.value, r2.heading, b]);
      let C = reactExports.useMemo(() => ({ id: f, forceMount: c2 }), [c2]);
      return reactExports.createElement(Primitive.div, { ref: composeRefs(p2, o2), ...d, "cmdk-group": "", role: "presentation", hidden: x2 ? void 0 : true }, n2 && reactExports.createElement("div", { ref: b, "cmdk-group-heading": "", "aria-hidden": true, id: m2 }, n2), B(r2, (S) => reactExports.createElement("div", { "cmdk-group-items": "", role: "group", "aria-labelledby": n2 ? m2 : void 0 }, reactExports.createElement(fe.Provider, { value: C }, S))));
    }), ye = reactExports.forwardRef((r2, o2) => {
      let { alwaysRender: n2, ...u2 } = r2, c2 = reactExports.useRef(null), d = P$1((f) => !f.search);
      return !n2 && !d ? null : reactExports.createElement(Primitive.div, { ref: composeRefs(c2, o2), ...u2, "cmdk-separator": "", role: "separator" });
    }), Se = reactExports.forwardRef((r2, o2) => {
      let { onValueChange: n2, ...u2 } = r2, c2 = r2.value != null, d = ee(), f = P$1((m2) => m2.search), p2 = P$1((m2) => m2.selectedItemId), b = K();
      return reactExports.useEffect(() => {
        r2.value != null && d.setState("search", r2.value);
      }, [r2.value]), reactExports.createElement(Primitive.input, { ref: o2, ...u2, "cmdk-input": "", autoComplete: "off", autoCorrect: "off", spellCheck: false, "aria-autocomplete": "list", role: "combobox", "aria-expanded": true, "aria-controls": b.listId, "aria-labelledby": b.labelId, "aria-activedescendant": p2, id: b.inputId, type: "text", value: c2 ? r2.value : f, onChange: (m2) => {
        c2 || d.setState("search", m2.target.value), n2 == null || n2(m2.target.value);
      } });
    }), Ce = reactExports.forwardRef((r2, o2) => {
      let { children: n2, label: u2 = "Suggestions", ...c2 } = r2, d = reactExports.useRef(null), f = reactExports.useRef(null), p2 = P$1((m2) => m2.selectedItemId), b = K();
      return reactExports.useEffect(() => {
        if (f.current && d.current) {
          let m2 = f.current, R = d.current, x2, C = new ResizeObserver(() => {
            x2 = requestAnimationFrame(() => {
              let S = m2.offsetHeight;
              R.style.setProperty("--cmdk-list-height", S.toFixed(1) + "px");
            });
          });
          return C.observe(m2), () => {
            cancelAnimationFrame(x2), C.unobserve(m2);
          };
        }
      }, []), reactExports.createElement(Primitive.div, { ref: composeRefs(d, o2), ...c2, "cmdk-list": "", role: "listbox", tabIndex: -1, "aria-activedescendant": p2, "aria-label": u2, id: b.listId }, B(r2, (m2) => reactExports.createElement("div", { ref: composeRefs(f, b.listInnerRef), "cmdk-list-sizer": "" }, m2)));
    }), xe = reactExports.forwardRef((r2, o2) => {
      let { open: n2, onOpenChange: u2, overlayClassName: c2, contentClassName: d, container: f, ...p2 } = r2;
      return reactExports.createElement(Root$5, { open: n2, onOpenChange: u2 }, reactExports.createElement(Portal$3, { container: f }, reactExports.createElement(Overlay, { "cmdk-overlay": "", className: c2 }), reactExports.createElement(Content$1, { "aria-label": r2.label, "cmdk-dialog": "", className: d }, reactExports.createElement(me, { ref: o2, ...p2 }))));
    }), Ie = reactExports.forwardRef((r2, o2) => P$1((u2) => u2.filtered.count === 0) ? reactExports.createElement(Primitive.div, { ref: o2, ...r2, "cmdk-empty": "", role: "presentation" }) : null), Pe = reactExports.forwardRef((r2, o2) => {
      let { progress: n2, children: u2, label: c2 = "Loading...", ...d } = r2;
      return reactExports.createElement(Primitive.div, { ref: o2, ...d, "cmdk-loading": "", role: "progressbar", "aria-valuenow": n2, "aria-valuemin": 0, "aria-valuemax": 100, "aria-label": c2 }, B(r2, (f) => reactExports.createElement("div", { "aria-hidden": true }, f)));
    }), _e = Object.assign(me, { List: Ce, Item: he, Input: Se, Group: Ee, Separator: ye, Dialog: xe, Empty: Ie, Loading: Pe });
    function we(r2, o2) {
      let n2 = r2.nextElementSibling;
      for (; n2; ) {
        if (n2.matches(o2)) return n2;
        n2 = n2.nextElementSibling;
      }
    }
    function De(r2, o2) {
      let n2 = r2.previousElementSibling;
      for (; n2; ) {
        if (n2.matches(o2)) return n2;
        n2 = n2.previousElementSibling;
      }
    }
    function pe(r2) {
      let o2 = reactExports.useRef(r2);
      return k$1(() => {
        o2.current = r2;
      }), o2;
    }
    var k$1 = typeof window == "undefined" ? reactExports.useEffect : reactExports.useLayoutEffect;
    function L(r2) {
      let o2 = reactExports.useRef();
      return o2.current === void 0 && (o2.current = r2()), o2;
    }
    function P$1(r2) {
      let o2 = ee(), n2 = () => r2(o2.snapshot());
      return reactExports.useSyncExternalStore(o2.subscribe, n2, n2);
    }
    function ve(r2, o2, n2, u2 = []) {
      let c2 = reactExports.useRef(), d = K();
      return k$1(() => {
        var b;
        let f = (() => {
          var m2;
          for (let R of n2) {
            if (typeof R == "string") return R.trim();
            if (typeof R == "object" && "current" in R) return R.current ? (m2 = R.current.textContent) == null ? void 0 : m2.trim() : c2.current;
          }
        })(), p2 = u2.map((m2) => m2.trim());
        d.value(r2, f, p2), (b = o2.current) == null || b.setAttribute(T, f), c2.current = f;
      }), c2;
    }
    var ke = () => {
      let [r2, o2] = reactExports.useState(), n2 = L(() => /* @__PURE__ */ new Map());
      return k$1(() => {
        n2.current.forEach((u2) => u2()), n2.current = /* @__PURE__ */ new Map();
      }, [r2]), (u2, c2) => {
        n2.current.set(u2, c2), o2({});
      };
    };
    function Me(r2) {
      let o2 = r2.type;
      return typeof o2 == "function" ? o2(r2.props) : "render" in o2 ? o2.render(r2.props) : r2;
    }
    function B({ asChild: r2, children: o2 }, n2) {
      return r2 && reactExports.isValidElement(o2) ? reactExports.cloneElement(Me(o2), { ref: o2.ref }, n2(o2.props.children)) : n2(o2);
    }
    var Te = { position: "absolute", width: "1px", height: "1px", padding: "0", margin: "-1px", overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", borderWidth: "0" };
    function Command({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        _e,
        {
          "data-slot": "command",
          className: cn$1(
            "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
            className
          ),
          ...props
        }
      );
    }
    function CommandInput({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          "data-slot": "command-input-wrapper",
          className: "flex h-9 items-center gap-2 border-b px-3",
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Search, { className: "size-4 shrink-0 opacity-50" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              _e.Input,
              {
                "data-slot": "command-input",
                className: cn$1(
                  "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
                  className
                ),
                ...props
              }
            )
          ]
        }
      );
    }
    function CommandList({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        _e.List,
        {
          "data-slot": "command-list",
          className: cn$1(
            "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
            className
          ),
          ...props
        }
      );
    }
    function CommandEmpty({
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        _e.Empty,
        {
          "data-slot": "command-empty",
          className: "py-6 text-center text-sm",
          ...props
        }
      );
    }
    function CommandGroup({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        _e.Group,
        {
          "data-slot": "command-group",
          className: cn$1(
            "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
            className
          ),
          ...props
        }
      );
    }
    function CommandItem({
      className,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        _e.Item,
        {
          "data-slot": "command-item",
          className: cn$1(
            "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
            className
          ),
          ...props
        }
      );
    }
    var POPOVER_NAME = "Popover";
    var [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [
      createPopperScope
    ]);
    var usePopperScope = createPopperScope();
    var [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);
    var Popover$1 = (props) => {
      const {
        __scopePopover,
        children,
        open: openProp,
        defaultOpen,
        onOpenChange,
        modal = false
      } = props;
      const popperScope = usePopperScope(__scopePopover);
      const triggerRef = reactExports.useRef(null);
      const [hasCustomAnchor, setHasCustomAnchor] = reactExports.useState(false);
      const [open, setOpen] = useControllableState({
        prop: openProp,
        defaultProp: defaultOpen ?? false,
        onChange: onOpenChange,
        caller: POPOVER_NAME
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Root2$2, { ...popperScope, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        PopoverProvider,
        {
          scope: __scopePopover,
          contentId: useId(),
          triggerRef,
          open,
          onOpenChange: setOpen,
          onOpenToggle: reactExports.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
          hasCustomAnchor,
          onCustomAnchorAdd: reactExports.useCallback(() => setHasCustomAnchor(true), []),
          onCustomAnchorRemove: reactExports.useCallback(() => setHasCustomAnchor(false), []),
          modal,
          children
        }
      ) });
    };
    Popover$1.displayName = POPOVER_NAME;
    var ANCHOR_NAME = "PopoverAnchor";
    var PopoverAnchor = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopePopover, ...anchorProps } = props;
        const context = usePopoverContext(ANCHOR_NAME, __scopePopover);
        const popperScope = usePopperScope(__scopePopover);
        const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
        reactExports.useEffect(() => {
          onCustomAnchorAdd();
          return () => onCustomAnchorRemove();
        }, [onCustomAnchorAdd, onCustomAnchorRemove]);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Anchor, { ...popperScope, ...anchorProps, ref: forwardedRef });
      }
    );
    PopoverAnchor.displayName = ANCHOR_NAME;
    var TRIGGER_NAME = "PopoverTrigger";
    var PopoverTrigger$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopePopover, ...triggerProps } = props;
        const context = usePopoverContext(TRIGGER_NAME, __scopePopover);
        const popperScope = usePopperScope(__scopePopover);
        const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
        const trigger = /* @__PURE__ */ jsxRuntimeExports.jsx(
          Primitive.button,
          {
            type: "button",
            "aria-haspopup": "dialog",
            "aria-expanded": context.open,
            "aria-controls": context.contentId,
            "data-state": getState(context.open),
            ...triggerProps,
            ref: composedTriggerRef,
            onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
          }
        );
        return context.hasCustomAnchor ? trigger : /* @__PURE__ */ jsxRuntimeExports.jsx(Anchor, { asChild: true, ...popperScope, children: trigger });
      }
    );
    PopoverTrigger$1.displayName = TRIGGER_NAME;
    var PORTAL_NAME = "PopoverPortal";
    var [PortalProvider, usePortalContext] = createPopoverContext(PORTAL_NAME, {
      forceMount: void 0
    });
    var PopoverPortal = (props) => {
      const { __scopePopover, forceMount, children, container } = props;
      const context = usePopoverContext(PORTAL_NAME, __scopePopover);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PortalProvider, { scope: __scopePopover, forceMount, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Portal$4, { asChild: true, container, children }) }) });
    };
    PopoverPortal.displayName = PORTAL_NAME;
    var CONTENT_NAME = "PopoverContent";
    var PopoverContent$1 = reactExports.forwardRef(
      (props, forwardedRef) => {
        const portalContext = usePortalContext(CONTENT_NAME, props.__scopePopover);
        const { forceMount = portalContext.forceMount, ...contentProps } = props;
        const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Presence, { present: forceMount || context.open, children: context.modal ? /* @__PURE__ */ jsxRuntimeExports.jsx(PopoverContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ jsxRuntimeExports.jsx(PopoverContentNonModal, { ...contentProps, ref: forwardedRef }) });
      }
    );
    PopoverContent$1.displayName = CONTENT_NAME;
    var Slot = /* @__PURE__ */ createSlot("PopoverContent.RemoveScroll");
    var PopoverContentModal = reactExports.forwardRef(
      (props, forwardedRef) => {
        const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
        const contentRef = reactExports.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, contentRef);
        const isRightClickOutsideRef = reactExports.useRef(false);
        reactExports.useEffect(() => {
          const content = contentRef.current;
          if (content) return hideOthers(content);
        }, []);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(ReactRemoveScroll, { as: Slot, allowPinchZoom: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          PopoverContentImpl,
          {
            ...props,
            ref: composedRefs,
            trapFocus: context.open,
            disableOutsidePointerEvents: true,
            onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
              var _a2;
              event.preventDefault();
              if (!isRightClickOutsideRef.current) (_a2 = context.triggerRef.current) == null ? void 0 : _a2.focus();
            }),
            onPointerDownOutside: composeEventHandlers(
              props.onPointerDownOutside,
              (event) => {
                const originalEvent = event.detail.originalEvent;
                const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
                const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
                isRightClickOutsideRef.current = isRightClick;
              },
              { checkForDefaultPrevented: false }
            ),
            onFocusOutside: composeEventHandlers(
              props.onFocusOutside,
              (event) => event.preventDefault(),
              { checkForDefaultPrevented: false }
            )
          }
        ) });
      }
    );
    var PopoverContentNonModal = reactExports.forwardRef(
      (props, forwardedRef) => {
        const context = usePopoverContext(CONTENT_NAME, props.__scopePopover);
        const hasInteractedOutsideRef = reactExports.useRef(false);
        const hasPointerDownOutsideRef = reactExports.useRef(false);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          PopoverContentImpl,
          {
            ...props,
            ref: forwardedRef,
            trapFocus: false,
            disableOutsidePointerEvents: false,
            onCloseAutoFocus: (event) => {
              var _a2, _b2;
              (_a2 = props.onCloseAutoFocus) == null ? void 0 : _a2.call(props, event);
              if (!event.defaultPrevented) {
                if (!hasInteractedOutsideRef.current) (_b2 = context.triggerRef.current) == null ? void 0 : _b2.focus();
                event.preventDefault();
              }
              hasInteractedOutsideRef.current = false;
              hasPointerDownOutsideRef.current = false;
            },
            onInteractOutside: (event) => {
              var _a2, _b2;
              (_a2 = props.onInteractOutside) == null ? void 0 : _a2.call(props, event);
              if (!event.defaultPrevented) {
                hasInteractedOutsideRef.current = true;
                if (event.detail.originalEvent.type === "pointerdown") {
                  hasPointerDownOutsideRef.current = true;
                }
              }
              const target = event.target;
              const targetIsTrigger = (_b2 = context.triggerRef.current) == null ? void 0 : _b2.contains(target);
              if (targetIsTrigger) event.preventDefault();
              if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
                event.preventDefault();
              }
            }
          }
        );
      }
    );
    var PopoverContentImpl = reactExports.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopePopover,
          trapFocus,
          onOpenAutoFocus,
          onCloseAutoFocus,
          disableOutsidePointerEvents,
          onEscapeKeyDown,
          onPointerDownOutside,
          onFocusOutside,
          onInteractOutside,
          ...contentProps
        } = props;
        const context = usePopoverContext(CONTENT_NAME, __scopePopover);
        const popperScope = usePopperScope(__scopePopover);
        useFocusGuards();
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          FocusScope,
          {
            asChild: true,
            loop: true,
            trapped: trapFocus,
            onMountAutoFocus: onOpenAutoFocus,
            onUnmountAutoFocus: onCloseAutoFocus,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              DismissableLayer,
              {
                asChild: true,
                disableOutsidePointerEvents,
                onInteractOutside,
                onEscapeKeyDown,
                onPointerDownOutside,
                onFocusOutside,
                onDismiss: () => context.onOpenChange(false),
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Content,
                  {
                    "data-state": getState(context.open),
                    role: "dialog",
                    id: context.contentId,
                    ...popperScope,
                    ...contentProps,
                    ref: forwardedRef,
                    style: {
                      ...contentProps.style,
                      // re-namespace exposed content custom properties
                      ...{
                        "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
                        "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
                        "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
                        "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
                        "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
                      }
                    }
                  }
                )
              }
            )
          }
        );
      }
    );
    var CLOSE_NAME = "PopoverClose";
    var PopoverClose = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopePopover, ...closeProps } = props;
        const context = usePopoverContext(CLOSE_NAME, __scopePopover);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(
          Primitive.button,
          {
            type: "button",
            ...closeProps,
            ref: forwardedRef,
            onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))
          }
        );
      }
    );
    PopoverClose.displayName = CLOSE_NAME;
    var ARROW_NAME = "PopoverArrow";
    var PopoverArrow = reactExports.forwardRef(
      (props, forwardedRef) => {
        const { __scopePopover, ...arrowProps } = props;
        const popperScope = usePopperScope(__scopePopover);
        return /* @__PURE__ */ jsxRuntimeExports.jsx(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
      }
    );
    PopoverArrow.displayName = ARROW_NAME;
    function getState(open) {
      return open ? "open" : "closed";
    }
    var Root2 = Popover$1;
    var Trigger = PopoverTrigger$1;
    var Portal = PopoverPortal;
    var Content2 = PopoverContent$1;
    function Popover({
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Root2, { "data-slot": "popover", ...props });
    }
    function PopoverTrigger({
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Trigger, { "data-slot": "popover-trigger", ...props });
    }
    function PopoverContent({
      className,
      align = "center",
      sideOffset = 4,
      ...props
    }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Content2,
        {
          "data-slot": "popover-content",
          align,
          sideOffset,
          className: cn$1(
            "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
            className
          ),
          ...props
        }
      ) });
    }
    function AdvanceSelect({
      value,
      options: options2,
      placeholder,
      onChange = () => {
      },
      className = "",
      searchPlaceholder = "Cari",
      loading,
      onSearch,
      ...props
    }) {
      var _a2;
      const [search, setSearch] = reactExports.useState("");
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(Popover, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(PopoverTrigger, { asChild: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Button,
          {
            variant: "outline",
            className: cn$1(
              "justify-start relative",
              value && "text-muted-foreground",
              className
            ),
            type: "button",
            asChild: true,
            ...props,
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(ChevronsUpDown, { className: "h-4 w-4 shrink-0 opacity-50" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: value ? (_a2 = options2.find((option) => option.value === value)) == null ? void 0 : _a2.label : placeholder }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  type: "button",
                  className: "absolute top-0 left-0 right-0 bottom-0"
                }
              )
            ] })
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(PopoverContent, { className: "p-0", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Command, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            CommandInput,
            {
              value: search,
              onValueChange: (value2) => {
                setSearch(value2);
                if (onSearch) onSearch(value2);
              },
              placeholder: searchPlaceholder
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(CommandList, { children: loading ? /* @__PURE__ */ jsxRuntimeExports.jsx(Pe, { className: "p-5 text-center", children: "Tunggu..." }) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(CommandEmpty, { children: "Tidak ada" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(CommandGroup, { children: options2.map((option, index2) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
              CommandItem,
              {
                value: option.label,
                onSelect: () => {
                  onChange(option.value);
                },
                children: [
                  option.label,
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Check,
                    {
                      className: cn$1(
                        "ml-auto",
                        option.value === value ? "opacity-100" : "opacity-0"
                      )
                    }
                  )
                ]
              },
              `${index2}`
            )) })
          ] }) })
        ] }) })
      ] });
    }
    function formatBytes(bytes, decimals = 2) {
      if (bytes === 0) return "0 Bytes";
      const k2 = 1024;
      const dm = decimals < 0 ? 0 : decimals;
      const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB"];
      const i2 = Math.floor(Math.log(bytes) / Math.log(k2));
      const value = parseFloat((bytes / Math.pow(k2, i2)).toFixed(dm));
      return `${value} ${sizes[i2]}`;
    }
    function ComplaintDetail() {
      var _a2, _b2, _c2, _d2, _e3, _f2, _g2;
      const { id } = useParams();
      const setPage = useLayoutState((state) => state.set);
      const [status, setStatus] = reactExports.useState();
      const debounce = useDebounce(
        (status2) => {
          if (status2) {
            toast.promise(updateStatus.mutateAsync({ id, status: status2 }), {
              loading: "Memperbaharui status",
              success: "Status berhasil diperbaharui"
            });
          }
        },
        status,
        1e3
      );
      const updateStatus = useMutation({
        mutationFn: updateComplaintStatus
      });
      const complaint = useQuery({
        queryKey: [`complaint-${id}`],
        queryFn: () => id ? getComplaint(id) : null
      });
      reactExports.useEffect(() => {
        var _a3, _b3;
        setPage({
          active: "Pengaduan",
          title: ((_a3 = complaint.data) == null ? void 0 : _a3.title) || ""
        });
        setStatus((_b3 = complaint.data) == null ? void 0 : _b3.status);
      }, [complaint.data]);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex p-5 space-x-5 items-start", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 flex items-start mt-2 text-sm text-neutral-600 space-x-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(MapPin, { size: 16, className: "mt-0.5" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: (_a2 = complaint.data) == null ? void 0 : _a2.address })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center mt-2 text-sm text-neutral-600 space-x-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(User, { size: 16 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: (_c2 = (_b2 = complaint.data) == null ? void 0 : _b2.user) == null ? void 0 : _c2.fullname })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center text-sm mt-2 text-neutral-600 space-x-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Clock, { size: 16 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: hooks((_d2 = complaint.data) == null ? void 0 : _d2.createdAt).format("DD MMM YYYY, HH:mm") })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center text-sm text-neutral-600 space-x-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            AdvanceSelect,
            {
              options: Object.keys(statusLookup).map((item) => ({
                value: item,
                label: statusLookup[item].label
              })),
              value: status,
              onChange: (value) => {
                setStatus(value);
                debounce(value);
              }
            }
          ) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Separator$1, {}),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 flex items-stretch", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-5 flex-1", children: (_e3 = complaint.data) == null ? void 0 : _e3.description }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Separator$1, { orientation: "vertical" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-64 bg-neutral-50 relative", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-0 left-0 w-full h-full p-3 overflow-auto flex flex-col space-y-3", children: (_g2 = (_f2 = complaint.data) == null ? void 0 : _f2.pics) == null ? void 0 : _g2.map((item, key) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-2 bg-white rounded border", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "img",
              {
                src: `${""}/uploads${item.file.url}`,
                className: "rounded"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-2 line-clamp-1 text-sm", children: item.file.name }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-xs", children: formatBytes(item.file.size) })
          ] }, key)) }) })
        ] })
      ] });
    }
    const getStats = () => client.get("/stats").then(({ data }) => data.data);
    var isArray_1;
    var hasRequiredIsArray;
    function requireIsArray() {
      if (hasRequiredIsArray) return isArray_1;
      hasRequiredIsArray = 1;
      var isArray2 = Array.isArray;
      isArray_1 = isArray2;
      return isArray_1;
    }
    var _freeGlobal;
    var hasRequired_freeGlobal;
    function require_freeGlobal() {
      if (hasRequired_freeGlobal) return _freeGlobal;
      hasRequired_freeGlobal = 1;
      var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      _freeGlobal = freeGlobal;
      return _freeGlobal;
    }
    var _root;
    var hasRequired_root;
    function require_root() {
      if (hasRequired_root) return _root;
      hasRequired_root = 1;
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      _root = root;
      return _root;
    }
    var _Symbol;
    var hasRequired_Symbol;
    function require_Symbol() {
      if (hasRequired_Symbol) return _Symbol;
      hasRequired_Symbol = 1;
      var root = require_root();
      var Symbol2 = root.Symbol;
      _Symbol = Symbol2;
      return _Symbol;
    }
    var _getRawTag;
    var hasRequired_getRawTag;
    function require_getRawTag() {
      if (hasRequired_getRawTag) return _getRawTag;
      hasRequired_getRawTag = 1;
      var Symbol2 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      _getRawTag = getRawTag;
      return _getRawTag;
    }
    var _objectToString;
    var hasRequired_objectToString;
    function require_objectToString() {
      if (hasRequired_objectToString) return _objectToString;
      hasRequired_objectToString = 1;
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      _objectToString = objectToString;
      return _objectToString;
    }
    var _baseGetTag;
    var hasRequired_baseGetTag;
    function require_baseGetTag() {
      if (hasRequired_baseGetTag) return _baseGetTag;
      hasRequired_baseGetTag = 1;
      var Symbol2 = require_Symbol(), getRawTag = require_getRawTag(), objectToString = require_objectToString();
      var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      _baseGetTag = baseGetTag;
      return _baseGetTag;
    }
    var isObjectLike_1;
    var hasRequiredIsObjectLike;
    function requireIsObjectLike() {
      if (hasRequiredIsObjectLike) return isObjectLike_1;
      hasRequiredIsObjectLike = 1;
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      isObjectLike_1 = isObjectLike;
      return isObjectLike_1;
    }
    var isSymbol_1;
    var hasRequiredIsSymbol;
    function requireIsSymbol() {
      if (hasRequiredIsSymbol) return isSymbol_1;
      hasRequiredIsSymbol = 1;
      var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
      var symbolTag = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      isSymbol_1 = isSymbol;
      return isSymbol_1;
    }
    var _isKey;
    var hasRequired_isKey;
    function require_isKey() {
      if (hasRequired_isKey) return _isKey;
      hasRequired_isKey = 1;
      var isArray2 = requireIsArray(), isSymbol = requireIsSymbol();
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
      function isKey2(value, object2) {
        if (isArray2(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object2 != null && value in Object(object2);
      }
      _isKey = isKey2;
      return _isKey;
    }
    var isObject_1;
    var hasRequiredIsObject;
    function requireIsObject() {
      if (hasRequiredIsObject) return isObject_1;
      hasRequiredIsObject = 1;
      function isObject2(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      isObject_1 = isObject2;
      return isObject_1;
    }
    var isFunction_1;
    var hasRequiredIsFunction;
    function requireIsFunction() {
      if (hasRequiredIsFunction) return isFunction_1;
      hasRequiredIsFunction = 1;
      var baseGetTag = require_baseGetTag(), isObject2 = requireIsObject();
      var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
      function isFunction2(value) {
        if (!isObject2(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      isFunction_1 = isFunction2;
      return isFunction_1;
    }
    var _coreJsData;
    var hasRequired_coreJsData;
    function require_coreJsData() {
      if (hasRequired_coreJsData) return _coreJsData;
      hasRequired_coreJsData = 1;
      var root = require_root();
      var coreJsData = root["__core-js_shared__"];
      _coreJsData = coreJsData;
      return _coreJsData;
    }
    var _isMasked;
    var hasRequired_isMasked;
    function require_isMasked() {
      if (hasRequired_isMasked) return _isMasked;
      hasRequired_isMasked = 1;
      var coreJsData = require_coreJsData();
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      _isMasked = isMasked;
      return _isMasked;
    }
    var _toSource;
    var hasRequired_toSource;
    function require_toSource() {
      if (hasRequired_toSource) return _toSource;
      hasRequired_toSource = 1;
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      _toSource = toSource;
      return _toSource;
    }
    var _baseIsNative;
    var hasRequired_baseIsNative;
    function require_baseIsNative() {
      if (hasRequired_baseIsNative) return _baseIsNative;
      hasRequired_baseIsNative = 1;
      var isFunction2 = requireIsFunction(), isMasked = require_isMasked(), isObject2 = requireIsObject(), toSource = require_toSource();
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto = Function.prototype, objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative(value) {
        if (!isObject2(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      _baseIsNative = baseIsNative;
      return _baseIsNative;
    }
    var _getValue;
    var hasRequired_getValue;
    function require_getValue() {
      if (hasRequired_getValue) return _getValue;
      hasRequired_getValue = 1;
      function getValue(object2, key) {
        return object2 == null ? void 0 : object2[key];
      }
      _getValue = getValue;
      return _getValue;
    }
    var _getNative;
    var hasRequired_getNative;
    function require_getNative() {
      if (hasRequired_getNative) return _getNative;
      hasRequired_getNative = 1;
      var baseIsNative = require_baseIsNative(), getValue = require_getValue();
      function getNative(object2, key) {
        var value = getValue(object2, key);
        return baseIsNative(value) ? value : void 0;
      }
      _getNative = getNative;
      return _getNative;
    }
    var _nativeCreate;
    var hasRequired_nativeCreate;
    function require_nativeCreate() {
      if (hasRequired_nativeCreate) return _nativeCreate;
      hasRequired_nativeCreate = 1;
      var getNative = require_getNative();
      var nativeCreate = getNative(Object, "create");
      _nativeCreate = nativeCreate;
      return _nativeCreate;
    }
    var _hashClear;
    var hasRequired_hashClear;
    function require_hashClear() {
      if (hasRequired_hashClear) return _hashClear;
      hasRequired_hashClear = 1;
      var nativeCreate = require_nativeCreate();
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      _hashClear = hashClear;
      return _hashClear;
    }
    var _hashDelete;
    var hasRequired_hashDelete;
    function require_hashDelete() {
      if (hasRequired_hashDelete) return _hashDelete;
      hasRequired_hashDelete = 1;
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      _hashDelete = hashDelete;
      return _hashDelete;
    }
    var _hashGet;
    var hasRequired_hashGet;
    function require_hashGet() {
      if (hasRequired_hashGet) return _hashGet;
      hasRequired_hashGet = 1;
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : void 0;
      }
      _hashGet = hashGet;
      return _hashGet;
    }
    var _hashHas;
    var hasRequired_hashHas;
    function require_hashHas() {
      if (hasRequired_hashHas) return _hashHas;
      hasRequired_hashHas = 1;
      var nativeCreate = require_nativeCreate();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
      }
      _hashHas = hashHas;
      return _hashHas;
    }
    var _hashSet;
    var hasRequired_hashSet;
    function require_hashSet() {
      if (hasRequired_hashSet) return _hashSet;
      hasRequired_hashSet = 1;
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      _hashSet = hashSet;
      return _hashSet;
    }
    var _Hash;
    var hasRequired_Hash;
    function require_Hash() {
      if (hasRequired_Hash) return _Hash;
      hasRequired_Hash = 1;
      var hashClear = require_hashClear(), hashDelete = require_hashDelete(), hashGet = require_hashGet(), hashHas = require_hashHas(), hashSet = require_hashSet();
      function Hash(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      _Hash = Hash;
      return _Hash;
    }
    var _listCacheClear;
    var hasRequired_listCacheClear;
    function require_listCacheClear() {
      if (hasRequired_listCacheClear) return _listCacheClear;
      hasRequired_listCacheClear = 1;
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      _listCacheClear = listCacheClear;
      return _listCacheClear;
    }
    var eq_1;
    var hasRequiredEq;
    function requireEq() {
      if (hasRequiredEq) return eq_1;
      hasRequiredEq = 1;
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      eq_1 = eq;
      return eq_1;
    }
    var _assocIndexOf;
    var hasRequired_assocIndexOf;
    function require_assocIndexOf() {
      if (hasRequired_assocIndexOf) return _assocIndexOf;
      hasRequired_assocIndexOf = 1;
      var eq = requireEq();
      function assocIndexOf(array2, key) {
        var length = array2.length;
        while (length--) {
          if (eq(array2[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      _assocIndexOf = assocIndexOf;
      return _assocIndexOf;
    }
    var _listCacheDelete;
    var hasRequired_listCacheDelete;
    function require_listCacheDelete() {
      if (hasRequired_listCacheDelete) return _listCacheDelete;
      hasRequired_listCacheDelete = 1;
      var assocIndexOf = require_assocIndexOf();
      var arrayProto = Array.prototype;
      var splice = arrayProto.splice;
      function listCacheDelete(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      _listCacheDelete = listCacheDelete;
      return _listCacheDelete;
    }
    var _listCacheGet;
    var hasRequired_listCacheGet;
    function require_listCacheGet() {
      if (hasRequired_listCacheGet) return _listCacheGet;
      hasRequired_listCacheGet = 1;
      var assocIndexOf = require_assocIndexOf();
      function listCacheGet(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      _listCacheGet = listCacheGet;
      return _listCacheGet;
    }
    var _listCacheHas;
    var hasRequired_listCacheHas;
    function require_listCacheHas() {
      if (hasRequired_listCacheHas) return _listCacheHas;
      hasRequired_listCacheHas = 1;
      var assocIndexOf = require_assocIndexOf();
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      _listCacheHas = listCacheHas;
      return _listCacheHas;
    }
    var _listCacheSet;
    var hasRequired_listCacheSet;
    function require_listCacheSet() {
      if (hasRequired_listCacheSet) return _listCacheSet;
      hasRequired_listCacheSet = 1;
      var assocIndexOf = require_assocIndexOf();
      function listCacheSet(key, value) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      _listCacheSet = listCacheSet;
      return _listCacheSet;
    }
    var _ListCache;
    var hasRequired_ListCache;
    function require_ListCache() {
      if (hasRequired_ListCache) return _ListCache;
      hasRequired_ListCache = 1;
      var listCacheClear = require_listCacheClear(), listCacheDelete = require_listCacheDelete(), listCacheGet = require_listCacheGet(), listCacheHas = require_listCacheHas(), listCacheSet = require_listCacheSet();
      function ListCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      _ListCache = ListCache;
      return _ListCache;
    }
    var _Map;
    var hasRequired_Map;
    function require_Map() {
      if (hasRequired_Map) return _Map;
      hasRequired_Map = 1;
      var getNative = require_getNative(), root = require_root();
      var Map2 = getNative(root, "Map");
      _Map = Map2;
      return _Map;
    }
    var _mapCacheClear;
    var hasRequired_mapCacheClear;
    function require_mapCacheClear() {
      if (hasRequired_mapCacheClear) return _mapCacheClear;
      hasRequired_mapCacheClear = 1;
      var Hash = require_Hash(), ListCache = require_ListCache(), Map2 = require_Map();
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      _mapCacheClear = mapCacheClear;
      return _mapCacheClear;
    }
    var _isKeyable;
    var hasRequired_isKeyable;
    function require_isKeyable() {
      if (hasRequired_isKeyable) return _isKeyable;
      hasRequired_isKeyable = 1;
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      _isKeyable = isKeyable;
      return _isKeyable;
    }
    var _getMapData;
    var hasRequired_getMapData;
    function require_getMapData() {
      if (hasRequired_getMapData) return _getMapData;
      hasRequired_getMapData = 1;
      var isKeyable = require_isKeyable();
      function getMapData(map2, key) {
        var data = map2.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      _getMapData = getMapData;
      return _getMapData;
    }
    var _mapCacheDelete;
    var hasRequired_mapCacheDelete;
    function require_mapCacheDelete() {
      if (hasRequired_mapCacheDelete) return _mapCacheDelete;
      hasRequired_mapCacheDelete = 1;
      var getMapData = require_getMapData();
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      _mapCacheDelete = mapCacheDelete;
      return _mapCacheDelete;
    }
    var _mapCacheGet;
    var hasRequired_mapCacheGet;
    function require_mapCacheGet() {
      if (hasRequired_mapCacheGet) return _mapCacheGet;
      hasRequired_mapCacheGet = 1;
      var getMapData = require_getMapData();
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      _mapCacheGet = mapCacheGet;
      return _mapCacheGet;
    }
    var _mapCacheHas;
    var hasRequired_mapCacheHas;
    function require_mapCacheHas() {
      if (hasRequired_mapCacheHas) return _mapCacheHas;
      hasRequired_mapCacheHas = 1;
      var getMapData = require_getMapData();
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      _mapCacheHas = mapCacheHas;
      return _mapCacheHas;
    }
    var _mapCacheSet;
    var hasRequired_mapCacheSet;
    function require_mapCacheSet() {
      if (hasRequired_mapCacheSet) return _mapCacheSet;
      hasRequired_mapCacheSet = 1;
      var getMapData = require_getMapData();
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size2 = data.size;
        data.set(key, value);
        this.size += data.size == size2 ? 0 : 1;
        return this;
      }
      _mapCacheSet = mapCacheSet;
      return _mapCacheSet;
    }
    var _MapCache;
    var hasRequired_MapCache;
    function require_MapCache() {
      if (hasRequired_MapCache) return _MapCache;
      hasRequired_MapCache = 1;
      var mapCacheClear = require_mapCacheClear(), mapCacheDelete = require_mapCacheDelete(), mapCacheGet = require_mapCacheGet(), mapCacheHas = require_mapCacheHas(), mapCacheSet = require_mapCacheSet();
      function MapCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      _MapCache = MapCache;
      return _MapCache;
    }
    var memoize_1;
    var hasRequiredMemoize;
    function requireMemoize() {
      if (hasRequiredMemoize) return memoize_1;
      hasRequiredMemoize = 1;
      var MapCache = require_MapCache();
      var FUNC_ERROR_TEXT = "Expected a function";
      function memoize2(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize2.Cache || MapCache)();
        return memoized;
      }
      memoize2.Cache = MapCache;
      memoize_1 = memoize2;
      return memoize_1;
    }
    var _memoizeCapped;
    var hasRequired_memoizeCapped;
    function require_memoizeCapped() {
      if (hasRequired_memoizeCapped) return _memoizeCapped;
      hasRequired_memoizeCapped = 1;
      var memoize2 = requireMemoize();
      var MAX_MEMOIZE_SIZE = 500;
      function memoizeCapped(func) {
        var result = memoize2(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });
        var cache = result.cache;
        return result;
      }
      _memoizeCapped = memoizeCapped;
      return _memoizeCapped;
    }
    var _stringToPath;
    var hasRequired_stringToPath;
    function require_stringToPath() {
      if (hasRequired_stringToPath) return _stringToPath;
      hasRequired_stringToPath = 1;
      var memoizeCapped = require_memoizeCapped();
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath2 = memoizeCapped(function(string2) {
        var result = [];
        if (string2.charCodeAt(0) === 46) {
          result.push("");
        }
        string2.replace(rePropName, function(match, number2, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match);
        });
        return result;
      });
      _stringToPath = stringToPath2;
      return _stringToPath;
    }
    var _arrayMap;
    var hasRequired_arrayMap;
    function require_arrayMap() {
      if (hasRequired_arrayMap) return _arrayMap;
      hasRequired_arrayMap = 1;
      function arrayMap(array2, iteratee) {
        var index2 = -1, length = array2 == null ? 0 : array2.length, result = Array(length);
        while (++index2 < length) {
          result[index2] = iteratee(array2[index2], index2, array2);
        }
        return result;
      }
      _arrayMap = arrayMap;
      return _arrayMap;
    }
    var _baseToString;
    var hasRequired_baseToString;
    function require_baseToString() {
      if (hasRequired_baseToString) return _baseToString;
      hasRequired_baseToString = 1;
      var Symbol2 = require_Symbol(), arrayMap = require_arrayMap(), isArray2 = requireIsArray(), isSymbol = requireIsSymbol();
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray2(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -Infinity ? "-0" : result;
      }
      _baseToString = baseToString;
      return _baseToString;
    }
    var toString_1;
    var hasRequiredToString;
    function requireToString() {
      if (hasRequiredToString) return toString_1;
      hasRequiredToString = 1;
      var baseToString = require_baseToString();
      function toString2(value) {
        return value == null ? "" : baseToString(value);
      }
      toString_1 = toString2;
      return toString_1;
    }
    var _castPath;
    var hasRequired_castPath;
    function require_castPath() {
      if (hasRequired_castPath) return _castPath;
      hasRequired_castPath = 1;
      var isArray2 = requireIsArray(), isKey2 = require_isKey(), stringToPath2 = require_stringToPath(), toString2 = requireToString();
      function castPath(value, object2) {
        if (isArray2(value)) {
          return value;
        }
        return isKey2(value, object2) ? [value] : stringToPath2(toString2(value));
      }
      _castPath = castPath;
      return _castPath;
    }
    var _toKey;
    var hasRequired_toKey;
    function require_toKey() {
      if (hasRequired_toKey) return _toKey;
      hasRequired_toKey = 1;
      var isSymbol = requireIsSymbol();
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -Infinity ? "-0" : result;
      }
      _toKey = toKey;
      return _toKey;
    }
    var _baseGet;
    var hasRequired_baseGet;
    function require_baseGet() {
      if (hasRequired_baseGet) return _baseGet;
      hasRequired_baseGet = 1;
      var castPath = require_castPath(), toKey = require_toKey();
      function baseGet2(object2, path) {
        path = castPath(path, object2);
        var index2 = 0, length = path.length;
        while (object2 != null && index2 < length) {
          object2 = object2[toKey(path[index2++])];
        }
        return index2 && index2 == length ? object2 : void 0;
      }
      _baseGet = baseGet2;
      return _baseGet;
    }
    var get_1;
    var hasRequiredGet;
    function requireGet() {
      if (hasRequiredGet) return get_1;
      hasRequiredGet = 1;
      var baseGet2 = require_baseGet();
      function get2(object2, path, defaultValue) {
        var result = object2 == null ? void 0 : baseGet2(object2, path);
        return result === void 0 ? defaultValue : result;
      }
      get_1 = get2;
      return get_1;
    }
    var getExports = requireGet();
    const get = /* @__PURE__ */ getDefaultExportFromCjs(getExports);
    var isNil_1;
    var hasRequiredIsNil;
    function requireIsNil() {
      if (hasRequiredIsNil) return isNil_1;
      hasRequiredIsNil = 1;
      function isNil2(value) {
        return value == null;
      }
      isNil_1 = isNil2;
      return isNil_1;
    }
    var isNilExports = requireIsNil();
    const isNil = /* @__PURE__ */ getDefaultExportFromCjs(isNilExports);
    var isString_1;
    var hasRequiredIsString;
    function requireIsString() {
      if (hasRequiredIsString) return isString_1;
      hasRequiredIsString = 1;
      var baseGetTag = require_baseGetTag(), isArray2 = requireIsArray(), isObjectLike = requireIsObjectLike();
      var stringTag = "[object String]";
      function isString2(value) {
        return typeof value == "string" || !isArray2(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }
      isString_1 = isString2;
      return isString_1;
    }
    var isStringExports = requireIsString();
    const isString = /* @__PURE__ */ getDefaultExportFromCjs(isStringExports);
    var isFunctionExports = requireIsFunction();
    const isFunction = /* @__PURE__ */ getDefaultExportFromCjs(isFunctionExports);
    var isObjectExports = requireIsObject();
    const isObject = /* @__PURE__ */ getDefaultExportFromCjs(isObjectExports);
    var reactIs = { exports: {} };
    var reactIs_production_min = {};
    /**
     * @license React
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var hasRequiredReactIs_production_min;
    function requireReactIs_production_min() {
      if (hasRequiredReactIs_production_min) return reactIs_production_min;
      hasRequiredReactIs_production_min = 1;
      var b = Symbol.for("react.element"), c2 = Symbol.for("react.portal"), d = Symbol.for("react.fragment"), e = Symbol.for("react.strict_mode"), f = Symbol.for("react.profiler"), g = Symbol.for("react.provider"), h = Symbol.for("react.context"), k2 = Symbol.for("react.server_context"), l = Symbol.for("react.forward_ref"), m2 = Symbol.for("react.suspense"), n2 = Symbol.for("react.suspense_list"), p2 = Symbol.for("react.memo"), q = Symbol.for("react.lazy"), t = Symbol.for("react.offscreen"), u2;
      u2 = Symbol.for("react.module.reference");
      function v(a2) {
        if ("object" === typeof a2 && null !== a2) {
          var r2 = a2.$$typeof;
          switch (r2) {
            case b:
              switch (a2 = a2.type, a2) {
                case d:
                case f:
                case e:
                case m2:
                case n2:
                  return a2;
                default:
                  switch (a2 = a2 && a2.$$typeof, a2) {
                    case k2:
                    case h:
                    case l:
                    case q:
                    case p2:
                    case g:
                      return a2;
                    default:
                      return r2;
                  }
              }
            case c2:
              return r2;
          }
        }
      }
      reactIs_production_min.ContextConsumer = h;
      reactIs_production_min.ContextProvider = g;
      reactIs_production_min.Element = b;
      reactIs_production_min.ForwardRef = l;
      reactIs_production_min.Fragment = d;
      reactIs_production_min.Lazy = q;
      reactIs_production_min.Memo = p2;
      reactIs_production_min.Portal = c2;
      reactIs_production_min.Profiler = f;
      reactIs_production_min.StrictMode = e;
      reactIs_production_min.Suspense = m2;
      reactIs_production_min.SuspenseList = n2;
      reactIs_production_min.isAsyncMode = function() {
        return false;
      };
      reactIs_production_min.isConcurrentMode = function() {
        return false;
      };
      reactIs_production_min.isContextConsumer = function(a2) {
        return v(a2) === h;
      };
      reactIs_production_min.isContextProvider = function(a2) {
        return v(a2) === g;
      };
      reactIs_production_min.isElement = function(a2) {
        return "object" === typeof a2 && null !== a2 && a2.$$typeof === b;
      };
      reactIs_production_min.isForwardRef = function(a2) {
        return v(a2) === l;
      };
      reactIs_production_min.isFragment = function(a2) {
        return v(a2) === d;
      };
      reactIs_production_min.isLazy = function(a2) {
        return v(a2) === q;
      };
      reactIs_production_min.isMemo = function(a2) {
        return v(a2) === p2;
      };
      reactIs_production_min.isPortal = function(a2) {
        return v(a2) === c2;
      };
      reactIs_production_min.isProfiler = function(a2) {
        return v(a2) === f;
      };
      reactIs_production_min.isStrictMode = function(a2) {
        return v(a2) === e;
      };
      reactIs_production_min.isSuspense = function(a2) {
        return v(a2) === m2;
      };
      reactIs_production_min.isSuspenseList = function(a2) {
        return v(a2) === n2;
      };
      reactIs_production_min.isValidElementType = function(a2) {
        return "string" === typeof a2 || "function" === typeof a2 || a2 === d || a2 === f || a2 === e || a2 === m2 || a2 === n2 || a2 === t || "object" === typeof a2 && null !== a2 && (a2.$$typeof === q || a2.$$typeof === p2 || a2.$$typeof === g || a2.$$typeof === h || a2.$$typeof === l || a2.$$typeof === u2 || void 0 !== a2.getModuleId) ? true : false;
      };
      reactIs_production_min.typeOf = v;
      return reactIs_production_min;
    }
    var hasRequiredReactIs;
    function requireReactIs() {
      if (hasRequiredReactIs) return reactIs.exports;
      hasRequiredReactIs = 1;
      {
        reactIs.exports = requireReactIs_production_min();
      }
      return reactIs.exports;
    }
    var reactIsExports = requireReactIs();
    var isNumber_1;
    var hasRequiredIsNumber;
    function requireIsNumber() {
      if (hasRequiredIsNumber) return isNumber_1;
      hasRequiredIsNumber = 1;
      var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
      var numberTag = "[object Number]";
      function isNumber2(value) {
        return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
      }
      isNumber_1 = isNumber2;
      return isNumber_1;
    }
    var _isNaN;
    var hasRequired_isNaN;
    function require_isNaN() {
      if (hasRequired_isNaN) return _isNaN;
      hasRequired_isNaN = 1;
      var isNumber2 = requireIsNumber();
      function isNaN2(value) {
        return isNumber2(value) && value != +value;
      }
      _isNaN = isNaN2;
      return _isNaN;
    }
    var _isNaNExports = require_isNaN();
    const isNan = /* @__PURE__ */ getDefaultExportFromCjs(_isNaNExports);
    var isNumberExports = requireIsNumber();
    const isNumber$1 = /* @__PURE__ */ getDefaultExportFromCjs(isNumberExports);
    var mathSign = function mathSign2(value) {
      if (value === 0) {
        return 0;
      }
      if (value > 0) {
        return 1;
      }
      return -1;
    };
    var isPercent = function isPercent2(value) {
      return isString(value) && value.indexOf("%") === value.length - 1;
    };
    var isNumber = function isNumber2(value) {
      return isNumber$1(value) && !isNan(value);
    };
    var isNumOrStr = function isNumOrStr2(value) {
      return isNumber(value) || isString(value);
    };
    var idCounter = 0;
    var uniqueId = function uniqueId2(prefix2) {
      var id = ++idCounter;
      return "".concat(prefix2 || "").concat(id);
    };
    var getPercentValue = function getPercentValue2(percent, totalValue) {
      var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var validate = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      if (!isNumber(percent) && !isString(percent)) {
        return defaultValue;
      }
      var value;
      if (isPercent(percent)) {
        var index2 = percent.indexOf("%");
        value = totalValue * parseFloat(percent.slice(0, index2)) / 100;
      } else {
        value = +percent;
      }
      if (isNan(value)) {
        value = defaultValue;
      }
      if (validate && value > totalValue) {
        value = totalValue;
      }
      return value;
    };
    var getAnyElementOfObject = function getAnyElementOfObject2(obj) {
      if (!obj) {
        return null;
      }
      var keys2 = Object.keys(obj);
      if (keys2 && keys2.length) {
        return obj[keys2[0]];
      }
      return null;
    };
    var hasDuplicate = function hasDuplicate2(ary) {
      if (!Array.isArray(ary)) {
        return false;
      }
      var len = ary.length;
      var cache = {};
      for (var i2 = 0; i2 < len; i2++) {
        if (!cache[ary[i2]]) {
          cache[ary[i2]] = true;
        } else {
          return true;
        }
      }
      return false;
    };
    var interpolateNumber$2 = function interpolateNumber2(numberA, numberB) {
      if (isNumber(numberA) && isNumber(numberB)) {
        return function(t) {
          return numberA + t * (numberB - numberA);
        };
      }
      return function() {
        return numberB;
      };
    };
    function findEntryInArray(ary, specifiedKey, specifiedValue) {
      if (!ary || !ary.length) {
        return null;
      }
      return ary.find(function(entry) {
        return entry && (typeof specifiedKey === "function" ? specifiedKey(entry) : get(entry, specifiedKey)) === specifiedValue;
      });
    }
    var compareValues = function compareValues2(a2, b) {
      if (isNumber(a2) && isNumber(b)) {
        return a2 - b;
      }
      if (isString(a2) && isString(b)) {
        return a2.localeCompare(b);
      }
      if (a2 instanceof Date && b instanceof Date) {
        return a2.getTime() - b.getTime();
      }
      return String(a2).localeCompare(String(b));
    };
    function shallowEqual(a2, b) {
      for (var key in a2) {
        if ({}.hasOwnProperty.call(a2, key) && (!{}.hasOwnProperty.call(b, key) || a2[key] !== b[key])) {
          return false;
        }
      }
      for (var _key in b) {
        if ({}.hasOwnProperty.call(b, _key) && !{}.hasOwnProperty.call(a2, _key)) {
          return false;
        }
      }
      return true;
    }
    function _typeof$G(o2) {
      "@babel/helpers - typeof";
      return _typeof$G = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$G(o2);
    }
    var SVGContainerPropKeys = ["viewBox", "children"];
    var SVGElementPropKeys = [
      "aria-activedescendant",
      "aria-atomic",
      "aria-autocomplete",
      "aria-busy",
      "aria-checked",
      "aria-colcount",
      "aria-colindex",
      "aria-colspan",
      "aria-controls",
      "aria-current",
      "aria-describedby",
      "aria-details",
      "aria-disabled",
      "aria-errormessage",
      "aria-expanded",
      "aria-flowto",
      "aria-haspopup",
      "aria-hidden",
      "aria-invalid",
      "aria-keyshortcuts",
      "aria-label",
      "aria-labelledby",
      "aria-level",
      "aria-live",
      "aria-modal",
      "aria-multiline",
      "aria-multiselectable",
      "aria-orientation",
      "aria-owns",
      "aria-placeholder",
      "aria-posinset",
      "aria-pressed",
      "aria-readonly",
      "aria-relevant",
      "aria-required",
      "aria-roledescription",
      "aria-rowcount",
      "aria-rowindex",
      "aria-rowspan",
      "aria-selected",
      "aria-setsize",
      "aria-sort",
      "aria-valuemax",
      "aria-valuemin",
      "aria-valuenow",
      "aria-valuetext",
      "className",
      "color",
      "height",
      "id",
      "lang",
      "max",
      "media",
      "method",
      "min",
      "name",
      "style",
      /*
       * removed 'type' SVGElementPropKey because we do not currently use any SVG elements
       * that can use it and it conflicts with the recharts prop 'type'
       * https://github.com/recharts/recharts/pull/3327
       * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/type
       */
      // 'type',
      "target",
      "width",
      "role",
      "tabIndex",
      "accentHeight",
      "accumulate",
      "additive",
      "alignmentBaseline",
      "allowReorder",
      "alphabetic",
      "amplitude",
      "arabicForm",
      "ascent",
      "attributeName",
      "attributeType",
      "autoReverse",
      "azimuth",
      "baseFrequency",
      "baselineShift",
      "baseProfile",
      "bbox",
      "begin",
      "bias",
      "by",
      "calcMode",
      "capHeight",
      "clip",
      "clipPath",
      "clipPathUnits",
      "clipRule",
      "colorInterpolation",
      "colorInterpolationFilters",
      "colorProfile",
      "colorRendering",
      "contentScriptType",
      "contentStyleType",
      "cursor",
      "cx",
      "cy",
      "d",
      "decelerate",
      "descent",
      "diffuseConstant",
      "direction",
      "display",
      "divisor",
      "dominantBaseline",
      "dur",
      "dx",
      "dy",
      "edgeMode",
      "elevation",
      "enableBackground",
      "end",
      "exponent",
      "externalResourcesRequired",
      "fill",
      "fillOpacity",
      "fillRule",
      "filter",
      "filterRes",
      "filterUnits",
      "floodColor",
      "floodOpacity",
      "focusable",
      "fontFamily",
      "fontSize",
      "fontSizeAdjust",
      "fontStretch",
      "fontStyle",
      "fontVariant",
      "fontWeight",
      "format",
      "from",
      "fx",
      "fy",
      "g1",
      "g2",
      "glyphName",
      "glyphOrientationHorizontal",
      "glyphOrientationVertical",
      "glyphRef",
      "gradientTransform",
      "gradientUnits",
      "hanging",
      "horizAdvX",
      "horizOriginX",
      "href",
      "ideographic",
      "imageRendering",
      "in2",
      "in",
      "intercept",
      "k1",
      "k2",
      "k3",
      "k4",
      "k",
      "kernelMatrix",
      "kernelUnitLength",
      "kerning",
      "keyPoints",
      "keySplines",
      "keyTimes",
      "lengthAdjust",
      "letterSpacing",
      "lightingColor",
      "limitingConeAngle",
      "local",
      "markerEnd",
      "markerHeight",
      "markerMid",
      "markerStart",
      "markerUnits",
      "markerWidth",
      "mask",
      "maskContentUnits",
      "maskUnits",
      "mathematical",
      "mode",
      "numOctaves",
      "offset",
      "opacity",
      "operator",
      "order",
      "orient",
      "orientation",
      "origin",
      "overflow",
      "overlinePosition",
      "overlineThickness",
      "paintOrder",
      "panose1",
      "pathLength",
      "patternContentUnits",
      "patternTransform",
      "patternUnits",
      "pointerEvents",
      "pointsAtX",
      "pointsAtY",
      "pointsAtZ",
      "preserveAlpha",
      "preserveAspectRatio",
      "primitiveUnits",
      "r",
      "radius",
      "refX",
      "refY",
      "renderingIntent",
      "repeatCount",
      "repeatDur",
      "requiredExtensions",
      "requiredFeatures",
      "restart",
      "result",
      "rotate",
      "rx",
      "ry",
      "seed",
      "shapeRendering",
      "slope",
      "spacing",
      "specularConstant",
      "specularExponent",
      "speed",
      "spreadMethod",
      "startOffset",
      "stdDeviation",
      "stemh",
      "stemv",
      "stitchTiles",
      "stopColor",
      "stopOpacity",
      "strikethroughPosition",
      "strikethroughThickness",
      "string",
      "stroke",
      "strokeDasharray",
      "strokeDashoffset",
      "strokeLinecap",
      "strokeLinejoin",
      "strokeMiterlimit",
      "strokeOpacity",
      "strokeWidth",
      "surfaceScale",
      "systemLanguage",
      "tableValues",
      "targetX",
      "targetY",
      "textAnchor",
      "textDecoration",
      "textLength",
      "textRendering",
      "to",
      "transform",
      "u1",
      "u2",
      "underlinePosition",
      "underlineThickness",
      "unicode",
      "unicodeBidi",
      "unicodeRange",
      "unitsPerEm",
      "vAlphabetic",
      "values",
      "vectorEffect",
      "version",
      "vertAdvY",
      "vertOriginX",
      "vertOriginY",
      "vHanging",
      "vIdeographic",
      "viewTarget",
      "visibility",
      "vMathematical",
      "widths",
      "wordSpacing",
      "writingMode",
      "x1",
      "x2",
      "x",
      "xChannelSelector",
      "xHeight",
      "xlinkActuate",
      "xlinkArcrole",
      "xlinkHref",
      "xlinkRole",
      "xlinkShow",
      "xlinkTitle",
      "xlinkType",
      "xmlBase",
      "xmlLang",
      "xmlns",
      "xmlnsXlink",
      "xmlSpace",
      "y1",
      "y2",
      "y",
      "yChannelSelector",
      "z",
      "zoomAndPan",
      "ref",
      "key",
      "angle"
    ];
    var PolyElementKeys = ["points", "pathLength"];
    var FilteredElementKeyMap = {
      svg: SVGContainerPropKeys,
      polygon: PolyElementKeys,
      polyline: PolyElementKeys
    };
    var EventKeys = ["dangerouslySetInnerHTML", "onCopy", "onCopyCapture", "onCut", "onCutCapture", "onPaste", "onPasteCapture", "onCompositionEnd", "onCompositionEndCapture", "onCompositionStart", "onCompositionStartCapture", "onCompositionUpdate", "onCompositionUpdateCapture", "onFocus", "onFocusCapture", "onBlur", "onBlurCapture", "onChange", "onChangeCapture", "onBeforeInput", "onBeforeInputCapture", "onInput", "onInputCapture", "onReset", "onResetCapture", "onSubmit", "onSubmitCapture", "onInvalid", "onInvalidCapture", "onLoad", "onLoadCapture", "onError", "onErrorCapture", "onKeyDown", "onKeyDownCapture", "onKeyPress", "onKeyPressCapture", "onKeyUp", "onKeyUpCapture", "onAbort", "onAbortCapture", "onCanPlay", "onCanPlayCapture", "onCanPlayThrough", "onCanPlayThroughCapture", "onDurationChange", "onDurationChangeCapture", "onEmptied", "onEmptiedCapture", "onEncrypted", "onEncryptedCapture", "onEnded", "onEndedCapture", "onLoadedData", "onLoadedDataCapture", "onLoadedMetadata", "onLoadedMetadataCapture", "onLoadStart", "onLoadStartCapture", "onPause", "onPauseCapture", "onPlay", "onPlayCapture", "onPlaying", "onPlayingCapture", "onProgress", "onProgressCapture", "onRateChange", "onRateChangeCapture", "onSeeked", "onSeekedCapture", "onSeeking", "onSeekingCapture", "onStalled", "onStalledCapture", "onSuspend", "onSuspendCapture", "onTimeUpdate", "onTimeUpdateCapture", "onVolumeChange", "onVolumeChangeCapture", "onWaiting", "onWaitingCapture", "onAuxClick", "onAuxClickCapture", "onClick", "onClickCapture", "onContextMenu", "onContextMenuCapture", "onDoubleClick", "onDoubleClickCapture", "onDrag", "onDragCapture", "onDragEnd", "onDragEndCapture", "onDragEnter", "onDragEnterCapture", "onDragExit", "onDragExitCapture", "onDragLeave", "onDragLeaveCapture", "onDragOver", "onDragOverCapture", "onDragStart", "onDragStartCapture", "onDrop", "onDropCapture", "onMouseDown", "onMouseDownCapture", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseMoveCapture", "onMouseOut", "onMouseOutCapture", "onMouseOver", "onMouseOverCapture", "onMouseUp", "onMouseUpCapture", "onSelect", "onSelectCapture", "onTouchCancel", "onTouchCancelCapture", "onTouchEnd", "onTouchEndCapture", "onTouchMove", "onTouchMoveCapture", "onTouchStart", "onTouchStartCapture", "onPointerDown", "onPointerDownCapture", "onPointerMove", "onPointerMoveCapture", "onPointerUp", "onPointerUpCapture", "onPointerCancel", "onPointerCancelCapture", "onPointerEnter", "onPointerEnterCapture", "onPointerLeave", "onPointerLeaveCapture", "onPointerOver", "onPointerOverCapture", "onPointerOut", "onPointerOutCapture", "onGotPointerCapture", "onGotPointerCaptureCapture", "onLostPointerCapture", "onLostPointerCaptureCapture", "onScroll", "onScrollCapture", "onWheel", "onWheelCapture", "onAnimationStart", "onAnimationStartCapture", "onAnimationEnd", "onAnimationEndCapture", "onAnimationIteration", "onAnimationIterationCapture", "onTransitionEnd", "onTransitionEndCapture"];
    var adaptEventHandlers = function adaptEventHandlers2(props, newHandler) {
      if (!props || typeof props === "function" || typeof props === "boolean") {
        return null;
      }
      var inputProps = props;
      if (/* @__PURE__ */ reactExports.isValidElement(props)) {
        inputProps = props.props;
      }
      if (!isObject(inputProps)) {
        return null;
      }
      var out = {};
      Object.keys(inputProps).forEach(function(key) {
        if (EventKeys.includes(key)) {
          out[key] = newHandler || function(e) {
            return inputProps[key](inputProps, e);
          };
        }
      });
      return out;
    };
    var getEventHandlerOfChild = function getEventHandlerOfChild2(originalHandler, data, index2) {
      return function(e) {
        originalHandler(data, index2, e);
        return null;
      };
    };
    var adaptEventsOfChild = function adaptEventsOfChild2(props, data, index2) {
      if (!isObject(props) || _typeof$G(props) !== "object") {
        return null;
      }
      var out = null;
      Object.keys(props).forEach(function(key) {
        var item = props[key];
        if (EventKeys.includes(key) && typeof item === "function") {
          if (!out) out = {};
          out[key] = getEventHandlerOfChild(item, data, index2);
        }
      });
      return out;
    };
    var _excluded$g = ["children"], _excluded2$5 = ["children"];
    function _objectWithoutProperties$g(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$g(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$g(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var REACT_BROWSER_EVENT_MAP = {
      click: "onClick",
      mousedown: "onMouseDown",
      mouseup: "onMouseUp",
      mouseover: "onMouseOver",
      mousemove: "onMouseMove",
      mouseout: "onMouseOut",
      mouseenter: "onMouseEnter",
      mouseleave: "onMouseLeave",
      touchcancel: "onTouchCancel",
      touchend: "onTouchEnd",
      touchmove: "onTouchMove",
      touchstart: "onTouchStart",
      contextmenu: "onContextMenu",
      dblclick: "onDoubleClick"
    };
    var getDisplayName = function getDisplayName2(Comp) {
      if (typeof Comp === "string") {
        return Comp;
      }
      if (!Comp) {
        return "";
      }
      return Comp.displayName || Comp.name || "Component";
    };
    var lastChildren = null;
    var lastResult = null;
    var toArray = function toArray2(children) {
      if (children === lastChildren && Array.isArray(lastResult)) {
        return lastResult;
      }
      var result = [];
      reactExports.Children.forEach(children, function(child) {
        if (isNil(child)) return;
        if (reactIsExports.isFragment(child)) {
          result = result.concat(toArray2(child.props.children));
        } else {
          result.push(child);
        }
      });
      lastResult = result;
      lastChildren = children;
      return result;
    };
    function findAllByType(children, type) {
      var result = [];
      var types = [];
      if (Array.isArray(type)) {
        types = type.map(function(t) {
          return getDisplayName(t);
        });
      } else {
        types = [getDisplayName(type)];
      }
      toArray(children).forEach(function(child) {
        var childType = get(child, "type.displayName") || get(child, "type.name");
        if (types.indexOf(childType) !== -1) {
          result.push(child);
        }
      });
      return result;
    }
    function findChildByType(children, type) {
      var result = findAllByType(children, type);
      return result && result[0];
    }
    var validateWidthHeight = function validateWidthHeight2(el) {
      if (!el || !el.props) {
        return false;
      }
      var _el$props = el.props, width = _el$props.width, height = _el$props.height;
      if (!isNumber(width) || width <= 0 || !isNumber(height) || height <= 0) {
        return false;
      }
      return true;
    };
    var SVG_TAGS = ["a", "altGlyph", "altGlyphDef", "altGlyphItem", "animate", "animateColor", "animateMotion", "animateTransform", "circle", "clipPath", "color-profile", "cursor", "defs", "desc", "ellipse", "feBlend", "feColormatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "font", "font-face", "font-face-format", "font-face-name", "font-face-url", "foreignObject", "g", "glyph", "glyphRef", "hkern", "image", "line", "lineGradient", "marker", "mask", "metadata", "missing-glyph", "mpath", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "script", "set", "stop", "style", "svg", "switch", "symbol", "text", "textPath", "title", "tref", "tspan", "use", "view", "vkern"];
    var isSvgElement = function isSvgElement2(child) {
      return child && child.type && isString(child.type) && SVG_TAGS.indexOf(child.type) >= 0;
    };
    var isValidSpreadableProp = function isValidSpreadableProp2(property, key, includeEvents, svgElementType) {
      var _FilteredElementKeyMa;
      var matchingElementTypeKeys = (_FilteredElementKeyMa = FilteredElementKeyMap === null || FilteredElementKeyMap === void 0 ? void 0 : FilteredElementKeyMap[svgElementType]) !== null && _FilteredElementKeyMa !== void 0 ? _FilteredElementKeyMa : [];
      return key.startsWith("data-") || !isFunction(property) && (svgElementType && matchingElementTypeKeys.includes(key) || SVGElementPropKeys.includes(key)) || includeEvents && EventKeys.includes(key);
    };
    var filterProps = function filterProps2(props, includeEvents, svgElementType) {
      if (!props || typeof props === "function" || typeof props === "boolean") {
        return null;
      }
      var inputProps = props;
      if (/* @__PURE__ */ reactExports.isValidElement(props)) {
        inputProps = props.props;
      }
      if (!isObject(inputProps)) {
        return null;
      }
      var out = {};
      Object.keys(inputProps).forEach(function(key) {
        var _inputProps;
        if (isValidSpreadableProp((_inputProps = inputProps) === null || _inputProps === void 0 ? void 0 : _inputProps[key], key, includeEvents, svgElementType)) {
          out[key] = inputProps[key];
        }
      });
      return out;
    };
    var isChildrenEqual = function isChildrenEqual2(nextChildren, prevChildren) {
      if (nextChildren === prevChildren) {
        return true;
      }
      var count2 = reactExports.Children.count(nextChildren);
      if (count2 !== reactExports.Children.count(prevChildren)) {
        return false;
      }
      if (count2 === 0) {
        return true;
      }
      if (count2 === 1) {
        return isSingleChildEqual(Array.isArray(nextChildren) ? nextChildren[0] : nextChildren, Array.isArray(prevChildren) ? prevChildren[0] : prevChildren);
      }
      for (var i2 = 0; i2 < count2; i2++) {
        var nextChild = nextChildren[i2];
        var prevChild = prevChildren[i2];
        if (Array.isArray(nextChild) || Array.isArray(prevChild)) {
          if (!isChildrenEqual2(nextChild, prevChild)) {
            return false;
          }
        } else if (!isSingleChildEqual(nextChild, prevChild)) {
          return false;
        }
      }
      return true;
    };
    var isSingleChildEqual = function isSingleChildEqual2(nextChild, prevChild) {
      if (isNil(nextChild) && isNil(prevChild)) {
        return true;
      }
      if (!isNil(nextChild) && !isNil(prevChild)) {
        var _ref = nextChild.props || {}, nextChildren = _ref.children, nextProps = _objectWithoutProperties$g(_ref, _excluded$g);
        var _ref2 = prevChild.props || {}, prevChildren = _ref2.children, prevProps = _objectWithoutProperties$g(_ref2, _excluded2$5);
        if (nextChildren && prevChildren) {
          return shallowEqual(nextProps, prevProps) && isChildrenEqual(nextChildren, prevChildren);
        }
        if (!nextChildren && !prevChildren) {
          return shallowEqual(nextProps, prevProps);
        }
        return false;
      }
      return false;
    };
    var renderByOrder = function renderByOrder2(children, renderMap) {
      var elements = [];
      var record = {};
      toArray(children).forEach(function(child, index2) {
        if (isSvgElement(child)) {
          elements.push(child);
        } else if (child) {
          var displayName = getDisplayName(child.type);
          var _ref3 = renderMap[displayName] || {}, handler = _ref3.handler, once = _ref3.once;
          if (handler && (!once || !record[displayName])) {
            var results = handler(child, displayName, index2);
            elements.push(results);
            record[displayName] = true;
          }
        }
      });
      return elements;
    };
    var getReactEventByType = function getReactEventByType2(e) {
      var type = e && e.type;
      if (type && REACT_BROWSER_EVENT_MAP[type]) {
        return REACT_BROWSER_EVENT_MAP[type];
      }
      return null;
    };
    var parseChildIndex = function parseChildIndex2(child, children) {
      return toArray(children).indexOf(child);
    };
    var _excluded$f = ["children", "width", "height", "viewBox", "className", "style", "title", "desc"];
    function _extends$p() {
      _extends$p = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$p.apply(this, arguments);
    }
    function _objectWithoutProperties$f(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$f(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$f(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function Surface(props) {
      var children = props.children, width = props.width, height = props.height, viewBox = props.viewBox, className = props.className, style = props.style, title = props.title, desc = props.desc, others = _objectWithoutProperties$f(props, _excluded$f);
      var svgView = viewBox || {
        width,
        height,
        x: 0,
        y: 0
      };
      var layerClass = clsx("recharts-surface", className);
      return /* @__PURE__ */ React.createElement("svg", _extends$p({}, filterProps(others, true, "svg"), {
        className: layerClass,
        width,
        height,
        style,
        viewBox: "".concat(svgView.x, " ").concat(svgView.y, " ").concat(svgView.width, " ").concat(svgView.height)
      }), /* @__PURE__ */ React.createElement("title", null, title), /* @__PURE__ */ React.createElement("desc", null, desc), children);
    }
    var _excluded$e = ["children", "className"];
    function _extends$o() {
      _extends$o = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$o.apply(this, arguments);
    }
    function _objectWithoutProperties$e(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$e(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$e(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var Layer = /* @__PURE__ */ React.forwardRef(function(props, ref) {
      var children = props.children, className = props.className, others = _objectWithoutProperties$e(props, _excluded$e);
      var layerClass = clsx("recharts-layer", className);
      return /* @__PURE__ */ React.createElement("g", _extends$o({
        className: layerClass
      }, filterProps(others, true), {
        ref
      }), children);
    });
    var warn = function warn2(condition, format2) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
    };
    var _baseSlice;
    var hasRequired_baseSlice;
    function require_baseSlice() {
      if (hasRequired_baseSlice) return _baseSlice;
      hasRequired_baseSlice = 1;
      function baseSlice(array2, start, end) {
        var index2 = -1, length = array2.length;
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);
        while (++index2 < length) {
          result[index2] = array2[index2 + start];
        }
        return result;
      }
      _baseSlice = baseSlice;
      return _baseSlice;
    }
    var _castSlice;
    var hasRequired_castSlice;
    function require_castSlice() {
      if (hasRequired_castSlice) return _castSlice;
      hasRequired_castSlice = 1;
      var baseSlice = require_baseSlice();
      function castSlice(array2, start, end) {
        var length = array2.length;
        end = end === void 0 ? length : end;
        return !start && end >= length ? array2 : baseSlice(array2, start, end);
      }
      _castSlice = castSlice;
      return _castSlice;
    }
    var _hasUnicode;
    var hasRequired_hasUnicode;
    function require_hasUnicode() {
      if (hasRequired_hasUnicode) return _hasUnicode;
      hasRequired_hasUnicode = 1;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
      var rsZWJ = "\\u200d";
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      function hasUnicode(string2) {
        return reHasUnicode.test(string2);
      }
      _hasUnicode = hasUnicode;
      return _hasUnicode;
    }
    var _asciiToArray;
    var hasRequired_asciiToArray;
    function require_asciiToArray() {
      if (hasRequired_asciiToArray) return _asciiToArray;
      hasRequired_asciiToArray = 1;
      function asciiToArray(string2) {
        return string2.split("");
      }
      _asciiToArray = asciiToArray;
      return _asciiToArray;
    }
    var _unicodeToArray;
    var hasRequired_unicodeToArray;
    function require_unicodeToArray() {
      if (hasRequired_unicodeToArray) return _unicodeToArray;
      hasRequired_unicodeToArray = 1;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
      var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
      var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      function unicodeToArray(string2) {
        return string2.match(reUnicode) || [];
      }
      _unicodeToArray = unicodeToArray;
      return _unicodeToArray;
    }
    var _stringToArray;
    var hasRequired_stringToArray;
    function require_stringToArray() {
      if (hasRequired_stringToArray) return _stringToArray;
      hasRequired_stringToArray = 1;
      var asciiToArray = require_asciiToArray(), hasUnicode = require_hasUnicode(), unicodeToArray = require_unicodeToArray();
      function stringToArray(string2) {
        return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2);
      }
      _stringToArray = stringToArray;
      return _stringToArray;
    }
    var _createCaseFirst;
    var hasRequired_createCaseFirst;
    function require_createCaseFirst() {
      if (hasRequired_createCaseFirst) return _createCaseFirst;
      hasRequired_createCaseFirst = 1;
      var castSlice = require_castSlice(), hasUnicode = require_hasUnicode(), stringToArray = require_stringToArray(), toString2 = requireToString();
      function createCaseFirst(methodName) {
        return function(string2) {
          string2 = toString2(string2);
          var strSymbols = hasUnicode(string2) ? stringToArray(string2) : void 0;
          var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      _createCaseFirst = createCaseFirst;
      return _createCaseFirst;
    }
    var upperFirst_1;
    var hasRequiredUpperFirst;
    function requireUpperFirst() {
      if (hasRequiredUpperFirst) return upperFirst_1;
      hasRequiredUpperFirst = 1;
      var createCaseFirst = require_createCaseFirst();
      var upperFirst2 = createCaseFirst("toUpperCase");
      upperFirst_1 = upperFirst2;
      return upperFirst_1;
    }
    var upperFirstExports = requireUpperFirst();
    const upperFirst = /* @__PURE__ */ getDefaultExportFromCjs(upperFirstExports);
    function constant$1(x2) {
      return function constant2() {
        return x2;
      };
    }
    const cos = Math.cos;
    const sin = Math.sin;
    const sqrt$1 = Math.sqrt;
    const pi$1 = Math.PI;
    const tau$1 = 2 * pi$1;
    const pi = Math.PI, tau = 2 * pi, epsilon = 1e-6, tauEpsilon = tau - epsilon;
    function append(strings) {
      this._ += strings[0];
      for (let i2 = 1, n2 = strings.length; i2 < n2; ++i2) {
        this._ += arguments[i2] + strings[i2];
      }
    }
    function appendRound(digits) {
      let d = Math.floor(digits);
      if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);
      if (d > 15) return append;
      const k2 = 10 ** d;
      return function(strings) {
        this._ += strings[0];
        for (let i2 = 1, n2 = strings.length; i2 < n2; ++i2) {
          this._ += Math.round(arguments[i2] * k2) / k2 + strings[i2];
        }
      };
    }
    class Path {
      constructor(digits) {
        this._x0 = this._y0 = // start of current subpath
        this._x1 = this._y1 = null;
        this._ = "";
        this._append = digits == null ? append : appendRound(digits);
      }
      moveTo(x2, y2) {
        this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}`;
      }
      closePath() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._append`Z`;
        }
      }
      lineTo(x2, y2) {
        this._append`L${this._x1 = +x2},${this._y1 = +y2}`;
      }
      quadraticCurveTo(x1, y1, x2, y2) {
        this._append`Q${+x1},${+y1},${this._x1 = +x2},${this._y1 = +y2}`;
      }
      bezierCurveTo(x1, y1, x2, y2, x3, y3) {
        this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x3},${this._y1 = +y3}`;
      }
      arcTo(x1, y1, x2, y2, r2) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r2 = +r2;
        if (r2 < 0) throw new Error(`negative radius: ${r2}`);
        let x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        if (this._x1 === null) {
          this._append`M${this._x1 = x1},${this._y1 = y1}`;
        } else if (!(l01_2 > epsilon)) ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r2) {
          this._append`L${this._x1 = x1},${this._y1 = y1}`;
        } else {
          let x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r2 * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
          if (Math.abs(t01 - 1) > epsilon) {
            this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
          }
          this._append`A${r2},${r2},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
        }
      }
      arc(x2, y2, r2, a0, a1, ccw) {
        x2 = +x2, y2 = +y2, r2 = +r2, ccw = !!ccw;
        if (r2 < 0) throw new Error(`negative radius: ${r2}`);
        let dx = r2 * Math.cos(a0), dy = r2 * Math.sin(a0), x0 = x2 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        if (this._x1 === null) {
          this._append`M${x0},${y0}`;
        } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
          this._append`L${x0},${y0}`;
        }
        if (!r2) return;
        if (da < 0) da = da % tau + tau;
        if (da > tauEpsilon) {
          this._append`A${r2},${r2},0,1,${cw},${x2 - dx},${y2 - dy}A${r2},${r2},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
        } else if (da > epsilon) {
          this._append`A${r2},${r2},0,${+(da >= pi)},${cw},${this._x1 = x2 + r2 * Math.cos(a1)},${this._y1 = y2 + r2 * Math.sin(a1)}`;
        }
      }
      rect(x2, y2, w, h) {
        this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}h${w = +w}v${+h}h${-w}Z`;
      }
      toString() {
        return this._;
      }
    }
    function withPath(shape) {
      let digits = 3;
      shape.digits = function(_) {
        if (!arguments.length) return digits;
        if (_ == null) {
          digits = null;
        } else {
          const d = Math.floor(_);
          if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
          digits = d;
        }
        return shape;
      };
      return () => new Path(digits);
    }
    function array(x2) {
      return typeof x2 === "object" && "length" in x2 ? x2 : Array.from(x2);
    }
    function Linear(context) {
      this._context = context;
    }
    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
          // falls through
          default:
            this._context.lineTo(x2, y2);
            break;
        }
      }
    };
    function curveLinear(context) {
      return new Linear(context);
    }
    function x$1(p2) {
      return p2[0];
    }
    function y(p2) {
      return p2[1];
    }
    function shapeLine(x2, y$1) {
      var defined2 = constant$1(true), context = null, curve = curveLinear, output = null, path = withPath(line);
      x2 = typeof x2 === "function" ? x2 : x2 === void 0 ? x$1 : constant$1(x2);
      y$1 = typeof y$1 === "function" ? y$1 : y$1 === void 0 ? y : constant$1(y$1);
      function line(data) {
        var i2, n2 = (data = array(data)).length, d, defined0 = false, buffer;
        if (context == null) output = curve(buffer = path());
        for (i2 = 0; i2 <= n2; ++i2) {
          if (!(i2 < n2 && defined2(d = data[i2], i2, data)) === defined0) {
            if (defined0 = !defined0) output.lineStart();
            else output.lineEnd();
          }
          if (defined0) output.point(+x2(d, i2, data), +y$1(d, i2, data));
        }
        if (buffer) return output = null, buffer + "" || null;
      }
      line.x = function(_) {
        return arguments.length ? (x2 = typeof _ === "function" ? _ : constant$1(+_), line) : x2;
      };
      line.y = function(_) {
        return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$1(+_), line) : y$1;
      };
      line.defined = function(_) {
        return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant$1(!!_), line) : defined2;
      };
      line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
      };
      line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
      };
      return line;
    }
    function shapeArea(x0, y0, y1) {
      var x1 = null, defined2 = constant$1(true), context = null, curve = curveLinear, output = null, path = withPath(area);
      x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x$1 : constant$1(+x0);
      y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant$1(0) : constant$1(+y0);
      y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y : constant$1(+y1);
      function area(data) {
        var i2, j, k2, n2 = (data = array(data)).length, d, defined0 = false, buffer, x0z = new Array(n2), y0z = new Array(n2);
        if (context == null) output = curve(buffer = path());
        for (i2 = 0; i2 <= n2; ++i2) {
          if (!(i2 < n2 && defined2(d = data[i2], i2, data)) === defined0) {
            if (defined0 = !defined0) {
              j = i2;
              output.areaStart();
              output.lineStart();
            } else {
              output.lineEnd();
              output.lineStart();
              for (k2 = i2 - 1; k2 >= j; --k2) {
                output.point(x0z[k2], y0z[k2]);
              }
              output.lineEnd();
              output.areaEnd();
            }
          }
          if (defined0) {
            x0z[i2] = +x0(d, i2, data), y0z[i2] = +y0(d, i2, data);
            output.point(x1 ? +x1(d, i2, data) : x0z[i2], y1 ? +y1(d, i2, data) : y0z[i2]);
          }
        }
        if (buffer) return output = null, buffer + "" || null;
      }
      function arealine() {
        return shapeLine().defined(defined2).curve(curve).context(context);
      }
      area.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), x1 = null, area) : x0;
      };
      area.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), area) : x0;
      };
      area.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : x1;
      };
      area.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), y1 = null, area) : y0;
      };
      area.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), area) : y0;
      };
      area.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : y1;
      };
      area.lineX0 = area.lineY0 = function() {
        return arealine().x(x0).y(y0);
      };
      area.lineY1 = function() {
        return arealine().x(x0).y(y1);
      };
      area.lineX1 = function() {
        return arealine().x(x1).y(y0);
      };
      area.defined = function(_) {
        return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant$1(!!_), area) : defined2;
      };
      area.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
      };
      area.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
      };
      return area;
    }
    class Bump {
      constructor(context, x2) {
        this._context = context;
        this._x = x2;
      }
      areaStart() {
        this._line = 0;
      }
      areaEnd() {
        this._line = NaN;
      }
      lineStart() {
        this._point = 0;
      }
      lineEnd() {
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
      }
      point(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0: {
            this._point = 1;
            if (this._line) this._context.lineTo(x2, y2);
            else this._context.moveTo(x2, y2);
            break;
          }
          case 1:
            this._point = 2;
          // falls through
          default: {
            if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x2) / 2, this._y0, this._x0, y2, x2, y2);
            else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y2) / 2, x2, this._y0, x2, y2);
            break;
          }
        }
        this._x0 = x2, this._y0 = y2;
      }
    }
    function bumpX(context) {
      return new Bump(context, true);
    }
    function bumpY(context) {
      return new Bump(context, false);
    }
    const symbolCircle = {
      draw(context, size2) {
        const r2 = sqrt$1(size2 / pi$1);
        context.moveTo(r2, 0);
        context.arc(0, 0, r2, 0, tau$1);
      }
    };
    const symbolCross = {
      draw(context, size2) {
        const r2 = sqrt$1(size2 / 5) / 2;
        context.moveTo(-3 * r2, -r2);
        context.lineTo(-r2, -r2);
        context.lineTo(-r2, -3 * r2);
        context.lineTo(r2, -3 * r2);
        context.lineTo(r2, -r2);
        context.lineTo(3 * r2, -r2);
        context.lineTo(3 * r2, r2);
        context.lineTo(r2, r2);
        context.lineTo(r2, 3 * r2);
        context.lineTo(-r2, 3 * r2);
        context.lineTo(-r2, r2);
        context.lineTo(-3 * r2, r2);
        context.closePath();
      }
    };
    const tan30 = sqrt$1(1 / 3);
    const tan30_2 = tan30 * 2;
    const symbolDiamond = {
      draw(context, size2) {
        const y2 = sqrt$1(size2 / tan30_2);
        const x2 = y2 * tan30;
        context.moveTo(0, -y2);
        context.lineTo(x2, 0);
        context.lineTo(0, y2);
        context.lineTo(-x2, 0);
        context.closePath();
      }
    };
    const symbolSquare = {
      draw(context, size2) {
        const w = sqrt$1(size2);
        const x2 = -w / 2;
        context.rect(x2, x2, w, w);
      }
    };
    const ka = 0.8908130915292852;
    const kr = sin(pi$1 / 10) / sin(7 * pi$1 / 10);
    const kx = sin(tau$1 / 10) * kr;
    const ky = -cos(tau$1 / 10) * kr;
    const symbolStar = {
      draw(context, size2) {
        const r2 = sqrt$1(size2 * ka);
        const x2 = kx * r2;
        const y2 = ky * r2;
        context.moveTo(0, -r2);
        context.lineTo(x2, y2);
        for (let i2 = 1; i2 < 5; ++i2) {
          const a2 = tau$1 * i2 / 5;
          const c2 = cos(a2);
          const s2 = sin(a2);
          context.lineTo(s2 * r2, -c2 * r2);
          context.lineTo(c2 * x2 - s2 * y2, s2 * x2 + c2 * y2);
        }
        context.closePath();
      }
    };
    const sqrt3 = sqrt$1(3);
    const symbolTriangle = {
      draw(context, size2) {
        const y2 = -sqrt$1(size2 / (sqrt3 * 3));
        context.moveTo(0, y2 * 2);
        context.lineTo(-sqrt3 * y2, -y2);
        context.lineTo(sqrt3 * y2, -y2);
        context.closePath();
      }
    };
    const c = -0.5;
    const s = sqrt$1(3) / 2;
    const k = 1 / sqrt$1(12);
    const a = (k / 2 + 1) * 3;
    const symbolWye = {
      draw(context, size2) {
        const r2 = sqrt$1(size2 / a);
        const x0 = r2 / 2, y0 = r2 * k;
        const x1 = x0, y1 = r2 * k + r2;
        const x2 = -x1, y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
        context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
        context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
        context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
        context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
        context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
        context.closePath();
      }
    };
    function Symbol$1(type, size2) {
      let context = null, path = withPath(symbol);
      type = typeof type === "function" ? type : constant$1(type || symbolCircle);
      size2 = typeof size2 === "function" ? size2 : constant$1(size2 === void 0 ? 64 : +size2);
      function symbol() {
        let buffer;
        if (!context) context = buffer = path();
        type.apply(this, arguments).draw(context, +size2.apply(this, arguments));
        if (buffer) return context = null, buffer + "" || null;
      }
      symbol.type = function(_) {
        return arguments.length ? (type = typeof _ === "function" ? _ : constant$1(_), symbol) : type;
      };
      symbol.size = function(_) {
        return arguments.length ? (size2 = typeof _ === "function" ? _ : constant$1(+_), symbol) : size2;
      };
      symbol.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, symbol) : context;
      };
      return symbol;
    }
    function noop() {
    }
    function point$2(that, x2, y2) {
      that._context.bezierCurveTo(
        (2 * that._x0 + that._x1) / 3,
        (2 * that._y0 + that._y1) / 3,
        (that._x0 + 2 * that._x1) / 3,
        (that._y0 + 2 * that._y1) / 3,
        (that._x0 + 4 * that._x1 + x2) / 6,
        (that._y0 + 4 * that._y1 + y2) / 6
      );
    }
    function Basis(context) {
      this._context = context;
    }
    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3:
            point$2(this, this._x1, this._y1);
          // falls through
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
          // falls through
          default:
            point$2(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
      }
    };
    function curveBasis(context) {
      return new Basis(context);
    }
    function BasisClosed(context) {
      this._context = context;
    }
    BasisClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
        }
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x2 = x2, this._y2 = y2;
            break;
          case 1:
            this._point = 2;
            this._x3 = x2, this._y3 = y2;
            break;
          case 2:
            this._point = 3;
            this._x4 = x2, this._y4 = y2;
            this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
            break;
          default:
            point$2(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
      }
    };
    function curveBasisClosed(context) {
      return new BasisClosed(context);
    }
    function BasisOpen(context) {
      this._context = context;
    }
    BasisOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            var x0 = (this._x0 + 4 * this._x1 + x2) / 6, y0 = (this._y0 + 4 * this._y1 + y2) / 6;
            this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
            break;
          case 3:
            this._point = 4;
          // falls through
          default:
            point$2(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
      }
    };
    function curveBasisOpen(context) {
      return new BasisOpen(context);
    }
    function LinearClosed(context) {
      this._context = context;
    }
    LinearClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._point) this._context.closePath();
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        if (this._point) this._context.lineTo(x2, y2);
        else this._point = 1, this._context.moveTo(x2, y2);
      }
    };
    function curveLinearClosed(context) {
      return new LinearClosed(context);
    }
    function sign(x2) {
      return x2 < 0 ? -1 : 1;
    }
    function slope3(that, x2, y2) {
      var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p2 = (s0 * h1 + s1 * h0) / (h0 + h1);
      return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p2)) || 0;
    }
    function slope2(that, t) {
      var h = that._x1 - that._x0;
      return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
    }
    function point$1(that, t02, t12) {
      var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
      that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1);
    }
    function MonotoneX(context) {
      this._context = context;
    }
    MonotoneX.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
          case 3:
            point$1(this, this._t0, slope2(this, this._t0));
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        var t12 = NaN;
        x2 = +x2, y2 = +y2;
        if (x2 === this._x1 && y2 === this._y1) return;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            point$1(this, slope2(this, t12 = slope3(this, x2, y2)), t12);
            break;
          default:
            point$1(this, this._t0, t12 = slope3(this, x2, y2));
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
        this._t0 = t12;
      }
    };
    function MonotoneY(context) {
      this._context = new ReflectContext(context);
    }
    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y2) {
      MonotoneX.prototype.point.call(this, y2, x2);
    };
    function ReflectContext(context) {
      this._context = context;
    }
    ReflectContext.prototype = {
      moveTo: function(x2, y2) {
        this._context.moveTo(y2, x2);
      },
      closePath: function() {
        this._context.closePath();
      },
      lineTo: function(x2, y2) {
        this._context.lineTo(y2, x2);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
        this._context.bezierCurveTo(y1, x1, y2, x2, y3, x3);
      }
    };
    function monotoneX(context) {
      return new MonotoneX(context);
    }
    function monotoneY(context) {
      return new MonotoneY(context);
    }
    function Natural(context) {
      this._context = context;
    }
    Natural.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = [];
        this._y = [];
      },
      lineEnd: function() {
        var x2 = this._x, y2 = this._y, n2 = x2.length;
        if (n2) {
          this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0]);
          if (n2 === 2) {
            this._context.lineTo(x2[1], y2[1]);
          } else {
            var px = controlPoints(x2), py = controlPoints(y2);
            for (var i0 = 0, i1 = 1; i1 < n2; ++i0, ++i1) {
              this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x2[i1], y2[i1]);
            }
          }
        }
        if (this._line || this._line !== 0 && n2 === 1) this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
      },
      point: function(x2, y2) {
        this._x.push(+x2);
        this._y.push(+y2);
      }
    };
    function controlPoints(x2) {
      var i2, n2 = x2.length - 1, m2, a2 = new Array(n2), b = new Array(n2), r2 = new Array(n2);
      a2[0] = 0, b[0] = 2, r2[0] = x2[0] + 2 * x2[1];
      for (i2 = 1; i2 < n2 - 1; ++i2) a2[i2] = 1, b[i2] = 4, r2[i2] = 4 * x2[i2] + 2 * x2[i2 + 1];
      a2[n2 - 1] = 2, b[n2 - 1] = 7, r2[n2 - 1] = 8 * x2[n2 - 1] + x2[n2];
      for (i2 = 1; i2 < n2; ++i2) m2 = a2[i2] / b[i2 - 1], b[i2] -= m2, r2[i2] -= m2 * r2[i2 - 1];
      a2[n2 - 1] = r2[n2 - 1] / b[n2 - 1];
      for (i2 = n2 - 2; i2 >= 0; --i2) a2[i2] = (r2[i2] - a2[i2 + 1]) / b[i2];
      b[n2 - 1] = (x2[n2] + a2[n2 - 1]) / 2;
      for (i2 = 0; i2 < n2 - 1; ++i2) b[i2] = 2 * x2[i2 + 1] - a2[i2 + 1];
      return [a2, b];
    }
    function curveNatural(context) {
      return new Natural(context);
    }
    function Step(context, t) {
      this._context = context;
      this._t = t;
    }
    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
          // falls through
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y2);
              this._context.lineTo(x2, y2);
            } else {
              var x1 = this._x * (1 - this._t) + x2 * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y2);
            }
            break;
          }
        }
        this._x = x2, this._y = y2;
      }
    };
    function curveStep(context) {
      return new Step(context, 0.5);
    }
    function stepBefore(context) {
      return new Step(context, 0);
    }
    function stepAfter(context) {
      return new Step(context, 1);
    }
    function stackOffsetNone(series, order) {
      if (!((n2 = series.length) > 1)) return;
      for (var i2 = 1, j, s0, s1 = series[order[0]], n2, m2 = s1.length; i2 < n2; ++i2) {
        s0 = s1, s1 = series[order[i2]];
        for (j = 0; j < m2; ++j) {
          s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
        }
      }
    }
    function stackOrderNone(series) {
      var n2 = series.length, o2 = new Array(n2);
      while (--n2 >= 0) o2[n2] = n2;
      return o2;
    }
    function stackValue(d, key) {
      return d[key];
    }
    function stackSeries(key) {
      const series = [];
      series.key = key;
      return series;
    }
    function shapeStack() {
      var keys2 = constant$1([]), order = stackOrderNone, offset2 = stackOffsetNone, value = stackValue;
      function stack(data) {
        var sz = Array.from(keys2.apply(this, arguments), stackSeries), i2, n2 = sz.length, j = -1, oz;
        for (const d of data) {
          for (i2 = 0, ++j; i2 < n2; ++i2) {
            (sz[i2][j] = [0, +value(d, sz[i2].key, j, data)]).data = d;
          }
        }
        for (i2 = 0, oz = array(order(sz)); i2 < n2; ++i2) {
          sz[oz[i2]].index = i2;
        }
        offset2(sz, oz);
        return sz;
      }
      stack.keys = function(_) {
        return arguments.length ? (keys2 = typeof _ === "function" ? _ : constant$1(Array.from(_)), stack) : keys2;
      };
      stack.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant$1(+_), stack) : value;
      };
      stack.order = function(_) {
        return arguments.length ? (order = _ == null ? stackOrderNone : typeof _ === "function" ? _ : constant$1(Array.from(_)), stack) : order;
      };
      stack.offset = function(_) {
        return arguments.length ? (offset2 = _ == null ? stackOffsetNone : _, stack) : offset2;
      };
      return stack;
    }
    function stackOffsetExpand(series, order) {
      if (!((n2 = series.length) > 0)) return;
      for (var i2, n2, j = 0, m2 = series[0].length, y2; j < m2; ++j) {
        for (y2 = i2 = 0; i2 < n2; ++i2) y2 += series[i2][j][1] || 0;
        if (y2) for (i2 = 0; i2 < n2; ++i2) series[i2][j][1] /= y2;
      }
      stackOffsetNone(series, order);
    }
    function stackOffsetSilhouette(series, order) {
      if (!((n2 = series.length) > 0)) return;
      for (var j = 0, s0 = series[order[0]], n2, m2 = s0.length; j < m2; ++j) {
        for (var i2 = 0, y2 = 0; i2 < n2; ++i2) y2 += series[i2][j][1] || 0;
        s0[j][1] += s0[j][0] = -y2 / 2;
      }
      stackOffsetNone(series, order);
    }
    function stackOffsetWiggle(series, order) {
      if (!((n2 = series.length) > 0) || !((m2 = (s0 = series[order[0]]).length) > 0)) return;
      for (var y2 = 0, j = 1, s0, m2, n2; j < m2; ++j) {
        for (var i2 = 0, s1 = 0, s2 = 0; i2 < n2; ++i2) {
          var si = series[order[i2]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
          for (var k2 = 0; k2 < i2; ++k2) {
            var sk = series[order[k2]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
            s3 += skj0 - skj1;
          }
          s1 += sij0, s2 += s3 * sij0;
        }
        s0[j - 1][1] += s0[j - 1][0] = y2;
        if (s1) y2 -= s2 / s1;
      }
      s0[j - 1][1] += s0[j - 1][0] = y2;
      stackOffsetNone(series, order);
    }
    function _typeof$F(o2) {
      "@babel/helpers - typeof";
      return _typeof$F = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$F(o2);
    }
    var _excluded$d = ["type", "size", "sizeType"];
    function _extends$n() {
      _extends$n = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$n.apply(this, arguments);
    }
    function ownKeys$y(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$y(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$y(Object(t), true).forEach(function(r3) {
          _defineProperty$E(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$y(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$E(obj, key, value) {
      key = _toPropertyKey$E(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$E(t) {
      var i2 = _toPrimitive$E(t, "string");
      return "symbol" == _typeof$F(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$E(t, r2) {
      if ("object" != _typeof$F(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$F(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function _objectWithoutProperties$d(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$d(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$d(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var symbolFactories = {
      symbolCircle,
      symbolCross,
      symbolDiamond,
      symbolSquare,
      symbolStar,
      symbolTriangle,
      symbolWye
    };
    var RADIAN$1 = Math.PI / 180;
    var getSymbolFactory = function getSymbolFactory2(type) {
      var name = "symbol".concat(upperFirst(type));
      return symbolFactories[name] || symbolCircle;
    };
    var calculateAreaSize = function calculateAreaSize2(size2, sizeType, type) {
      if (sizeType === "area") {
        return size2;
      }
      switch (type) {
        case "cross":
          return 5 * size2 * size2 / 9;
        case "diamond":
          return 0.5 * size2 * size2 / Math.sqrt(3);
        case "square":
          return size2 * size2;
        case "star": {
          var angle = 18 * RADIAN$1;
          return 1.25 * size2 * size2 * (Math.tan(angle) - Math.tan(angle * 2) * Math.pow(Math.tan(angle), 2));
        }
        case "triangle":
          return Math.sqrt(3) * size2 * size2 / 4;
        case "wye":
          return (21 - 10 * Math.sqrt(3)) * size2 * size2 / 8;
        default:
          return Math.PI * size2 * size2 / 4;
      }
    };
    var registerSymbol = function registerSymbol2(key, factory) {
      symbolFactories["symbol".concat(upperFirst(key))] = factory;
    };
    var Symbols = function Symbols2(_ref) {
      var _ref$type = _ref.type, type = _ref$type === void 0 ? "circle" : _ref$type, _ref$size = _ref.size, size2 = _ref$size === void 0 ? 64 : _ref$size, _ref$sizeType = _ref.sizeType, sizeType = _ref$sizeType === void 0 ? "area" : _ref$sizeType, rest = _objectWithoutProperties$d(_ref, _excluded$d);
      var props = _objectSpread$y(_objectSpread$y({}, rest), {}, {
        type,
        size: size2,
        sizeType
      });
      var getPath2 = function getPath3() {
        var symbolFactory = getSymbolFactory(type);
        var symbol = Symbol$1().type(symbolFactory).size(calculateAreaSize(size2, sizeType, type));
        return symbol();
      };
      var className = props.className, cx2 = props.cx, cy = props.cy;
      var filteredProps = filterProps(props, true);
      if (cx2 === +cx2 && cy === +cy && size2 === +size2) {
        return /* @__PURE__ */ React.createElement("path", _extends$n({}, filteredProps, {
          className: clsx("recharts-symbols", className),
          transform: "translate(".concat(cx2, ", ").concat(cy, ")"),
          d: getPath2()
        }));
      }
      return null;
    };
    Symbols.registerSymbol = registerSymbol;
    function _typeof$E(o2) {
      "@babel/helpers - typeof";
      return _typeof$E = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$E(o2);
    }
    function _extends$m() {
      _extends$m = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$m.apply(this, arguments);
    }
    function ownKeys$x(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$x(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$x(Object(t), true).forEach(function(r3) {
          _defineProperty$D(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$x(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _classCallCheck$h(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$h(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$D(descriptor.key), descriptor);
      }
    }
    function _createClass$h(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$h(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$d(t, o2, e) {
      return o2 = _getPrototypeOf$e(o2), _possibleConstructorReturn$e(t, _isNativeReflectConstruct$e() ? Reflect.construct(o2, e || [], _getPrototypeOf$e(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$e(self2, call) {
      if (call && (_typeof$E(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$e(self2);
    }
    function _assertThisInitialized$e(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$e() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$e = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$e(o2) {
      _getPrototypeOf$e = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$e(o2);
    }
    function _inherits$e(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$e(subClass, superClass);
    }
    function _setPrototypeOf$e(o2, p2) {
      _setPrototypeOf$e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$e(o2, p2);
    }
    function _defineProperty$D(obj, key, value) {
      key = _toPropertyKey$D(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$D(t) {
      var i2 = _toPrimitive$D(t, "string");
      return "symbol" == _typeof$E(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$D(t, r2) {
      if ("object" != _typeof$E(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$E(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    var SIZE = 32;
    var DefaultLegendContent = /* @__PURE__ */ function(_PureComponent) {
      function DefaultLegendContent2() {
        _classCallCheck$h(this, DefaultLegendContent2);
        return _callSuper$d(this, DefaultLegendContent2, arguments);
      }
      _inherits$e(DefaultLegendContent2, _PureComponent);
      return _createClass$h(DefaultLegendContent2, [{
        key: "renderIcon",
        value: (
          /**
           * Render the path of icon
           * @param {Object} data Data of each legend item
           * @return {String} Path element
           */
          function renderIcon(data) {
            var inactiveColor = this.props.inactiveColor;
            var halfSize = SIZE / 2;
            var sixthSize = SIZE / 6;
            var thirdSize = SIZE / 3;
            var color2 = data.inactive ? inactiveColor : data.color;
            if (data.type === "plainline") {
              return /* @__PURE__ */ React.createElement("line", {
                strokeWidth: 4,
                fill: "none",
                stroke: color2,
                strokeDasharray: data.payload.strokeDasharray,
                x1: 0,
                y1: halfSize,
                x2: SIZE,
                y2: halfSize,
                className: "recharts-legend-icon"
              });
            }
            if (data.type === "line") {
              return /* @__PURE__ */ React.createElement("path", {
                strokeWidth: 4,
                fill: "none",
                stroke: color2,
                d: "M0,".concat(halfSize, "h").concat(thirdSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(2 * thirdSize, ",").concat(halfSize, "\n            H").concat(SIZE, "M").concat(2 * thirdSize, ",").concat(halfSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(thirdSize, ",").concat(halfSize),
                className: "recharts-legend-icon"
              });
            }
            if (data.type === "rect") {
              return /* @__PURE__ */ React.createElement("path", {
                stroke: "none",
                fill: color2,
                d: "M0,".concat(SIZE / 8, "h").concat(SIZE, "v").concat(SIZE * 3 / 4, "h").concat(-32, "z"),
                className: "recharts-legend-icon"
              });
            }
            if (/* @__PURE__ */ React.isValidElement(data.legendIcon)) {
              var iconProps = _objectSpread$x({}, data);
              delete iconProps.legendIcon;
              return /* @__PURE__ */ React.cloneElement(data.legendIcon, iconProps);
            }
            return /* @__PURE__ */ React.createElement(Symbols, {
              fill: color2,
              cx: halfSize,
              cy: halfSize,
              size: SIZE,
              sizeType: "diameter",
              type: data.type
            });
          }
        )
        /**
         * Draw items of legend
         * @return {ReactElement} Items
         */
      }, {
        key: "renderItems",
        value: function renderItems() {
          var _this = this;
          var _this$props = this.props, payload = _this$props.payload, iconSize = _this$props.iconSize, layout = _this$props.layout, formatter = _this$props.formatter, inactiveColor = _this$props.inactiveColor;
          var viewBox = {
            x: 0,
            y: 0,
            width: SIZE,
            height: SIZE
          };
          var itemStyle = {
            display: layout === "horizontal" ? "inline-block" : "block",
            marginRight: 10
          };
          var svgStyle = {
            display: "inline-block",
            verticalAlign: "middle",
            marginRight: 4
          };
          return payload.map(function(entry, i2) {
            var finalFormatter = entry.formatter || formatter;
            var className = clsx(_defineProperty$D(_defineProperty$D({
              "recharts-legend-item": true
            }, "legend-item-".concat(i2), true), "inactive", entry.inactive));
            if (entry.type === "none") {
              return null;
            }
            var entryValue = !isFunction(entry.value) ? entry.value : null;
            warn(
              !isFunction(entry.value),
              `The name property is also required when using a function for the dataKey of a chart's cartesian components. Ex: <Bar name="Name of my Data"/>`
              // eslint-disable-line max-len
            );
            var color2 = entry.inactive ? inactiveColor : entry.color;
            return /* @__PURE__ */ React.createElement("li", _extends$m({
              className,
              style: itemStyle,
              key: "legend-item-".concat(i2)
            }, adaptEventsOfChild(_this.props, entry, i2)), /* @__PURE__ */ React.createElement(Surface, {
              width: iconSize,
              height: iconSize,
              viewBox,
              style: svgStyle
            }, _this.renderIcon(entry)), /* @__PURE__ */ React.createElement("span", {
              className: "recharts-legend-item-text",
              style: {
                color: color2
              }
            }, finalFormatter ? finalFormatter(entryValue, entry, i2) : entryValue));
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props2 = this.props, payload = _this$props2.payload, layout = _this$props2.layout, align = _this$props2.align;
          if (!payload || !payload.length) {
            return null;
          }
          var finalStyle = {
            padding: 0,
            margin: 0,
            textAlign: layout === "horizontal" ? align : "left"
          };
          return /* @__PURE__ */ React.createElement("ul", {
            className: "recharts-default-legend",
            style: finalStyle
          }, this.renderItems());
        }
      }]);
    }(reactExports.PureComponent);
    _defineProperty$D(DefaultLegendContent, "displayName", "Legend");
    _defineProperty$D(DefaultLegendContent, "defaultProps", {
      iconSize: 14,
      layout: "horizontal",
      align: "center",
      verticalAlign: "middle",
      inactiveColor: "#ccc"
    });
    var _stackClear;
    var hasRequired_stackClear;
    function require_stackClear() {
      if (hasRequired_stackClear) return _stackClear;
      hasRequired_stackClear = 1;
      var ListCache = require_ListCache();
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      _stackClear = stackClear;
      return _stackClear;
    }
    var _stackDelete;
    var hasRequired_stackDelete;
    function require_stackDelete() {
      if (hasRequired_stackDelete) return _stackDelete;
      hasRequired_stackDelete = 1;
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      _stackDelete = stackDelete;
      return _stackDelete;
    }
    var _stackGet;
    var hasRequired_stackGet;
    function require_stackGet() {
      if (hasRequired_stackGet) return _stackGet;
      hasRequired_stackGet = 1;
      function stackGet(key) {
        return this.__data__.get(key);
      }
      _stackGet = stackGet;
      return _stackGet;
    }
    var _stackHas;
    var hasRequired_stackHas;
    function require_stackHas() {
      if (hasRequired_stackHas) return _stackHas;
      hasRequired_stackHas = 1;
      function stackHas(key) {
        return this.__data__.has(key);
      }
      _stackHas = stackHas;
      return _stackHas;
    }
    var _stackSet;
    var hasRequired_stackSet;
    function require_stackSet() {
      if (hasRequired_stackSet) return _stackSet;
      hasRequired_stackSet = 1;
      var ListCache = require_ListCache(), Map2 = require_Map(), MapCache = require_MapCache();
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      _stackSet = stackSet;
      return _stackSet;
    }
    var _Stack;
    var hasRequired_Stack;
    function require_Stack() {
      if (hasRequired_Stack) return _Stack;
      hasRequired_Stack = 1;
      var ListCache = require_ListCache(), stackClear = require_stackClear(), stackDelete = require_stackDelete(), stackGet = require_stackGet(), stackHas = require_stackHas(), stackSet = require_stackSet();
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      _Stack = Stack;
      return _Stack;
    }
    var _setCacheAdd;
    var hasRequired_setCacheAdd;
    function require_setCacheAdd() {
      if (hasRequired_setCacheAdd) return _setCacheAdd;
      hasRequired_setCacheAdd = 1;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      _setCacheAdd = setCacheAdd;
      return _setCacheAdd;
    }
    var _setCacheHas;
    var hasRequired_setCacheHas;
    function require_setCacheHas() {
      if (hasRequired_setCacheHas) return _setCacheHas;
      hasRequired_setCacheHas = 1;
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      _setCacheHas = setCacheHas;
      return _setCacheHas;
    }
    var _SetCache;
    var hasRequired_SetCache;
    function require_SetCache() {
      if (hasRequired_SetCache) return _SetCache;
      hasRequired_SetCache = 1;
      var MapCache = require_MapCache(), setCacheAdd = require_setCacheAdd(), setCacheHas = require_setCacheHas();
      function SetCache(values) {
        var index2 = -1, length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();
        while (++index2 < length) {
          this.add(values[index2]);
        }
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      _SetCache = SetCache;
      return _SetCache;
    }
    var _arraySome;
    var hasRequired_arraySome;
    function require_arraySome() {
      if (hasRequired_arraySome) return _arraySome;
      hasRequired_arraySome = 1;
      function arraySome(array2, predicate) {
        var index2 = -1, length = array2 == null ? 0 : array2.length;
        while (++index2 < length) {
          if (predicate(array2[index2], index2, array2)) {
            return true;
          }
        }
        return false;
      }
      _arraySome = arraySome;
      return _arraySome;
    }
    var _cacheHas;
    var hasRequired_cacheHas;
    function require_cacheHas() {
      if (hasRequired_cacheHas) return _cacheHas;
      hasRequired_cacheHas = 1;
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      _cacheHas = cacheHas;
      return _cacheHas;
    }
    var _equalArrays;
    var hasRequired_equalArrays;
    function require_equalArrays() {
      if (hasRequired_equalArrays) return _equalArrays;
      hasRequired_equalArrays = 1;
      var SetCache = require_SetCache(), arraySome = require_arraySome(), cacheHas = require_cacheHas();
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array2);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array2;
        }
        var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
        stack.set(array2, other);
        stack.set(other, array2);
        while (++index2 < arrLength) {
          var arrValue = array2[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array2, stack) : customizer(arrValue, othValue, index2, array2, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array2);
        stack["delete"](other);
        return result;
      }
      _equalArrays = equalArrays;
      return _equalArrays;
    }
    var _Uint8Array;
    var hasRequired_Uint8Array;
    function require_Uint8Array() {
      if (hasRequired_Uint8Array) return _Uint8Array;
      hasRequired_Uint8Array = 1;
      var root = require_root();
      var Uint8Array2 = root.Uint8Array;
      _Uint8Array = Uint8Array2;
      return _Uint8Array;
    }
    var _mapToArray;
    var hasRequired_mapToArray;
    function require_mapToArray() {
      if (hasRequired_mapToArray) return _mapToArray;
      hasRequired_mapToArray = 1;
      function mapToArray(map2) {
        var index2 = -1, result = Array(map2.size);
        map2.forEach(function(value, key) {
          result[++index2] = [key, value];
        });
        return result;
      }
      _mapToArray = mapToArray;
      return _mapToArray;
    }
    var _setToArray;
    var hasRequired_setToArray;
    function require_setToArray() {
      if (hasRequired_setToArray) return _setToArray;
      hasRequired_setToArray = 1;
      function setToArray(set2) {
        var index2 = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      _setToArray = setToArray;
      return _setToArray;
    }
    var _equalByTag;
    var hasRequired_equalByTag;
    function require_equalByTag() {
      if (hasRequired_equalByTag) return _equalByTag;
      hasRequired_equalByTag = 1;
      var Symbol2 = require_Symbol(), Uint8Array2 = require_Uint8Array(), eq = requireEq(), equalArrays = require_equalArrays(), mapToArray = require_mapToArray(), setToArray = require_setToArray();
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function equalByTag(object2, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
              return false;
            }
            object2 = object2.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object2), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object2, +other);
          case errorTag:
            return object2.name == other.name && object2.message == other.message;
          case regexpTag:
          case stringTag:
            return object2 == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object2.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object2);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object2, other);
            var result = equalArrays(convert(object2), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object2);
            return result;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object2) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      _equalByTag = equalByTag;
      return _equalByTag;
    }
    var _arrayPush;
    var hasRequired_arrayPush;
    function require_arrayPush() {
      if (hasRequired_arrayPush) return _arrayPush;
      hasRequired_arrayPush = 1;
      function arrayPush(array2, values) {
        var index2 = -1, length = values.length, offset2 = array2.length;
        while (++index2 < length) {
          array2[offset2 + index2] = values[index2];
        }
        return array2;
      }
      _arrayPush = arrayPush;
      return _arrayPush;
    }
    var _baseGetAllKeys;
    var hasRequired_baseGetAllKeys;
    function require_baseGetAllKeys() {
      if (hasRequired_baseGetAllKeys) return _baseGetAllKeys;
      hasRequired_baseGetAllKeys = 1;
      var arrayPush = require_arrayPush(), isArray2 = requireIsArray();
      function baseGetAllKeys(object2, keysFunc, symbolsFunc) {
        var result = keysFunc(object2);
        return isArray2(object2) ? result : arrayPush(result, symbolsFunc(object2));
      }
      _baseGetAllKeys = baseGetAllKeys;
      return _baseGetAllKeys;
    }
    var _arrayFilter;
    var hasRequired_arrayFilter;
    function require_arrayFilter() {
      if (hasRequired_arrayFilter) return _arrayFilter;
      hasRequired_arrayFilter = 1;
      function arrayFilter(array2, predicate) {
        var index2 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
        while (++index2 < length) {
          var value = array2[index2];
          if (predicate(value, index2, array2)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      _arrayFilter = arrayFilter;
      return _arrayFilter;
    }
    var stubArray_1;
    var hasRequiredStubArray;
    function requireStubArray() {
      if (hasRequiredStubArray) return stubArray_1;
      hasRequiredStubArray = 1;
      function stubArray() {
        return [];
      }
      stubArray_1 = stubArray;
      return stubArray_1;
    }
    var _getSymbols;
    var hasRequired_getSymbols;
    function require_getSymbols() {
      if (hasRequired_getSymbols) return _getSymbols;
      hasRequired_getSymbols = 1;
      var arrayFilter = require_arrayFilter(), stubArray = requireStubArray();
      var objectProto = Object.prototype;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbols = !nativeGetSymbols ? stubArray : function(object2) {
        if (object2 == null) {
          return [];
        }
        object2 = Object(object2);
        return arrayFilter(nativeGetSymbols(object2), function(symbol) {
          return propertyIsEnumerable.call(object2, symbol);
        });
      };
      _getSymbols = getSymbols;
      return _getSymbols;
    }
    var _baseTimes;
    var hasRequired_baseTimes;
    function require_baseTimes() {
      if (hasRequired_baseTimes) return _baseTimes;
      hasRequired_baseTimes = 1;
      function baseTimes(n2, iteratee) {
        var index2 = -1, result = Array(n2);
        while (++index2 < n2) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      _baseTimes = baseTimes;
      return _baseTimes;
    }
    var _baseIsArguments;
    var hasRequired_baseIsArguments;
    function require_baseIsArguments() {
      if (hasRequired_baseIsArguments) return _baseIsArguments;
      hasRequired_baseIsArguments = 1;
      var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
      var argsTag = "[object Arguments]";
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      _baseIsArguments = baseIsArguments;
      return _baseIsArguments;
    }
    var isArguments_1;
    var hasRequiredIsArguments;
    function requireIsArguments() {
      if (hasRequiredIsArguments) return isArguments_1;
      hasRequiredIsArguments = 1;
      var baseIsArguments = require_baseIsArguments(), isObjectLike = requireIsObjectLike();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var isArguments = baseIsArguments(/* @__PURE__ */ function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      isArguments_1 = isArguments;
      return isArguments_1;
    }
    var isBuffer = { exports: {} };
    var stubFalse_1;
    var hasRequiredStubFalse;
    function requireStubFalse() {
      if (hasRequiredStubFalse) return stubFalse_1;
      hasRequiredStubFalse = 1;
      function stubFalse() {
        return false;
      }
      stubFalse_1 = stubFalse;
      return stubFalse_1;
    }
    isBuffer.exports;
    var hasRequiredIsBuffer;
    function requireIsBuffer() {
      if (hasRequiredIsBuffer) return isBuffer.exports;
      hasRequiredIsBuffer = 1;
      (function(module2, exports2) {
        var root = require_root(), stubFalse = requireStubFalse();
        var freeExports = exports2 && !exports2.nodeType && exports2;
        var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var Buffer2 = moduleExports ? root.Buffer : void 0;
        var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
        var isBuffer2 = nativeIsBuffer || stubFalse;
        module2.exports = isBuffer2;
      })(isBuffer, isBuffer.exports);
      return isBuffer.exports;
    }
    var _isIndex;
    var hasRequired_isIndex;
    function require_isIndex() {
      if (hasRequired_isIndex) return _isIndex;
      hasRequired_isIndex = 1;
      var MAX_SAFE_INTEGER2 = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER2 : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      _isIndex = isIndex;
      return _isIndex;
    }
    var isLength_1;
    var hasRequiredIsLength;
    function requireIsLength() {
      if (hasRequiredIsLength) return isLength_1;
      hasRequiredIsLength = 1;
      var MAX_SAFE_INTEGER2 = 9007199254740991;
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
      }
      isLength_1 = isLength;
      return isLength_1;
    }
    var _baseIsTypedArray;
    var hasRequired_baseIsTypedArray;
    function require_baseIsTypedArray() {
      if (hasRequired_baseIsTypedArray) return _baseIsTypedArray;
      hasRequired_baseIsTypedArray = 1;
      var baseGetTag = require_baseGetTag(), isLength = requireIsLength(), isObjectLike = requireIsObjectLike();
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      _baseIsTypedArray = baseIsTypedArray;
      return _baseIsTypedArray;
    }
    var _baseUnary;
    var hasRequired_baseUnary;
    function require_baseUnary() {
      if (hasRequired_baseUnary) return _baseUnary;
      hasRequired_baseUnary = 1;
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      _baseUnary = baseUnary;
      return _baseUnary;
    }
    var _nodeUtil = { exports: {} };
    _nodeUtil.exports;
    var hasRequired_nodeUtil;
    function require_nodeUtil() {
      if (hasRequired_nodeUtil) return _nodeUtil.exports;
      hasRequired_nodeUtil = 1;
      (function(module2, exports2) {
        var freeGlobal = require_freeGlobal();
        var freeExports = exports2 && !exports2.nodeType && exports2;
        var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e) {
          }
        }();
        module2.exports = nodeUtil;
      })(_nodeUtil, _nodeUtil.exports);
      return _nodeUtil.exports;
    }
    var isTypedArray_1;
    var hasRequiredIsTypedArray;
    function requireIsTypedArray() {
      if (hasRequiredIsTypedArray) return isTypedArray_1;
      hasRequiredIsTypedArray = 1;
      var baseIsTypedArray = require_baseIsTypedArray(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      var isTypedArray2 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      isTypedArray_1 = isTypedArray2;
      return isTypedArray_1;
    }
    var _arrayLikeKeys;
    var hasRequired_arrayLikeKeys;
    function require_arrayLikeKeys() {
      if (hasRequired_arrayLikeKeys) return _arrayLikeKeys;
      hasRequired_arrayLikeKeys = 1;
      var baseTimes = require_baseTimes(), isArguments = requireIsArguments(), isArray2 = requireIsArray(), isBuffer2 = requireIsBuffer(), isIndex = require_isIndex(), isTypedArray2 = requireIsTypedArray();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
          isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      _arrayLikeKeys = arrayLikeKeys;
      return _arrayLikeKeys;
    }
    var _isPrototype;
    var hasRequired_isPrototype;
    function require_isPrototype() {
      if (hasRequired_isPrototype) return _isPrototype;
      hasRequired_isPrototype = 1;
      var objectProto = Object.prototype;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto2;
      }
      _isPrototype = isPrototype;
      return _isPrototype;
    }
    var _overArg;
    var hasRequired_overArg;
    function require_overArg() {
      if (hasRequired_overArg) return _overArg;
      hasRequired_overArg = 1;
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      _overArg = overArg;
      return _overArg;
    }
    var _nativeKeys;
    var hasRequired_nativeKeys;
    function require_nativeKeys() {
      if (hasRequired_nativeKeys) return _nativeKeys;
      hasRequired_nativeKeys = 1;
      var overArg = require_overArg();
      var nativeKeys = overArg(Object.keys, Object);
      _nativeKeys = nativeKeys;
      return _nativeKeys;
    }
    var _baseKeys;
    var hasRequired_baseKeys;
    function require_baseKeys() {
      if (hasRequired_baseKeys) return _baseKeys;
      hasRequired_baseKeys = 1;
      var isPrototype = require_isPrototype(), nativeKeys = require_nativeKeys();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseKeys(object2) {
        if (!isPrototype(object2)) {
          return nativeKeys(object2);
        }
        var result = [];
        for (var key in Object(object2)) {
          if (hasOwnProperty2.call(object2, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      _baseKeys = baseKeys;
      return _baseKeys;
    }
    var isArrayLike_1;
    var hasRequiredIsArrayLike;
    function requireIsArrayLike() {
      if (hasRequiredIsArrayLike) return isArrayLike_1;
      hasRequiredIsArrayLike = 1;
      var isFunction2 = requireIsFunction(), isLength = requireIsLength();
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction2(value);
      }
      isArrayLike_1 = isArrayLike;
      return isArrayLike_1;
    }
    var keys_1;
    var hasRequiredKeys;
    function requireKeys() {
      if (hasRequiredKeys) return keys_1;
      hasRequiredKeys = 1;
      var arrayLikeKeys = require_arrayLikeKeys(), baseKeys = require_baseKeys(), isArrayLike = requireIsArrayLike();
      function keys2(object2) {
        return isArrayLike(object2) ? arrayLikeKeys(object2) : baseKeys(object2);
      }
      keys_1 = keys2;
      return keys_1;
    }
    var _getAllKeys;
    var hasRequired_getAllKeys;
    function require_getAllKeys() {
      if (hasRequired_getAllKeys) return _getAllKeys;
      hasRequired_getAllKeys = 1;
      var baseGetAllKeys = require_baseGetAllKeys(), getSymbols = require_getSymbols(), keys2 = requireKeys();
      function getAllKeys(object2) {
        return baseGetAllKeys(object2, keys2, getSymbols);
      }
      _getAllKeys = getAllKeys;
      return _getAllKeys;
    }
    var _equalObjects;
    var hasRequired_equalObjects;
    function require_equalObjects() {
      if (hasRequired_equalObjects) return _equalObjects;
      hasRequired_equalObjects = 1;
      var getAllKeys = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG = 1;
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function equalObjects(object2, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object2), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key = objProps[index2];
          if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object2);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object2;
        }
        var result = true;
        stack.set(object2, other);
        stack.set(other, object2);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key = objProps[index2];
          var objValue = object2[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack) : customizer(objValue, othValue, key, object2, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object2.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object2);
        stack["delete"](other);
        return result;
      }
      _equalObjects = equalObjects;
      return _equalObjects;
    }
    var _DataView;
    var hasRequired_DataView;
    function require_DataView() {
      if (hasRequired_DataView) return _DataView;
      hasRequired_DataView = 1;
      var getNative = require_getNative(), root = require_root();
      var DataView2 = getNative(root, "DataView");
      _DataView = DataView2;
      return _DataView;
    }
    var _Promise;
    var hasRequired_Promise;
    function require_Promise() {
      if (hasRequired_Promise) return _Promise;
      hasRequired_Promise = 1;
      var getNative = require_getNative(), root = require_root();
      var Promise2 = getNative(root, "Promise");
      _Promise = Promise2;
      return _Promise;
    }
    var _Set;
    var hasRequired_Set;
    function require_Set() {
      if (hasRequired_Set) return _Set;
      hasRequired_Set = 1;
      var getNative = require_getNative(), root = require_root();
      var Set2 = getNative(root, "Set");
      _Set = Set2;
      return _Set;
    }
    var _WeakMap;
    var hasRequired_WeakMap;
    function require_WeakMap() {
      if (hasRequired_WeakMap) return _WeakMap;
      hasRequired_WeakMap = 1;
      var getNative = require_getNative(), root = require_root();
      var WeakMap2 = getNative(root, "WeakMap");
      _WeakMap = WeakMap2;
      return _WeakMap;
    }
    var _getTag;
    var hasRequired_getTag;
    function require_getTag() {
      if (hasRequired_getTag) return _getTag;
      hasRequired_getTag = 1;
      var DataView2 = require_DataView(), Map2 = require_Map(), Promise2 = require_Promise(), Set2 = require_Set(), WeakMap2 = require_WeakMap(), baseGetTag = require_baseGetTag(), toSource = require_toSource();
      var mapTag = "[object Map]", objectTag = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
      var dataViewTag = "[object DataView]";
      var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
      var getTag2 = baseGetTag;
      if (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag2(new Map2()) != mapTag || Promise2 && getTag2(Promise2.resolve()) != promiseTag || Set2 && getTag2(new Set2()) != setTag || WeakMap2 && getTag2(new WeakMap2()) != weakMapTag) {
        getTag2 = function(value) {
          var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      _getTag = getTag2;
      return _getTag;
    }
    var _baseIsEqualDeep;
    var hasRequired_baseIsEqualDeep;
    function require_baseIsEqualDeep() {
      if (hasRequired_baseIsEqualDeep) return _baseIsEqualDeep;
      hasRequired_baseIsEqualDeep = 1;
      var Stack = require_Stack(), equalArrays = require_equalArrays(), equalByTag = require_equalByTag(), equalObjects = require_equalObjects(), getTag2 = require_getTag(), isArray2 = requireIsArray(), isBuffer2 = requireIsBuffer(), isTypedArray2 = requireIsTypedArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseIsEqualDeep(object2, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object2), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag2(object2), othTag = othIsArr ? arrayTag : getTag2(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer2(object2)) {
          if (!isBuffer2(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray2(object2) ? equalArrays(object2, other, bitmask, customizer, equalFunc, stack) : equalByTag(object2, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object2, other, bitmask, customizer, equalFunc, stack);
      }
      _baseIsEqualDeep = baseIsEqualDeep;
      return _baseIsEqualDeep;
    }
    var _baseIsEqual;
    var hasRequired_baseIsEqual;
    function require_baseIsEqual() {
      if (hasRequired_baseIsEqual) return _baseIsEqual;
      hasRequired_baseIsEqual = 1;
      var baseIsEqualDeep = require_baseIsEqualDeep(), isObjectLike = requireIsObjectLike();
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      _baseIsEqual = baseIsEqual;
      return _baseIsEqual;
    }
    var _baseIsMatch;
    var hasRequired_baseIsMatch;
    function require_baseIsMatch() {
      if (hasRequired_baseIsMatch) return _baseIsMatch;
      hasRequired_baseIsMatch = 1;
      var Stack = require_Stack(), baseIsEqual = require_baseIsEqual();
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      function baseIsMatch(object2, source, matchData, customizer) {
        var index2 = matchData.length, length = index2, noCustomizer = !customizer;
        if (object2 == null) {
          return !length;
        }
        object2 = Object(object2);
        while (index2--) {
          var data = matchData[index2];
          if (noCustomizer && data[2] ? data[1] !== object2[data[0]] : !(data[0] in object2)) {
            return false;
          }
        }
        while (++index2 < length) {
          data = matchData[index2];
          var key = data[0], objValue = object2[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object2)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object2, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      _baseIsMatch = baseIsMatch;
      return _baseIsMatch;
    }
    var _isStrictComparable;
    var hasRequired_isStrictComparable;
    function require_isStrictComparable() {
      if (hasRequired_isStrictComparable) return _isStrictComparable;
      hasRequired_isStrictComparable = 1;
      var isObject2 = requireIsObject();
      function isStrictComparable(value) {
        return value === value && !isObject2(value);
      }
      _isStrictComparable = isStrictComparable;
      return _isStrictComparable;
    }
    var _getMatchData;
    var hasRequired_getMatchData;
    function require_getMatchData() {
      if (hasRequired_getMatchData) return _getMatchData;
      hasRequired_getMatchData = 1;
      var isStrictComparable = require_isStrictComparable(), keys2 = requireKeys();
      function getMatchData(object2) {
        var result = keys2(object2), length = result.length;
        while (length--) {
          var key = result[length], value = object2[key];
          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }
      _getMatchData = getMatchData;
      return _getMatchData;
    }
    var _matchesStrictComparable;
    var hasRequired_matchesStrictComparable;
    function require_matchesStrictComparable() {
      if (hasRequired_matchesStrictComparable) return _matchesStrictComparable;
      hasRequired_matchesStrictComparable = 1;
      function matchesStrictComparable(key, srcValue) {
        return function(object2) {
          if (object2 == null) {
            return false;
          }
          return object2[key] === srcValue && (srcValue !== void 0 || key in Object(object2));
        };
      }
      _matchesStrictComparable = matchesStrictComparable;
      return _matchesStrictComparable;
    }
    var _baseMatches;
    var hasRequired_baseMatches;
    function require_baseMatches() {
      if (hasRequired_baseMatches) return _baseMatches;
      hasRequired_baseMatches = 1;
      var baseIsMatch = require_baseIsMatch(), getMatchData = require_getMatchData(), matchesStrictComparable = require_matchesStrictComparable();
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object2) {
          return object2 === source || baseIsMatch(object2, source, matchData);
        };
      }
      _baseMatches = baseMatches;
      return _baseMatches;
    }
    var _baseHasIn;
    var hasRequired_baseHasIn;
    function require_baseHasIn() {
      if (hasRequired_baseHasIn) return _baseHasIn;
      hasRequired_baseHasIn = 1;
      function baseHasIn(object2, key) {
        return object2 != null && key in Object(object2);
      }
      _baseHasIn = baseHasIn;
      return _baseHasIn;
    }
    var _hasPath;
    var hasRequired_hasPath;
    function require_hasPath() {
      if (hasRequired_hasPath) return _hasPath;
      hasRequired_hasPath = 1;
      var castPath = require_castPath(), isArguments = requireIsArguments(), isArray2 = requireIsArray(), isIndex = require_isIndex(), isLength = requireIsLength(), toKey = require_toKey();
      function hasPath(object2, path, hasFunc) {
        path = castPath(path, object2);
        var index2 = -1, length = path.length, result = false;
        while (++index2 < length) {
          var key = toKey(path[index2]);
          if (!(result = object2 != null && hasFunc(object2, key))) {
            break;
          }
          object2 = object2[key];
        }
        if (result || ++index2 != length) {
          return result;
        }
        length = object2 == null ? 0 : object2.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray2(object2) || isArguments(object2));
      }
      _hasPath = hasPath;
      return _hasPath;
    }
    var hasIn_1;
    var hasRequiredHasIn;
    function requireHasIn() {
      if (hasRequiredHasIn) return hasIn_1;
      hasRequiredHasIn = 1;
      var baseHasIn = require_baseHasIn(), hasPath = require_hasPath();
      function hasIn(object2, path) {
        return object2 != null && hasPath(object2, path, baseHasIn);
      }
      hasIn_1 = hasIn;
      return hasIn_1;
    }
    var _baseMatchesProperty;
    var hasRequired_baseMatchesProperty;
    function require_baseMatchesProperty() {
      if (hasRequired_baseMatchesProperty) return _baseMatchesProperty;
      hasRequired_baseMatchesProperty = 1;
      var baseIsEqual = require_baseIsEqual(), get2 = requireGet(), hasIn = requireHasIn(), isKey2 = require_isKey(), isStrictComparable = require_isStrictComparable(), matchesStrictComparable = require_matchesStrictComparable(), toKey = require_toKey();
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      function baseMatchesProperty(path, srcValue) {
        if (isKey2(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object2) {
          var objValue = get2(object2, path);
          return objValue === void 0 && objValue === srcValue ? hasIn(object2, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      _baseMatchesProperty = baseMatchesProperty;
      return _baseMatchesProperty;
    }
    var identity_1;
    var hasRequiredIdentity;
    function requireIdentity() {
      if (hasRequiredIdentity) return identity_1;
      hasRequiredIdentity = 1;
      function identity2(value) {
        return value;
      }
      identity_1 = identity2;
      return identity_1;
    }
    var _baseProperty;
    var hasRequired_baseProperty;
    function require_baseProperty() {
      if (hasRequired_baseProperty) return _baseProperty;
      hasRequired_baseProperty = 1;
      function baseProperty(key) {
        return function(object2) {
          return object2 == null ? void 0 : object2[key];
        };
      }
      _baseProperty = baseProperty;
      return _baseProperty;
    }
    var _basePropertyDeep;
    var hasRequired_basePropertyDeep;
    function require_basePropertyDeep() {
      if (hasRequired_basePropertyDeep) return _basePropertyDeep;
      hasRequired_basePropertyDeep = 1;
      var baseGet2 = require_baseGet();
      function basePropertyDeep(path) {
        return function(object2) {
          return baseGet2(object2, path);
        };
      }
      _basePropertyDeep = basePropertyDeep;
      return _basePropertyDeep;
    }
    var property_1;
    var hasRequiredProperty;
    function requireProperty() {
      if (hasRequiredProperty) return property_1;
      hasRequiredProperty = 1;
      var baseProperty = require_baseProperty(), basePropertyDeep = require_basePropertyDeep(), isKey2 = require_isKey(), toKey = require_toKey();
      function property(path) {
        return isKey2(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }
      property_1 = property;
      return property_1;
    }
    var _baseIteratee;
    var hasRequired_baseIteratee;
    function require_baseIteratee() {
      if (hasRequired_baseIteratee) return _baseIteratee;
      hasRequired_baseIteratee = 1;
      var baseMatches = require_baseMatches(), baseMatchesProperty = require_baseMatchesProperty(), identity2 = requireIdentity(), isArray2 = requireIsArray(), property = requireProperty();
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity2;
        }
        if (typeof value == "object") {
          return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      _baseIteratee = baseIteratee;
      return _baseIteratee;
    }
    var _baseFindIndex;
    var hasRequired_baseFindIndex;
    function require_baseFindIndex() {
      if (hasRequired_baseFindIndex) return _baseFindIndex;
      hasRequired_baseFindIndex = 1;
      function baseFindIndex(array2, predicate, fromIndex, fromRight) {
        var length = array2.length, index2 = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index2-- : ++index2 < length) {
          if (predicate(array2[index2], index2, array2)) {
            return index2;
          }
        }
        return -1;
      }
      _baseFindIndex = baseFindIndex;
      return _baseFindIndex;
    }
    var _baseIsNaN;
    var hasRequired_baseIsNaN;
    function require_baseIsNaN() {
      if (hasRequired_baseIsNaN) return _baseIsNaN;
      hasRequired_baseIsNaN = 1;
      function baseIsNaN(value) {
        return value !== value;
      }
      _baseIsNaN = baseIsNaN;
      return _baseIsNaN;
    }
    var _strictIndexOf;
    var hasRequired_strictIndexOf;
    function require_strictIndexOf() {
      if (hasRequired_strictIndexOf) return _strictIndexOf;
      hasRequired_strictIndexOf = 1;
      function strictIndexOf(array2, value, fromIndex) {
        var index2 = fromIndex - 1, length = array2.length;
        while (++index2 < length) {
          if (array2[index2] === value) {
            return index2;
          }
        }
        return -1;
      }
      _strictIndexOf = strictIndexOf;
      return _strictIndexOf;
    }
    var _baseIndexOf;
    var hasRequired_baseIndexOf;
    function require_baseIndexOf() {
      if (hasRequired_baseIndexOf) return _baseIndexOf;
      hasRequired_baseIndexOf = 1;
      var baseFindIndex = require_baseFindIndex(), baseIsNaN = require_baseIsNaN(), strictIndexOf = require_strictIndexOf();
      function baseIndexOf(array2, value, fromIndex) {
        return value === value ? strictIndexOf(array2, value, fromIndex) : baseFindIndex(array2, baseIsNaN, fromIndex);
      }
      _baseIndexOf = baseIndexOf;
      return _baseIndexOf;
    }
    var _arrayIncludes;
    var hasRequired_arrayIncludes;
    function require_arrayIncludes() {
      if (hasRequired_arrayIncludes) return _arrayIncludes;
      hasRequired_arrayIncludes = 1;
      var baseIndexOf = require_baseIndexOf();
      function arrayIncludes(array2, value) {
        var length = array2 == null ? 0 : array2.length;
        return !!length && baseIndexOf(array2, value, 0) > -1;
      }
      _arrayIncludes = arrayIncludes;
      return _arrayIncludes;
    }
    var _arrayIncludesWith;
    var hasRequired_arrayIncludesWith;
    function require_arrayIncludesWith() {
      if (hasRequired_arrayIncludesWith) return _arrayIncludesWith;
      hasRequired_arrayIncludesWith = 1;
      function arrayIncludesWith(array2, value, comparator) {
        var index2 = -1, length = array2 == null ? 0 : array2.length;
        while (++index2 < length) {
          if (comparator(value, array2[index2])) {
            return true;
          }
        }
        return false;
      }
      _arrayIncludesWith = arrayIncludesWith;
      return _arrayIncludesWith;
    }
    var noop_1;
    var hasRequiredNoop;
    function requireNoop() {
      if (hasRequiredNoop) return noop_1;
      hasRequiredNoop = 1;
      function noop2() {
      }
      noop_1 = noop2;
      return noop_1;
    }
    var _createSet;
    var hasRequired_createSet;
    function require_createSet() {
      if (hasRequired_createSet) return _createSet;
      hasRequired_createSet = 1;
      var Set2 = require_Set(), noop2 = requireNoop(), setToArray = require_setToArray();
      var INFINITY = 1 / 0;
      var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values) {
        return new Set2(values);
      };
      _createSet = createSet;
      return _createSet;
    }
    var _baseUniq;
    var hasRequired_baseUniq;
    function require_baseUniq() {
      if (hasRequired_baseUniq) return _baseUniq;
      hasRequired_baseUniq = 1;
      var SetCache = require_SetCache(), arrayIncludes = require_arrayIncludes(), arrayIncludesWith = require_arrayIncludesWith(), cacheHas = require_cacheHas(), createSet = require_createSet(), setToArray = require_setToArray();
      var LARGE_ARRAY_SIZE = 200;
      function baseUniq(array2, iteratee, comparator) {
        var index2 = -1, includes = arrayIncludes, length = array2.length, isCommon = true, result = [], seen = result;
        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set2 = iteratee ? null : createSet(array2);
          if (set2) {
            return setToArray(set2);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }
        outer:
          while (++index2 < length) {
            var value = array2[index2], computed = iteratee ? iteratee(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value);
            } else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
        return result;
      }
      _baseUniq = baseUniq;
      return _baseUniq;
    }
    var uniqBy_1;
    var hasRequiredUniqBy;
    function requireUniqBy() {
      if (hasRequiredUniqBy) return uniqBy_1;
      hasRequiredUniqBy = 1;
      var baseIteratee = require_baseIteratee(), baseUniq = require_baseUniq();
      function uniqBy2(array2, iteratee) {
        return array2 && array2.length ? baseUniq(array2, baseIteratee(iteratee, 2)) : [];
      }
      uniqBy_1 = uniqBy2;
      return uniqBy_1;
    }
    var uniqByExports = requireUniqBy();
    const uniqBy = /* @__PURE__ */ getDefaultExportFromCjs(uniqByExports);
    function getUniqPayload(payload, option, defaultUniqBy2) {
      if (option === true) {
        return uniqBy(payload, defaultUniqBy2);
      }
      if (isFunction(option)) {
        return uniqBy(payload, option);
      }
      return payload;
    }
    function _typeof$D(o2) {
      "@babel/helpers - typeof";
      return _typeof$D = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$D(o2);
    }
    var _excluded$c = ["ref"];
    function ownKeys$w(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$w(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$w(Object(t), true).forEach(function(r3) {
          _defineProperty$C(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$w(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _classCallCheck$g(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$g(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$C(descriptor.key), descriptor);
      }
    }
    function _createClass$g(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$g(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties$g(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$c(t, o2, e) {
      return o2 = _getPrototypeOf$d(o2), _possibleConstructorReturn$d(t, _isNativeReflectConstruct$d() ? Reflect.construct(o2, e || [], _getPrototypeOf$d(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$d(self2, call) {
      if (call && (_typeof$D(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$d(self2);
    }
    function _assertThisInitialized$d(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$d() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$d = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$d(o2) {
      _getPrototypeOf$d = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$d(o2);
    }
    function _inherits$d(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$d(subClass, superClass);
    }
    function _setPrototypeOf$d(o2, p2) {
      _setPrototypeOf$d = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$d(o2, p2);
    }
    function _defineProperty$C(obj, key, value) {
      key = _toPropertyKey$C(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$C(t) {
      var i2 = _toPrimitive$C(t, "string");
      return "symbol" == _typeof$D(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$C(t, r2) {
      if ("object" != _typeof$D(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$D(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    function _objectWithoutProperties$c(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$c(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$c(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function defaultUniqBy$1(entry) {
      return entry.value;
    }
    function renderContent$1(content, props) {
      if (/* @__PURE__ */ React.isValidElement(content)) {
        return /* @__PURE__ */ React.cloneElement(content, props);
      }
      if (typeof content === "function") {
        return /* @__PURE__ */ React.createElement(content, props);
      }
      props.ref;
      var otherProps = _objectWithoutProperties$c(props, _excluded$c);
      return /* @__PURE__ */ React.createElement(DefaultLegendContent, otherProps);
    }
    var EPS$1 = 1;
    var Legend = /* @__PURE__ */ function(_PureComponent) {
      function Legend2() {
        var _this;
        _classCallCheck$g(this, Legend2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper$c(this, Legend2, [].concat(args));
        _defineProperty$C(_this, "lastBoundingBox", {
          width: -1,
          height: -1
        });
        return _this;
      }
      _inherits$d(Legend2, _PureComponent);
      return _createClass$g(Legend2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.updateBBox();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          this.updateBBox();
        }
      }, {
        key: "getBBox",
        value: function getBBox() {
          if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
            var box = this.wrapperNode.getBoundingClientRect();
            box.height = this.wrapperNode.offsetHeight;
            box.width = this.wrapperNode.offsetWidth;
            return box;
          }
          return null;
        }
      }, {
        key: "updateBBox",
        value: function updateBBox() {
          var onBBoxUpdate = this.props.onBBoxUpdate;
          var box = this.getBBox();
          if (box) {
            if (Math.abs(box.width - this.lastBoundingBox.width) > EPS$1 || Math.abs(box.height - this.lastBoundingBox.height) > EPS$1) {
              this.lastBoundingBox.width = box.width;
              this.lastBoundingBox.height = box.height;
              if (onBBoxUpdate) {
                onBBoxUpdate(box);
              }
            }
          } else if (this.lastBoundingBox.width !== -1 || this.lastBoundingBox.height !== -1) {
            this.lastBoundingBox.width = -1;
            this.lastBoundingBox.height = -1;
            if (onBBoxUpdate) {
              onBBoxUpdate(null);
            }
          }
        }
      }, {
        key: "getBBoxSnapshot",
        value: function getBBoxSnapshot() {
          if (this.lastBoundingBox.width >= 0 && this.lastBoundingBox.height >= 0) {
            return _objectSpread$w({}, this.lastBoundingBox);
          }
          return {
            width: 0,
            height: 0
          };
        }
      }, {
        key: "getDefaultPosition",
        value: function getDefaultPosition(style) {
          var _this$props = this.props, layout = _this$props.layout, align = _this$props.align, verticalAlign = _this$props.verticalAlign, margin = _this$props.margin, chartWidth = _this$props.chartWidth, chartHeight = _this$props.chartHeight;
          var hPos, vPos;
          if (!style || (style.left === void 0 || style.left === null) && (style.right === void 0 || style.right === null)) {
            if (align === "center" && layout === "vertical") {
              var box = this.getBBoxSnapshot();
              hPos = {
                left: ((chartWidth || 0) - box.width) / 2
              };
            } else {
              hPos = align === "right" ? {
                right: margin && margin.right || 0
              } : {
                left: margin && margin.left || 0
              };
            }
          }
          if (!style || (style.top === void 0 || style.top === null) && (style.bottom === void 0 || style.bottom === null)) {
            if (verticalAlign === "middle") {
              var _box = this.getBBoxSnapshot();
              vPos = {
                top: ((chartHeight || 0) - _box.height) / 2
              };
            } else {
              vPos = verticalAlign === "bottom" ? {
                bottom: margin && margin.bottom || 0
              } : {
                top: margin && margin.top || 0
              };
            }
          }
          return _objectSpread$w(_objectSpread$w({}, hPos), vPos);
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _this$props2 = this.props, content = _this$props2.content, width = _this$props2.width, height = _this$props2.height, wrapperStyle = _this$props2.wrapperStyle, payloadUniqBy = _this$props2.payloadUniqBy, payload = _this$props2.payload;
          var outerStyle = _objectSpread$w(_objectSpread$w({
            position: "absolute",
            width: width || "auto",
            height: height || "auto"
          }, this.getDefaultPosition(wrapperStyle)), wrapperStyle);
          return /* @__PURE__ */ React.createElement("div", {
            className: "recharts-legend-wrapper",
            style: outerStyle,
            ref: function ref(node) {
              _this2.wrapperNode = node;
            }
          }, renderContent$1(content, _objectSpread$w(_objectSpread$w({}, this.props), {}, {
            payload: getUniqPayload(payload, payloadUniqBy, defaultUniqBy$1)
          })));
        }
      }], [{
        key: "getWithHeight",
        value: function getWithHeight(item, chartWidth) {
          var _this$defaultProps$it = _objectSpread$w(_objectSpread$w({}, this.defaultProps), item.props), layout = _this$defaultProps$it.layout;
          if (layout === "vertical" && isNumber(item.props.height)) {
            return {
              height: item.props.height
            };
          }
          if (layout === "horizontal") {
            return {
              width: item.props.width || chartWidth
            };
          }
          return null;
        }
      }]);
    }(reactExports.PureComponent);
    _defineProperty$C(Legend, "displayName", "Legend");
    _defineProperty$C(Legend, "defaultProps", {
      iconSize: 14,
      layout: "horizontal",
      align: "center",
      verticalAlign: "bottom"
    });
    var _isFlattenable;
    var hasRequired_isFlattenable;
    function require_isFlattenable() {
      if (hasRequired_isFlattenable) return _isFlattenable;
      hasRequired_isFlattenable = 1;
      var Symbol2 = require_Symbol(), isArguments = requireIsArguments(), isArray2 = requireIsArray();
      var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
      function isFlattenable(value) {
        return isArray2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      _isFlattenable = isFlattenable;
      return _isFlattenable;
    }
    var _baseFlatten;
    var hasRequired_baseFlatten;
    function require_baseFlatten() {
      if (hasRequired_baseFlatten) return _baseFlatten;
      hasRequired_baseFlatten = 1;
      var arrayPush = require_arrayPush(), isFlattenable = require_isFlattenable();
      function baseFlatten(array2, depth, predicate, isStrict, result) {
        var index2 = -1, length = array2.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);
        while (++index2 < length) {
          var value = array2[index2];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }
      _baseFlatten = baseFlatten;
      return _baseFlatten;
    }
    var _createBaseFor;
    var hasRequired_createBaseFor;
    function require_createBaseFor() {
      if (hasRequired_createBaseFor) return _createBaseFor;
      hasRequired_createBaseFor = 1;
      function createBaseFor(fromRight) {
        return function(object2, iteratee, keysFunc) {
          var index2 = -1, iterable = Object(object2), props = keysFunc(object2), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index2];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object2;
        };
      }
      _createBaseFor = createBaseFor;
      return _createBaseFor;
    }
    var _baseFor;
    var hasRequired_baseFor;
    function require_baseFor() {
      if (hasRequired_baseFor) return _baseFor;
      hasRequired_baseFor = 1;
      var createBaseFor = require_createBaseFor();
      var baseFor = createBaseFor();
      _baseFor = baseFor;
      return _baseFor;
    }
    var _baseForOwn;
    var hasRequired_baseForOwn;
    function require_baseForOwn() {
      if (hasRequired_baseForOwn) return _baseForOwn;
      hasRequired_baseForOwn = 1;
      var baseFor = require_baseFor(), keys2 = requireKeys();
      function baseForOwn(object2, iteratee) {
        return object2 && baseFor(object2, iteratee, keys2);
      }
      _baseForOwn = baseForOwn;
      return _baseForOwn;
    }
    var _createBaseEach;
    var hasRequired_createBaseEach;
    function require_createBaseEach() {
      if (hasRequired_createBaseEach) return _createBaseEach;
      hasRequired_createBaseEach = 1;
      var isArrayLike = requireIsArrayLike();
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length, index2 = fromRight ? length : -1, iterable = Object(collection);
          while (fromRight ? index2-- : ++index2 < length) {
            if (iteratee(iterable[index2], index2, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      _createBaseEach = createBaseEach;
      return _createBaseEach;
    }
    var _baseEach;
    var hasRequired_baseEach;
    function require_baseEach() {
      if (hasRequired_baseEach) return _baseEach;
      hasRequired_baseEach = 1;
      var baseForOwn = require_baseForOwn(), createBaseEach = require_createBaseEach();
      var baseEach = createBaseEach(baseForOwn);
      _baseEach = baseEach;
      return _baseEach;
    }
    var _baseMap;
    var hasRequired_baseMap;
    function require_baseMap() {
      if (hasRequired_baseMap) return _baseMap;
      hasRequired_baseMap = 1;
      var baseEach = require_baseEach(), isArrayLike = requireIsArrayLike();
      function baseMap(collection, iteratee) {
        var index2 = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function(value, key, collection2) {
          result[++index2] = iteratee(value, key, collection2);
        });
        return result;
      }
      _baseMap = baseMap;
      return _baseMap;
    }
    var _baseSortBy;
    var hasRequired_baseSortBy;
    function require_baseSortBy() {
      if (hasRequired_baseSortBy) return _baseSortBy;
      hasRequired_baseSortBy = 1;
      function baseSortBy(array2, comparer) {
        var length = array2.length;
        array2.sort(comparer);
        while (length--) {
          array2[length] = array2[length].value;
        }
        return array2;
      }
      _baseSortBy = baseSortBy;
      return _baseSortBy;
    }
    var _compareAscending;
    var hasRequired_compareAscending;
    function require_compareAscending() {
      if (hasRequired_compareAscending) return _compareAscending;
      hasRequired_compareAscending = 1;
      var isSymbol = requireIsSymbol();
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
          var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
      _compareAscending = compareAscending;
      return _compareAscending;
    }
    var _compareMultiple;
    var hasRequired_compareMultiple;
    function require_compareMultiple() {
      if (hasRequired_compareMultiple) return _compareMultiple;
      hasRequired_compareMultiple = 1;
      var compareAscending = require_compareAscending();
      function compareMultiple(object2, other, orders) {
        var index2 = -1, objCriteria = object2.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
        while (++index2 < length) {
          var result = compareAscending(objCriteria[index2], othCriteria[index2]);
          if (result) {
            if (index2 >= ordersLength) {
              return result;
            }
            var order = orders[index2];
            return result * (order == "desc" ? -1 : 1);
          }
        }
        return object2.index - other.index;
      }
      _compareMultiple = compareMultiple;
      return _compareMultiple;
    }
    var _baseOrderBy;
    var hasRequired_baseOrderBy;
    function require_baseOrderBy() {
      if (hasRequired_baseOrderBy) return _baseOrderBy;
      hasRequired_baseOrderBy = 1;
      var arrayMap = require_arrayMap(), baseGet2 = require_baseGet(), baseIteratee = require_baseIteratee(), baseMap = require_baseMap(), baseSortBy = require_baseSortBy(), baseUnary = require_baseUnary(), compareMultiple = require_compareMultiple(), identity2 = requireIdentity(), isArray2 = requireIsArray();
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap(iteratees, function(iteratee) {
            if (isArray2(iteratee)) {
              return function(value) {
                return baseGet2(value, iteratee.length === 1 ? iteratee[0] : iteratee);
              };
            }
            return iteratee;
          });
        } else {
          iteratees = [identity2];
        }
        var index2 = -1;
        iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
        var result = baseMap(collection, function(value, key, collection2) {
          var criteria = arrayMap(iteratees, function(iteratee) {
            return iteratee(value);
          });
          return { "criteria": criteria, "index": ++index2, "value": value };
        });
        return baseSortBy(result, function(object2, other) {
          return compareMultiple(object2, other, orders);
        });
      }
      _baseOrderBy = baseOrderBy;
      return _baseOrderBy;
    }
    var _apply;
    var hasRequired_apply;
    function require_apply() {
      if (hasRequired_apply) return _apply;
      hasRequired_apply = 1;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      _apply = apply;
      return _apply;
    }
    var _overRest;
    var hasRequired_overRest;
    function require_overRest() {
      if (hasRequired_overRest) return _overRest;
      hasRequired_overRest = 1;
      var apply = require_apply();
      var nativeMax = Math.max;
      function overRest(func, start, transform) {
        start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index2 = -1, length = nativeMax(args.length - start, 0), array2 = Array(length);
          while (++index2 < length) {
            array2[index2] = args[start + index2];
          }
          index2 = -1;
          var otherArgs = Array(start + 1);
          while (++index2 < start) {
            otherArgs[index2] = args[index2];
          }
          otherArgs[start] = transform(array2);
          return apply(func, this, otherArgs);
        };
      }
      _overRest = overRest;
      return _overRest;
    }
    var constant_1;
    var hasRequiredConstant;
    function requireConstant() {
      if (hasRequiredConstant) return constant_1;
      hasRequiredConstant = 1;
      function constant2(value) {
        return function() {
          return value;
        };
      }
      constant_1 = constant2;
      return constant_1;
    }
    var _defineProperty$B;
    var hasRequired_defineProperty;
    function require_defineProperty() {
      if (hasRequired_defineProperty) return _defineProperty$B;
      hasRequired_defineProperty = 1;
      var getNative = require_getNative();
      var defineProperty = function() {
        try {
          var func = getNative(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      _defineProperty$B = defineProperty;
      return _defineProperty$B;
    }
    var _baseSetToString;
    var hasRequired_baseSetToString;
    function require_baseSetToString() {
      if (hasRequired_baseSetToString) return _baseSetToString;
      hasRequired_baseSetToString = 1;
      var constant2 = requireConstant(), defineProperty = require_defineProperty(), identity2 = requireIdentity();
      var baseSetToString = !defineProperty ? identity2 : function(func, string2) {
        return defineProperty(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant2(string2),
          "writable": true
        });
      };
      _baseSetToString = baseSetToString;
      return _baseSetToString;
    }
    var _shortOut;
    var hasRequired_shortOut;
    function require_shortOut() {
      if (hasRequired_shortOut) return _shortOut;
      hasRequired_shortOut = 1;
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var nativeNow = Date.now;
      function shortOut(func) {
        var count2 = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count2 >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count2 = 0;
          }
          return func.apply(void 0, arguments);
        };
      }
      _shortOut = shortOut;
      return _shortOut;
    }
    var _setToString;
    var hasRequired_setToString;
    function require_setToString() {
      if (hasRequired_setToString) return _setToString;
      hasRequired_setToString = 1;
      var baseSetToString = require_baseSetToString(), shortOut = require_shortOut();
      var setToString = shortOut(baseSetToString);
      _setToString = setToString;
      return _setToString;
    }
    var _baseRest;
    var hasRequired_baseRest;
    function require_baseRest() {
      if (hasRequired_baseRest) return _baseRest;
      hasRequired_baseRest = 1;
      var identity2 = requireIdentity(), overRest = require_overRest(), setToString = require_setToString();
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity2), func + "");
      }
      _baseRest = baseRest;
      return _baseRest;
    }
    var _isIterateeCall;
    var hasRequired_isIterateeCall;
    function require_isIterateeCall() {
      if (hasRequired_isIterateeCall) return _isIterateeCall;
      hasRequired_isIterateeCall = 1;
      var eq = requireEq(), isArrayLike = requireIsArrayLike(), isIndex = require_isIndex(), isObject2 = requireIsObject();
      function isIterateeCall(value, index2, object2) {
        if (!isObject2(object2)) {
          return false;
        }
        var type = typeof index2;
        if (type == "number" ? isArrayLike(object2) && isIndex(index2, object2.length) : type == "string" && index2 in object2) {
          return eq(object2[index2], value);
        }
        return false;
      }
      _isIterateeCall = isIterateeCall;
      return _isIterateeCall;
    }
    var sortBy_1;
    var hasRequiredSortBy;
    function requireSortBy() {
      if (hasRequiredSortBy) return sortBy_1;
      hasRequiredSortBy = 1;
      var baseFlatten = require_baseFlatten(), baseOrderBy = require_baseOrderBy(), baseRest = require_baseRest(), isIterateeCall = require_isIterateeCall();
      var sortBy2 = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });
      sortBy_1 = sortBy2;
      return sortBy_1;
    }
    var sortByExports = requireSortBy();
    const sortBy = /* @__PURE__ */ getDefaultExportFromCjs(sortByExports);
    function _typeof$C(o2) {
      "@babel/helpers - typeof";
      return _typeof$C = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$C(o2);
    }
    function _extends$l() {
      _extends$l = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$l.apply(this, arguments);
    }
    function _slicedToArray$b(arr, i2) {
      return _arrayWithHoles$c(arr) || _iterableToArrayLimit$b(arr, i2) || _unsupportedIterableToArray$i(arr, i2) || _nonIterableRest$c();
    }
    function _nonIterableRest$c() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$i(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$i(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$i(o2, minLen);
    }
    function _arrayLikeToArray$i(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$b(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n2, i2, u2, a2 = [], f = true, o2 = false;
        try {
          if (i2 = (t = t.call(r2)).next, 0 === l) ;
          else for (; !(f = (e = i2.call(t)).done) && (a2.push(e.value), a2.length !== l); f = true) ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f && null != t["return"] && (u2 = t["return"](), Object(u2) !== u2)) return;
          } finally {
            if (o2) throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$c(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function ownKeys$v(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$v(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$v(Object(t), true).forEach(function(r3) {
          _defineProperty$A(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$v(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$A(obj, key, value) {
      key = _toPropertyKey$B(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$B(t) {
      var i2 = _toPrimitive$B(t, "string");
      return "symbol" == _typeof$C(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$B(t, r2) {
      if ("object" != _typeof$C(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$C(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function defaultFormatter(value) {
      return Array.isArray(value) && isNumOrStr(value[0]) && isNumOrStr(value[1]) ? value.join(" ~ ") : value;
    }
    var DefaultTooltipContent = function DefaultTooltipContent2(props) {
      var _props$separator = props.separator, separator = _props$separator === void 0 ? " : " : _props$separator, _props$contentStyle = props.contentStyle, contentStyle = _props$contentStyle === void 0 ? {} : _props$contentStyle, _props$itemStyle = props.itemStyle, itemStyle = _props$itemStyle === void 0 ? {} : _props$itemStyle, _props$labelStyle = props.labelStyle, labelStyle = _props$labelStyle === void 0 ? {} : _props$labelStyle, payload = props.payload, formatter = props.formatter, itemSorter = props.itemSorter, wrapperClassName = props.wrapperClassName, labelClassName = props.labelClassName, label = props.label, labelFormatter = props.labelFormatter, _props$accessibilityL = props.accessibilityLayer, accessibilityLayer = _props$accessibilityL === void 0 ? false : _props$accessibilityL;
      var renderContent2 = function renderContent3() {
        if (payload && payload.length) {
          var listStyle = {
            padding: 0,
            margin: 0
          };
          var items = (itemSorter ? sortBy(payload, itemSorter) : payload).map(function(entry, i2) {
            if (entry.type === "none") {
              return null;
            }
            var finalItemStyle = _objectSpread$v({
              display: "block",
              paddingTop: 4,
              paddingBottom: 4,
              color: entry.color || "#000"
            }, itemStyle);
            var finalFormatter = entry.formatter || formatter || defaultFormatter;
            var value = entry.value, name = entry.name;
            var finalValue = value;
            var finalName = name;
            if (finalFormatter && finalValue != null && finalName != null) {
              var formatted = finalFormatter(value, name, entry, i2, payload);
              if (Array.isArray(formatted)) {
                var _formatted = _slicedToArray$b(formatted, 2);
                finalValue = _formatted[0];
                finalName = _formatted[1];
              } else {
                finalValue = formatted;
              }
            }
            return (
              // eslint-disable-next-line react/no-array-index-key
              /* @__PURE__ */ React.createElement("li", {
                className: "recharts-tooltip-item",
                key: "tooltip-item-".concat(i2),
                style: finalItemStyle
              }, isNumOrStr(finalName) ? /* @__PURE__ */ React.createElement("span", {
                className: "recharts-tooltip-item-name"
              }, finalName) : null, isNumOrStr(finalName) ? /* @__PURE__ */ React.createElement("span", {
                className: "recharts-tooltip-item-separator"
              }, separator) : null, /* @__PURE__ */ React.createElement("span", {
                className: "recharts-tooltip-item-value"
              }, finalValue), /* @__PURE__ */ React.createElement("span", {
                className: "recharts-tooltip-item-unit"
              }, entry.unit || ""))
            );
          });
          return /* @__PURE__ */ React.createElement("ul", {
            className: "recharts-tooltip-item-list",
            style: listStyle
          }, items);
        }
        return null;
      };
      var finalStyle = _objectSpread$v({
        margin: 0,
        padding: 10,
        backgroundColor: "#fff",
        border: "1px solid #ccc",
        whiteSpace: "nowrap"
      }, contentStyle);
      var finalLabelStyle = _objectSpread$v({
        margin: 0
      }, labelStyle);
      var hasLabel = !isNil(label);
      var finalLabel = hasLabel ? label : "";
      var wrapperCN = clsx("recharts-default-tooltip", wrapperClassName);
      var labelCN = clsx("recharts-tooltip-label", labelClassName);
      if (hasLabel && labelFormatter && payload !== void 0 && payload !== null) {
        finalLabel = labelFormatter(label, payload);
      }
      var accessibilityAttributes = accessibilityLayer ? {
        role: "status",
        "aria-live": "assertive"
      } : {};
      return /* @__PURE__ */ React.createElement("div", _extends$l({
        className: wrapperCN,
        style: finalStyle
      }, accessibilityAttributes), /* @__PURE__ */ React.createElement("p", {
        className: labelCN,
        style: finalLabelStyle
      }, /* @__PURE__ */ React.isValidElement(finalLabel) ? finalLabel : "".concat(finalLabel)), renderContent2());
    };
    function _typeof$B(o2) {
      "@babel/helpers - typeof";
      return _typeof$B = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$B(o2);
    }
    function _defineProperty$z(obj, key, value) {
      key = _toPropertyKey$A(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$A(t) {
      var i2 = _toPrimitive$A(t, "string");
      return "symbol" == _typeof$B(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$A(t, r2) {
      if ("object" != _typeof$B(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$B(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    var CSS_CLASS_PREFIX = "recharts-tooltip-wrapper";
    var TOOLTIP_HIDDEN = {
      visibility: "hidden"
    };
    function getTooltipCSSClassName(_ref) {
      var coordinate = _ref.coordinate, translateX = _ref.translateX, translateY = _ref.translateY;
      return clsx(CSS_CLASS_PREFIX, _defineProperty$z(_defineProperty$z(_defineProperty$z(_defineProperty$z({}, "".concat(CSS_CLASS_PREFIX, "-right"), isNumber(translateX) && coordinate && isNumber(coordinate.x) && translateX >= coordinate.x), "".concat(CSS_CLASS_PREFIX, "-left"), isNumber(translateX) && coordinate && isNumber(coordinate.x) && translateX < coordinate.x), "".concat(CSS_CLASS_PREFIX, "-bottom"), isNumber(translateY) && coordinate && isNumber(coordinate.y) && translateY >= coordinate.y), "".concat(CSS_CLASS_PREFIX, "-top"), isNumber(translateY) && coordinate && isNumber(coordinate.y) && translateY < coordinate.y));
    }
    function getTooltipTranslateXY(_ref2) {
      var allowEscapeViewBox = _ref2.allowEscapeViewBox, coordinate = _ref2.coordinate, key = _ref2.key, offsetTopLeft = _ref2.offsetTopLeft, position = _ref2.position, reverseDirection = _ref2.reverseDirection, tooltipDimension = _ref2.tooltipDimension, viewBox = _ref2.viewBox, viewBoxDimension = _ref2.viewBoxDimension;
      if (position && isNumber(position[key])) {
        return position[key];
      }
      var negative = coordinate[key] - tooltipDimension - offsetTopLeft;
      var positive = coordinate[key] + offsetTopLeft;
      if (allowEscapeViewBox[key]) {
        return reverseDirection[key] ? negative : positive;
      }
      if (reverseDirection[key]) {
        var _tooltipBoundary = negative;
        var _viewBoxBoundary = viewBox[key];
        if (_tooltipBoundary < _viewBoxBoundary) {
          return Math.max(positive, viewBox[key]);
        }
        return Math.max(negative, viewBox[key]);
      }
      var tooltipBoundary = positive + tooltipDimension;
      var viewBoxBoundary = viewBox[key] + viewBoxDimension;
      if (tooltipBoundary > viewBoxBoundary) {
        return Math.max(negative, viewBox[key]);
      }
      return Math.max(positive, viewBox[key]);
    }
    function getTransformStyle(_ref3) {
      var translateX = _ref3.translateX, translateY = _ref3.translateY, useTranslate3d = _ref3.useTranslate3d;
      return {
        transform: useTranslate3d ? "translate3d(".concat(translateX, "px, ").concat(translateY, "px, 0)") : "translate(".concat(translateX, "px, ").concat(translateY, "px)")
      };
    }
    function getTooltipTranslate(_ref4) {
      var allowEscapeViewBox = _ref4.allowEscapeViewBox, coordinate = _ref4.coordinate, offsetTopLeft = _ref4.offsetTopLeft, position = _ref4.position, reverseDirection = _ref4.reverseDirection, tooltipBox = _ref4.tooltipBox, useTranslate3d = _ref4.useTranslate3d, viewBox = _ref4.viewBox;
      var cssProperties, translateX, translateY;
      if (tooltipBox.height > 0 && tooltipBox.width > 0 && coordinate) {
        translateX = getTooltipTranslateXY({
          allowEscapeViewBox,
          coordinate,
          key: "x",
          offsetTopLeft,
          position,
          reverseDirection,
          tooltipDimension: tooltipBox.width,
          viewBox,
          viewBoxDimension: viewBox.width
        });
        translateY = getTooltipTranslateXY({
          allowEscapeViewBox,
          coordinate,
          key: "y",
          offsetTopLeft,
          position,
          reverseDirection,
          tooltipDimension: tooltipBox.height,
          viewBox,
          viewBoxDimension: viewBox.height
        });
        cssProperties = getTransformStyle({
          translateX,
          translateY,
          useTranslate3d
        });
      } else {
        cssProperties = TOOLTIP_HIDDEN;
      }
      return {
        cssProperties,
        cssClasses: getTooltipCSSClassName({
          translateX,
          translateY,
          coordinate
        })
      };
    }
    function _typeof$A(o2) {
      "@babel/helpers - typeof";
      return _typeof$A = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$A(o2);
    }
    function ownKeys$u(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$u(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$u(Object(t), true).forEach(function(r3) {
          _defineProperty$y(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$u(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _classCallCheck$f(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$f(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$z(descriptor.key), descriptor);
      }
    }
    function _createClass$f(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$f(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$b(t, o2, e) {
      return o2 = _getPrototypeOf$c(o2), _possibleConstructorReturn$c(t, _isNativeReflectConstruct$c() ? Reflect.construct(o2, e || [], _getPrototypeOf$c(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$c(self2, call) {
      if (call && (_typeof$A(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$c(self2);
    }
    function _assertThisInitialized$c(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$c() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$c = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$c(o2) {
      _getPrototypeOf$c = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$c(o2);
    }
    function _inherits$c(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$c(subClass, superClass);
    }
    function _setPrototypeOf$c(o2, p2) {
      _setPrototypeOf$c = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$c(o2, p2);
    }
    function _defineProperty$y(obj, key, value) {
      key = _toPropertyKey$z(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$z(t) {
      var i2 = _toPrimitive$z(t, "string");
      return "symbol" == _typeof$A(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$z(t, r2) {
      if ("object" != _typeof$A(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$A(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    var EPSILON = 1;
    var TooltipBoundingBox = /* @__PURE__ */ function(_PureComponent) {
      function TooltipBoundingBox2() {
        var _this;
        _classCallCheck$f(this, TooltipBoundingBox2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper$b(this, TooltipBoundingBox2, [].concat(args));
        _defineProperty$y(_this, "state", {
          dismissed: false,
          dismissedAtCoordinate: {
            x: 0,
            y: 0
          },
          lastBoundingBox: {
            width: -1,
            height: -1
          }
        });
        _defineProperty$y(_this, "handleKeyDown", function(event) {
          if (event.key === "Escape") {
            var _this$props$coordinat, _this$props$coordinat2, _this$props$coordinat3, _this$props$coordinat4;
            _this.setState({
              dismissed: true,
              dismissedAtCoordinate: {
                x: (_this$props$coordinat = (_this$props$coordinat2 = _this.props.coordinate) === null || _this$props$coordinat2 === void 0 ? void 0 : _this$props$coordinat2.x) !== null && _this$props$coordinat !== void 0 ? _this$props$coordinat : 0,
                y: (_this$props$coordinat3 = (_this$props$coordinat4 = _this.props.coordinate) === null || _this$props$coordinat4 === void 0 ? void 0 : _this$props$coordinat4.y) !== null && _this$props$coordinat3 !== void 0 ? _this$props$coordinat3 : 0
              }
            });
          }
        });
        return _this;
      }
      _inherits$c(TooltipBoundingBox2, _PureComponent);
      return _createClass$f(TooltipBoundingBox2, [{
        key: "updateBBox",
        value: function updateBBox() {
          if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
            var box = this.wrapperNode.getBoundingClientRect();
            if (Math.abs(box.width - this.state.lastBoundingBox.width) > EPSILON || Math.abs(box.height - this.state.lastBoundingBox.height) > EPSILON) {
              this.setState({
                lastBoundingBox: {
                  width: box.width,
                  height: box.height
                }
              });
            }
          } else if (this.state.lastBoundingBox.width !== -1 || this.state.lastBoundingBox.height !== -1) {
            this.setState({
              lastBoundingBox: {
                width: -1,
                height: -1
              }
            });
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          document.addEventListener("keydown", this.handleKeyDown);
          this.updateBBox();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          document.removeEventListener("keydown", this.handleKeyDown);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var _this$props$coordinat5, _this$props$coordinat6;
          if (this.props.active) {
            this.updateBBox();
          }
          if (!this.state.dismissed) {
            return;
          }
          if (((_this$props$coordinat5 = this.props.coordinate) === null || _this$props$coordinat5 === void 0 ? void 0 : _this$props$coordinat5.x) !== this.state.dismissedAtCoordinate.x || ((_this$props$coordinat6 = this.props.coordinate) === null || _this$props$coordinat6 === void 0 ? void 0 : _this$props$coordinat6.y) !== this.state.dismissedAtCoordinate.y) {
            this.state.dismissed = false;
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _this$props = this.props, active = _this$props.active, allowEscapeViewBox = _this$props.allowEscapeViewBox, animationDuration = _this$props.animationDuration, animationEasing = _this$props.animationEasing, children = _this$props.children, coordinate = _this$props.coordinate, hasPayload = _this$props.hasPayload, isAnimationActive = _this$props.isAnimationActive, offset2 = _this$props.offset, position = _this$props.position, reverseDirection = _this$props.reverseDirection, useTranslate3d = _this$props.useTranslate3d, viewBox = _this$props.viewBox, wrapperStyle = _this$props.wrapperStyle;
          var _getTooltipTranslate = getTooltipTranslate({
            allowEscapeViewBox,
            coordinate,
            offsetTopLeft: offset2,
            position,
            reverseDirection,
            tooltipBox: this.state.lastBoundingBox,
            useTranslate3d,
            viewBox
          }), cssClasses = _getTooltipTranslate.cssClasses, cssProperties = _getTooltipTranslate.cssProperties;
          var outerStyle = _objectSpread$u(_objectSpread$u({
            transition: isAnimationActive && active ? "transform ".concat(animationDuration, "ms ").concat(animationEasing) : void 0
          }, cssProperties), {}, {
            pointerEvents: "none",
            visibility: !this.state.dismissed && active && hasPayload ? "visible" : "hidden",
            position: "absolute",
            top: 0,
            left: 0
          }, wrapperStyle);
          return (
            // This element allow listening to the `Escape` key.
            // See https://github.com/recharts/recharts/pull/2925
            /* @__PURE__ */ React.createElement("div", {
              tabIndex: -1,
              className: cssClasses,
              style: outerStyle,
              ref: function ref(node) {
                _this2.wrapperNode = node;
              }
            }, children)
          );
        }
      }]);
    }(reactExports.PureComponent);
    var parseIsSsrByDefault = function parseIsSsrByDefault2() {
      return !(typeof window !== "undefined" && window.document && window.document.createElement && window.setTimeout);
    };
    var Global = {
      isSsr: parseIsSsrByDefault()
    };
    function _typeof$z(o2) {
      "@babel/helpers - typeof";
      return _typeof$z = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$z(o2);
    }
    function ownKeys$t(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$t(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$t(Object(t), true).forEach(function(r3) {
          _defineProperty$x(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$t(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _classCallCheck$e(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$e(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$y(descriptor.key), descriptor);
      }
    }
    function _createClass$e(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$e(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$a(t, o2, e) {
      return o2 = _getPrototypeOf$b(o2), _possibleConstructorReturn$b(t, _isNativeReflectConstruct$b() ? Reflect.construct(o2, e || [], _getPrototypeOf$b(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$b(self2, call) {
      if (call && (_typeof$z(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$b(self2);
    }
    function _assertThisInitialized$b(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$b() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$b = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$b(o2) {
      _getPrototypeOf$b = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$b(o2);
    }
    function _inherits$b(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$b(subClass, superClass);
    }
    function _setPrototypeOf$b(o2, p2) {
      _setPrototypeOf$b = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$b(o2, p2);
    }
    function _defineProperty$x(obj, key, value) {
      key = _toPropertyKey$y(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$y(t) {
      var i2 = _toPrimitive$y(t, "string");
      return "symbol" == _typeof$z(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$y(t, r2) {
      if ("object" != _typeof$z(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$z(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    function defaultUniqBy(entry) {
      return entry.dataKey;
    }
    function renderContent(content, props) {
      if (/* @__PURE__ */ React.isValidElement(content)) {
        return /* @__PURE__ */ React.cloneElement(content, props);
      }
      if (typeof content === "function") {
        return /* @__PURE__ */ React.createElement(content, props);
      }
      return /* @__PURE__ */ React.createElement(DefaultTooltipContent, props);
    }
    var Tooltip = /* @__PURE__ */ function(_PureComponent) {
      function Tooltip2() {
        _classCallCheck$e(this, Tooltip2);
        return _callSuper$a(this, Tooltip2, arguments);
      }
      _inherits$b(Tooltip2, _PureComponent);
      return _createClass$e(Tooltip2, [{
        key: "render",
        value: function render() {
          var _this = this;
          var _this$props = this.props, active = _this$props.active, allowEscapeViewBox = _this$props.allowEscapeViewBox, animationDuration = _this$props.animationDuration, animationEasing = _this$props.animationEasing, content = _this$props.content, coordinate = _this$props.coordinate, filterNull = _this$props.filterNull, isAnimationActive = _this$props.isAnimationActive, offset2 = _this$props.offset, payload = _this$props.payload, payloadUniqBy = _this$props.payloadUniqBy, position = _this$props.position, reverseDirection = _this$props.reverseDirection, useTranslate3d = _this$props.useTranslate3d, viewBox = _this$props.viewBox, wrapperStyle = _this$props.wrapperStyle;
          var finalPayload = payload !== null && payload !== void 0 ? payload : [];
          if (filterNull && finalPayload.length) {
            finalPayload = getUniqPayload(payload.filter(function(entry) {
              return entry.value != null && (entry.hide !== true || _this.props.includeHidden);
            }), payloadUniqBy, defaultUniqBy);
          }
          var hasPayload = finalPayload.length > 0;
          return /* @__PURE__ */ React.createElement(TooltipBoundingBox, {
            allowEscapeViewBox,
            animationDuration,
            animationEasing,
            isAnimationActive,
            active,
            coordinate,
            hasPayload,
            offset: offset2,
            position,
            reverseDirection,
            useTranslate3d,
            viewBox,
            wrapperStyle
          }, renderContent(content, _objectSpread$t(_objectSpread$t({}, this.props), {}, {
            payload: finalPayload
          })));
        }
      }]);
    }(reactExports.PureComponent);
    _defineProperty$x(Tooltip, "displayName", "Tooltip");
    _defineProperty$x(Tooltip, "defaultProps", {
      accessibilityLayer: false,
      allowEscapeViewBox: {
        x: false,
        y: false
      },
      animationDuration: 400,
      animationEasing: "ease",
      contentStyle: {},
      coordinate: {
        x: 0,
        y: 0
      },
      cursor: true,
      cursorStyle: {},
      filterNull: true,
      isAnimationActive: !Global.isSsr,
      itemStyle: {},
      labelStyle: {},
      offset: 10,
      reverseDirection: {
        x: false,
        y: false
      },
      separator: " : ",
      trigger: "hover",
      useTranslate3d: false,
      viewBox: {
        x: 0,
        y: 0,
        height: 0,
        width: 0
      },
      wrapperStyle: {}
    });
    var now_1;
    var hasRequiredNow;
    function requireNow() {
      if (hasRequiredNow) return now_1;
      hasRequiredNow = 1;
      var root = require_root();
      var now2 = function() {
        return root.Date.now();
      };
      now_1 = now2;
      return now_1;
    }
    var _trimmedEndIndex;
    var hasRequired_trimmedEndIndex;
    function require_trimmedEndIndex() {
      if (hasRequired_trimmedEndIndex) return _trimmedEndIndex;
      hasRequired_trimmedEndIndex = 1;
      var reWhitespace = /\s/;
      function trimmedEndIndex(string2) {
        var index2 = string2.length;
        while (index2-- && reWhitespace.test(string2.charAt(index2))) {
        }
        return index2;
      }
      _trimmedEndIndex = trimmedEndIndex;
      return _trimmedEndIndex;
    }
    var _baseTrim;
    var hasRequired_baseTrim;
    function require_baseTrim() {
      if (hasRequired_baseTrim) return _baseTrim;
      hasRequired_baseTrim = 1;
      var trimmedEndIndex = require_trimmedEndIndex();
      var reTrimStart = /^\s+/;
      function baseTrim(string2) {
        return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
      }
      _baseTrim = baseTrim;
      return _baseTrim;
    }
    var toNumber_1;
    var hasRequiredToNumber;
    function requireToNumber() {
      if (hasRequiredToNumber) return toNumber_1;
      hasRequiredToNumber = 1;
      var baseTrim = require_baseTrim(), isObject2 = requireIsObject(), isSymbol = requireIsSymbol();
      var NAN = 0 / 0;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject2(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject2(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      toNumber_1 = toNumber;
      return toNumber_1;
    }
    var debounce_1;
    var hasRequiredDebounce;
    function requireDebounce() {
      if (hasRequiredDebounce) return debounce_1;
      hasRequiredDebounce = 1;
      var isObject2 = requireIsObject(), now2 = requireNow(), toNumber = requireToNumber();
      var FUNC_ERROR_TEXT = "Expected a function";
      var nativeMax = Math.max, nativeMin = Math.min;
      function debounce(func, wait, options2) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject2(options2)) {
          leading = !!options2.leading;
          maxing = "maxWait" in options2;
          maxWait = maxing ? nativeMax(toNumber(options2.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options2 ? !!options2.trailing : trailing;
        }
        function invokeFunc(time2) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time2;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time2) {
          lastInvokeTime = time2;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time2) : result;
        }
        function remainingWait(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time2) {
          var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time2 = now2();
          if (shouldInvoke(time2)) {
            return trailingEdge(time2);
          }
          timerId = setTimeout(timerExpired, remainingWait(time2));
        }
        function trailingEdge(time2) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time2);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now2());
        }
        function debounced() {
          var time2 = now2(), isInvoking = shouldInvoke(time2);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time2;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      debounce_1 = debounce;
      return debounce_1;
    }
    var throttle_1;
    var hasRequiredThrottle;
    function requireThrottle() {
      if (hasRequiredThrottle) return throttle_1;
      hasRequiredThrottle = 1;
      var debounce = requireDebounce(), isObject2 = requireIsObject();
      var FUNC_ERROR_TEXT = "Expected a function";
      function throttle2(func, wait, options2) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject2(options2)) {
          leading = "leading" in options2 ? !!options2.leading : leading;
          trailing = "trailing" in options2 ? !!options2.trailing : trailing;
        }
        return debounce(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      throttle_1 = throttle2;
      return throttle_1;
    }
    var throttleExports = requireThrottle();
    const throttle = /* @__PURE__ */ getDefaultExportFromCjs(throttleExports);
    function _typeof$y(o2) {
      "@babel/helpers - typeof";
      return _typeof$y = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$y(o2);
    }
    function ownKeys$s(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$s(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$s(Object(t), true).forEach(function(r3) {
          _defineProperty$w(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$s(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$w(obj, key, value) {
      key = _toPropertyKey$x(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$x(t) {
      var i2 = _toPrimitive$x(t, "string");
      return "symbol" == _typeof$y(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$x(t, r2) {
      if ("object" != _typeof$y(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$y(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function _slicedToArray$a(arr, i2) {
      return _arrayWithHoles$b(arr) || _iterableToArrayLimit$a(arr, i2) || _unsupportedIterableToArray$h(arr, i2) || _nonIterableRest$b();
    }
    function _nonIterableRest$b() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$h(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$h(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$h(o2, minLen);
    }
    function _arrayLikeToArray$h(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$a(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n2, i2, u2, a2 = [], f = true, o2 = false;
        try {
          if (i2 = (t = t.call(r2)).next, 0 === l) ;
          else for (; !(f = (e = i2.call(t)).done) && (a2.push(e.value), a2.length !== l); f = true) ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f && null != t["return"] && (u2 = t["return"](), Object(u2) !== u2)) return;
          } finally {
            if (o2) throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$b(arr) {
      if (Array.isArray(arr)) return arr;
    }
    var ResponsiveContainer = /* @__PURE__ */ reactExports.forwardRef(function(_ref, ref) {
      var aspect = _ref.aspect, _ref$initialDimension = _ref.initialDimension, initialDimension = _ref$initialDimension === void 0 ? {
        width: -1,
        height: -1
      } : _ref$initialDimension, _ref$width = _ref.width, width = _ref$width === void 0 ? "100%" : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? "100%" : _ref$height, _ref$minWidth = _ref.minWidth, minWidth = _ref$minWidth === void 0 ? 0 : _ref$minWidth, minHeight = _ref.minHeight, maxHeight = _ref.maxHeight, children = _ref.children, _ref$debounce = _ref.debounce, debounce = _ref$debounce === void 0 ? 0 : _ref$debounce, id = _ref.id, className = _ref.className, onResize = _ref.onResize, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style;
      var containerRef = reactExports.useRef(null);
      var onResizeRef = reactExports.useRef();
      onResizeRef.current = onResize;
      reactExports.useImperativeHandle(ref, function() {
        return Object.defineProperty(containerRef.current, "current", {
          get: function get2() {
            console.warn("The usage of ref.current.current is deprecated and will no longer be supported.");
            return containerRef.current;
          },
          configurable: true
        });
      });
      var _useState = reactExports.useState({
        containerWidth: initialDimension.width,
        containerHeight: initialDimension.height
      }), _useState2 = _slicedToArray$a(_useState, 2), sizes = _useState2[0], setSizes = _useState2[1];
      var setContainerSize = reactExports.useCallback(function(newWidth, newHeight) {
        setSizes(function(prevState) {
          var roundedWidth = Math.round(newWidth);
          var roundedHeight = Math.round(newHeight);
          if (prevState.containerWidth === roundedWidth && prevState.containerHeight === roundedHeight) {
            return prevState;
          }
          return {
            containerWidth: roundedWidth,
            containerHeight: roundedHeight
          };
        });
      }, []);
      reactExports.useEffect(function() {
        var callback = function callback2(entries) {
          var _onResizeRef$current;
          var _entries$0$contentRec = entries[0].contentRect, containerWidth2 = _entries$0$contentRec.width, containerHeight2 = _entries$0$contentRec.height;
          setContainerSize(containerWidth2, containerHeight2);
          (_onResizeRef$current = onResizeRef.current) === null || _onResizeRef$current === void 0 || _onResizeRef$current.call(onResizeRef, containerWidth2, containerHeight2);
        };
        if (debounce > 0) {
          callback = throttle(callback, debounce, {
            trailing: true,
            leading: false
          });
        }
        var observer = new ResizeObserver(callback);
        var _containerRef$current = containerRef.current.getBoundingClientRect(), containerWidth = _containerRef$current.width, containerHeight = _containerRef$current.height;
        setContainerSize(containerWidth, containerHeight);
        observer.observe(containerRef.current);
        return function() {
          observer.disconnect();
        };
      }, [setContainerSize, debounce]);
      var chartContent = reactExports.useMemo(function() {
        var containerWidth = sizes.containerWidth, containerHeight = sizes.containerHeight;
        if (containerWidth < 0 || containerHeight < 0) {
          return null;
        }
        warn(isPercent(width) || isPercent(height), "The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.", width, height);
        warn(!aspect || aspect > 0, "The aspect(%s) must be greater than zero.", aspect);
        var calculatedWidth = isPercent(width) ? containerWidth : width;
        var calculatedHeight = isPercent(height) ? containerHeight : height;
        if (aspect && aspect > 0) {
          if (calculatedWidth) {
            calculatedHeight = calculatedWidth / aspect;
          } else if (calculatedHeight) {
            calculatedWidth = calculatedHeight * aspect;
          }
          if (maxHeight && calculatedHeight > maxHeight) {
            calculatedHeight = maxHeight;
          }
        }
        warn(calculatedWidth > 0 || calculatedHeight > 0, "The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.", calculatedWidth, calculatedHeight, width, height, minWidth, minHeight, aspect);
        var isCharts = !Array.isArray(children) && getDisplayName(children.type).endsWith("Chart");
        return React.Children.map(children, function(child) {
          if (/* @__PURE__ */ React.isValidElement(child)) {
            return /* @__PURE__ */ reactExports.cloneElement(child, _objectSpread$s({
              width: calculatedWidth,
              height: calculatedHeight
            }, isCharts ? {
              style: _objectSpread$s({
                height: "100%",
                width: "100%",
                maxHeight: calculatedHeight,
                maxWidth: calculatedWidth
              }, child.props.style)
            } : {}));
          }
          return child;
        });
      }, [aspect, children, height, maxHeight, minHeight, minWidth, sizes, width]);
      return /* @__PURE__ */ React.createElement("div", {
        id: id ? "".concat(id) : void 0,
        className: clsx("recharts-responsive-container", className),
        style: _objectSpread$s(_objectSpread$s({}, style), {}, {
          width,
          height,
          minWidth,
          minHeight,
          maxHeight
        }),
        ref: containerRef
      }, chartContent);
    });
    var Cell = function Cell2(_props) {
      return null;
    };
    Cell.displayName = "Cell";
    function _typeof$x(o2) {
      "@babel/helpers - typeof";
      return _typeof$x = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$x(o2);
    }
    function ownKeys$r(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$r(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$r(Object(t), true).forEach(function(r3) {
          _defineProperty$v(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$r(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$v(obj, key, value) {
      key = _toPropertyKey$w(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$w(t) {
      var i2 = _toPrimitive$w(t, "string");
      return "symbol" == _typeof$x(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$w(t, r2) {
      if ("object" != _typeof$x(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$x(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    var stringCache = {
      widthCache: {},
      cacheCount: 0
    };
    var MAX_CACHE_NUM = 2e3;
    var SPAN_STYLE = {
      position: "absolute",
      top: "-20000px",
      left: 0,
      padding: 0,
      margin: 0,
      border: "none",
      whiteSpace: "pre"
    };
    var MEASUREMENT_SPAN_ID = "recharts_measurement_span";
    function removeInvalidKeys(obj) {
      var copyObj = _objectSpread$r({}, obj);
      Object.keys(copyObj).forEach(function(key) {
        if (!copyObj[key]) {
          delete copyObj[key];
        }
      });
      return copyObj;
    }
    var getStringSize = function getStringSize2(text2) {
      var style = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (text2 === void 0 || text2 === null || Global.isSsr) {
        return {
          width: 0,
          height: 0
        };
      }
      var copyStyle = removeInvalidKeys(style);
      var cacheKey = JSON.stringify({
        text: text2,
        copyStyle
      });
      if (stringCache.widthCache[cacheKey]) {
        return stringCache.widthCache[cacheKey];
      }
      try {
        var measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);
        if (!measurementSpan) {
          measurementSpan = document.createElement("span");
          measurementSpan.setAttribute("id", MEASUREMENT_SPAN_ID);
          measurementSpan.setAttribute("aria-hidden", "true");
          document.body.appendChild(measurementSpan);
        }
        var measurementSpanStyle = _objectSpread$r(_objectSpread$r({}, SPAN_STYLE), copyStyle);
        Object.assign(measurementSpan.style, measurementSpanStyle);
        measurementSpan.textContent = "".concat(text2);
        var rect = measurementSpan.getBoundingClientRect();
        var result = {
          width: rect.width,
          height: rect.height
        };
        stringCache.widthCache[cacheKey] = result;
        if (++stringCache.cacheCount > MAX_CACHE_NUM) {
          stringCache.cacheCount = 0;
          stringCache.widthCache = {};
        }
        return result;
      } catch (e) {
        return {
          width: 0,
          height: 0
        };
      }
    };
    var getOffset = function getOffset2(rect) {
      return {
        top: rect.top + window.scrollY - document.documentElement.clientTop,
        left: rect.left + window.scrollX - document.documentElement.clientLeft
      };
    };
    function _typeof$w(o2) {
      "@babel/helpers - typeof";
      return _typeof$w = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$w(o2);
    }
    function _slicedToArray$9(arr, i2) {
      return _arrayWithHoles$a(arr) || _iterableToArrayLimit$9(arr, i2) || _unsupportedIterableToArray$g(arr, i2) || _nonIterableRest$a();
    }
    function _nonIterableRest$a() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$g(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$g(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$g(o2, minLen);
    }
    function _arrayLikeToArray$g(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$9(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n2, i2, u2, a2 = [], f = true, o2 = false;
        try {
          if (i2 = (t = t.call(r2)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = false;
          } else for (; !(f = (e = i2.call(t)).done) && (a2.push(e.value), a2.length !== l); f = true) ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f && null != t["return"] && (u2 = t["return"](), Object(u2) !== u2)) return;
          } finally {
            if (o2) throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$a(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _classCallCheck$d(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$d(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$v(descriptor.key), descriptor);
      }
    }
    function _createClass$d(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$d(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties$d(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey$v(t) {
      var i2 = _toPrimitive$v(t, "string");
      return "symbol" == _typeof$w(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$v(t, r2) {
      if ("object" != _typeof$w(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$w(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    var MULTIPLY_OR_DIVIDE_REGEX = /(-?\d+(?:\.\d+)?[a-zA-Z%]*)([*/])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/;
    var ADD_OR_SUBTRACT_REGEX = /(-?\d+(?:\.\d+)?[a-zA-Z%]*)([+-])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/;
    var CSS_LENGTH_UNIT_REGEX = /^px|cm|vh|vw|em|rem|%|mm|in|pt|pc|ex|ch|vmin|vmax|Q$/;
    var NUM_SPLIT_REGEX = /(-?\d+(?:\.\d+)?)([a-zA-Z%]+)?/;
    var CONVERSION_RATES = {
      cm: 96 / 2.54,
      mm: 96 / 25.4,
      pt: 96 / 72,
      pc: 96 / 6,
      "in": 96,
      Q: 96 / (2.54 * 40),
      px: 1
    };
    var FIXED_CSS_LENGTH_UNITS = Object.keys(CONVERSION_RATES);
    var STR_NAN = "NaN";
    function convertToPx(value, unit2) {
      return value * CONVERSION_RATES[unit2];
    }
    var DecimalCSS = /* @__PURE__ */ function() {
      function DecimalCSS2(num, unit2) {
        _classCallCheck$d(this, DecimalCSS2);
        this.num = num;
        this.unit = unit2;
        this.num = num;
        this.unit = unit2;
        if (Number.isNaN(num)) {
          this.unit = "";
        }
        if (unit2 !== "" && !CSS_LENGTH_UNIT_REGEX.test(unit2)) {
          this.num = NaN;
          this.unit = "";
        }
        if (FIXED_CSS_LENGTH_UNITS.includes(unit2)) {
          this.num = convertToPx(num, unit2);
          this.unit = "px";
        }
      }
      return _createClass$d(DecimalCSS2, [{
        key: "add",
        value: function add2(other) {
          if (this.unit !== other.unit) {
            return new DecimalCSS2(NaN, "");
          }
          return new DecimalCSS2(this.num + other.num, this.unit);
        }
      }, {
        key: "subtract",
        value: function subtract2(other) {
          if (this.unit !== other.unit) {
            return new DecimalCSS2(NaN, "");
          }
          return new DecimalCSS2(this.num - other.num, this.unit);
        }
      }, {
        key: "multiply",
        value: function multiply(other) {
          if (this.unit !== "" && other.unit !== "" && this.unit !== other.unit) {
            return new DecimalCSS2(NaN, "");
          }
          return new DecimalCSS2(this.num * other.num, this.unit || other.unit);
        }
      }, {
        key: "divide",
        value: function divide2(other) {
          if (this.unit !== "" && other.unit !== "" && this.unit !== other.unit) {
            return new DecimalCSS2(NaN, "");
          }
          return new DecimalCSS2(this.num / other.num, this.unit || other.unit);
        }
      }, {
        key: "toString",
        value: function toString2() {
          return "".concat(this.num).concat(this.unit);
        }
      }, {
        key: "isNaN",
        value: function isNaN2() {
          return Number.isNaN(this.num);
        }
      }], [{
        key: "parse",
        value: function parse2(str) {
          var _NUM_SPLIT_REGEX$exec;
          var _ref = (_NUM_SPLIT_REGEX$exec = NUM_SPLIT_REGEX.exec(str)) !== null && _NUM_SPLIT_REGEX$exec !== void 0 ? _NUM_SPLIT_REGEX$exec : [], _ref2 = _slicedToArray$9(_ref, 3), numStr = _ref2[1], unit2 = _ref2[2];
          return new DecimalCSS2(parseFloat(numStr), unit2 !== null && unit2 !== void 0 ? unit2 : "");
        }
      }]);
    }();
    function calculateArithmetic(expr) {
      if (expr.includes(STR_NAN)) {
        return STR_NAN;
      }
      var newExpr = expr;
      while (newExpr.includes("*") || newExpr.includes("/")) {
        var _MULTIPLY_OR_DIVIDE_R;
        var _ref3 = (_MULTIPLY_OR_DIVIDE_R = MULTIPLY_OR_DIVIDE_REGEX.exec(newExpr)) !== null && _MULTIPLY_OR_DIVIDE_R !== void 0 ? _MULTIPLY_OR_DIVIDE_R : [], _ref4 = _slicedToArray$9(_ref3, 4), leftOperand = _ref4[1], operator = _ref4[2], rightOperand = _ref4[3];
        var lTs = DecimalCSS.parse(leftOperand !== null && leftOperand !== void 0 ? leftOperand : "");
        var rTs = DecimalCSS.parse(rightOperand !== null && rightOperand !== void 0 ? rightOperand : "");
        var result = operator === "*" ? lTs.multiply(rTs) : lTs.divide(rTs);
        if (result.isNaN()) {
          return STR_NAN;
        }
        newExpr = newExpr.replace(MULTIPLY_OR_DIVIDE_REGEX, result.toString());
      }
      while (newExpr.includes("+") || /.-\d+(?:\.\d+)?/.test(newExpr)) {
        var _ADD_OR_SUBTRACT_REGE;
        var _ref5 = (_ADD_OR_SUBTRACT_REGE = ADD_OR_SUBTRACT_REGEX.exec(newExpr)) !== null && _ADD_OR_SUBTRACT_REGE !== void 0 ? _ADD_OR_SUBTRACT_REGE : [], _ref6 = _slicedToArray$9(_ref5, 4), _leftOperand = _ref6[1], _operator = _ref6[2], _rightOperand = _ref6[3];
        var _lTs = DecimalCSS.parse(_leftOperand !== null && _leftOperand !== void 0 ? _leftOperand : "");
        var _rTs = DecimalCSS.parse(_rightOperand !== null && _rightOperand !== void 0 ? _rightOperand : "");
        var _result = _operator === "+" ? _lTs.add(_rTs) : _lTs.subtract(_rTs);
        if (_result.isNaN()) {
          return STR_NAN;
        }
        newExpr = newExpr.replace(ADD_OR_SUBTRACT_REGEX, _result.toString());
      }
      return newExpr;
    }
    var PARENTHESES_REGEX = /\(([^()]*)\)/;
    function calculateParentheses(expr) {
      var newExpr = expr;
      while (newExpr.includes("(")) {
        var _PARENTHESES_REGEX$ex = PARENTHESES_REGEX.exec(newExpr), _PARENTHESES_REGEX$ex2 = _slicedToArray$9(_PARENTHESES_REGEX$ex, 2), parentheticalExpression = _PARENTHESES_REGEX$ex2[1];
        newExpr = newExpr.replace(PARENTHESES_REGEX, calculateArithmetic(parentheticalExpression));
      }
      return newExpr;
    }
    function evaluateExpression(expression) {
      var newExpr = expression.replace(/\s+/g, "");
      newExpr = calculateParentheses(newExpr);
      newExpr = calculateArithmetic(newExpr);
      return newExpr;
    }
    function safeEvaluateExpression(expression) {
      try {
        return evaluateExpression(expression);
      } catch (e) {
        return STR_NAN;
      }
    }
    function reduceCSSCalc(expression) {
      var result = safeEvaluateExpression(expression.slice(5, -1));
      if (result === STR_NAN) {
        return "";
      }
      return result;
    }
    var _excluded$b = ["x", "y", "lineHeight", "capHeight", "scaleToFit", "textAnchor", "verticalAnchor", "fill"], _excluded2$4 = ["dx", "dy", "angle", "className", "breakAll"];
    function _extends$k() {
      _extends$k = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$k.apply(this, arguments);
    }
    function _objectWithoutProperties$b(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$b(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$b(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _slicedToArray$8(arr, i2) {
      return _arrayWithHoles$9(arr) || _iterableToArrayLimit$8(arr, i2) || _unsupportedIterableToArray$f(arr, i2) || _nonIterableRest$9();
    }
    function _nonIterableRest$9() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$f(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$f(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$f(o2, minLen);
    }
    function _arrayLikeToArray$f(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$8(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n2, i2, u2, a2 = [], f = true, o2 = false;
        try {
          if (i2 = (t = t.call(r2)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = false;
          } else for (; !(f = (e = i2.call(t)).done) && (a2.push(e.value), a2.length !== l); f = true) ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f && null != t["return"] && (u2 = t["return"](), Object(u2) !== u2)) return;
          } finally {
            if (o2) throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$9(arr) {
      if (Array.isArray(arr)) return arr;
    }
    var BREAKING_SPACES = /[ \f\n\r\t\v\u2028\u2029]+/;
    var calculateWordWidths = function calculateWordWidths2(_ref) {
      var children = _ref.children, breakAll = _ref.breakAll, style = _ref.style;
      try {
        var words = [];
        if (!isNil(children)) {
          if (breakAll) {
            words = children.toString().split("");
          } else {
            words = children.toString().split(BREAKING_SPACES);
          }
        }
        var wordsWithComputedWidth = words.map(function(word) {
          return {
            word,
            width: getStringSize(word, style).width
          };
        });
        var spaceWidth = breakAll ? 0 : getStringSize(" ", style).width;
        return {
          wordsWithComputedWidth,
          spaceWidth
        };
      } catch (e) {
        return null;
      }
    };
    var calculateWordsByLines = function calculateWordsByLines2(_ref2, initialWordsWithComputedWith, spaceWidth, lineWidth, scaleToFit) {
      var maxLines = _ref2.maxLines, children = _ref2.children, style = _ref2.style, breakAll = _ref2.breakAll;
      var shouldLimitLines = isNumber(maxLines);
      var text2 = children;
      var calculate = function calculate2() {
        var words = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        return words.reduce(function(result2, _ref3) {
          var word = _ref3.word, width = _ref3.width;
          var currentLine = result2[result2.length - 1];
          if (currentLine && (lineWidth == null || scaleToFit || currentLine.width + width + spaceWidth < Number(lineWidth))) {
            currentLine.words.push(word);
            currentLine.width += width + spaceWidth;
          } else {
            var newLine = {
              words: [word],
              width
            };
            result2.push(newLine);
          }
          return result2;
        }, []);
      };
      var originalResult = calculate(initialWordsWithComputedWith);
      var findLongestLine = function findLongestLine2(words) {
        return words.reduce(function(a2, b) {
          return a2.width > b.width ? a2 : b;
        });
      };
      if (!shouldLimitLines) {
        return originalResult;
      }
      var suffix = "…";
      var checkOverflow2 = function checkOverflow3(index2) {
        var tempText = text2.slice(0, index2);
        var words = calculateWordWidths({
          breakAll,
          style,
          children: tempText + suffix
        }).wordsWithComputedWidth;
        var result2 = calculate(words);
        var doesOverflow = result2.length > maxLines || findLongestLine(result2).width > Number(lineWidth);
        return [doesOverflow, result2];
      };
      var start = 0;
      var end = text2.length - 1;
      var iterations = 0;
      var trimmedResult;
      while (start <= end && iterations <= text2.length - 1) {
        var middle = Math.floor((start + end) / 2);
        var prev = middle - 1;
        var _checkOverflow = checkOverflow2(prev), _checkOverflow2 = _slicedToArray$8(_checkOverflow, 2), doesPrevOverflow = _checkOverflow2[0], result = _checkOverflow2[1];
        var _checkOverflow3 = checkOverflow2(middle), _checkOverflow4 = _slicedToArray$8(_checkOverflow3, 1), doesMiddleOverflow = _checkOverflow4[0];
        if (!doesPrevOverflow && !doesMiddleOverflow) {
          start = middle + 1;
        }
        if (doesPrevOverflow && doesMiddleOverflow) {
          end = middle - 1;
        }
        if (!doesPrevOverflow && doesMiddleOverflow) {
          trimmedResult = result;
          break;
        }
        iterations++;
      }
      return trimmedResult || originalResult;
    };
    var getWordsWithoutCalculate = function getWordsWithoutCalculate2(children) {
      var words = !isNil(children) ? children.toString().split(BREAKING_SPACES) : [];
      return [{
        words
      }];
    };
    var getWordsByLines = function getWordsByLines2(_ref4) {
      var width = _ref4.width, scaleToFit = _ref4.scaleToFit, children = _ref4.children, style = _ref4.style, breakAll = _ref4.breakAll, maxLines = _ref4.maxLines;
      if ((width || scaleToFit) && !Global.isSsr) {
        var wordsWithComputedWidth, spaceWidth;
        var wordWidths = calculateWordWidths({
          breakAll,
          children,
          style
        });
        if (wordWidths) {
          var wcw = wordWidths.wordsWithComputedWidth, sw = wordWidths.spaceWidth;
          wordsWithComputedWidth = wcw;
          spaceWidth = sw;
        } else {
          return getWordsWithoutCalculate(children);
        }
        return calculateWordsByLines({
          breakAll,
          children,
          maxLines,
          style
        }, wordsWithComputedWidth, spaceWidth, width, scaleToFit);
      }
      return getWordsWithoutCalculate(children);
    };
    var DEFAULT_FILL = "#808080";
    var Text = function Text2(_ref5) {
      var _ref5$x = _ref5.x, propsX = _ref5$x === void 0 ? 0 : _ref5$x, _ref5$y = _ref5.y, propsY = _ref5$y === void 0 ? 0 : _ref5$y, _ref5$lineHeight = _ref5.lineHeight, lineHeight = _ref5$lineHeight === void 0 ? "1em" : _ref5$lineHeight, _ref5$capHeight = _ref5.capHeight, capHeight = _ref5$capHeight === void 0 ? "0.71em" : _ref5$capHeight, _ref5$scaleToFit = _ref5.scaleToFit, scaleToFit = _ref5$scaleToFit === void 0 ? false : _ref5$scaleToFit, _ref5$textAnchor = _ref5.textAnchor, textAnchor = _ref5$textAnchor === void 0 ? "start" : _ref5$textAnchor, _ref5$verticalAnchor = _ref5.verticalAnchor, verticalAnchor = _ref5$verticalAnchor === void 0 ? "end" : _ref5$verticalAnchor, _ref5$fill = _ref5.fill, fill = _ref5$fill === void 0 ? DEFAULT_FILL : _ref5$fill, props = _objectWithoutProperties$b(_ref5, _excluded$b);
      var wordsByLines = reactExports.useMemo(function() {
        return getWordsByLines({
          breakAll: props.breakAll,
          children: props.children,
          maxLines: props.maxLines,
          scaleToFit,
          style: props.style,
          width: props.width
        });
      }, [props.breakAll, props.children, props.maxLines, scaleToFit, props.style, props.width]);
      var dx = props.dx, dy = props.dy, angle = props.angle, className = props.className, breakAll = props.breakAll, textProps = _objectWithoutProperties$b(props, _excluded2$4);
      if (!isNumOrStr(propsX) || !isNumOrStr(propsY)) {
        return null;
      }
      var x2 = propsX + (isNumber(dx) ? dx : 0);
      var y2 = propsY + (isNumber(dy) ? dy : 0);
      var startDy;
      switch (verticalAnchor) {
        case "start":
          startDy = reduceCSSCalc("calc(".concat(capHeight, ")"));
          break;
        case "middle":
          startDy = reduceCSSCalc("calc(".concat((wordsByLines.length - 1) / 2, " * -").concat(lineHeight, " + (").concat(capHeight, " / 2))"));
          break;
        default:
          startDy = reduceCSSCalc("calc(".concat(wordsByLines.length - 1, " * -").concat(lineHeight, ")"));
          break;
      }
      var transforms = [];
      if (scaleToFit) {
        var lineWidth = wordsByLines[0].width;
        var width = props.width;
        transforms.push("scale(".concat((isNumber(width) ? width / lineWidth : 1) / lineWidth, ")"));
      }
      if (angle) {
        transforms.push("rotate(".concat(angle, ", ").concat(x2, ", ").concat(y2, ")"));
      }
      if (transforms.length) {
        textProps.transform = transforms.join(" ");
      }
      return /* @__PURE__ */ React.createElement("text", _extends$k({}, filterProps(textProps, true), {
        x: x2,
        y: y2,
        className: clsx("recharts-text", className),
        textAnchor,
        fill: fill.includes("url") ? DEFAULT_FILL : fill
      }), wordsByLines.map(function(line, index2) {
        var words = line.words.join(breakAll ? "" : " ");
        return (
          // duplicate words will cause duplicate keys
          // eslint-disable-next-line react/no-array-index-key
          /* @__PURE__ */ React.createElement("tspan", {
            x: x2,
            dy: index2 === 0 ? startDy : lineHeight,
            key: "".concat(words, "-").concat(index2)
          }, words)
        );
      }));
    };
    function ascending(a2, b) {
      return a2 == null || b == null ? NaN : a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
    }
    function descending(a2, b) {
      return a2 == null || b == null ? NaN : b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
    }
    function bisector(f) {
      let compare1, compare2, delta;
      if (f.length !== 2) {
        compare1 = ascending;
        compare2 = (d, x2) => ascending(f(d), x2);
        delta = (d, x2) => f(d) - x2;
      } else {
        compare1 = f === ascending || f === descending ? f : zero$1;
        compare2 = f;
        delta = f;
      }
      function left(a2, x2, lo = 0, hi = a2.length) {
        if (lo < hi) {
          if (compare1(x2, x2) !== 0) return hi;
          do {
            const mid = lo + hi >>> 1;
            if (compare2(a2[mid], x2) < 0) lo = mid + 1;
            else hi = mid;
          } while (lo < hi);
        }
        return lo;
      }
      function right(a2, x2, lo = 0, hi = a2.length) {
        if (lo < hi) {
          if (compare1(x2, x2) !== 0) return hi;
          do {
            const mid = lo + hi >>> 1;
            if (compare2(a2[mid], x2) <= 0) lo = mid + 1;
            else hi = mid;
          } while (lo < hi);
        }
        return lo;
      }
      function center(a2, x2, lo = 0, hi = a2.length) {
        const i2 = left(a2, x2, lo, hi - 1);
        return i2 > lo && delta(a2[i2 - 1], x2) > -delta(a2[i2], x2) ? i2 - 1 : i2;
      }
      return { left, center, right };
    }
    function zero$1() {
      return 0;
    }
    function number$2(x2) {
      return x2 === null ? NaN : +x2;
    }
    function* numbers(values, valueof) {
      {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            yield value;
          }
        }
      }
    }
    const ascendingBisect = bisector(ascending);
    const bisectRight = ascendingBisect.right;
    bisector(number$2).center;
    class InternMap extends Map {
      constructor(entries, key = keyof) {
        super();
        Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
        if (entries != null) for (const [key2, value] of entries) this.set(key2, value);
      }
      get(key) {
        return super.get(intern_get(this, key));
      }
      has(key) {
        return super.has(intern_get(this, key));
      }
      set(key, value) {
        return super.set(intern_set(this, key), value);
      }
      delete(key) {
        return super.delete(intern_delete(this, key));
      }
    }
    function intern_get({ _intern, _key }, value) {
      const key = _key(value);
      return _intern.has(key) ? _intern.get(key) : value;
    }
    function intern_set({ _intern, _key }, value) {
      const key = _key(value);
      if (_intern.has(key)) return _intern.get(key);
      _intern.set(key, value);
      return value;
    }
    function intern_delete({ _intern, _key }, value) {
      const key = _key(value);
      if (_intern.has(key)) {
        value = _intern.get(key);
        _intern.delete(key);
      }
      return value;
    }
    function keyof(value) {
      return value !== null && typeof value === "object" ? value.valueOf() : value;
    }
    function compareDefined(compare = ascending) {
      if (compare === ascending) return ascendingDefined;
      if (typeof compare !== "function") throw new TypeError("compare is not a function");
      return (a2, b) => {
        const x2 = compare(a2, b);
        if (x2 || x2 === 0) return x2;
        return (compare(b, b) === 0) - (compare(a2, a2) === 0);
      };
    }
    function ascendingDefined(a2, b) {
      return (a2 == null || !(a2 >= a2)) - (b == null || !(b >= b)) || (a2 < b ? -1 : a2 > b ? 1 : 0);
    }
    const e10 = Math.sqrt(50), e5 = Math.sqrt(10), e2 = Math.sqrt(2);
    function tickSpec(start, stop, count2) {
      const step = (stop - start) / Math.max(0, count2), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
      let i1, i2, inc;
      if (power < 0) {
        inc = Math.pow(10, -power) / factor;
        i1 = Math.round(start * inc);
        i2 = Math.round(stop * inc);
        if (i1 / inc < start) ++i1;
        if (i2 / inc > stop) --i2;
        inc = -inc;
      } else {
        inc = Math.pow(10, power) * factor;
        i1 = Math.round(start / inc);
        i2 = Math.round(stop / inc);
        if (i1 * inc < start) ++i1;
        if (i2 * inc > stop) --i2;
      }
      if (i2 < i1 && 0.5 <= count2 && count2 < 2) return tickSpec(start, stop, count2 * 2);
      return [i1, i2, inc];
    }
    function ticks(start, stop, count2) {
      stop = +stop, start = +start, count2 = +count2;
      if (!(count2 > 0)) return [];
      if (start === stop) return [start];
      const reverse2 = stop < start, [i1, i2, inc] = reverse2 ? tickSpec(stop, start, count2) : tickSpec(start, stop, count2);
      if (!(i2 >= i1)) return [];
      const n2 = i2 - i1 + 1, ticks2 = new Array(n2);
      if (reverse2) {
        if (inc < 0) for (let i3 = 0; i3 < n2; ++i3) ticks2[i3] = (i2 - i3) / -inc;
        else for (let i3 = 0; i3 < n2; ++i3) ticks2[i3] = (i2 - i3) * inc;
      } else {
        if (inc < 0) for (let i3 = 0; i3 < n2; ++i3) ticks2[i3] = (i1 + i3) / -inc;
        else for (let i3 = 0; i3 < n2; ++i3) ticks2[i3] = (i1 + i3) * inc;
      }
      return ticks2;
    }
    function tickIncrement(start, stop, count2) {
      stop = +stop, start = +start, count2 = +count2;
      return tickSpec(start, stop, count2)[2];
    }
    function tickStep(start, stop, count2) {
      stop = +stop, start = +start, count2 = +count2;
      const reverse2 = stop < start, inc = reverse2 ? tickIncrement(stop, start, count2) : tickIncrement(start, stop, count2);
      return (reverse2 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
    }
    function max$1(values, valueof) {
      let max2;
      {
        for (const value of values) {
          if (value != null && (max2 < value || max2 === void 0 && value >= value)) {
            max2 = value;
          }
        }
      }
      return max2;
    }
    function min$1(values, valueof) {
      let min2;
      {
        for (const value of values) {
          if (value != null && (min2 > value || min2 === void 0 && value >= value)) {
            min2 = value;
          }
        }
      }
      return min2;
    }
    function quickselect(array2, k2, left = 0, right = Infinity, compare) {
      k2 = Math.floor(k2);
      left = Math.floor(Math.max(0, left));
      right = Math.floor(Math.min(array2.length - 1, right));
      if (!(left <= k2 && k2 <= right)) return array2;
      compare = compare === void 0 ? ascendingDefined : compareDefined(compare);
      while (right > left) {
        if (right - left > 600) {
          const n2 = right - left + 1;
          const m2 = k2 - left + 1;
          const z2 = Math.log(n2);
          const s2 = 0.5 * Math.exp(2 * z2 / 3);
          const sd = 0.5 * Math.sqrt(z2 * s2 * (n2 - s2) / n2) * (m2 - n2 / 2 < 0 ? -1 : 1);
          const newLeft = Math.max(left, Math.floor(k2 - m2 * s2 / n2 + sd));
          const newRight = Math.min(right, Math.floor(k2 + (n2 - m2) * s2 / n2 + sd));
          quickselect(array2, k2, newLeft, newRight, compare);
        }
        const t = array2[k2];
        let i2 = left;
        let j = right;
        swap(array2, left, k2);
        if (compare(array2[right], t) > 0) swap(array2, left, right);
        while (i2 < j) {
          swap(array2, i2, j), ++i2, --j;
          while (compare(array2[i2], t) < 0) ++i2;
          while (compare(array2[j], t) > 0) --j;
        }
        if (compare(array2[left], t) === 0) swap(array2, left, j);
        else ++j, swap(array2, j, right);
        if (j <= k2) left = j + 1;
        if (k2 <= j) right = j - 1;
      }
      return array2;
    }
    function swap(array2, i2, j) {
      const t = array2[i2];
      array2[i2] = array2[j];
      array2[j] = t;
    }
    function quantile$1(values, p2, valueof) {
      values = Float64Array.from(numbers(values));
      if (!(n2 = values.length) || isNaN(p2 = +p2)) return;
      if (p2 <= 0 || n2 < 2) return min$1(values);
      if (p2 >= 1) return max$1(values);
      var n2, i2 = (n2 - 1) * p2, i0 = Math.floor(i2), value0 = max$1(quickselect(values, i0).subarray(0, i0 + 1)), value1 = min$1(values.subarray(i0 + 1));
      return value0 + (value1 - value0) * (i2 - i0);
    }
    function quantileSorted(values, p2, valueof = number$2) {
      if (!(n2 = values.length) || isNaN(p2 = +p2)) return;
      if (p2 <= 0 || n2 < 2) return +valueof(values[0], 0, values);
      if (p2 >= 1) return +valueof(values[n2 - 1], n2 - 1, values);
      var n2, i2 = (n2 - 1) * p2, i0 = Math.floor(i2), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
      return value0 + (value1 - value0) * (i2 - i0);
    }
    function range$2(start, stop, step) {
      start = +start, stop = +stop, step = (n2 = arguments.length) < 2 ? (stop = start, start = 0, 1) : n2 < 3 ? 1 : +step;
      var i2 = -1, n2 = Math.max(0, Math.ceil((stop - start) / step)) | 0, range2 = new Array(n2);
      while (++i2 < n2) {
        range2[i2] = start + i2 * step;
      }
      return range2;
    }
    function initRange(domain, range2) {
      switch (arguments.length) {
        case 0:
          break;
        case 1:
          this.range(domain);
          break;
        default:
          this.range(range2).domain(domain);
          break;
      }
      return this;
    }
    function initInterpolator(domain, interpolator) {
      switch (arguments.length) {
        case 0:
          break;
        case 1: {
          if (typeof domain === "function") this.interpolator(domain);
          else this.range(domain);
          break;
        }
        default: {
          this.domain(domain);
          if (typeof interpolator === "function") this.interpolator(interpolator);
          else this.range(interpolator);
          break;
        }
      }
      return this;
    }
    const implicit = Symbol("implicit");
    function ordinal() {
      var index2 = new InternMap(), domain = [], range2 = [], unknown = implicit;
      function scale(d) {
        let i2 = index2.get(d);
        if (i2 === void 0) {
          if (unknown !== implicit) return unknown;
          index2.set(d, i2 = domain.push(d) - 1);
        }
        return range2[i2 % range2.length];
      }
      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [], index2 = new InternMap();
        for (const value of _) {
          if (index2.has(value)) continue;
          index2.set(value, domain.push(value) - 1);
        }
        return scale;
      };
      scale.range = function(_) {
        return arguments.length ? (range2 = Array.from(_), scale) : range2.slice();
      };
      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };
      scale.copy = function() {
        return ordinal(domain, range2).unknown(unknown);
      };
      initRange.apply(scale, arguments);
      return scale;
    }
    function band() {
      var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round2 = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
      delete scale.unknown;
      function rescale() {
        var n2 = domain().length, reverse2 = r1 < r0, start = reverse2 ? r1 : r0, stop = reverse2 ? r0 : r1;
        step = (stop - start) / Math.max(1, n2 - paddingInner + paddingOuter * 2);
        if (round2) step = Math.floor(step);
        start += (stop - start - step * (n2 - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round2) start = Math.round(start), bandwidth = Math.round(bandwidth);
        var values = range$2(n2).map(function(i2) {
          return start + step * i2;
        });
        return ordinalRange(reverse2 ? values.reverse() : values);
      }
      scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
      };
      scale.range = function(_) {
        return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
      };
      scale.rangeRound = function(_) {
        return [r0, r1] = _, r0 = +r0, r1 = +r1, round2 = true, rescale();
      };
      scale.bandwidth = function() {
        return bandwidth;
      };
      scale.step = function() {
        return step;
      };
      scale.round = function(_) {
        return arguments.length ? (round2 = !!_, rescale()) : round2;
      };
      scale.padding = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
      };
      scale.paddingInner = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
      };
      scale.paddingOuter = function(_) {
        return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
      };
      scale.align = function(_) {
        return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
      };
      scale.copy = function() {
        return band(domain(), [r0, r1]).round(round2).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
      };
      return initRange.apply(rescale(), arguments);
    }
    function pointish(scale) {
      var copy2 = scale.copy;
      scale.padding = scale.paddingOuter;
      delete scale.paddingInner;
      delete scale.paddingOuter;
      scale.copy = function() {
        return pointish(copy2());
      };
      return scale;
    }
    function point() {
      return pointish(band.apply(null, arguments).paddingInner(1));
    }
    function define(constructor, factory, prototype2) {
      constructor.prototype = factory.prototype = prototype2;
      prototype2.constructor = constructor;
    }
    function extend(parent, definition) {
      var prototype2 = Object.create(parent.prototype);
      for (var key in definition) prototype2[key] = definition[key];
      return prototype2;
    }
    function Color() {
    }
    var darker = 0.7;
    var brighter = 1 / darker;
    var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`), reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`), reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`), reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`), reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`), reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
    var named = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    };
    define(Color, color, {
      copy(channels) {
        return Object.assign(new this.constructor(), this, channels);
      },
      displayable() {
        return this.rgb().displayable();
      },
      hex: color_formatHex,
      // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHex8: color_formatHex8,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });
    function color_formatHex() {
      return this.rgb().formatHex();
    }
    function color_formatHex8() {
      return this.rgb().formatHex8();
    }
    function color_formatHsl() {
      return hslConvert(this).formatHsl();
    }
    function color_formatRgb() {
      return this.rgb().formatRgb();
    }
    function color(format2) {
      var m2, l;
      format2 = (format2 + "").trim().toLowerCase();
      return (m2 = reHex.exec(format2)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format2)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format2)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format2)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format2)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
    }
    function rgbn(n2) {
      return new Rgb(n2 >> 16 & 255, n2 >> 8 & 255, n2 & 255, 1);
    }
    function rgba(r2, g, b, a2) {
      if (a2 <= 0) r2 = g = b = NaN;
      return new Rgb(r2, g, b, a2);
    }
    function rgbConvert(o2) {
      if (!(o2 instanceof Color)) o2 = color(o2);
      if (!o2) return new Rgb();
      o2 = o2.rgb();
      return new Rgb(o2.r, o2.g, o2.b, o2.opacity);
    }
    function rgb$1(r2, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r2) : new Rgb(r2, g, b, opacity == null ? 1 : opacity);
    }
    function Rgb(r2, g, b, opacity) {
      this.r = +r2;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }
    define(Rgb, rgb$1, extend(Color, {
      brighter(k2) {
        k2 = k2 == null ? brighter : Math.pow(brighter, k2);
        return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
      },
      darker(k2) {
        k2 = k2 == null ? darker : Math.pow(darker, k2);
        return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
      },
      rgb() {
        return this;
      },
      clamp() {
        return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
      },
      displayable() {
        return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex,
      // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatHex8: rgb_formatHex8,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));
    function rgb_formatHex() {
      return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
    }
    function rgb_formatHex8() {
      return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
    }
    function rgb_formatRgb() {
      const a2 = clampa(this.opacity);
      return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
    }
    function clampa(opacity) {
      return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
    }
    function clampi(value) {
      return Math.max(0, Math.min(255, Math.round(value) || 0));
    }
    function hex(value) {
      value = clampi(value);
      return (value < 16 ? "0" : "") + value.toString(16);
    }
    function hsla(h, s2, l, a2) {
      if (a2 <= 0) h = s2 = l = NaN;
      else if (l <= 0 || l >= 1) h = s2 = NaN;
      else if (s2 <= 0) h = NaN;
      return new Hsl(h, s2, l, a2);
    }
    function hslConvert(o2) {
      if (o2 instanceof Hsl) return new Hsl(o2.h, o2.s, o2.l, o2.opacity);
      if (!(o2 instanceof Color)) o2 = color(o2);
      if (!o2) return new Hsl();
      if (o2 instanceof Hsl) return o2;
      o2 = o2.rgb();
      var r2 = o2.r / 255, g = o2.g / 255, b = o2.b / 255, min2 = Math.min(r2, g, b), max2 = Math.max(r2, g, b), h = NaN, s2 = max2 - min2, l = (max2 + min2) / 2;
      if (s2) {
        if (r2 === max2) h = (g - b) / s2 + (g < b) * 6;
        else if (g === max2) h = (b - r2) / s2 + 2;
        else h = (r2 - g) / s2 + 4;
        s2 /= l < 0.5 ? max2 + min2 : 2 - max2 - min2;
        h *= 60;
      } else {
        s2 = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl(h, s2, l, o2.opacity);
    }
    function hsl(h, s2, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s2, l, opacity == null ? 1 : opacity);
    }
    function Hsl(h, s2, l, opacity) {
      this.h = +h;
      this.s = +s2;
      this.l = +l;
      this.opacity = +opacity;
    }
    define(Hsl, hsl, extend(Color, {
      brighter(k2) {
        k2 = k2 == null ? brighter : Math.pow(brighter, k2);
        return new Hsl(this.h, this.s, this.l * k2, this.opacity);
      },
      darker(k2) {
        k2 = k2 == null ? darker : Math.pow(darker, k2);
        return new Hsl(this.h, this.s, this.l * k2, this.opacity);
      },
      rgb() {
        var h = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      clamp() {
        return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
      },
      displayable() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl() {
        const a2 = clampa(this.opacity);
        return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
      }
    }));
    function clamph(value) {
      value = (value || 0) % 360;
      return value < 0 ? value + 360 : value;
    }
    function clampt(value) {
      return Math.max(0, Math.min(1, value || 0));
    }
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
    }
    const constant = (x2) => () => x2;
    function linear$1(a2, d) {
      return function(t) {
        return a2 + t * d;
      };
    }
    function exponential(a2, b, y2) {
      return a2 = Math.pow(a2, y2), b = Math.pow(b, y2) - a2, y2 = 1 / y2, function(t) {
        return Math.pow(a2 + t * b, y2);
      };
    }
    function gamma(y2) {
      return (y2 = +y2) === 1 ? nogamma : function(a2, b) {
        return b - a2 ? exponential(a2, b, y2) : constant(isNaN(a2) ? b : a2);
      };
    }
    function nogamma(a2, b) {
      var d = b - a2;
      return d ? linear$1(a2, d) : constant(isNaN(a2) ? b : a2);
    }
    const rgb = function rgbGamma(y2) {
      var color2 = gamma(y2);
      function rgb2(start, end) {
        var r2 = color2((start = rgb$1(start)).r, (end = rgb$1(end)).r), g = color2(start.g, end.g), b = color2(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.r = r2(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
      rgb2.gamma = rgbGamma;
      return rgb2;
    }(1);
    function numberArray(a2, b) {
      if (!b) b = [];
      var n2 = a2 ? Math.min(b.length, a2.length) : 0, c2 = b.slice(), i2;
      return function(t) {
        for (i2 = 0; i2 < n2; ++i2) c2[i2] = a2[i2] * (1 - t) + b[i2] * t;
        return c2;
      };
    }
    function isNumberArray(x2) {
      return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
    }
    function genericArray(a2, b) {
      var nb = b ? b.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x2 = new Array(na), c2 = new Array(nb), i2;
      for (i2 = 0; i2 < na; ++i2) x2[i2] = interpolate(a2[i2], b[i2]);
      for (; i2 < nb; ++i2) c2[i2] = b[i2];
      return function(t) {
        for (i2 = 0; i2 < na; ++i2) c2[i2] = x2[i2](t);
        return c2;
      };
    }
    function date$1(a2, b) {
      var d = /* @__PURE__ */ new Date();
      return a2 = +a2, b = +b, function(t) {
        return d.setTime(a2 * (1 - t) + b * t), d;
      };
    }
    function interpolateNumber$1(a2, b) {
      return a2 = +a2, b = +b, function(t) {
        return a2 * (1 - t) + b * t;
      };
    }
    function object(a2, b) {
      var i2 = {}, c2 = {}, k2;
      if (a2 === null || typeof a2 !== "object") a2 = {};
      if (b === null || typeof b !== "object") b = {};
      for (k2 in b) {
        if (k2 in a2) {
          i2[k2] = interpolate(a2[k2], b[k2]);
        } else {
          c2[k2] = b[k2];
        }
      }
      return function(t) {
        for (k2 in i2) c2[k2] = i2[k2](t);
        return c2;
      };
    }
    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
    function zero(b) {
      return function() {
        return b;
      };
    }
    function one(b) {
      return function(t) {
        return b(t) + "";
      };
    }
    function string(a2, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i2 = -1, s2 = [], q = [];
      a2 = a2 + "", b = b + "";
      while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) {
          bs = b.slice(bi, bs);
          if (s2[i2]) s2[i2] += bs;
          else s2[++i2] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) {
          if (s2[i2]) s2[i2] += bm;
          else s2[++i2] = bm;
        } else {
          s2[++i2] = null;
          q.push({ i: i2, x: interpolateNumber$1(am, bm) });
        }
        bi = reB.lastIndex;
      }
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s2[i2]) s2[i2] += bs;
        else s2[++i2] = bs;
      }
      return s2.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
        for (var i3 = 0, o2; i3 < b; ++i3) s2[(o2 = q[i3]).i] = o2.x(t);
        return s2.join("");
      });
    }
    function interpolate(a2, b) {
      var t = typeof b, c2;
      return b == null || t === "boolean" ? constant(b) : (t === "number" ? interpolateNumber$1 : t === "string" ? (c2 = color(b)) ? (b = c2, rgb) : string : b instanceof color ? rgb : b instanceof Date ? date$1 : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : interpolateNumber$1)(a2, b);
    }
    function interpolateRound(a2, b) {
      return a2 = +a2, b = +b, function(t) {
        return Math.round(a2 * (1 - t) + b * t);
      };
    }
    function piecewise(interpolate$1, values) {
      if (values === void 0) values = interpolate$1, interpolate$1 = interpolate;
      var i2 = 0, n2 = values.length - 1, v = values[0], I = new Array(n2 < 0 ? 0 : n2);
      while (i2 < n2) I[i2] = interpolate$1(v, v = values[++i2]);
      return function(t) {
        var i3 = Math.max(0, Math.min(n2 - 1, Math.floor(t *= n2)));
        return I[i3](t - i3);
      };
    }
    function constants(x2) {
      return function() {
        return x2;
      };
    }
    function number$1(x2) {
      return +x2;
    }
    var unit = [0, 1];
    function identity$4(x2) {
      return x2;
    }
    function normalize(a2, b) {
      return (b -= a2 = +a2) ? function(x2) {
        return (x2 - a2) / b;
      } : constants(isNaN(b) ? NaN : 0.5);
    }
    function clamper(a2, b) {
      var t;
      if (a2 > b) t = a2, a2 = b, b = t;
      return function(x2) {
        return Math.max(a2, Math.min(b, x2));
      };
    }
    function bimap(domain, range2, interpolate2) {
      var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
      if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate2(r1, r0);
      else d0 = normalize(d0, d1), r0 = interpolate2(r0, r1);
      return function(x2) {
        return r0(d0(x2));
      };
    }
    function polymap(domain, range2, interpolate2) {
      var j = Math.min(domain.length, range2.length) - 1, d = new Array(j), r2 = new Array(j), i2 = -1;
      if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range2 = range2.slice().reverse();
      }
      while (++i2 < j) {
        d[i2] = normalize(domain[i2], domain[i2 + 1]);
        r2[i2] = interpolate2(range2[i2], range2[i2 + 1]);
      }
      return function(x2) {
        var i3 = bisectRight(domain, x2, 1, j) - 1;
        return r2[i3](d[i3](x2));
      };
    }
    function copy$1(source, target) {
      return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
    }
    function transformer$2() {
      var domain = unit, range2 = unit, interpolate$1 = interpolate, transform, untransform, unknown, clamp2 = identity$4, piecewise2, output, input;
      function rescale() {
        var n2 = Math.min(domain.length, range2.length);
        if (clamp2 !== identity$4) clamp2 = clamper(domain[0], domain[n2 - 1]);
        piecewise2 = n2 > 2 ? polymap : bimap;
        output = input = null;
        return scale;
      }
      function scale(x2) {
        return x2 == null || isNaN(x2 = +x2) ? unknown : (output || (output = piecewise2(domain.map(transform), range2, interpolate$1)))(transform(clamp2(x2)));
      }
      scale.invert = function(y2) {
        return clamp2(untransform((input || (input = piecewise2(range2, domain.map(transform), interpolateNumber$1)))(y2)));
      };
      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
      };
      scale.range = function(_) {
        return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
      };
      scale.rangeRound = function(_) {
        return range2 = Array.from(_), interpolate$1 = interpolateRound, rescale();
      };
      scale.clamp = function(_) {
        return arguments.length ? (clamp2 = _ ? true : identity$4, rescale()) : clamp2 !== identity$4;
      };
      scale.interpolate = function(_) {
        return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
      };
      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };
      return function(t, u2) {
        transform = t, untransform = u2;
        return rescale();
      };
    }
    function continuous() {
      return transformer$2()(identity$4, identity$4);
    }
    function formatDecimal(x2) {
      return Math.abs(x2 = Math.round(x2)) >= 1e21 ? x2.toLocaleString("en").replace(/,/g, "") : x2.toString(10);
    }
    function formatDecimalParts(x2, p2) {
      if ((i2 = (x2 = p2 ? x2.toExponential(p2 - 1) : x2.toExponential()).indexOf("e")) < 0) return null;
      var i2, coefficient = x2.slice(0, i2);
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x2.slice(i2 + 1)
      ];
    }
    function exponent(x2) {
      return x2 = formatDecimalParts(Math.abs(x2)), x2 ? x2[1] : NaN;
    }
    function formatGroup(grouping, thousands) {
      return function(value, width) {
        var i2 = value.length, t = [], j = 0, g = grouping[0], length = 0;
        while (i2 > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i2 -= g, i2 + g));
          if ((length += g + 1) > width) break;
          g = grouping[j = (j + 1) % grouping.length];
        }
        return t.reverse().join(thousands);
      };
    }
    function formatNumerals(numerals) {
      return function(value) {
        return value.replace(/[0-9]/g, function(i2) {
          return numerals[+i2];
        });
      };
    }
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
    function formatSpecifier(specifier) {
      if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
      var match;
      return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
      });
    }
    formatSpecifier.prototype = FormatSpecifier.prototype;
    function FormatSpecifier(specifier) {
      this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
      this.align = specifier.align === void 0 ? ">" : specifier.align + "";
      this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
      this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
      this.zero = !!specifier.zero;
      this.width = specifier.width === void 0 ? void 0 : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === void 0 ? "" : specifier.type + "";
    }
    FormatSpecifier.prototype.toString = function() {
      return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
    };
    function formatTrim(s2) {
      out: for (var n2 = s2.length, i2 = 1, i0 = -1, i1; i2 < n2; ++i2) {
        switch (s2[i2]) {
          case ".":
            i0 = i1 = i2;
            break;
          case "0":
            if (i0 === 0) i0 = i2;
            i1 = i2;
            break;
          default:
            if (!+s2[i2]) break out;
            if (i0 > 0) i0 = 0;
            break;
        }
      }
      return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
    }
    var prefixExponent;
    function formatPrefixAuto(x2, p2) {
      var d = formatDecimalParts(x2, p2);
      if (!d) return x2 + "";
      var coefficient = d[0], exponent2 = d[1], i2 = exponent2 - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) + 1, n2 = coefficient.length;
      return i2 === n2 ? coefficient : i2 > n2 ? coefficient + new Array(i2 - n2 + 1).join("0") : i2 > 0 ? coefficient.slice(0, i2) + "." + coefficient.slice(i2) : "0." + new Array(1 - i2).join("0") + formatDecimalParts(x2, Math.max(0, p2 + i2 - 1))[0];
    }
    function formatRounded(x2, p2) {
      var d = formatDecimalParts(x2, p2);
      if (!d) return x2 + "";
      var coefficient = d[0], exponent2 = d[1];
      return exponent2 < 0 ? "0." + new Array(-exponent2).join("0") + coefficient : coefficient.length > exponent2 + 1 ? coefficient.slice(0, exponent2 + 1) + "." + coefficient.slice(exponent2 + 1) : coefficient + new Array(exponent2 - coefficient.length + 2).join("0");
    }
    const formatTypes = {
      "%": (x2, p2) => (x2 * 100).toFixed(p2),
      "b": (x2) => Math.round(x2).toString(2),
      "c": (x2) => x2 + "",
      "d": formatDecimal,
      "e": (x2, p2) => x2.toExponential(p2),
      "f": (x2, p2) => x2.toFixed(p2),
      "g": (x2, p2) => x2.toPrecision(p2),
      "o": (x2) => Math.round(x2).toString(8),
      "p": (x2, p2) => formatRounded(x2 * 100, p2),
      "r": formatRounded,
      "s": formatPrefixAuto,
      "X": (x2) => Math.round(x2).toString(16).toUpperCase(),
      "x": (x2) => Math.round(x2).toString(16)
    };
    function identity$3(x2) {
      return x2;
    }
    var map$1 = Array.prototype.map, prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
    function formatLocale$1(locale2) {
      var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity$3 : formatGroup(map$1.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity$3 : formatNumerals(map$1.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "−" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);
        var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim2 = specifier.trim, type = specifier.type;
        if (type === "n") comma = true, type = "g";
        else if (!formatTypes[type]) precision === void 0 && (precision = 12), trim2 = true, type = "g";
        if (zero2 || fill === "0" && align === "=") zero2 = true, fill = "0", align = "=";
        var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
        var formatType = formatTypes[type], maybeSuffix = /[defgprs%]/.test(type);
        precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
        function format2(value) {
          var valuePrefix = prefix2, valueSuffix = suffix, i2, n2, c2;
          if (type === "c") {
            valueSuffix = formatType(value) + valueSuffix;
            value = "";
          } else {
            value = +value;
            var valueNegative = value < 0 || 1 / value < 0;
            value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
            if (trim2) value = formatTrim(value);
            if (valueNegative && +value === 0 && sign2 !== "+") valueNegative = false;
            valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
            if (maybeSuffix) {
              i2 = -1, n2 = value.length;
              while (++i2 < n2) {
                if (c2 = value.charCodeAt(i2), 48 > c2 || c2 > 57) {
                  valueSuffix = (c2 === 46 ? decimal + value.slice(i2 + 1) : value.slice(i2)) + valueSuffix;
                  value = value.slice(0, i2);
                  break;
                }
              }
            }
          }
          if (comma && !zero2) value = group(value, Infinity);
          var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
          if (comma && zero2) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
          switch (align) {
            case "<":
              value = valuePrefix + value + valueSuffix + padding;
              break;
            case "=":
              value = valuePrefix + padding + value + valueSuffix;
              break;
            case "^":
              value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
              break;
            default:
              value = padding + valuePrefix + value + valueSuffix;
              break;
          }
          return numerals(value);
        }
        format2.toString = function() {
          return specifier + "";
        };
        return format2;
      }
      function formatPrefix2(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3, k2 = Math.pow(10, -e), prefix2 = prefixes[8 + e / 3];
        return function(value2) {
          return f(k2 * value2) + prefix2;
        };
      }
      return {
        format: newFormat,
        formatPrefix: formatPrefix2
      };
    }
    var locale$1;
    var format;
    var formatPrefix;
    defaultLocale$1({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });
    function defaultLocale$1(definition) {
      locale$1 = formatLocale$1(definition);
      format = locale$1.format;
      formatPrefix = locale$1.formatPrefix;
      return locale$1;
    }
    function precisionFixed(step) {
      return Math.max(0, -exponent(Math.abs(step)));
    }
    function precisionPrefix(step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
    }
    function precisionRound(step, max2) {
      step = Math.abs(step), max2 = Math.abs(max2) - step;
      return Math.max(0, exponent(max2) - exponent(step)) + 1;
    }
    function tickFormat(start, stop, count2, specifier) {
      var step = tickStep(start, stop, count2), precision;
      specifier = formatSpecifier(specifier == null ? ",f" : specifier);
      switch (specifier.type) {
        case "s": {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
          return formatPrefix(specifier, value);
        }
        case "":
        case "e":
        case "g":
        case "p":
        case "r": {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }
        case "f":
        case "%": {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
      }
      return format(specifier);
    }
    function linearish(scale) {
      var domain = scale.domain;
      scale.ticks = function(count2) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], count2 == null ? 10 : count2);
      };
      scale.tickFormat = function(count2, specifier) {
        var d = domain();
        return tickFormat(d[0], d[d.length - 1], count2 == null ? 10 : count2, specifier);
      };
      scale.nice = function(count2) {
        if (count2 == null) count2 = 10;
        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;
        if (stop < start) {
          step = start, start = stop, stop = step;
          step = i0, i0 = i1, i1 = step;
        }
        while (maxIter-- > 0) {
          step = tickIncrement(start, stop, count2);
          if (step === prestep) {
            d[i0] = start;
            d[i1] = stop;
            return domain(d);
          } else if (step > 0) {
            start = Math.floor(start / step) * step;
            stop = Math.ceil(stop / step) * step;
          } else if (step < 0) {
            start = Math.ceil(start * step) / step;
            stop = Math.floor(stop * step) / step;
          } else {
            break;
          }
          prestep = step;
        }
        return scale;
      };
      return scale;
    }
    function linear() {
      var scale = continuous();
      scale.copy = function() {
        return copy$1(scale, linear());
      };
      initRange.apply(scale, arguments);
      return linearish(scale);
    }
    function identity$2(domain) {
      var unknown;
      function scale(x2) {
        return x2 == null || isNaN(x2 = +x2) ? unknown : x2;
      }
      scale.invert = scale;
      scale.domain = scale.range = function(_) {
        return arguments.length ? (domain = Array.from(_, number$1), scale) : domain.slice();
      };
      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };
      scale.copy = function() {
        return identity$2(domain).unknown(unknown);
      };
      domain = arguments.length ? Array.from(domain, number$1) : [0, 1];
      return linearish(scale);
    }
    function nice(domain, interval) {
      domain = domain.slice();
      var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
      if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t;
      }
      domain[i0] = interval.floor(x0);
      domain[i1] = interval.ceil(x1);
      return domain;
    }
    function transformLog(x2) {
      return Math.log(x2);
    }
    function transformExp(x2) {
      return Math.exp(x2);
    }
    function transformLogn(x2) {
      return -Math.log(-x2);
    }
    function transformExpn(x2) {
      return -Math.exp(-x2);
    }
    function pow10(x2) {
      return isFinite(x2) ? +("1e" + x2) : x2 < 0 ? 0 : x2;
    }
    function powp(base) {
      return base === 10 ? pow10 : base === Math.E ? Math.exp : (x2) => Math.pow(base, x2);
    }
    function logp(base) {
      return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x2) => Math.log(x2) / base);
    }
    function reflect(f) {
      return (x2, k2) => -f(-x2, k2);
    }
    function loggish(transform) {
      const scale = transform(transformLog, transformExp);
      const domain = scale.domain;
      let base = 10;
      let logs;
      let pows;
      function rescale() {
        logs = logp(base), pows = powp(base);
        if (domain()[0] < 0) {
          logs = reflect(logs), pows = reflect(pows);
          transform(transformLogn, transformExpn);
        } else {
          transform(transformLog, transformExp);
        }
        return scale;
      }
      scale.base = function(_) {
        return arguments.length ? (base = +_, rescale()) : base;
      };
      scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
      };
      scale.ticks = (count2) => {
        const d = domain();
        let u2 = d[0];
        let v = d[d.length - 1];
        const r2 = v < u2;
        if (r2) [u2, v] = [v, u2];
        let i2 = logs(u2);
        let j = logs(v);
        let k2;
        let t;
        const n2 = count2 == null ? 10 : +count2;
        let z2 = [];
        if (!(base % 1) && j - i2 < n2) {
          i2 = Math.floor(i2), j = Math.ceil(j);
          if (u2 > 0) for (; i2 <= j; ++i2) {
            for (k2 = 1; k2 < base; ++k2) {
              t = i2 < 0 ? k2 / pows(-i2) : k2 * pows(i2);
              if (t < u2) continue;
              if (t > v) break;
              z2.push(t);
            }
          }
          else for (; i2 <= j; ++i2) {
            for (k2 = base - 1; k2 >= 1; --k2) {
              t = i2 > 0 ? k2 / pows(-i2) : k2 * pows(i2);
              if (t < u2) continue;
              if (t > v) break;
              z2.push(t);
            }
          }
          if (z2.length * 2 < n2) z2 = ticks(u2, v, n2);
        } else {
          z2 = ticks(i2, j, Math.min(j - i2, n2)).map(pows);
        }
        return r2 ? z2.reverse() : z2;
      };
      scale.tickFormat = (count2, specifier) => {
        if (count2 == null) count2 = 10;
        if (specifier == null) specifier = base === 10 ? "s" : ",";
        if (typeof specifier !== "function") {
          if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
          specifier = format(specifier);
        }
        if (count2 === Infinity) return specifier;
        const k2 = Math.max(1, base * count2 / scale.ticks().length);
        return (d) => {
          let i2 = d / pows(Math.round(logs(d)));
          if (i2 * base < base - 0.5) i2 *= base;
          return i2 <= k2 ? specifier(d) : "";
        };
      };
      scale.nice = () => {
        return domain(nice(domain(), {
          floor: (x2) => pows(Math.floor(logs(x2))),
          ceil: (x2) => pows(Math.ceil(logs(x2)))
        }));
      };
      return scale;
    }
    function log() {
      const scale = loggish(transformer$2()).domain([1, 10]);
      scale.copy = () => copy$1(scale, log()).base(scale.base());
      initRange.apply(scale, arguments);
      return scale;
    }
    function transformSymlog(c2) {
      return function(x2) {
        return Math.sign(x2) * Math.log1p(Math.abs(x2 / c2));
      };
    }
    function transformSymexp(c2) {
      return function(x2) {
        return Math.sign(x2) * Math.expm1(Math.abs(x2)) * c2;
      };
    }
    function symlogish(transform) {
      var c2 = 1, scale = transform(transformSymlog(c2), transformSymexp(c2));
      scale.constant = function(_) {
        return arguments.length ? transform(transformSymlog(c2 = +_), transformSymexp(c2)) : c2;
      };
      return linearish(scale);
    }
    function symlog() {
      var scale = symlogish(transformer$2());
      scale.copy = function() {
        return copy$1(scale, symlog()).constant(scale.constant());
      };
      return initRange.apply(scale, arguments);
    }
    function transformPow(exponent2) {
      return function(x2) {
        return x2 < 0 ? -Math.pow(-x2, exponent2) : Math.pow(x2, exponent2);
      };
    }
    function transformSqrt(x2) {
      return x2 < 0 ? -Math.sqrt(-x2) : Math.sqrt(x2);
    }
    function transformSquare(x2) {
      return x2 < 0 ? -x2 * x2 : x2 * x2;
    }
    function powish(transform) {
      var scale = transform(identity$4, identity$4), exponent2 = 1;
      function rescale() {
        return exponent2 === 1 ? transform(identity$4, identity$4) : exponent2 === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent2), transformPow(1 / exponent2));
      }
      scale.exponent = function(_) {
        return arguments.length ? (exponent2 = +_, rescale()) : exponent2;
      };
      return linearish(scale);
    }
    function pow() {
      var scale = powish(transformer$2());
      scale.copy = function() {
        return copy$1(scale, pow()).exponent(scale.exponent());
      };
      initRange.apply(scale, arguments);
      return scale;
    }
    function sqrt() {
      return pow.apply(null, arguments).exponent(0.5);
    }
    function square(x2) {
      return Math.sign(x2) * x2 * x2;
    }
    function unsquare(x2) {
      return Math.sign(x2) * Math.sqrt(Math.abs(x2));
    }
    function radial() {
      var squared = continuous(), range2 = [0, 1], round2 = false, unknown;
      function scale(x2) {
        var y2 = unsquare(squared(x2));
        return isNaN(y2) ? unknown : round2 ? Math.round(y2) : y2;
      }
      scale.invert = function(y2) {
        return squared.invert(square(y2));
      };
      scale.domain = function(_) {
        return arguments.length ? (squared.domain(_), scale) : squared.domain();
      };
      scale.range = function(_) {
        return arguments.length ? (squared.range((range2 = Array.from(_, number$1)).map(square)), scale) : range2.slice();
      };
      scale.rangeRound = function(_) {
        return scale.range(_).round(true);
      };
      scale.round = function(_) {
        return arguments.length ? (round2 = !!_, scale) : round2;
      };
      scale.clamp = function(_) {
        return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
      };
      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };
      scale.copy = function() {
        return radial(squared.domain(), range2).round(round2).clamp(squared.clamp()).unknown(unknown);
      };
      initRange.apply(scale, arguments);
      return linearish(scale);
    }
    function quantile() {
      var domain = [], range2 = [], thresholds2 = [], unknown;
      function rescale() {
        var i2 = 0, n2 = Math.max(1, range2.length);
        thresholds2 = new Array(n2 - 1);
        while (++i2 < n2) thresholds2[i2 - 1] = quantileSorted(domain, i2 / n2);
        return scale;
      }
      function scale(x2) {
        return x2 == null || isNaN(x2 = +x2) ? unknown : range2[bisectRight(thresholds2, x2)];
      }
      scale.invertExtent = function(y2) {
        var i2 = range2.indexOf(y2);
        return i2 < 0 ? [NaN, NaN] : [
          i2 > 0 ? thresholds2[i2 - 1] : domain[0],
          i2 < thresholds2.length ? thresholds2[i2] : domain[domain.length - 1]
        ];
      };
      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort(ascending);
        return rescale();
      };
      scale.range = function(_) {
        return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
      };
      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };
      scale.quantiles = function() {
        return thresholds2.slice();
      };
      scale.copy = function() {
        return quantile().domain(domain).range(range2).unknown(unknown);
      };
      return initRange.apply(scale, arguments);
    }
    function quantize() {
      var x0 = 0, x1 = 1, n2 = 1, domain = [0.5], range2 = [0, 1], unknown;
      function scale(x2) {
        return x2 != null && x2 <= x2 ? range2[bisectRight(domain, x2, 0, n2)] : unknown;
      }
      function rescale() {
        var i2 = -1;
        domain = new Array(n2);
        while (++i2 < n2) domain[i2] = ((i2 + 1) * x1 - (i2 - n2) * x0) / (n2 + 1);
        return scale;
      }
      scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
      };
      scale.range = function(_) {
        return arguments.length ? (n2 = (range2 = Array.from(_)).length - 1, rescale()) : range2.slice();
      };
      scale.invertExtent = function(y2) {
        var i2 = range2.indexOf(y2);
        return i2 < 0 ? [NaN, NaN] : i2 < 1 ? [x0, domain[0]] : i2 >= n2 ? [domain[n2 - 1], x1] : [domain[i2 - 1], domain[i2]];
      };
      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : scale;
      };
      scale.thresholds = function() {
        return domain.slice();
      };
      scale.copy = function() {
        return quantize().domain([x0, x1]).range(range2).unknown(unknown);
      };
      return initRange.apply(linearish(scale), arguments);
    }
    function threshold() {
      var domain = [0.5], range2 = [0, 1], unknown, n2 = 1;
      function scale(x2) {
        return x2 != null && x2 <= x2 ? range2[bisectRight(domain, x2, 0, n2)] : unknown;
      }
      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_), n2 = Math.min(domain.length, range2.length - 1), scale) : domain.slice();
      };
      scale.range = function(_) {
        return arguments.length ? (range2 = Array.from(_), n2 = Math.min(domain.length, range2.length - 1), scale) : range2.slice();
      };
      scale.invertExtent = function(y2) {
        var i2 = range2.indexOf(y2);
        return [domain[i2 - 1], domain[i2]];
      };
      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };
      scale.copy = function() {
        return threshold().domain(domain).range(range2).unknown(unknown);
      };
      return initRange.apply(scale, arguments);
    }
    const t0 = /* @__PURE__ */ new Date(), t1 = /* @__PURE__ */ new Date();
    function timeInterval(floori, offseti, count2, field) {
      function interval(date2) {
        return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
      }
      interval.floor = (date2) => {
        return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
      };
      interval.ceil = (date2) => {
        return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
      };
      interval.round = (date2) => {
        const d0 = interval(date2), d1 = interval.ceil(date2);
        return date2 - d0 < d1 - date2 ? d0 : d1;
      };
      interval.offset = (date2, step) => {
        return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
      };
      interval.range = (start, stop, step) => {
        const range2 = [];
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range2;
        let previous;
        do
          range2.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range2;
      };
      interval.filter = (test2) => {
        return timeInterval((date2) => {
          if (date2 >= date2) while (floori(date2), !test2(date2)) date2.setTime(date2 - 1);
        }, (date2, step) => {
          if (date2 >= date2) {
            if (step < 0) while (++step <= 0) {
              while (offseti(date2, -1), !test2(date2)) {
              }
            }
            else while (--step >= 0) {
              while (offseti(date2, 1), !test2(date2)) {
              }
            }
          }
        });
      };
      if (count2) {
        interval.count = (start, end) => {
          t0.setTime(+start), t1.setTime(+end);
          floori(t0), floori(t1);
          return Math.floor(count2(t0, t1));
        };
        interval.every = (step) => {
          step = Math.floor(step);
          return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? (d) => field(d) % step === 0 : (d) => interval.count(0, d) % step === 0);
        };
      }
      return interval;
    }
    const millisecond = timeInterval(() => {
    }, (date2, step) => {
      date2.setTime(+date2 + step);
    }, (start, end) => {
      return end - start;
    });
    millisecond.every = (k2) => {
      k2 = Math.floor(k2);
      if (!isFinite(k2) || !(k2 > 0)) return null;
      if (!(k2 > 1)) return millisecond;
      return timeInterval((date2) => {
        date2.setTime(Math.floor(date2 / k2) * k2);
      }, (date2, step) => {
        date2.setTime(+date2 + step * k2);
      }, (start, end) => {
        return (end - start) / k2;
      });
    };
    millisecond.range;
    const durationSecond = 1e3;
    const durationMinute = durationSecond * 60;
    const durationHour = durationMinute * 60;
    const durationDay = durationHour * 24;
    const durationWeek = durationDay * 7;
    const durationMonth = durationDay * 30;
    const durationYear = durationDay * 365;
    const second = timeInterval((date2) => {
      date2.setTime(date2 - date2.getMilliseconds());
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationSecond);
    }, (start, end) => {
      return (end - start) / durationSecond;
    }, (date2) => {
      return date2.getUTCSeconds();
    });
    second.range;
    const timeMinute = timeInterval((date2) => {
      date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationMinute);
    }, (start, end) => {
      return (end - start) / durationMinute;
    }, (date2) => {
      return date2.getMinutes();
    });
    timeMinute.range;
    const utcMinute = timeInterval((date2) => {
      date2.setUTCSeconds(0, 0);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationMinute);
    }, (start, end) => {
      return (end - start) / durationMinute;
    }, (date2) => {
      return date2.getUTCMinutes();
    });
    utcMinute.range;
    const timeHour = timeInterval((date2) => {
      date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationHour);
    }, (start, end) => {
      return (end - start) / durationHour;
    }, (date2) => {
      return date2.getHours();
    });
    timeHour.range;
    const utcHour = timeInterval((date2) => {
      date2.setUTCMinutes(0, 0, 0);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationHour);
    }, (start, end) => {
      return (end - start) / durationHour;
    }, (date2) => {
      return date2.getUTCHours();
    });
    utcHour.range;
    const timeDay = timeInterval(
      (date2) => date2.setHours(0, 0, 0, 0),
      (date2, step) => date2.setDate(date2.getDate() + step),
      (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
      (date2) => date2.getDate() - 1
    );
    timeDay.range;
    const utcDay = timeInterval((date2) => {
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCDate(date2.getUTCDate() + step);
    }, (start, end) => {
      return (end - start) / durationDay;
    }, (date2) => {
      return date2.getUTCDate() - 1;
    });
    utcDay.range;
    const unixDay = timeInterval((date2) => {
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCDate(date2.getUTCDate() + step);
    }, (start, end) => {
      return (end - start) / durationDay;
    }, (date2) => {
      return Math.floor(date2 / durationDay);
    });
    unixDay.range;
    function timeWeekday(i2) {
      return timeInterval((date2) => {
        date2.setDate(date2.getDate() - (date2.getDay() + 7 - i2) % 7);
        date2.setHours(0, 0, 0, 0);
      }, (date2, step) => {
        date2.setDate(date2.getDate() + step * 7);
      }, (start, end) => {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
      });
    }
    const timeSunday = timeWeekday(0);
    const timeMonday = timeWeekday(1);
    const timeTuesday = timeWeekday(2);
    const timeWednesday = timeWeekday(3);
    const timeThursday = timeWeekday(4);
    const timeFriday = timeWeekday(5);
    const timeSaturday = timeWeekday(6);
    timeSunday.range;
    timeMonday.range;
    timeTuesday.range;
    timeWednesday.range;
    timeThursday.range;
    timeFriday.range;
    timeSaturday.range;
    function utcWeekday(i2) {
      return timeInterval((date2) => {
        date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i2) % 7);
        date2.setUTCHours(0, 0, 0, 0);
      }, (date2, step) => {
        date2.setUTCDate(date2.getUTCDate() + step * 7);
      }, (start, end) => {
        return (end - start) / durationWeek;
      });
    }
    const utcSunday = utcWeekday(0);
    const utcMonday = utcWeekday(1);
    const utcTuesday = utcWeekday(2);
    const utcWednesday = utcWeekday(3);
    const utcThursday = utcWeekday(4);
    const utcFriday = utcWeekday(5);
    const utcSaturday = utcWeekday(6);
    utcSunday.range;
    utcMonday.range;
    utcTuesday.range;
    utcWednesday.range;
    utcThursday.range;
    utcFriday.range;
    utcSaturday.range;
    const timeMonth = timeInterval((date2) => {
      date2.setDate(1);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setMonth(date2.getMonth() + step);
    }, (start, end) => {
      return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }, (date2) => {
      return date2.getMonth();
    });
    timeMonth.range;
    const utcMonth = timeInterval((date2) => {
      date2.setUTCDate(1);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCMonth(date2.getUTCMonth() + step);
    }, (start, end) => {
      return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }, (date2) => {
      return date2.getUTCMonth();
    });
    utcMonth.range;
    const timeYear = timeInterval((date2) => {
      date2.setMonth(0, 1);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setFullYear(date2.getFullYear() + step);
    }, (start, end) => {
      return end.getFullYear() - start.getFullYear();
    }, (date2) => {
      return date2.getFullYear();
    });
    timeYear.every = (k2) => {
      return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date2) => {
        date2.setFullYear(Math.floor(date2.getFullYear() / k2) * k2);
        date2.setMonth(0, 1);
        date2.setHours(0, 0, 0, 0);
      }, (date2, step) => {
        date2.setFullYear(date2.getFullYear() + step * k2);
      });
    };
    timeYear.range;
    const utcYear = timeInterval((date2) => {
      date2.setUTCMonth(0, 1);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCFullYear(date2.getUTCFullYear() + step);
    }, (start, end) => {
      return end.getUTCFullYear() - start.getUTCFullYear();
    }, (date2) => {
      return date2.getUTCFullYear();
    });
    utcYear.every = (k2) => {
      return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date2) => {
        date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k2) * k2);
        date2.setUTCMonth(0, 1);
        date2.setUTCHours(0, 0, 0, 0);
      }, (date2, step) => {
        date2.setUTCFullYear(date2.getUTCFullYear() + step * k2);
      });
    };
    utcYear.range;
    function ticker(year, month, week, day, hour, minute) {
      const tickIntervals = [
        [second, 1, durationSecond],
        [second, 5, 5 * durationSecond],
        [second, 15, 15 * durationSecond],
        [second, 30, 30 * durationSecond],
        [minute, 1, durationMinute],
        [minute, 5, 5 * durationMinute],
        [minute, 15, 15 * durationMinute],
        [minute, 30, 30 * durationMinute],
        [hour, 1, durationHour],
        [hour, 3, 3 * durationHour],
        [hour, 6, 6 * durationHour],
        [hour, 12, 12 * durationHour],
        [day, 1, durationDay],
        [day, 2, 2 * durationDay],
        [week, 1, durationWeek],
        [month, 1, durationMonth],
        [month, 3, 3 * durationMonth],
        [year, 1, durationYear]
      ];
      function ticks2(start, stop, count2) {
        const reverse2 = stop < start;
        if (reverse2) [start, stop] = [stop, start];
        const interval = count2 && typeof count2.range === "function" ? count2 : tickInterval(start, stop, count2);
        const ticks3 = interval ? interval.range(start, +stop + 1) : [];
        return reverse2 ? ticks3.reverse() : ticks3;
      }
      function tickInterval(start, stop, count2) {
        const target = Math.abs(stop - start) / count2;
        const i2 = bisector(([, , step2]) => step2).right(tickIntervals, target);
        if (i2 === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count2));
        if (i2 === 0) return millisecond.every(Math.max(tickStep(start, stop, count2), 1));
        const [t, step] = tickIntervals[target / tickIntervals[i2 - 1][2] < tickIntervals[i2][2] / target ? i2 - 1 : i2];
        return t.every(step);
      }
      return [ticks2, tickInterval];
    }
    const [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
    const [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);
    function localDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date2.setFullYear(d.y);
        return date2;
      }
      return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
    }
    function utcDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date2.setUTCFullYear(d.y);
        return date2;
      }
      return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
    }
    function newDate(y2, m2, d) {
      return { y: y2, m: m2, d, H: 0, M: 0, S: 0, L: 0 };
    }
    function formatLocale(locale2) {
      var locale_dateTime = locale2.dateTime, locale_date = locale2.date, locale_time = locale2.time, locale_periods = locale2.periods, locale_weekdays = locale2.days, locale_shortWeekdays = locale2.shortDays, locale_months = locale2.months, locale_shortMonths = locale2.shortMonths;
      var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
      var formats = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": formatDayOfMonth,
        "e": formatDayOfMonth,
        "f": formatMicroseconds,
        "g": formatYearISO,
        "G": formatFullYearISO,
        "H": formatHour24,
        "I": formatHour12,
        "j": formatDayOfYear,
        "L": formatMilliseconds,
        "m": formatMonthNumber,
        "M": formatMinutes,
        "p": formatPeriod,
        "q": formatQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatSeconds,
        "u": formatWeekdayNumberMonday,
        "U": formatWeekNumberSunday,
        "V": formatWeekNumberISO,
        "w": formatWeekdayNumberSunday,
        "W": formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatYear,
        "Y": formatFullYear,
        "Z": formatZone,
        "%": formatLiteralPercent
      };
      var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": formatUTCDayOfMonth,
        "e": formatUTCDayOfMonth,
        "f": formatUTCMicroseconds,
        "g": formatUTCYearISO,
        "G": formatUTCFullYearISO,
        "H": formatUTCHour24,
        "I": formatUTCHour12,
        "j": formatUTCDayOfYear,
        "L": formatUTCMilliseconds,
        "m": formatUTCMonthNumber,
        "M": formatUTCMinutes,
        "p": formatUTCPeriod,
        "q": formatUTCQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatUTCSeconds,
        "u": formatUTCWeekdayNumberMonday,
        "U": formatUTCWeekNumberSunday,
        "V": formatUTCWeekNumberISO,
        "w": formatUTCWeekdayNumberSunday,
        "W": formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatUTCYear,
        "Y": formatUTCFullYear,
        "Z": formatUTCZone,
        "%": formatLiteralPercent
      };
      var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday2,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": parseDayOfMonth,
        "e": parseDayOfMonth,
        "f": parseMicroseconds,
        "g": parseYear,
        "G": parseFullYear,
        "H": parseHour24,
        "I": parseHour24,
        "j": parseDayOfYear,
        "L": parseMilliseconds,
        "m": parseMonthNumber,
        "M": parseMinutes,
        "p": parsePeriod,
        "q": parseQuarter,
        "Q": parseUnixTimestamp,
        "s": parseUnixTimestampSeconds,
        "S": parseSeconds,
        "u": parseWeekdayNumberMonday,
        "U": parseWeekNumberSunday,
        "V": parseWeekNumberISO,
        "w": parseWeekdayNumberSunday,
        "W": parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": parseYear,
        "Y": parseFullYear,
        "Z": parseZone,
        "%": parseLiteralPercent
      };
      formats.x = newFormat(locale_date, formats);
      formats.X = newFormat(locale_time, formats);
      formats.c = newFormat(locale_dateTime, formats);
      utcFormats.x = newFormat(locale_date, utcFormats);
      utcFormats.X = newFormat(locale_time, utcFormats);
      utcFormats.c = newFormat(locale_dateTime, utcFormats);
      function newFormat(specifier, formats2) {
        return function(date2) {
          var string2 = [], i2 = -1, j = 0, n2 = specifier.length, c2, pad2, format2;
          if (!(date2 instanceof Date)) date2 = /* @__PURE__ */ new Date(+date2);
          while (++i2 < n2) {
            if (specifier.charCodeAt(i2) === 37) {
              string2.push(specifier.slice(j, i2));
              if ((pad2 = pads[c2 = specifier.charAt(++i2)]) != null) c2 = specifier.charAt(++i2);
              else pad2 = c2 === "e" ? " " : "0";
              if (format2 = formats2[c2]) c2 = format2(date2, pad2);
              string2.push(c2);
              j = i2 + 1;
            }
          }
          string2.push(specifier.slice(j, i2));
          return string2.join("");
        };
      }
      function newParse(specifier, Z2) {
        return function(string2) {
          var d = newDate(1900, void 0, 1), i2 = parseSpecifier(d, specifier, string2 += "", 0), week, day;
          if (i2 != string2.length) return null;
          if ("Q" in d) return new Date(d.Q);
          if ("s" in d) return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
          if (Z2 && !("Z" in d)) d.Z = 0;
          if ("p" in d) d.H = d.H % 12 + d.p * 12;
          if (d.m === void 0) d.m = "q" in d ? d.q : 0;
          if ("V" in d) {
            if (d.V < 1 || d.V > 53) return null;
            if (!("w" in d)) d.w = 1;
            if ("Z" in d) {
              week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
              week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
              week = utcDay.offset(week, (d.V - 1) * 7);
              d.y = week.getUTCFullYear();
              d.m = week.getUTCMonth();
              d.d = week.getUTCDate() + (d.w + 6) % 7;
            } else {
              week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
              week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
              week = timeDay.offset(week, (d.V - 1) * 7);
              d.y = week.getFullYear();
              d.m = week.getMonth();
              d.d = week.getDate() + (d.w + 6) % 7;
            }
          } else if ("W" in d || "U" in d) {
            if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
            day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
            d.m = 0;
            d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
          }
          if ("Z" in d) {
            d.H += d.Z / 100 | 0;
            d.M += d.Z % 100;
            return utcDate(d);
          }
          return localDate(d);
        };
      }
      function parseSpecifier(d, specifier, string2, j) {
        var i2 = 0, n2 = specifier.length, m2 = string2.length, c2, parse2;
        while (i2 < n2) {
          if (j >= m2) return -1;
          c2 = specifier.charCodeAt(i2++);
          if (c2 === 37) {
            c2 = specifier.charAt(i2++);
            parse2 = parses[c2 in pads ? specifier.charAt(i2++) : c2];
            if (!parse2 || (j = parse2(d, string2, j)) < 0) return -1;
          } else if (c2 != string2.charCodeAt(j++)) {
            return -1;
          }
        }
        return j;
      }
      function parsePeriod(d, string2, i2) {
        var n2 = periodRe.exec(string2.slice(i2));
        return n2 ? (d.p = periodLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
      }
      function parseShortWeekday(d, string2, i2) {
        var n2 = shortWeekdayRe.exec(string2.slice(i2));
        return n2 ? (d.w = shortWeekdayLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
      }
      function parseWeekday2(d, string2, i2) {
        var n2 = weekdayRe.exec(string2.slice(i2));
        return n2 ? (d.w = weekdayLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
      }
      function parseShortMonth(d, string2, i2) {
        var n2 = shortMonthRe.exec(string2.slice(i2));
        return n2 ? (d.m = shortMonthLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
      }
      function parseMonth(d, string2, i2) {
        var n2 = monthRe.exec(string2.slice(i2));
        return n2 ? (d.m = monthLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
      }
      function parseLocaleDateTime(d, string2, i2) {
        return parseSpecifier(d, locale_dateTime, string2, i2);
      }
      function parseLocaleDate(d, string2, i2) {
        return parseSpecifier(d, locale_date, string2, i2);
      }
      function parseLocaleTime(d, string2, i2) {
        return parseSpecifier(d, locale_time, string2, i2);
      }
      function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
      }
      function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
      }
      function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
      }
      function formatMonth(d) {
        return locale_months[d.getMonth()];
      }
      function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
      }
      function formatQuarter(d) {
        return 1 + ~~(d.getMonth() / 3);
      }
      function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
      }
      function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
      }
      function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
      }
      function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
      }
      function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
      }
      function formatUTCQuarter(d) {
        return 1 + ~~(d.getUTCMonth() / 3);
      }
      return {
        format: function(specifier) {
          var f = newFormat(specifier += "", formats);
          f.toString = function() {
            return specifier;
          };
          return f;
        },
        parse: function(specifier) {
          var p2 = newParse(specifier += "", false);
          p2.toString = function() {
            return specifier;
          };
          return p2;
        },
        utcFormat: function(specifier) {
          var f = newFormat(specifier += "", utcFormats);
          f.toString = function() {
            return specifier;
          };
          return f;
        },
        utcParse: function(specifier) {
          var p2 = newParse(specifier += "", true);
          p2.toString = function() {
            return specifier;
          };
          return p2;
        }
      };
    }
    var pads = { "-": "", "_": " ", "0": "0" }, numberRe = /^\s*\d+/, percentRe = /^%/, requoteRe = /[\\^$*+?|[\]().{}]/g;
    function pad(value, fill, width) {
      var sign2 = value < 0 ? "-" : "", string2 = (sign2 ? -value : value) + "", length = string2.length;
      return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string2 : string2);
    }
    function requote(s2) {
      return s2.replace(requoteRe, "\\$&");
    }
    function formatRe(names) {
      return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
    }
    function formatLookup(names) {
      return new Map(names.map((name, i2) => [name.toLowerCase(), i2]));
    }
    function parseWeekdayNumberSunday(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 1));
      return n2 ? (d.w = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseWeekdayNumberMonday(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 1));
      return n2 ? (d.u = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseWeekNumberSunday(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d.U = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseWeekNumberISO(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d.V = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseWeekNumberMonday(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d.W = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseFullYear(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 4));
      return n2 ? (d.y = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseYear(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d.y = +n2[0] + (+n2[0] > 68 ? 1900 : 2e3), i2 + n2[0].length) : -1;
    }
    function parseZone(d, string2, i2) {
      var n2 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string2.slice(i2, i2 + 6));
      return n2 ? (d.Z = n2[1] ? 0 : -(n2[2] + (n2[3] || "00")), i2 + n2[0].length) : -1;
    }
    function parseQuarter(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 1));
      return n2 ? (d.q = n2[0] * 3 - 3, i2 + n2[0].length) : -1;
    }
    function parseMonthNumber(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d.m = n2[0] - 1, i2 + n2[0].length) : -1;
    }
    function parseDayOfMonth(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d.d = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseDayOfYear(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 3));
      return n2 ? (d.m = 0, d.d = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseHour24(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d.H = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseMinutes(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d.M = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseSeconds(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d.S = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseMilliseconds(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 3));
      return n2 ? (d.L = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseMicroseconds(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 6));
      return n2 ? (d.L = Math.floor(n2[0] / 1e3), i2 + n2[0].length) : -1;
    }
    function parseLiteralPercent(d, string2, i2) {
      var n2 = percentRe.exec(string2.slice(i2, i2 + 1));
      return n2 ? i2 + n2[0].length : -1;
    }
    function parseUnixTimestamp(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2));
      return n2 ? (d.Q = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseUnixTimestampSeconds(d, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2));
      return n2 ? (d.s = +n2[0], i2 + n2[0].length) : -1;
    }
    function formatDayOfMonth(d, p2) {
      return pad(d.getDate(), p2, 2);
    }
    function formatHour24(d, p2) {
      return pad(d.getHours(), p2, 2);
    }
    function formatHour12(d, p2) {
      return pad(d.getHours() % 12 || 12, p2, 2);
    }
    function formatDayOfYear(d, p2) {
      return pad(1 + timeDay.count(timeYear(d), d), p2, 3);
    }
    function formatMilliseconds(d, p2) {
      return pad(d.getMilliseconds(), p2, 3);
    }
    function formatMicroseconds(d, p2) {
      return formatMilliseconds(d, p2) + "000";
    }
    function formatMonthNumber(d, p2) {
      return pad(d.getMonth() + 1, p2, 2);
    }
    function formatMinutes(d, p2) {
      return pad(d.getMinutes(), p2, 2);
    }
    function formatSeconds(d, p2) {
      return pad(d.getSeconds(), p2, 2);
    }
    function formatWeekdayNumberMonday(d) {
      var day = d.getDay();
      return day === 0 ? 7 : day;
    }
    function formatWeekNumberSunday(d, p2) {
      return pad(timeSunday.count(timeYear(d) - 1, d), p2, 2);
    }
    function dISO(d) {
      var day = d.getDay();
      return day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
    }
    function formatWeekNumberISO(d, p2) {
      d = dISO(d);
      return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p2, 2);
    }
    function formatWeekdayNumberSunday(d) {
      return d.getDay();
    }
    function formatWeekNumberMonday(d, p2) {
      return pad(timeMonday.count(timeYear(d) - 1, d), p2, 2);
    }
    function formatYear(d, p2) {
      return pad(d.getFullYear() % 100, p2, 2);
    }
    function formatYearISO(d, p2) {
      d = dISO(d);
      return pad(d.getFullYear() % 100, p2, 2);
    }
    function formatFullYear(d, p2) {
      return pad(d.getFullYear() % 1e4, p2, 4);
    }
    function formatFullYearISO(d, p2) {
      var day = d.getDay();
      d = day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
      return pad(d.getFullYear() % 1e4, p2, 4);
    }
    function formatZone(d) {
      var z2 = d.getTimezoneOffset();
      return (z2 > 0 ? "-" : (z2 *= -1, "+")) + pad(z2 / 60 | 0, "0", 2) + pad(z2 % 60, "0", 2);
    }
    function formatUTCDayOfMonth(d, p2) {
      return pad(d.getUTCDate(), p2, 2);
    }
    function formatUTCHour24(d, p2) {
      return pad(d.getUTCHours(), p2, 2);
    }
    function formatUTCHour12(d, p2) {
      return pad(d.getUTCHours() % 12 || 12, p2, 2);
    }
    function formatUTCDayOfYear(d, p2) {
      return pad(1 + utcDay.count(utcYear(d), d), p2, 3);
    }
    function formatUTCMilliseconds(d, p2) {
      return pad(d.getUTCMilliseconds(), p2, 3);
    }
    function formatUTCMicroseconds(d, p2) {
      return formatUTCMilliseconds(d, p2) + "000";
    }
    function formatUTCMonthNumber(d, p2) {
      return pad(d.getUTCMonth() + 1, p2, 2);
    }
    function formatUTCMinutes(d, p2) {
      return pad(d.getUTCMinutes(), p2, 2);
    }
    function formatUTCSeconds(d, p2) {
      return pad(d.getUTCSeconds(), p2, 2);
    }
    function formatUTCWeekdayNumberMonday(d) {
      var dow = d.getUTCDay();
      return dow === 0 ? 7 : dow;
    }
    function formatUTCWeekNumberSunday(d, p2) {
      return pad(utcSunday.count(utcYear(d) - 1, d), p2, 2);
    }
    function UTCdISO(d) {
      var day = d.getUTCDay();
      return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
    }
    function formatUTCWeekNumberISO(d, p2) {
      d = UTCdISO(d);
      return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p2, 2);
    }
    function formatUTCWeekdayNumberSunday(d) {
      return d.getUTCDay();
    }
    function formatUTCWeekNumberMonday(d, p2) {
      return pad(utcMonday.count(utcYear(d) - 1, d), p2, 2);
    }
    function formatUTCYear(d, p2) {
      return pad(d.getUTCFullYear() % 100, p2, 2);
    }
    function formatUTCYearISO(d, p2) {
      d = UTCdISO(d);
      return pad(d.getUTCFullYear() % 100, p2, 2);
    }
    function formatUTCFullYear(d, p2) {
      return pad(d.getUTCFullYear() % 1e4, p2, 4);
    }
    function formatUTCFullYearISO(d, p2) {
      var day = d.getUTCDay();
      d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
      return pad(d.getUTCFullYear() % 1e4, p2, 4);
    }
    function formatUTCZone() {
      return "+0000";
    }
    function formatLiteralPercent() {
      return "%";
    }
    function formatUnixTimestamp(d) {
      return +d;
    }
    function formatUnixTimestampSeconds(d) {
      return Math.floor(+d / 1e3);
    }
    var locale;
    var timeFormat;
    var utcFormat;
    defaultLocale({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });
    function defaultLocale(definition) {
      locale = formatLocale(definition);
      timeFormat = locale.format;
      locale.parse;
      utcFormat = locale.utcFormat;
      locale.utcParse;
      return locale;
    }
    function date(t) {
      return new Date(t);
    }
    function number(t) {
      return t instanceof Date ? +t : +/* @__PURE__ */ new Date(+t);
    }
    function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2) {
      var scale = continuous(), invert = scale.invert, domain = scale.domain;
      var formatMillisecond = format2(".%L"), formatSecond = format2(":%S"), formatMinute = format2("%I:%M"), formatHour = format2("%I %p"), formatDay = format2("%a %d"), formatWeek = format2("%b %d"), formatMonth = format2("%B"), formatYear2 = format2("%Y");
      function tickFormat2(date2) {
        return (second2(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear2)(date2);
      }
      scale.invert = function(y2) {
        return new Date(invert(y2));
      };
      scale.domain = function(_) {
        return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
      };
      scale.ticks = function(interval) {
        var d = domain();
        return ticks2(d[0], d[d.length - 1], interval == null ? 10 : interval);
      };
      scale.tickFormat = function(count2, specifier) {
        return specifier == null ? tickFormat2 : format2(specifier);
      };
      scale.nice = function(interval) {
        var d = domain();
        if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
        return interval ? domain(nice(d, interval)) : scale;
      };
      scale.copy = function() {
        return copy$1(scale, calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2));
      };
      return scale;
    }
    function time() {
      return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
    }
    function utcTime() {
      return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
    }
    function transformer$1() {
      var x0 = 0, x1 = 1, t02, t12, k10, transform, interpolator = identity$4, clamp2 = false, unknown;
      function scale(x2) {
        return x2 == null || isNaN(x2 = +x2) ? unknown : interpolator(k10 === 0 ? 0.5 : (x2 = (transform(x2) - t02) * k10, clamp2 ? Math.max(0, Math.min(1, x2)) : x2));
      }
      scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, t02 = transform(x0 = +x0), t12 = transform(x1 = +x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02), scale) : [x0, x1];
      };
      scale.clamp = function(_) {
        return arguments.length ? (clamp2 = !!_, scale) : clamp2;
      };
      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };
      function range2(interpolate2) {
        return function(_) {
          var r0, r1;
          return arguments.length ? ([r0, r1] = _, interpolator = interpolate2(r0, r1), scale) : [interpolator(0), interpolator(1)];
        };
      }
      scale.range = range2(interpolate);
      scale.rangeRound = range2(interpolateRound);
      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };
      return function(t) {
        transform = t, t02 = t(x0), t12 = t(x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02);
        return scale;
      };
    }
    function copy(source, target) {
      return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
    }
    function sequential() {
      var scale = linearish(transformer$1()(identity$4));
      scale.copy = function() {
        return copy(scale, sequential());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function sequentialLog() {
      var scale = loggish(transformer$1()).domain([1, 10]);
      scale.copy = function() {
        return copy(scale, sequentialLog()).base(scale.base());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function sequentialSymlog() {
      var scale = symlogish(transformer$1());
      scale.copy = function() {
        return copy(scale, sequentialSymlog()).constant(scale.constant());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function sequentialPow() {
      var scale = powish(transformer$1());
      scale.copy = function() {
        return copy(scale, sequentialPow()).exponent(scale.exponent());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function sequentialSqrt() {
      return sequentialPow.apply(null, arguments).exponent(0.5);
    }
    function sequentialQuantile() {
      var domain = [], interpolator = identity$4;
      function scale(x2) {
        if (x2 != null && !isNaN(x2 = +x2)) return interpolator((bisectRight(domain, x2, 1) - 1) / (domain.length - 1));
      }
      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort(ascending);
        return scale;
      };
      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };
      scale.range = function() {
        return domain.map((d, i2) => interpolator(i2 / (domain.length - 1)));
      };
      scale.quantiles = function(n2) {
        return Array.from({ length: n2 + 1 }, (_, i2) => quantile$1(domain, i2 / n2));
      };
      scale.copy = function() {
        return sequentialQuantile(interpolator).domain(domain);
      };
      return initInterpolator.apply(scale, arguments);
    }
    function transformer() {
      var x0 = 0, x1 = 0.5, x2 = 1, s2 = 1, t02, t12, t2, k10, k21, interpolator = identity$4, transform, clamp2 = false, unknown;
      function scale(x3) {
        return isNaN(x3 = +x3) ? unknown : (x3 = 0.5 + ((x3 = +transform(x3)) - t12) * (s2 * x3 < s2 * t12 ? k10 : k21), interpolator(clamp2 ? Math.max(0, Math.min(1, x3)) : x3));
      }
      scale.domain = function(_) {
        return arguments.length ? ([x0, x1, x2] = _, t02 = transform(x0 = +x0), t12 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s2 = t12 < t02 ? -1 : 1, scale) : [x0, x1, x2];
      };
      scale.clamp = function(_) {
        return arguments.length ? (clamp2 = !!_, scale) : clamp2;
      };
      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };
      function range2(interpolate2) {
        return function(_) {
          var r0, r1, r2;
          return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate2, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
        };
      }
      scale.range = range2(interpolate);
      scale.rangeRound = range2(interpolateRound);
      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };
      return function(t) {
        transform = t, t02 = t(x0), t12 = t(x1), t2 = t(x2), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s2 = t12 < t02 ? -1 : 1;
        return scale;
      };
    }
    function diverging() {
      var scale = linearish(transformer()(identity$4));
      scale.copy = function() {
        return copy(scale, diverging());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function divergingLog() {
      var scale = loggish(transformer()).domain([0.1, 1, 10]);
      scale.copy = function() {
        return copy(scale, divergingLog()).base(scale.base());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function divergingSymlog() {
      var scale = symlogish(transformer());
      scale.copy = function() {
        return copy(scale, divergingSymlog()).constant(scale.constant());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function divergingPow() {
      var scale = powish(transformer());
      scale.copy = function() {
        return copy(scale, divergingPow()).exponent(scale.exponent());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function divergingSqrt() {
      return divergingPow.apply(null, arguments).exponent(0.5);
    }
    const d3Scales = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      scaleBand: band,
      scaleDiverging: diverging,
      scaleDivergingLog: divergingLog,
      scaleDivergingPow: divergingPow,
      scaleDivergingSqrt: divergingSqrt,
      scaleDivergingSymlog: divergingSymlog,
      scaleIdentity: identity$2,
      scaleImplicit: implicit,
      scaleLinear: linear,
      scaleLog: log,
      scaleOrdinal: ordinal,
      scalePoint: point,
      scalePow: pow,
      scaleQuantile: quantile,
      scaleQuantize: quantize,
      scaleRadial: radial,
      scaleSequential: sequential,
      scaleSequentialLog: sequentialLog,
      scaleSequentialPow: sequentialPow,
      scaleSequentialQuantile: sequentialQuantile,
      scaleSequentialSqrt: sequentialSqrt,
      scaleSequentialSymlog: sequentialSymlog,
      scaleSqrt: sqrt,
      scaleSymlog: symlog,
      scaleThreshold: threshold,
      scaleTime: time,
      scaleUtc: utcTime,
      tickFormat
    }, Symbol.toStringTag, { value: "Module" }));
    var _baseExtremum;
    var hasRequired_baseExtremum;
    function require_baseExtremum() {
      if (hasRequired_baseExtremum) return _baseExtremum;
      hasRequired_baseExtremum = 1;
      var isSymbol = requireIsSymbol();
      function baseExtremum(array2, iteratee, comparator) {
        var index2 = -1, length = array2.length;
        while (++index2 < length) {
          var value = array2[index2], current = iteratee(value);
          if (current != null && (computed === void 0 ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current, result = value;
          }
        }
        return result;
      }
      _baseExtremum = baseExtremum;
      return _baseExtremum;
    }
    var _baseGt;
    var hasRequired_baseGt;
    function require_baseGt() {
      if (hasRequired_baseGt) return _baseGt;
      hasRequired_baseGt = 1;
      function baseGt(value, other) {
        return value > other;
      }
      _baseGt = baseGt;
      return _baseGt;
    }
    var max_1;
    var hasRequiredMax;
    function requireMax() {
      if (hasRequiredMax) return max_1;
      hasRequiredMax = 1;
      var baseExtremum = require_baseExtremum(), baseGt = require_baseGt(), identity2 = requireIdentity();
      function max2(array2) {
        return array2 && array2.length ? baseExtremum(array2, identity2, baseGt) : void 0;
      }
      max_1 = max2;
      return max_1;
    }
    var maxExports = requireMax();
    const max = /* @__PURE__ */ getDefaultExportFromCjs(maxExports);
    var _baseLt;
    var hasRequired_baseLt;
    function require_baseLt() {
      if (hasRequired_baseLt) return _baseLt;
      hasRequired_baseLt = 1;
      function baseLt(value, other) {
        return value < other;
      }
      _baseLt = baseLt;
      return _baseLt;
    }
    var min_1;
    var hasRequiredMin;
    function requireMin() {
      if (hasRequiredMin) return min_1;
      hasRequiredMin = 1;
      var baseExtremum = require_baseExtremum(), baseLt = require_baseLt(), identity2 = requireIdentity();
      function min2(array2) {
        return array2 && array2.length ? baseExtremum(array2, identity2, baseLt) : void 0;
      }
      min_1 = min2;
      return min_1;
    }
    var minExports = requireMin();
    const min = /* @__PURE__ */ getDefaultExportFromCjs(minExports);
    var map_1;
    var hasRequiredMap;
    function requireMap() {
      if (hasRequiredMap) return map_1;
      hasRequiredMap = 1;
      var arrayMap = require_arrayMap(), baseIteratee = require_baseIteratee(), baseMap = require_baseMap(), isArray2 = requireIsArray();
      function map2(collection, iteratee) {
        var func = isArray2(collection) ? arrayMap : baseMap;
        return func(collection, baseIteratee(iteratee, 3));
      }
      map_1 = map2;
      return map_1;
    }
    var flatMap_1;
    var hasRequiredFlatMap;
    function requireFlatMap() {
      if (hasRequiredFlatMap) return flatMap_1;
      hasRequiredFlatMap = 1;
      var baseFlatten = require_baseFlatten(), map2 = requireMap();
      function flatMap2(collection, iteratee) {
        return baseFlatten(map2(collection, iteratee), 1);
      }
      flatMap_1 = flatMap2;
      return flatMap_1;
    }
    var flatMapExports = requireFlatMap();
    const flatMap = /* @__PURE__ */ getDefaultExportFromCjs(flatMapExports);
    var isEqual_1;
    var hasRequiredIsEqual;
    function requireIsEqual() {
      if (hasRequiredIsEqual) return isEqual_1;
      hasRequiredIsEqual = 1;
      var baseIsEqual = require_baseIsEqual();
      function isEqual2(value, other) {
        return baseIsEqual(value, other);
      }
      isEqual_1 = isEqual2;
      return isEqual_1;
    }
    var isEqualExports = requireIsEqual();
    const isEqual = /* @__PURE__ */ getDefaultExportFromCjs(isEqualExports);
    var MAX_DIGITS = 1e9, defaults = {
      // These values must be integers within the stated ranges (inclusive).
      // Most of these values can be changed during run-time using `Decimal.config`.
      // The maximum number of significant digits of the result of a calculation or base conversion.
      // E.g. `Decimal.config({ precision: 20 });`
      precision: 20,
      // 1 to MAX_DIGITS
      // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,
      // `toFixed`, `toPrecision` and `toSignificantDigits`.
      //
      // ROUND_UP         0 Away from zero.
      // ROUND_DOWN       1 Towards zero.
      // ROUND_CEIL       2 Towards +Infinity.
      // ROUND_FLOOR      3 Towards -Infinity.
      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      //
      // E.g.
      // `Decimal.rounding = 4;`
      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
      rounding: 4,
      // 0 to 8
      // The exponent value at and beneath which `toString` returns exponential notation.
      // JavaScript numbers: -7
      toExpNeg: -7,
      // 0 to -MAX_E
      // The exponent value at and above which `toString` returns exponential notation.
      // JavaScript numbers: 21
      toExpPos: 21,
      // 0 to MAX_E
      // The natural logarithm of 10.
      // 115 digits
      LN10: "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286"
    }, Decimal, external = true, decimalError = "[DecimalError] ", invalidArgument = decimalError + "Invalid argument: ", exponentOutOfRange = decimalError + "Exponent out of range: ", mathfloor = Math.floor, mathpow = Math.pow, isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, ONE, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE), P = {};
    P.absoluteValue = P.abs = function() {
      var x2 = new this.constructor(this);
      if (x2.s) x2.s = 1;
      return x2;
    };
    P.comparedTo = P.cmp = function(y2) {
      var i2, j, xdL, ydL, x2 = this;
      y2 = new x2.constructor(y2);
      if (x2.s !== y2.s) return x2.s || -y2.s;
      if (x2.e !== y2.e) return x2.e > y2.e ^ x2.s < 0 ? 1 : -1;
      xdL = x2.d.length;
      ydL = y2.d.length;
      for (i2 = 0, j = xdL < ydL ? xdL : ydL; i2 < j; ++i2) {
        if (x2.d[i2] !== y2.d[i2]) return x2.d[i2] > y2.d[i2] ^ x2.s < 0 ? 1 : -1;
      }
      return xdL === ydL ? 0 : xdL > ydL ^ x2.s < 0 ? 1 : -1;
    };
    P.decimalPlaces = P.dp = function() {
      var x2 = this, w = x2.d.length - 1, dp = (w - x2.e) * LOG_BASE;
      w = x2.d[w];
      if (w) for (; w % 10 == 0; w /= 10) dp--;
      return dp < 0 ? 0 : dp;
    };
    P.dividedBy = P.div = function(y2) {
      return divide(this, new this.constructor(y2));
    };
    P.dividedToIntegerBy = P.idiv = function(y2) {
      var x2 = this, Ctor = x2.constructor;
      return round(divide(x2, new Ctor(y2), 0, 1), Ctor.precision);
    };
    P.equals = P.eq = function(y2) {
      return !this.cmp(y2);
    };
    P.exponent = function() {
      return getBase10Exponent(this);
    };
    P.greaterThan = P.gt = function(y2) {
      return this.cmp(y2) > 0;
    };
    P.greaterThanOrEqualTo = P.gte = function(y2) {
      return this.cmp(y2) >= 0;
    };
    P.isInteger = P.isint = function() {
      return this.e > this.d.length - 2;
    };
    P.isNegative = P.isneg = function() {
      return this.s < 0;
    };
    P.isPositive = P.ispos = function() {
      return this.s > 0;
    };
    P.isZero = function() {
      return this.s === 0;
    };
    P.lessThan = P.lt = function(y2) {
      return this.cmp(y2) < 0;
    };
    P.lessThanOrEqualTo = P.lte = function(y2) {
      return this.cmp(y2) < 1;
    };
    P.logarithm = P.log = function(base) {
      var r2, x2 = this, Ctor = x2.constructor, pr = Ctor.precision, wpr = pr + 5;
      if (base === void 0) {
        base = new Ctor(10);
      } else {
        base = new Ctor(base);
        if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + "NaN");
      }
      if (x2.s < 1) throw Error(decimalError + (x2.s ? "NaN" : "-Infinity"));
      if (x2.eq(ONE)) return new Ctor(0);
      external = false;
      r2 = divide(ln(x2, wpr), ln(base, wpr), wpr);
      external = true;
      return round(r2, pr);
    };
    P.minus = P.sub = function(y2) {
      var x2 = this;
      y2 = new x2.constructor(y2);
      return x2.s == y2.s ? subtract(x2, y2) : add(x2, (y2.s = -y2.s, y2));
    };
    P.modulo = P.mod = function(y2) {
      var q, x2 = this, Ctor = x2.constructor, pr = Ctor.precision;
      y2 = new Ctor(y2);
      if (!y2.s) throw Error(decimalError + "NaN");
      if (!x2.s) return round(new Ctor(x2), pr);
      external = false;
      q = divide(x2, y2, 0, 1).times(y2);
      external = true;
      return x2.minus(q);
    };
    P.naturalExponential = P.exp = function() {
      return exp(this);
    };
    P.naturalLogarithm = P.ln = function() {
      return ln(this);
    };
    P.negated = P.neg = function() {
      var x2 = new this.constructor(this);
      x2.s = -x2.s || 0;
      return x2;
    };
    P.plus = P.add = function(y2) {
      var x2 = this;
      y2 = new x2.constructor(y2);
      return x2.s == y2.s ? add(x2, y2) : subtract(x2, (y2.s = -y2.s, y2));
    };
    P.precision = P.sd = function(z2) {
      var e, sd, w, x2 = this;
      if (z2 !== void 0 && z2 !== !!z2 && z2 !== 1 && z2 !== 0) throw Error(invalidArgument + z2);
      e = getBase10Exponent(x2) + 1;
      w = x2.d.length - 1;
      sd = w * LOG_BASE + 1;
      w = x2.d[w];
      if (w) {
        for (; w % 10 == 0; w /= 10) sd--;
        for (w = x2.d[0]; w >= 10; w /= 10) sd++;
      }
      return z2 && e > sd ? e : sd;
    };
    P.squareRoot = P.sqrt = function() {
      var e, n2, pr, r2, s2, t, wpr, x2 = this, Ctor = x2.constructor;
      if (x2.s < 1) {
        if (!x2.s) return new Ctor(0);
        throw Error(decimalError + "NaN");
      }
      e = getBase10Exponent(x2);
      external = false;
      s2 = Math.sqrt(+x2);
      if (s2 == 0 || s2 == 1 / 0) {
        n2 = digitsToString(x2.d);
        if ((n2.length + e) % 2 == 0) n2 += "0";
        s2 = Math.sqrt(n2);
        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
        if (s2 == 1 / 0) {
          n2 = "5e" + e;
        } else {
          n2 = s2.toExponential();
          n2 = n2.slice(0, n2.indexOf("e") + 1) + e;
        }
        r2 = new Ctor(n2);
      } else {
        r2 = new Ctor(s2.toString());
      }
      pr = Ctor.precision;
      s2 = wpr = pr + 3;
      for (; ; ) {
        t = r2;
        r2 = t.plus(divide(x2, t, wpr + 2)).times(0.5);
        if (digitsToString(t.d).slice(0, wpr) === (n2 = digitsToString(r2.d)).slice(0, wpr)) {
          n2 = n2.slice(wpr - 3, wpr + 1);
          if (s2 == wpr && n2 == "4999") {
            round(t, pr + 1, 0);
            if (t.times(t).eq(x2)) {
              r2 = t;
              break;
            }
          } else if (n2 != "9999") {
            break;
          }
          wpr += 4;
        }
      }
      external = true;
      return round(r2, pr);
    };
    P.times = P.mul = function(y2) {
      var carry, e, i2, k2, r2, rL, t, xdL, ydL, x2 = this, Ctor = x2.constructor, xd = x2.d, yd = (y2 = new Ctor(y2)).d;
      if (!x2.s || !y2.s) return new Ctor(0);
      y2.s *= x2.s;
      e = x2.e + y2.e;
      xdL = xd.length;
      ydL = yd.length;
      if (xdL < ydL) {
        r2 = xd;
        xd = yd;
        yd = r2;
        rL = xdL;
        xdL = ydL;
        ydL = rL;
      }
      r2 = [];
      rL = xdL + ydL;
      for (i2 = rL; i2--; ) r2.push(0);
      for (i2 = ydL; --i2 >= 0; ) {
        carry = 0;
        for (k2 = xdL + i2; k2 > i2; ) {
          t = r2[k2] + yd[i2] * xd[k2 - i2 - 1] + carry;
          r2[k2--] = t % BASE | 0;
          carry = t / BASE | 0;
        }
        r2[k2] = (r2[k2] + carry) % BASE | 0;
      }
      for (; !r2[--rL]; ) r2.pop();
      if (carry) ++e;
      else r2.shift();
      y2.d = r2;
      y2.e = e;
      return external ? round(y2, Ctor.precision) : y2;
    };
    P.toDecimalPlaces = P.todp = function(dp, rm) {
      var x2 = this, Ctor = x2.constructor;
      x2 = new Ctor(x2);
      if (dp === void 0) return x2;
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
      return round(x2, dp + getBase10Exponent(x2) + 1, rm);
    };
    P.toExponential = function(dp, rm) {
      var str, x2 = this, Ctor = x2.constructor;
      if (dp === void 0) {
        str = toString(x2, true);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);
        x2 = round(new Ctor(x2), dp + 1, rm);
        str = toString(x2, true, dp + 1);
      }
      return str;
    };
    P.toFixed = function(dp, rm) {
      var str, y2, x2 = this, Ctor = x2.constructor;
      if (dp === void 0) return toString(x2);
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
      y2 = round(new Ctor(x2), dp + getBase10Exponent(x2) + 1, rm);
      str = toString(y2.abs(), false, dp + getBase10Exponent(y2) + 1);
      return x2.isneg() && !x2.isZero() ? "-" + str : str;
    };
    P.toInteger = P.toint = function() {
      var x2 = this, Ctor = x2.constructor;
      return round(new Ctor(x2), getBase10Exponent(x2) + 1, Ctor.rounding);
    };
    P.toNumber = function() {
      return +this;
    };
    P.toPower = P.pow = function(y2) {
      var e, k2, pr, r2, sign2, yIsInt, x2 = this, Ctor = x2.constructor, guard = 12, yn = +(y2 = new Ctor(y2));
      if (!y2.s) return new Ctor(ONE);
      x2 = new Ctor(x2);
      if (!x2.s) {
        if (y2.s < 1) throw Error(decimalError + "Infinity");
        return x2;
      }
      if (x2.eq(ONE)) return x2;
      pr = Ctor.precision;
      if (y2.eq(ONE)) return round(x2, pr);
      e = y2.e;
      k2 = y2.d.length - 1;
      yIsInt = e >= k2;
      sign2 = x2.s;
      if (!yIsInt) {
        if (sign2 < 0) throw Error(decimalError + "NaN");
      } else if ((k2 = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
        r2 = new Ctor(ONE);
        e = Math.ceil(pr / LOG_BASE + 4);
        external = false;
        for (; ; ) {
          if (k2 % 2) {
            r2 = r2.times(x2);
            truncate(r2.d, e);
          }
          k2 = mathfloor(k2 / 2);
          if (k2 === 0) break;
          x2 = x2.times(x2);
          truncate(x2.d, e);
        }
        external = true;
        return y2.s < 0 ? new Ctor(ONE).div(r2) : round(r2, pr);
      }
      sign2 = sign2 < 0 && y2.d[Math.max(e, k2)] & 1 ? -1 : 1;
      x2.s = 1;
      external = false;
      r2 = y2.times(ln(x2, pr + guard));
      external = true;
      r2 = exp(r2);
      r2.s = sign2;
      return r2;
    };
    P.toPrecision = function(sd, rm) {
      var e, str, x2 = this, Ctor = x2.constructor;
      if (sd === void 0) {
        e = getBase10Exponent(x2);
        str = toString(x2, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);
      } else {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);
        x2 = round(new Ctor(x2), sd, rm);
        e = getBase10Exponent(x2);
        str = toString(x2, sd <= e || e <= Ctor.toExpNeg, sd);
      }
      return str;
    };
    P.toSignificantDigits = P.tosd = function(sd, rm) {
      var x2 = this, Ctor = x2.constructor;
      if (sd === void 0) {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      } else {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;
        else checkInt32(rm, 0, 8);
      }
      return round(new Ctor(x2), sd, rm);
    };
    P.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for("nodejs.util.inspect.custom")] = function() {
      var x2 = this, e = getBase10Exponent(x2), Ctor = x2.constructor;
      return toString(x2, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);
    };
    function add(x2, y2) {
      var carry, d, e, i2, k2, len, xd, yd, Ctor = x2.constructor, pr = Ctor.precision;
      if (!x2.s || !y2.s) {
        if (!y2.s) y2 = new Ctor(x2);
        return external ? round(y2, pr) : y2;
      }
      xd = x2.d;
      yd = y2.d;
      k2 = x2.e;
      e = y2.e;
      xd = xd.slice();
      i2 = k2 - e;
      if (i2) {
        if (i2 < 0) {
          d = xd;
          i2 = -i2;
          len = yd.length;
        } else {
          d = yd;
          e = k2;
          len = xd.length;
        }
        k2 = Math.ceil(pr / LOG_BASE);
        len = k2 > len ? k2 + 1 : len + 1;
        if (i2 > len) {
          i2 = len;
          d.length = 1;
        }
        d.reverse();
        for (; i2--; ) d.push(0);
        d.reverse();
      }
      len = xd.length;
      i2 = yd.length;
      if (len - i2 < 0) {
        i2 = len;
        d = yd;
        yd = xd;
        xd = d;
      }
      for (carry = 0; i2; ) {
        carry = (xd[--i2] = xd[i2] + yd[i2] + carry) / BASE | 0;
        xd[i2] %= BASE;
      }
      if (carry) {
        xd.unshift(carry);
        ++e;
      }
      for (len = xd.length; xd[--len] == 0; ) xd.pop();
      y2.d = xd;
      y2.e = e;
      return external ? round(y2, pr) : y2;
    }
    function checkInt32(i2, min2, max2) {
      if (i2 !== ~~i2 || i2 < min2 || i2 > max2) {
        throw Error(invalidArgument + i2);
      }
    }
    function digitsToString(d) {
      var i2, k2, ws, indexOfLastWord = d.length - 1, str = "", w = d[0];
      if (indexOfLastWord > 0) {
        str += w;
        for (i2 = 1; i2 < indexOfLastWord; i2++) {
          ws = d[i2] + "";
          k2 = LOG_BASE - ws.length;
          if (k2) str += getZeroString(k2);
          str += ws;
        }
        w = d[i2];
        ws = w + "";
        k2 = LOG_BASE - ws.length;
        if (k2) str += getZeroString(k2);
      } else if (w === 0) {
        return "0";
      }
      for (; w % 10 === 0; ) w /= 10;
      return str + w;
    }
    var divide = /* @__PURE__ */ function() {
      function multiplyInteger(x2, k2) {
        var temp, carry = 0, i2 = x2.length;
        for (x2 = x2.slice(); i2--; ) {
          temp = x2[i2] * k2 + carry;
          x2[i2] = temp % BASE | 0;
          carry = temp / BASE | 0;
        }
        if (carry) x2.unshift(carry);
        return x2;
      }
      function compare(a2, b, aL, bL) {
        var i2, r2;
        if (aL != bL) {
          r2 = aL > bL ? 1 : -1;
        } else {
          for (i2 = r2 = 0; i2 < aL; i2++) {
            if (a2[i2] != b[i2]) {
              r2 = a2[i2] > b[i2] ? 1 : -1;
              break;
            }
          }
        }
        return r2;
      }
      function subtract2(a2, b, aL) {
        var i2 = 0;
        for (; aL--; ) {
          a2[aL] -= i2;
          i2 = a2[aL] < b[aL] ? 1 : 0;
          a2[aL] = i2 * BASE + a2[aL] - b[aL];
        }
        for (; !a2[0] && a2.length > 1; ) a2.shift();
      }
      return function(x2, y2, pr, dp) {
        var cmp, e, i2, k2, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x2.constructor, sign2 = x2.s == y2.s ? 1 : -1, xd = x2.d, yd = y2.d;
        if (!x2.s) return new Ctor(x2);
        if (!y2.s) throw Error(decimalError + "Division by zero");
        e = x2.e - y2.e;
        yL = yd.length;
        xL = xd.length;
        q = new Ctor(sign2);
        qd = q.d = [];
        for (i2 = 0; yd[i2] == (xd[i2] || 0); ) ++i2;
        if (yd[i2] > (xd[i2] || 0)) --e;
        if (pr == null) {
          sd = pr = Ctor.precision;
        } else if (dp) {
          sd = pr + (getBase10Exponent(x2) - getBase10Exponent(y2)) + 1;
        } else {
          sd = pr;
        }
        if (sd < 0) return new Ctor(0);
        sd = sd / LOG_BASE + 2 | 0;
        i2 = 0;
        if (yL == 1) {
          k2 = 0;
          yd = yd[0];
          sd++;
          for (; (i2 < xL || k2) && sd--; i2++) {
            t = k2 * BASE + (xd[i2] || 0);
            qd[i2] = t / yd | 0;
            k2 = t % yd | 0;
          }
        } else {
          k2 = BASE / (yd[0] + 1) | 0;
          if (k2 > 1) {
            yd = multiplyInteger(yd, k2);
            xd = multiplyInteger(xd, k2);
            yL = yd.length;
            xL = xd.length;
          }
          xi = yL;
          rem = xd.slice(0, yL);
          remL = rem.length;
          for (; remL < yL; ) rem[remL++] = 0;
          yz = yd.slice();
          yz.unshift(0);
          yd0 = yd[0];
          if (yd[1] >= BASE / 2) ++yd0;
          do {
            k2 = 0;
            cmp = compare(yd, rem, yL, remL);
            if (cmp < 0) {
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);
              k2 = rem0 / yd0 | 0;
              if (k2 > 1) {
                if (k2 >= BASE) k2 = BASE - 1;
                prod = multiplyInteger(yd, k2);
                prodL = prod.length;
                remL = rem.length;
                cmp = compare(prod, rem, prodL, remL);
                if (cmp == 1) {
                  k2--;
                  subtract2(prod, yL < prodL ? yz : yd, prodL);
                }
              } else {
                if (k2 == 0) cmp = k2 = 1;
                prod = yd.slice();
              }
              prodL = prod.length;
              if (prodL < remL) prod.unshift(0);
              subtract2(rem, prod, remL);
              if (cmp == -1) {
                remL = rem.length;
                cmp = compare(yd, rem, yL, remL);
                if (cmp < 1) {
                  k2++;
                  subtract2(rem, yL < remL ? yz : yd, remL);
                }
              }
              remL = rem.length;
            } else if (cmp === 0) {
              k2++;
              rem = [0];
            }
            qd[i2++] = k2;
            if (cmp && rem[0]) {
              rem[remL++] = xd[xi] || 0;
            } else {
              rem = [xd[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] !== void 0) && sd--);
        }
        if (!qd[0]) qd.shift();
        q.e = e;
        return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);
      };
    }();
    function exp(x2, sd) {
      var denominator, guard, pow2, sum2, t, wpr, i2 = 0, k2 = 0, Ctor = x2.constructor, pr = Ctor.precision;
      if (getBase10Exponent(x2) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x2));
      if (!x2.s) return new Ctor(ONE);
      {
        external = false;
        wpr = pr;
      }
      t = new Ctor(0.03125);
      while (x2.abs().gte(0.1)) {
        x2 = x2.times(t);
        k2 += 5;
      }
      guard = Math.log(mathpow(2, k2)) / Math.LN10 * 2 + 5 | 0;
      wpr += guard;
      denominator = pow2 = sum2 = new Ctor(ONE);
      Ctor.precision = wpr;
      for (; ; ) {
        pow2 = round(pow2.times(x2), wpr);
        denominator = denominator.times(++i2);
        t = sum2.plus(divide(pow2, denominator, wpr));
        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum2.d).slice(0, wpr)) {
          while (k2--) sum2 = round(sum2.times(sum2), wpr);
          Ctor.precision = pr;
          return sd == null ? (external = true, round(sum2, pr)) : sum2;
        }
        sum2 = t;
      }
    }
    function getBase10Exponent(x2) {
      var e = x2.e * LOG_BASE, w = x2.d[0];
      for (; w >= 10; w /= 10) e++;
      return e;
    }
    function getLn10(Ctor, sd, pr) {
      if (sd > Ctor.LN10.sd()) {
        external = true;
        if (pr) Ctor.precision = pr;
        throw Error(decimalError + "LN10 precision limit exceeded");
      }
      return round(new Ctor(Ctor.LN10), sd);
    }
    function getZeroString(k2) {
      var zs = "";
      for (; k2--; ) zs += "0";
      return zs;
    }
    function ln(y2, sd) {
      var c2, c0, denominator, e, numerator, sum2, t, wpr, x2, n2 = 1, guard = 10, x3 = y2, xd = x3.d, Ctor = x3.constructor, pr = Ctor.precision;
      if (x3.s < 1) throw Error(decimalError + (x3.s ? "NaN" : "-Infinity"));
      if (x3.eq(ONE)) return new Ctor(0);
      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }
      if (x3.eq(10)) {
        if (sd == null) external = true;
        return getLn10(Ctor, wpr);
      }
      wpr += guard;
      Ctor.precision = wpr;
      c2 = digitsToString(xd);
      c0 = c2.charAt(0);
      e = getBase10Exponent(x3);
      if (Math.abs(e) < 15e14) {
        while (c0 < 7 && c0 != 1 || c0 == 1 && c2.charAt(1) > 3) {
          x3 = x3.times(y2);
          c2 = digitsToString(x3.d);
          c0 = c2.charAt(0);
          n2++;
        }
        e = getBase10Exponent(x3);
        if (c0 > 1) {
          x3 = new Ctor("0." + c2);
          e++;
        } else {
          x3 = new Ctor(c0 + "." + c2.slice(1));
        }
      } else {
        t = getLn10(Ctor, wpr + 2, pr).times(e + "");
        x3 = ln(new Ctor(c0 + "." + c2.slice(1)), wpr - guard).plus(t);
        Ctor.precision = pr;
        return sd == null ? (external = true, round(x3, pr)) : x3;
      }
      sum2 = numerator = x3 = divide(x3.minus(ONE), x3.plus(ONE), wpr);
      x2 = round(x3.times(x3), wpr);
      denominator = 3;
      for (; ; ) {
        numerator = round(numerator.times(x2), wpr);
        t = sum2.plus(divide(numerator, new Ctor(denominator), wpr));
        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum2.d).slice(0, wpr)) {
          sum2 = sum2.times(2);
          if (e !== 0) sum2 = sum2.plus(getLn10(Ctor, wpr + 2, pr).times(e + ""));
          sum2 = divide(sum2, new Ctor(n2), wpr);
          Ctor.precision = pr;
          return sd == null ? (external = true, round(sum2, pr)) : sum2;
        }
        sum2 = t;
        denominator += 2;
      }
    }
    function parseDecimal(x2, str) {
      var e, i2, len;
      if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
      if ((i2 = str.search(/e/i)) > 0) {
        if (e < 0) e = i2;
        e += +str.slice(i2 + 1);
        str = str.substring(0, i2);
      } else if (e < 0) {
        e = str.length;
      }
      for (i2 = 0; str.charCodeAt(i2) === 48; ) ++i2;
      for (len = str.length; str.charCodeAt(len - 1) === 48; ) --len;
      str = str.slice(i2, len);
      if (str) {
        len -= i2;
        e = e - i2 - 1;
        x2.e = mathfloor(e / LOG_BASE);
        x2.d = [];
        i2 = (e + 1) % LOG_BASE;
        if (e < 0) i2 += LOG_BASE;
        if (i2 < len) {
          if (i2) x2.d.push(+str.slice(0, i2));
          for (len -= LOG_BASE; i2 < len; ) x2.d.push(+str.slice(i2, i2 += LOG_BASE));
          str = str.slice(i2);
          i2 = LOG_BASE - str.length;
        } else {
          i2 -= len;
        }
        for (; i2--; ) str += "0";
        x2.d.push(+str);
        if (external && (x2.e > MAX_E || x2.e < -MAX_E)) throw Error(exponentOutOfRange + e);
      } else {
        x2.s = 0;
        x2.e = 0;
        x2.d = [0];
      }
      return x2;
    }
    function round(x2, sd, rm) {
      var i2, j, k2, n2, rd, doRound, w, xdi, xd = x2.d;
      for (n2 = 1, k2 = xd[0]; k2 >= 10; k2 /= 10) n2++;
      i2 = sd - n2;
      if (i2 < 0) {
        i2 += LOG_BASE;
        j = sd;
        w = xd[xdi = 0];
      } else {
        xdi = Math.ceil((i2 + 1) / LOG_BASE);
        k2 = xd.length;
        if (xdi >= k2) return x2;
        w = k2 = xd[xdi];
        for (n2 = 1; k2 >= 10; k2 /= 10) n2++;
        i2 %= LOG_BASE;
        j = i2 - LOG_BASE + n2;
      }
      if (rm !== void 0) {
        k2 = mathpow(10, n2 - j - 1);
        rd = w / k2 % 10 | 0;
        doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k2;
        doRound = rm < 4 ? (rd || doRound) && (rm == 0 || rm == (x2.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
        (i2 > 0 ? j > 0 ? w / mathpow(10, n2 - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x2.s < 0 ? 8 : 7));
      }
      if (sd < 1 || !xd[0]) {
        if (doRound) {
          k2 = getBase10Exponent(x2);
          xd.length = 1;
          sd = sd - k2 - 1;
          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
          x2.e = mathfloor(-sd / LOG_BASE) || 0;
        } else {
          xd.length = 1;
          xd[0] = x2.e = x2.s = 0;
        }
        return x2;
      }
      if (i2 == 0) {
        xd.length = xdi;
        k2 = 1;
        xdi--;
      } else {
        xd.length = xdi + 1;
        k2 = mathpow(10, LOG_BASE - i2);
        xd[xdi] = j > 0 ? (w / mathpow(10, n2 - j) % mathpow(10, j) | 0) * k2 : 0;
      }
      if (doRound) {
        for (; ; ) {
          if (xdi == 0) {
            if ((xd[0] += k2) == BASE) {
              xd[0] = 1;
              ++x2.e;
            }
            break;
          } else {
            xd[xdi] += k2;
            if (xd[xdi] != BASE) break;
            xd[xdi--] = 0;
            k2 = 1;
          }
        }
      }
      for (i2 = xd.length; xd[--i2] === 0; ) xd.pop();
      if (external && (x2.e > MAX_E || x2.e < -MAX_E)) {
        throw Error(exponentOutOfRange + getBase10Exponent(x2));
      }
      return x2;
    }
    function subtract(x2, y2) {
      var d, e, i2, j, k2, len, xd, xe2, xLTy, yd, Ctor = x2.constructor, pr = Ctor.precision;
      if (!x2.s || !y2.s) {
        if (y2.s) y2.s = -y2.s;
        else y2 = new Ctor(x2);
        return external ? round(y2, pr) : y2;
      }
      xd = x2.d;
      yd = y2.d;
      e = y2.e;
      xe2 = x2.e;
      xd = xd.slice();
      k2 = xe2 - e;
      if (k2) {
        xLTy = k2 < 0;
        if (xLTy) {
          d = xd;
          k2 = -k2;
          len = yd.length;
        } else {
          d = yd;
          e = xe2;
          len = xd.length;
        }
        i2 = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
        if (k2 > i2) {
          k2 = i2;
          d.length = 1;
        }
        d.reverse();
        for (i2 = k2; i2--; ) d.push(0);
        d.reverse();
      } else {
        i2 = xd.length;
        len = yd.length;
        xLTy = i2 < len;
        if (xLTy) len = i2;
        for (i2 = 0; i2 < len; i2++) {
          if (xd[i2] != yd[i2]) {
            xLTy = xd[i2] < yd[i2];
            break;
          }
        }
        k2 = 0;
      }
      if (xLTy) {
        d = xd;
        xd = yd;
        yd = d;
        y2.s = -y2.s;
      }
      len = xd.length;
      for (i2 = yd.length - len; i2 > 0; --i2) xd[len++] = 0;
      for (i2 = yd.length; i2 > k2; ) {
        if (xd[--i2] < yd[i2]) {
          for (j = i2; j && xd[--j] === 0; ) xd[j] = BASE - 1;
          --xd[j];
          xd[i2] += BASE;
        }
        xd[i2] -= yd[i2];
      }
      for (; xd[--len] === 0; ) xd.pop();
      for (; xd[0] === 0; xd.shift()) --e;
      if (!xd[0]) return new Ctor(0);
      y2.d = xd;
      y2.e = e;
      return external ? round(y2, pr) : y2;
    }
    function toString(x2, isExp, sd) {
      var k2, e = getBase10Exponent(x2), str = digitsToString(x2.d), len = str.length;
      if (isExp) {
        if (sd && (k2 = sd - len) > 0) {
          str = str.charAt(0) + "." + str.slice(1) + getZeroString(k2);
        } else if (len > 1) {
          str = str.charAt(0) + "." + str.slice(1);
        }
        str = str + (e < 0 ? "e" : "e+") + e;
      } else if (e < 0) {
        str = "0." + getZeroString(-e - 1) + str;
        if (sd && (k2 = sd - len) > 0) str += getZeroString(k2);
      } else if (e >= len) {
        str += getZeroString(e + 1 - len);
        if (sd && (k2 = sd - e - 1) > 0) str = str + "." + getZeroString(k2);
      } else {
        if ((k2 = e + 1) < len) str = str.slice(0, k2) + "." + str.slice(k2);
        if (sd && (k2 = sd - len) > 0) {
          if (e + 1 === len) str += ".";
          str += getZeroString(k2);
        }
      }
      return x2.s < 0 ? "-" + str : str;
    }
    function truncate(arr, len) {
      if (arr.length > len) {
        arr.length = len;
        return true;
      }
    }
    function clone(obj) {
      var i2, p2, ps;
      function Decimal2(value) {
        var x2 = this;
        if (!(x2 instanceof Decimal2)) return new Decimal2(value);
        x2.constructor = Decimal2;
        if (value instanceof Decimal2) {
          x2.s = value.s;
          x2.e = value.e;
          x2.d = (value = value.d) ? value.slice() : value;
          return;
        }
        if (typeof value === "number") {
          if (value * 0 !== 0) {
            throw Error(invalidArgument + value);
          }
          if (value > 0) {
            x2.s = 1;
          } else if (value < 0) {
            value = -value;
            x2.s = -1;
          } else {
            x2.s = 0;
            x2.e = 0;
            x2.d = [0];
            return;
          }
          if (value === ~~value && value < 1e7) {
            x2.e = 0;
            x2.d = [value];
            return;
          }
          return parseDecimal(x2, value.toString());
        } else if (typeof value !== "string") {
          throw Error(invalidArgument + value);
        }
        if (value.charCodeAt(0) === 45) {
          value = value.slice(1);
          x2.s = -1;
        } else {
          x2.s = 1;
        }
        if (isDecimal.test(value)) parseDecimal(x2, value);
        else throw Error(invalidArgument + value);
      }
      Decimal2.prototype = P;
      Decimal2.ROUND_UP = 0;
      Decimal2.ROUND_DOWN = 1;
      Decimal2.ROUND_CEIL = 2;
      Decimal2.ROUND_FLOOR = 3;
      Decimal2.ROUND_HALF_UP = 4;
      Decimal2.ROUND_HALF_DOWN = 5;
      Decimal2.ROUND_HALF_EVEN = 6;
      Decimal2.ROUND_HALF_CEIL = 7;
      Decimal2.ROUND_HALF_FLOOR = 8;
      Decimal2.clone = clone;
      Decimal2.config = Decimal2.set = config;
      if (obj === void 0) obj = {};
      if (obj) {
        ps = ["precision", "rounding", "toExpNeg", "toExpPos", "LN10"];
        for (i2 = 0; i2 < ps.length; ) if (!obj.hasOwnProperty(p2 = ps[i2++])) obj[p2] = this[p2];
      }
      Decimal2.config(obj);
      return Decimal2;
    }
    function config(obj) {
      if (!obj || typeof obj !== "object") {
        throw Error(decimalError + "Object expected");
      }
      var i2, p2, v, ps = [
        "precision",
        1,
        MAX_DIGITS,
        "rounding",
        0,
        8,
        "toExpNeg",
        -1 / 0,
        0,
        "toExpPos",
        0,
        1 / 0
      ];
      for (i2 = 0; i2 < ps.length; i2 += 3) {
        if ((v = obj[p2 = ps[i2]]) !== void 0) {
          if (mathfloor(v) === v && v >= ps[i2 + 1] && v <= ps[i2 + 2]) this[p2] = v;
          else throw Error(invalidArgument + p2 + ": " + v);
        }
      }
      if ((v = obj[p2 = "LN10"]) !== void 0) {
        if (v == Math.LN10) this[p2] = new this(v);
        else throw Error(invalidArgument + p2 + ": " + v);
      }
      return this;
    }
    var Decimal = clone(defaults);
    ONE = new Decimal(1);
    const Decimal$1 = Decimal;
    function _toConsumableArray$9(arr) {
      return _arrayWithoutHoles$9(arr) || _iterableToArray$a(arr) || _unsupportedIterableToArray$e(arr) || _nonIterableSpread$9();
    }
    function _nonIterableSpread$9() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$e(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$e(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$e(o2, minLen);
    }
    function _iterableToArray$a(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
    }
    function _arrayWithoutHoles$9(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray$e(arr);
    }
    function _arrayLikeToArray$e(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    var identity$1 = function identity2(i2) {
      return i2;
    };
    var PLACE_HOLDER = {};
    var isPlaceHolder = function isPlaceHolder2(val) {
      return val === PLACE_HOLDER;
    };
    var curry0 = function curry02(fn) {
      return function _curried() {
        if (arguments.length === 0 || arguments.length === 1 && isPlaceHolder(arguments.length <= 0 ? void 0 : arguments[0])) {
          return _curried;
        }
        return fn.apply(void 0, arguments);
      };
    };
    var curryN = function curryN2(n2, fn) {
      if (n2 === 1) {
        return fn;
      }
      return curry0(function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var argsLength = args.filter(function(arg) {
          return arg !== PLACE_HOLDER;
        }).length;
        if (argsLength >= n2) {
          return fn.apply(void 0, args);
        }
        return curryN2(n2 - argsLength, curry0(function() {
          for (var _len2 = arguments.length, restArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            restArgs[_key2] = arguments[_key2];
          }
          var newArgs = args.map(function(arg) {
            return isPlaceHolder(arg) ? restArgs.shift() : arg;
          });
          return fn.apply(void 0, _toConsumableArray$9(newArgs).concat(restArgs));
        }));
      });
    };
    var curry = function curry2(fn) {
      return curryN(fn.length, fn);
    };
    var range$1 = function range2(begin, end) {
      var arr = [];
      for (var i2 = begin; i2 < end; ++i2) {
        arr[i2 - begin] = i2;
      }
      return arr;
    };
    var map = curry(function(fn, arr) {
      if (Array.isArray(arr)) {
        return arr.map(fn);
      }
      return Object.keys(arr).map(function(key) {
        return arr[key];
      }).map(fn);
    });
    var compose = function compose2() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      if (!args.length) {
        return identity$1;
      }
      var fns = args.reverse();
      var firstFn = fns[0];
      var tailsFn = fns.slice(1);
      return function() {
        return tailsFn.reduce(function(res, fn) {
          return fn(res);
        }, firstFn.apply(void 0, arguments));
      };
    };
    var reverse = function reverse2(arr) {
      if (Array.isArray(arr)) {
        return arr.reverse();
      }
      return arr.split("").reverse.join("");
    };
    var memoize$1 = function memoize2(fn) {
      var lastArgs = null;
      var lastResult2 = null;
      return function() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        if (lastArgs && args.every(function(val, i2) {
          return val === lastArgs[i2];
        })) {
          return lastResult2;
        }
        lastArgs = args;
        lastResult2 = fn.apply(void 0, args);
        return lastResult2;
      };
    };
    function getDigitCount(value) {
      var result;
      if (value === 0) {
        result = 1;
      } else {
        result = Math.floor(new Decimal$1(value).abs().log(10).toNumber()) + 1;
      }
      return result;
    }
    function rangeStep(start, end, step) {
      var num = new Decimal$1(start);
      var i2 = 0;
      var result = [];
      while (num.lt(end) && i2 < 1e5) {
        result.push(num.toNumber());
        num = num.add(step);
        i2++;
      }
      return result;
    }
    var interpolateNumber = curry(function(a2, b, t) {
      var newA = +a2;
      var newB = +b;
      return newA + t * (newB - newA);
    });
    var uninterpolateNumber = curry(function(a2, b, x2) {
      var diff2 = b - +a2;
      diff2 = diff2 || Infinity;
      return (x2 - a2) / diff2;
    });
    var uninterpolateTruncation = curry(function(a2, b, x2) {
      var diff2 = b - +a2;
      diff2 = diff2 || Infinity;
      return Math.max(0, Math.min(1, (x2 - a2) / diff2));
    });
    const Arithmetic = {
      rangeStep,
      getDigitCount,
      interpolateNumber,
      uninterpolateNumber,
      uninterpolateTruncation
    };
    function _toConsumableArray$8(arr) {
      return _arrayWithoutHoles$8(arr) || _iterableToArray$9(arr) || _unsupportedIterableToArray$d(arr) || _nonIterableSpread$8();
    }
    function _nonIterableSpread$8() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArray$9(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
    }
    function _arrayWithoutHoles$8(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray$d(arr);
    }
    function _slicedToArray$7(arr, i2) {
      return _arrayWithHoles$8(arr) || _iterableToArrayLimit$7(arr, i2) || _unsupportedIterableToArray$d(arr, i2) || _nonIterableRest$8();
    }
    function _nonIterableRest$8() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$d(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$d(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$d(o2, minLen);
    }
    function _arrayLikeToArray$d(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    function _iterableToArrayLimit$7(arr, i2) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d2 = false;
      var _e3 = void 0;
      try {
        for (var _i2 = arr[Symbol.iterator](), _s; !(_n = (_s = _i2.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2) break;
        }
      } catch (err) {
        _d2 = true;
        _e3 = err;
      } finally {
        try {
          if (!_n && _i2["return"] != null) _i2["return"]();
        } finally {
          if (_d2) throw _e3;
        }
      }
      return _arr;
    }
    function _arrayWithHoles$8(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function getValidInterval(_ref) {
      var _ref2 = _slicedToArray$7(_ref, 2), min2 = _ref2[0], max2 = _ref2[1];
      var validMin = min2, validMax = max2;
      if (min2 > max2) {
        validMin = max2;
        validMax = min2;
      }
      return [validMin, validMax];
    }
    function getFormatStep(roughStep, allowDecimals, correctionFactor) {
      if (roughStep.lte(0)) {
        return new Decimal$1(0);
      }
      var digitCount = Arithmetic.getDigitCount(roughStep.toNumber());
      var digitCountValue = new Decimal$1(10).pow(digitCount);
      var stepRatio = roughStep.div(digitCountValue);
      var stepRatioScale = digitCount !== 1 ? 0.05 : 0.1;
      var amendStepRatio = new Decimal$1(Math.ceil(stepRatio.div(stepRatioScale).toNumber())).add(correctionFactor).mul(stepRatioScale);
      var formatStep = amendStepRatio.mul(digitCountValue);
      return allowDecimals ? formatStep : new Decimal$1(Math.ceil(formatStep));
    }
    function getTickOfSingleValue(value, tickCount, allowDecimals) {
      var step = 1;
      var middle = new Decimal$1(value);
      if (!middle.isint() && allowDecimals) {
        var absVal = Math.abs(value);
        if (absVal < 1) {
          step = new Decimal$1(10).pow(Arithmetic.getDigitCount(value) - 1);
          middle = new Decimal$1(Math.floor(middle.div(step).toNumber())).mul(step);
        } else if (absVal > 1) {
          middle = new Decimal$1(Math.floor(value));
        }
      } else if (value === 0) {
        middle = new Decimal$1(Math.floor((tickCount - 1) / 2));
      } else if (!allowDecimals) {
        middle = new Decimal$1(Math.floor(value));
      }
      var middleIndex = Math.floor((tickCount - 1) / 2);
      var fn = compose(map(function(n2) {
        return middle.add(new Decimal$1(n2 - middleIndex).mul(step)).toNumber();
      }), range$1);
      return fn(0, tickCount);
    }
    function calculateStep(min2, max2, tickCount, allowDecimals) {
      var correctionFactor = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
      if (!Number.isFinite((max2 - min2) / (tickCount - 1))) {
        return {
          step: new Decimal$1(0),
          tickMin: new Decimal$1(0),
          tickMax: new Decimal$1(0)
        };
      }
      var step = getFormatStep(new Decimal$1(max2).sub(min2).div(tickCount - 1), allowDecimals, correctionFactor);
      var middle;
      if (min2 <= 0 && max2 >= 0) {
        middle = new Decimal$1(0);
      } else {
        middle = new Decimal$1(min2).add(max2).div(2);
        middle = middle.sub(new Decimal$1(middle).mod(step));
      }
      var belowCount = Math.ceil(middle.sub(min2).div(step).toNumber());
      var upCount = Math.ceil(new Decimal$1(max2).sub(middle).div(step).toNumber());
      var scaleCount = belowCount + upCount + 1;
      if (scaleCount > tickCount) {
        return calculateStep(min2, max2, tickCount, allowDecimals, correctionFactor + 1);
      }
      if (scaleCount < tickCount) {
        upCount = max2 > 0 ? upCount + (tickCount - scaleCount) : upCount;
        belowCount = max2 > 0 ? belowCount : belowCount + (tickCount - scaleCount);
      }
      return {
        step,
        tickMin: middle.sub(new Decimal$1(belowCount).mul(step)),
        tickMax: middle.add(new Decimal$1(upCount).mul(step))
      };
    }
    function getNiceTickValuesFn(_ref3) {
      var _ref4 = _slicedToArray$7(_ref3, 2), min2 = _ref4[0], max2 = _ref4[1];
      var tickCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 6;
      var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var count2 = Math.max(tickCount, 2);
      var _getValidInterval = getValidInterval([min2, max2]), _getValidInterval2 = _slicedToArray$7(_getValidInterval, 2), cormin = _getValidInterval2[0], cormax = _getValidInterval2[1];
      if (cormin === -Infinity || cormax === Infinity) {
        var _values = cormax === Infinity ? [cormin].concat(_toConsumableArray$8(range$1(0, tickCount - 1).map(function() {
          return Infinity;
        }))) : [].concat(_toConsumableArray$8(range$1(0, tickCount - 1).map(function() {
          return -Infinity;
        })), [cormax]);
        return min2 > max2 ? reverse(_values) : _values;
      }
      if (cormin === cormax) {
        return getTickOfSingleValue(cormin, tickCount, allowDecimals);
      }
      var _calculateStep = calculateStep(cormin, cormax, count2, allowDecimals), step = _calculateStep.step, tickMin = _calculateStep.tickMin, tickMax = _calculateStep.tickMax;
      var values = Arithmetic.rangeStep(tickMin, tickMax.add(new Decimal$1(0.1).mul(step)), step);
      return min2 > max2 ? reverse(values) : values;
    }
    function getTickValuesFixedDomainFn(_ref7, tickCount) {
      var _ref8 = _slicedToArray$7(_ref7, 2), min2 = _ref8[0], max2 = _ref8[1];
      var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var _getValidInterval5 = getValidInterval([min2, max2]), _getValidInterval6 = _slicedToArray$7(_getValidInterval5, 2), cormin = _getValidInterval6[0], cormax = _getValidInterval6[1];
      if (cormin === -Infinity || cormax === Infinity) {
        return [min2, max2];
      }
      if (cormin === cormax) {
        return [cormin];
      }
      var count2 = Math.max(tickCount, 2);
      var step = getFormatStep(new Decimal$1(cormax).sub(cormin).div(count2 - 1), allowDecimals, 0);
      var values = [].concat(_toConsumableArray$8(Arithmetic.rangeStep(new Decimal$1(cormin), new Decimal$1(cormax).sub(new Decimal$1(0.99).mul(step)), step)), [cormax]);
      return min2 > max2 ? reverse(values) : values;
    }
    var getNiceTickValues = memoize$1(getNiceTickValuesFn);
    var getTickValuesFixedDomain = memoize$1(getTickValuesFixedDomainFn);
    var prefix = "Invariant failed";
    function invariant(condition, message) {
      {
        throw new Error(prefix);
      }
    }
    var _excluded$a = ["offset", "layout", "width", "dataKey", "data", "dataPointFormatter", "xAxis", "yAxis"];
    function _typeof$v(o2) {
      "@babel/helpers - typeof";
      return _typeof$v = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o22) {
        return typeof o22;
      } : function(o22) {
        return o22 && "function" == typeof Symbol && o22.constructor === Symbol && o22 !== Symbol.prototype ? "symbol" : typeof o22;
      }, _typeof$v(o2);
    }
    function _extends$j() {
      _extends$j = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$j.apply(this, arguments);
    }
    function _slicedToArray$6(arr, i2) {
      return _arrayWithHoles$7(arr) || _iterableToArrayLimit$6(arr, i2) || _unsupportedIterableToArray$c(arr, i2) || _nonIterableRest$7();
    }
    function _nonIterableRest$7() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$c(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$c(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$c(o2, minLen);
    }
    function _arrayLikeToArray$c(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$6(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n2, i2, u2, a2 = [], f = true, o2 = false;
        try {
          if (i2 = (t = t.call(r2)).next, 0 === l) ;
          else for (; !(f = (e = i2.call(t)).done) && (a2.push(e.value), a2.length !== l); f = true) ;
        } catch (r22) {
          o2 = true, n2 = r22;
        } finally {
          try {
            if (!f && null != t["return"] && (u2 = t["return"](), Object(u2) !== u2)) return;
          } finally {
            if (o2) throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$7(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _objectWithoutProperties$a(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$a(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$a(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _classCallCheck$c(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$c(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$u(descriptor.key), descriptor);
      }
    }
    function _createClass$c(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$c(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$9(t, o2, e) {
      return o2 = _getPrototypeOf$a(o2), _possibleConstructorReturn$a(t, _isNativeReflectConstruct$a() ? Reflect.construct(o2, e || [], _getPrototypeOf$a(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$a(self2, call) {
      if (call && (_typeof$v(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$a(self2);
    }
    function _assertThisInitialized$a(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$a() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$a = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$a(o2) {
      _getPrototypeOf$a = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o22) {
        return o22.__proto__ || Object.getPrototypeOf(o22);
      };
      return _getPrototypeOf$a(o2);
    }
    function _inherits$a(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$a(subClass, superClass);
    }
    function _setPrototypeOf$a(o2, p2) {
      _setPrototypeOf$a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o22, p22) {
        o22.__proto__ = p22;
        return o22;
      };
      return _setPrototypeOf$a(o2, p2);
    }
    function _defineProperty$u(obj, key, value) {
      key = _toPropertyKey$u(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$u(t) {
      var i2 = _toPrimitive$u(t, "string");
      return "symbol" == _typeof$v(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$u(t, r2) {
      if ("object" != _typeof$v(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$v(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    var ErrorBar = /* @__PURE__ */ function(_React$Component) {
      function ErrorBar2() {
        _classCallCheck$c(this, ErrorBar2);
        return _callSuper$9(this, ErrorBar2, arguments);
      }
      _inherits$a(ErrorBar2, _React$Component);
      return _createClass$c(ErrorBar2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, offset2 = _this$props.offset, layout = _this$props.layout, width = _this$props.width, dataKey = _this$props.dataKey, data = _this$props.data, dataPointFormatter = _this$props.dataPointFormatter, xAxis = _this$props.xAxis, yAxis = _this$props.yAxis, others = _objectWithoutProperties$a(_this$props, _excluded$a);
          var svgProps = filterProps(others, false);
          !!(this.props.direction === "x" && xAxis.type !== "number") ? invariant() : void 0;
          var errorBars = data.map(function(entry) {
            var _dataPointFormatter = dataPointFormatter(entry, dataKey), x2 = _dataPointFormatter.x, y2 = _dataPointFormatter.y, value = _dataPointFormatter.value, errorVal = _dataPointFormatter.errorVal;
            if (!errorVal) {
              return null;
            }
            var lineCoordinates = [];
            var lowBound, highBound;
            if (Array.isArray(errorVal)) {
              var _errorVal = _slicedToArray$6(errorVal, 2);
              lowBound = _errorVal[0];
              highBound = _errorVal[1];
            } else {
              lowBound = highBound = errorVal;
            }
            if (layout === "vertical") {
              var scale = xAxis.scale;
              var yMid = y2 + offset2;
              var yMin = yMid + width;
              var yMax = yMid - width;
              var xMin = scale(value - lowBound);
              var xMax = scale(value + highBound);
              lineCoordinates.push({
                x1: xMax,
                y1: yMin,
                x2: xMax,
                y2: yMax
              });
              lineCoordinates.push({
                x1: xMin,
                y1: yMid,
                x2: xMax,
                y2: yMid
              });
              lineCoordinates.push({
                x1: xMin,
                y1: yMin,
                x2: xMin,
                y2: yMax
              });
            } else if (layout === "horizontal") {
              var _scale = yAxis.scale;
              var xMid = x2 + offset2;
              var _xMin = xMid - width;
              var _xMax = xMid + width;
              var _yMin = _scale(value - lowBound);
              var _yMax = _scale(value + highBound);
              lineCoordinates.push({
                x1: _xMin,
                y1: _yMax,
                x2: _xMax,
                y2: _yMax
              });
              lineCoordinates.push({
                x1: xMid,
                y1: _yMin,
                x2: xMid,
                y2: _yMax
              });
              lineCoordinates.push({
                x1: _xMin,
                y1: _yMin,
                x2: _xMax,
                y2: _yMin
              });
            }
            return /* @__PURE__ */ React.createElement(Layer, _extends$j({
              className: "recharts-errorBar",
              key: "bar-".concat(lineCoordinates.map(function(c2) {
                return "".concat(c2.x1, "-").concat(c2.x2, "-").concat(c2.y1, "-").concat(c2.y2);
              }))
            }, svgProps), lineCoordinates.map(function(coordinates) {
              return /* @__PURE__ */ React.createElement("line", _extends$j({}, coordinates, {
                key: "line-".concat(coordinates.x1, "-").concat(coordinates.x2, "-").concat(coordinates.y1, "-").concat(coordinates.y2)
              }));
            }));
          });
          return /* @__PURE__ */ React.createElement(Layer, {
            className: "recharts-errorBars"
          }, errorBars);
        }
      }]);
    }(React.Component);
    _defineProperty$u(ErrorBar, "defaultProps", {
      stroke: "black",
      strokeWidth: 1.5,
      width: 5,
      offset: 0,
      layout: "horizontal"
    });
    _defineProperty$u(ErrorBar, "displayName", "ErrorBar");
    function _typeof$u(o2) {
      "@babel/helpers - typeof";
      return _typeof$u = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$u(o2);
    }
    function ownKeys$q(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$q(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$q(Object(t), true).forEach(function(r3) {
          _defineProperty$t(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$q(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$t(obj, key, value) {
      key = _toPropertyKey$t(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$t(t) {
      var i2 = _toPrimitive$t(t, "string");
      return "symbol" == _typeof$u(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$t(t, r2) {
      if ("object" != _typeof$u(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$u(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    var getLegendProps = function getLegendProps2(_ref) {
      var children = _ref.children, formattedGraphicalItems = _ref.formattedGraphicalItems, legendWidth = _ref.legendWidth, legendContent = _ref.legendContent;
      var legendItem = findChildByType(children, Legend);
      if (!legendItem) {
        return null;
      }
      var legendDefaultProps = Legend.defaultProps;
      var legendProps = legendDefaultProps !== void 0 ? _objectSpread$q(_objectSpread$q({}, legendDefaultProps), legendItem.props) : {};
      var legendData;
      if (legendItem.props && legendItem.props.payload) {
        legendData = legendItem.props && legendItem.props.payload;
      } else if (legendContent === "children") {
        legendData = (formattedGraphicalItems || []).reduce(function(result, _ref2) {
          var item = _ref2.item, props = _ref2.props;
          var data = props.sectors || props.data || [];
          return result.concat(data.map(function(entry) {
            return {
              type: legendItem.props.iconType || item.props.legendType,
              value: entry.name,
              color: entry.fill,
              payload: entry
            };
          }));
        }, []);
      } else {
        legendData = (formattedGraphicalItems || []).map(function(_ref3) {
          var item = _ref3.item;
          var itemDefaultProps = item.type.defaultProps;
          var itemProps = itemDefaultProps !== void 0 ? _objectSpread$q(_objectSpread$q({}, itemDefaultProps), item.props) : {};
          var dataKey = itemProps.dataKey, name = itemProps.name, legendType = itemProps.legendType, hide2 = itemProps.hide;
          return {
            inactive: hide2,
            dataKey,
            type: legendProps.iconType || legendType || "square",
            color: getMainColorOfGraphicItem(item),
            value: name || dataKey,
            // @ts-expect-error property strokeDasharray is required in Payload but optional in props
            payload: itemProps
          };
        });
      }
      return _objectSpread$q(_objectSpread$q(_objectSpread$q({}, legendProps), Legend.getWithHeight(legendItem, legendWidth)), {}, {
        payload: legendData,
        item: legendItem
      });
    };
    function _typeof$t(o2) {
      "@babel/helpers - typeof";
      return _typeof$t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$t(o2);
    }
    function _toConsumableArray$7(arr) {
      return _arrayWithoutHoles$7(arr) || _iterableToArray$8(arr) || _unsupportedIterableToArray$b(arr) || _nonIterableSpread$7();
    }
    function _nonIterableSpread$7() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$b(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$b(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$b(o2, minLen);
    }
    function _iterableToArray$8(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _arrayWithoutHoles$7(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray$b(arr);
    }
    function _arrayLikeToArray$b(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function ownKeys$p(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$p(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$p(Object(t), true).forEach(function(r3) {
          _defineProperty$s(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$p(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$s(obj, key, value) {
      key = _toPropertyKey$s(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$s(t) {
      var i2 = _toPrimitive$s(t, "string");
      return "symbol" == _typeof$t(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$s(t, r2) {
      if ("object" != _typeof$t(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$t(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function getValueByDataKey(obj, dataKey, defaultValue) {
      if (isNil(obj) || isNil(dataKey)) {
        return defaultValue;
      }
      if (isNumOrStr(dataKey)) {
        return get(obj, dataKey, defaultValue);
      }
      if (isFunction(dataKey)) {
        return dataKey(obj);
      }
      return defaultValue;
    }
    function getDomainOfDataByKey(data, key, type, filterNil) {
      var flattenData = flatMap(data, function(entry) {
        return getValueByDataKey(entry, key);
      });
      if (type === "number") {
        var domain = flattenData.filter(function(entry) {
          return isNumber(entry) || parseFloat(entry);
        });
        return domain.length ? [min(domain), max(domain)] : [Infinity, -Infinity];
      }
      var validateData = filterNil ? flattenData.filter(function(entry) {
        return !isNil(entry);
      }) : flattenData;
      return validateData.map(function(entry) {
        return isNumOrStr(entry) || entry instanceof Date ? entry : "";
      });
    }
    var calculateActiveTickIndex = function calculateActiveTickIndex2(coordinate) {
      var _ticks$length;
      var ticks2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var unsortedTicks = arguments.length > 2 ? arguments[2] : void 0;
      var axis = arguments.length > 3 ? arguments[3] : void 0;
      var index2 = -1;
      var len = (_ticks$length = ticks2 === null || ticks2 === void 0 ? void 0 : ticks2.length) !== null && _ticks$length !== void 0 ? _ticks$length : 0;
      if (len <= 1) {
        return 0;
      }
      if (axis && axis.axisType === "angleAxis" && Math.abs(Math.abs(axis.range[1] - axis.range[0]) - 360) <= 1e-6) {
        var range2 = axis.range;
        for (var i2 = 0; i2 < len; i2++) {
          var before = i2 > 0 ? unsortedTicks[i2 - 1].coordinate : unsortedTicks[len - 1].coordinate;
          var cur = unsortedTicks[i2].coordinate;
          var after = i2 >= len - 1 ? unsortedTicks[0].coordinate : unsortedTicks[i2 + 1].coordinate;
          var sameDirectionCoord = void 0;
          if (mathSign(cur - before) !== mathSign(after - cur)) {
            var diffInterval = [];
            if (mathSign(after - cur) === mathSign(range2[1] - range2[0])) {
              sameDirectionCoord = after;
              var curInRange = cur + range2[1] - range2[0];
              diffInterval[0] = Math.min(curInRange, (curInRange + before) / 2);
              diffInterval[1] = Math.max(curInRange, (curInRange + before) / 2);
            } else {
              sameDirectionCoord = before;
              var afterInRange = after + range2[1] - range2[0];
              diffInterval[0] = Math.min(cur, (afterInRange + cur) / 2);
              diffInterval[1] = Math.max(cur, (afterInRange + cur) / 2);
            }
            var sameInterval = [Math.min(cur, (sameDirectionCoord + cur) / 2), Math.max(cur, (sameDirectionCoord + cur) / 2)];
            if (coordinate > sameInterval[0] && coordinate <= sameInterval[1] || coordinate >= diffInterval[0] && coordinate <= diffInterval[1]) {
              index2 = unsortedTicks[i2].index;
              break;
            }
          } else {
            var minValue = Math.min(before, after);
            var maxValue = Math.max(before, after);
            if (coordinate > (minValue + cur) / 2 && coordinate <= (maxValue + cur) / 2) {
              index2 = unsortedTicks[i2].index;
              break;
            }
          }
        }
      } else {
        for (var _i2 = 0; _i2 < len; _i2++) {
          if (_i2 === 0 && coordinate <= (ticks2[_i2].coordinate + ticks2[_i2 + 1].coordinate) / 2 || _i2 > 0 && _i2 < len - 1 && coordinate > (ticks2[_i2].coordinate + ticks2[_i2 - 1].coordinate) / 2 && coordinate <= (ticks2[_i2].coordinate + ticks2[_i2 + 1].coordinate) / 2 || _i2 === len - 1 && coordinate > (ticks2[_i2].coordinate + ticks2[_i2 - 1].coordinate) / 2) {
            index2 = ticks2[_i2].index;
            break;
          }
        }
      }
      return index2;
    };
    var getMainColorOfGraphicItem = function getMainColorOfGraphicItem2(item) {
      var _item$type;
      var _ref = item, displayName = _ref.type.displayName;
      var defaultedProps = (_item$type = item.type) !== null && _item$type !== void 0 && _item$type.defaultProps ? _objectSpread$p(_objectSpread$p({}, item.type.defaultProps), item.props) : item.props;
      var stroke = defaultedProps.stroke, fill = defaultedProps.fill;
      var result;
      switch (displayName) {
        case "Line":
          result = stroke;
          break;
        case "Area":
        case "Radar":
          result = stroke && stroke !== "none" ? stroke : fill;
          break;
        default:
          result = fill;
          break;
      }
      return result;
    };
    var getBarSizeList = function getBarSizeList2(_ref2) {
      var globalSize = _ref2.barSize, totalSize = _ref2.totalSize, _ref2$stackGroups = _ref2.stackGroups, stackGroups = _ref2$stackGroups === void 0 ? {} : _ref2$stackGroups;
      if (!stackGroups) {
        return {};
      }
      var result = {};
      var numericAxisIds = Object.keys(stackGroups);
      for (var i2 = 0, len = numericAxisIds.length; i2 < len; i2++) {
        var sgs = stackGroups[numericAxisIds[i2]].stackGroups;
        var stackIds = Object.keys(sgs);
        for (var j = 0, sLen = stackIds.length; j < sLen; j++) {
          var _sgs$stackIds$j = sgs[stackIds[j]], items = _sgs$stackIds$j.items, cateAxisId = _sgs$stackIds$j.cateAxisId;
          var barItems = items.filter(function(item) {
            return getDisplayName(item.type).indexOf("Bar") >= 0;
          });
          if (barItems && barItems.length) {
            var barItemDefaultProps = barItems[0].type.defaultProps;
            var barItemProps = barItemDefaultProps !== void 0 ? _objectSpread$p(_objectSpread$p({}, barItemDefaultProps), barItems[0].props) : barItems[0].props;
            var selfSize = barItemProps.barSize;
            var cateId = barItemProps[cateAxisId];
            if (!result[cateId]) {
              result[cateId] = [];
            }
            var barSize = isNil(selfSize) ? globalSize : selfSize;
            result[cateId].push({
              item: barItems[0],
              stackList: barItems.slice(1),
              barSize: isNil(barSize) ? void 0 : getPercentValue(barSize, totalSize, 0)
            });
          }
        }
      }
      return result;
    };
    var getBarPosition = function getBarPosition2(_ref3) {
      var barGap = _ref3.barGap, barCategoryGap = _ref3.barCategoryGap, bandSize = _ref3.bandSize, _ref3$sizeList = _ref3.sizeList, sizeList = _ref3$sizeList === void 0 ? [] : _ref3$sizeList, maxBarSize = _ref3.maxBarSize;
      var len = sizeList.length;
      if (len < 1) return null;
      var realBarGap = getPercentValue(barGap, bandSize, 0, true);
      var result;
      var initialValue = [];
      if (sizeList[0].barSize === +sizeList[0].barSize) {
        var useFull = false;
        var fullBarSize = bandSize / len;
        var sum2 = sizeList.reduce(function(res, entry) {
          return res + entry.barSize || 0;
        }, 0);
        sum2 += (len - 1) * realBarGap;
        if (sum2 >= bandSize) {
          sum2 -= (len - 1) * realBarGap;
          realBarGap = 0;
        }
        if (sum2 >= bandSize && fullBarSize > 0) {
          useFull = true;
          fullBarSize *= 0.9;
          sum2 = len * fullBarSize;
        }
        var offset2 = (bandSize - sum2) / 2 >> 0;
        var prev = {
          offset: offset2 - realBarGap,
          size: 0
        };
        result = sizeList.reduce(function(res, entry) {
          var newPosition = {
            item: entry.item,
            position: {
              offset: prev.offset + prev.size + realBarGap,
              // @ts-expect-error the type check above does not check for type number explicitly
              size: useFull ? fullBarSize : entry.barSize
            }
          };
          var newRes = [].concat(_toConsumableArray$7(res), [newPosition]);
          prev = newRes[newRes.length - 1].position;
          if (entry.stackList && entry.stackList.length) {
            entry.stackList.forEach(function(item) {
              newRes.push({
                item,
                position: prev
              });
            });
          }
          return newRes;
        }, initialValue);
      } else {
        var _offset = getPercentValue(barCategoryGap, bandSize, 0, true);
        if (bandSize - 2 * _offset - (len - 1) * realBarGap <= 0) {
          realBarGap = 0;
        }
        var originalSize = (bandSize - 2 * _offset - (len - 1) * realBarGap) / len;
        if (originalSize > 1) {
          originalSize >>= 0;
        }
        var size2 = maxBarSize === +maxBarSize ? Math.min(originalSize, maxBarSize) : originalSize;
        result = sizeList.reduce(function(res, entry, i2) {
          var newRes = [].concat(_toConsumableArray$7(res), [{
            item: entry.item,
            position: {
              offset: _offset + (originalSize + realBarGap) * i2 + (originalSize - size2) / 2,
              size: size2
            }
          }]);
          if (entry.stackList && entry.stackList.length) {
            entry.stackList.forEach(function(item) {
              newRes.push({
                item,
                position: newRes[newRes.length - 1].position
              });
            });
          }
          return newRes;
        }, initialValue);
      }
      return result;
    };
    var appendOffsetOfLegend = function appendOffsetOfLegend2(offset2, _unused, props, legendBox) {
      var children = props.children, width = props.width, margin = props.margin;
      var legendWidth = width - (margin.left || 0) - (margin.right || 0);
      var legendProps = getLegendProps({
        children,
        legendWidth
      });
      if (legendProps) {
        var _ref4 = legendBox || {}, boxWidth = _ref4.width, boxHeight = _ref4.height;
        var align = legendProps.align, verticalAlign = legendProps.verticalAlign, layout = legendProps.layout;
        if ((layout === "vertical" || layout === "horizontal" && verticalAlign === "middle") && align !== "center" && isNumber(offset2[align])) {
          return _objectSpread$p(_objectSpread$p({}, offset2), {}, _defineProperty$s({}, align, offset2[align] + (boxWidth || 0)));
        }
        if ((layout === "horizontal" || layout === "vertical" && align === "center") && verticalAlign !== "middle" && isNumber(offset2[verticalAlign])) {
          return _objectSpread$p(_objectSpread$p({}, offset2), {}, _defineProperty$s({}, verticalAlign, offset2[verticalAlign] + (boxHeight || 0)));
        }
      }
      return offset2;
    };
    var isErrorBarRelevantForAxis = function isErrorBarRelevantForAxis2(layout, axisType, direction) {
      if (isNil(axisType)) {
        return true;
      }
      if (layout === "horizontal") {
        return axisType === "yAxis";
      }
      if (layout === "vertical") {
        return axisType === "xAxis";
      }
      if (direction === "x") {
        return axisType === "xAxis";
      }
      if (direction === "y") {
        return axisType === "yAxis";
      }
      return true;
    };
    var getDomainOfErrorBars = function getDomainOfErrorBars2(data, item, dataKey, layout, axisType) {
      var children = item.props.children;
      var errorBars = findAllByType(children, ErrorBar).filter(function(errorBarChild) {
        return isErrorBarRelevantForAxis(layout, axisType, errorBarChild.props.direction);
      });
      if (errorBars && errorBars.length) {
        var keys2 = errorBars.map(function(errorBarChild) {
          return errorBarChild.props.dataKey;
        });
        return data.reduce(function(result, entry) {
          var entryValue = getValueByDataKey(entry, dataKey);
          if (isNil(entryValue)) return result;
          var mainValue = Array.isArray(entryValue) ? [min(entryValue), max(entryValue)] : [entryValue, entryValue];
          var errorDomain = keys2.reduce(function(prevErrorArr, k2) {
            var errorValue = getValueByDataKey(entry, k2, 0);
            var lowerValue = mainValue[0] - Math.abs(Array.isArray(errorValue) ? errorValue[0] : errorValue);
            var upperValue = mainValue[1] + Math.abs(Array.isArray(errorValue) ? errorValue[1] : errorValue);
            return [Math.min(lowerValue, prevErrorArr[0]), Math.max(upperValue, prevErrorArr[1])];
          }, [Infinity, -Infinity]);
          return [Math.min(errorDomain[0], result[0]), Math.max(errorDomain[1], result[1])];
        }, [Infinity, -Infinity]);
      }
      return null;
    };
    var parseErrorBarsOfAxis = function parseErrorBarsOfAxis2(data, items, dataKey, axisType, layout) {
      var domains = items.map(function(item) {
        return getDomainOfErrorBars(data, item, dataKey, layout, axisType);
      }).filter(function(entry) {
        return !isNil(entry);
      });
      if (domains && domains.length) {
        return domains.reduce(function(result, entry) {
          return [Math.min(result[0], entry[0]), Math.max(result[1], entry[1])];
        }, [Infinity, -Infinity]);
      }
      return null;
    };
    var getDomainOfItemsWithSameAxis = function getDomainOfItemsWithSameAxis2(data, items, type, layout, filterNil) {
      var domains = items.map(function(item) {
        var dataKey = item.props.dataKey;
        if (type === "number" && dataKey) {
          return getDomainOfErrorBars(data, item, dataKey, layout) || getDomainOfDataByKey(data, dataKey, type, filterNil);
        }
        return getDomainOfDataByKey(data, dataKey, type, filterNil);
      });
      if (type === "number") {
        return domains.reduce(
          // @ts-expect-error if (type === number) means that the domain is numerical type
          // - but this link is missing in the type definition
          function(result, entry) {
            return [Math.min(result[0], entry[0]), Math.max(result[1], entry[1])];
          },
          [Infinity, -Infinity]
        );
      }
      var tag = {};
      return domains.reduce(function(result, entry) {
        for (var i2 = 0, len = entry.length; i2 < len; i2++) {
          if (!tag[entry[i2]]) {
            tag[entry[i2]] = true;
            result.push(entry[i2]);
          }
        }
        return result;
      }, []);
    };
    var isCategoricalAxis = function isCategoricalAxis2(layout, axisType) {
      return layout === "horizontal" && axisType === "xAxis" || layout === "vertical" && axisType === "yAxis" || layout === "centric" && axisType === "angleAxis" || layout === "radial" && axisType === "radiusAxis";
    };
    var getCoordinatesOfGrid = function getCoordinatesOfGrid2(ticks2, minValue, maxValue, syncWithTicks) {
      if (syncWithTicks) {
        return ticks2.map(function(entry) {
          return entry.coordinate;
        });
      }
      var hasMin, hasMax;
      var values = ticks2.map(function(entry) {
        if (entry.coordinate === minValue) {
          hasMin = true;
        }
        if (entry.coordinate === maxValue) {
          hasMax = true;
        }
        return entry.coordinate;
      });
      if (!hasMin) {
        values.push(minValue);
      }
      if (!hasMax) {
        values.push(maxValue);
      }
      return values;
    };
    var getTicksOfAxis = function getTicksOfAxis2(axis, isGrid, isAll) {
      if (!axis) return null;
      var scale = axis.scale;
      var duplicateDomain = axis.duplicateDomain, type = axis.type, range2 = axis.range;
      var offsetForBand = axis.realScaleType === "scaleBand" ? scale.bandwidth() / 2 : 2;
      var offset2 = (isGrid || isAll) && type === "category" && scale.bandwidth ? scale.bandwidth() / offsetForBand : 0;
      offset2 = axis.axisType === "angleAxis" && (range2 === null || range2 === void 0 ? void 0 : range2.length) >= 2 ? mathSign(range2[0] - range2[1]) * 2 * offset2 : offset2;
      if (isGrid && (axis.ticks || axis.niceTicks)) {
        var result = (axis.ticks || axis.niceTicks).map(function(entry) {
          var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry;
          return {
            // If the scaleContent is not a number, the coordinate will be NaN.
            // That could be the case for example with a PointScale and a string as domain.
            coordinate: scale(scaleContent) + offset2,
            value: entry,
            offset: offset2
          };
        });
        return result.filter(function(row) {
          return !isNan(row.coordinate);
        });
      }
      if (axis.isCategorical && axis.categoricalDomain) {
        return axis.categoricalDomain.map(function(entry, index2) {
          return {
            coordinate: scale(entry) + offset2,
            value: entry,
            index: index2,
            offset: offset2
          };
        });
      }
      if (scale.ticks && !isAll) {
        return scale.ticks(axis.tickCount).map(function(entry) {
          return {
            coordinate: scale(entry) + offset2,
            value: entry,
            offset: offset2
          };
        });
      }
      return scale.domain().map(function(entry, index2) {
        return {
          coordinate: scale(entry) + offset2,
          value: duplicateDomain ? duplicateDomain[entry] : entry,
          index: index2,
          offset: offset2
        };
      });
    };
    var handlerWeakMap = /* @__PURE__ */ new WeakMap();
    var combineEventHandlers = function combineEventHandlers2(defaultHandler, childHandler) {
      if (typeof childHandler !== "function") {
        return defaultHandler;
      }
      if (!handlerWeakMap.has(defaultHandler)) {
        handlerWeakMap.set(defaultHandler, /* @__PURE__ */ new WeakMap());
      }
      var childWeakMap = handlerWeakMap.get(defaultHandler);
      if (childWeakMap.has(childHandler)) {
        return childWeakMap.get(childHandler);
      }
      var combineHandler = function combineHandler2() {
        defaultHandler.apply(void 0, arguments);
        childHandler.apply(void 0, arguments);
      };
      childWeakMap.set(childHandler, combineHandler);
      return combineHandler;
    };
    var parseScale = function parseScale2(axis, chartType, hasBar) {
      var scale = axis.scale, type = axis.type, layout = axis.layout, axisType = axis.axisType;
      if (scale === "auto") {
        if (layout === "radial" && axisType === "radiusAxis") {
          return {
            scale: band(),
            realScaleType: "band"
          };
        }
        if (layout === "radial" && axisType === "angleAxis") {
          return {
            scale: linear(),
            realScaleType: "linear"
          };
        }
        if (type === "category" && chartType && (chartType.indexOf("LineChart") >= 0 || chartType.indexOf("AreaChart") >= 0 || chartType.indexOf("ComposedChart") >= 0 && !hasBar)) {
          return {
            scale: point(),
            realScaleType: "point"
          };
        }
        if (type === "category") {
          return {
            scale: band(),
            realScaleType: "band"
          };
        }
        return {
          scale: linear(),
          realScaleType: "linear"
        };
      }
      if (isString(scale)) {
        var name = "scale".concat(upperFirst(scale));
        return {
          scale: (d3Scales[name] || point)(),
          realScaleType: d3Scales[name] ? name : "point"
        };
      }
      return isFunction(scale) ? {
        scale
      } : {
        scale: point(),
        realScaleType: "point"
      };
    };
    var EPS = 1e-4;
    var checkDomainOfScale = function checkDomainOfScale2(scale) {
      var domain = scale.domain();
      if (!domain || domain.length <= 2) {
        return;
      }
      var len = domain.length;
      var range2 = scale.range();
      var minValue = Math.min(range2[0], range2[1]) - EPS;
      var maxValue = Math.max(range2[0], range2[1]) + EPS;
      var first = scale(domain[0]);
      var last2 = scale(domain[len - 1]);
      if (first < minValue || first > maxValue || last2 < minValue || last2 > maxValue) {
        scale.domain([domain[0], domain[len - 1]]);
      }
    };
    var findPositionOfBar = function findPositionOfBar2(barPosition, child) {
      if (!barPosition) {
        return null;
      }
      for (var i2 = 0, len = barPosition.length; i2 < len; i2++) {
        if (barPosition[i2].item === child) {
          return barPosition[i2].position;
        }
      }
      return null;
    };
    var truncateByDomain = function truncateByDomain2(value, domain) {
      if (!domain || domain.length !== 2 || !isNumber(domain[0]) || !isNumber(domain[1])) {
        return value;
      }
      var minValue = Math.min(domain[0], domain[1]);
      var maxValue = Math.max(domain[0], domain[1]);
      var result = [value[0], value[1]];
      if (!isNumber(value[0]) || value[0] < minValue) {
        result[0] = minValue;
      }
      if (!isNumber(value[1]) || value[1] > maxValue) {
        result[1] = maxValue;
      }
      if (result[0] > maxValue) {
        result[0] = maxValue;
      }
      if (result[1] < minValue) {
        result[1] = minValue;
      }
      return result;
    };
    var offsetSign = function offsetSign2(series) {
      var n2 = series.length;
      if (n2 <= 0) {
        return;
      }
      for (var j = 0, m2 = series[0].length; j < m2; ++j) {
        var positive = 0;
        var negative = 0;
        for (var i2 = 0; i2 < n2; ++i2) {
          var value = isNan(series[i2][j][1]) ? series[i2][j][0] : series[i2][j][1];
          if (value >= 0) {
            series[i2][j][0] = positive;
            series[i2][j][1] = positive + value;
            positive = series[i2][j][1];
          } else {
            series[i2][j][0] = negative;
            series[i2][j][1] = negative + value;
            negative = series[i2][j][1];
          }
        }
      }
    };
    var offsetPositive = function offsetPositive2(series) {
      var n2 = series.length;
      if (n2 <= 0) {
        return;
      }
      for (var j = 0, m2 = series[0].length; j < m2; ++j) {
        var positive = 0;
        for (var i2 = 0; i2 < n2; ++i2) {
          var value = isNan(series[i2][j][1]) ? series[i2][j][0] : series[i2][j][1];
          if (value >= 0) {
            series[i2][j][0] = positive;
            series[i2][j][1] = positive + value;
            positive = series[i2][j][1];
          } else {
            series[i2][j][0] = 0;
            series[i2][j][1] = 0;
          }
        }
      }
    };
    var STACK_OFFSET_MAP = {
      sign: offsetSign,
      // @ts-expect-error definitelytyped types are incorrect
      expand: stackOffsetExpand,
      // @ts-expect-error definitelytyped types are incorrect
      none: stackOffsetNone,
      // @ts-expect-error definitelytyped types are incorrect
      silhouette: stackOffsetSilhouette,
      // @ts-expect-error definitelytyped types are incorrect
      wiggle: stackOffsetWiggle,
      positive: offsetPositive
    };
    var getStackedData = function getStackedData2(data, stackItems, offsetType) {
      var dataKeys = stackItems.map(function(item) {
        return item.props.dataKey;
      });
      var offsetAccessor = STACK_OFFSET_MAP[offsetType];
      var stack = shapeStack().keys(dataKeys).value(function(d, key) {
        return +getValueByDataKey(d, key, 0);
      }).order(stackOrderNone).offset(offsetAccessor);
      return stack(data);
    };
    var getStackGroupsByAxisId = function getStackGroupsByAxisId2(data, _items, numericAxisId, cateAxisId, offsetType, reverseStackOrder) {
      if (!data) {
        return null;
      }
      var items = reverseStackOrder ? _items.reverse() : _items;
      var parentStackGroupsInitialValue = {};
      var stackGroups = items.reduce(function(result, item) {
        var _item$type2;
        var defaultedProps = (_item$type2 = item.type) !== null && _item$type2 !== void 0 && _item$type2.defaultProps ? _objectSpread$p(_objectSpread$p({}, item.type.defaultProps), item.props) : item.props;
        var stackId = defaultedProps.stackId, hide2 = defaultedProps.hide;
        if (hide2) {
          return result;
        }
        var axisId = defaultedProps[numericAxisId];
        var parentGroup = result[axisId] || {
          hasStack: false,
          stackGroups: {}
        };
        if (isNumOrStr(stackId)) {
          var childGroup = parentGroup.stackGroups[stackId] || {
            numericAxisId,
            cateAxisId,
            items: []
          };
          childGroup.items.push(item);
          parentGroup.hasStack = true;
          parentGroup.stackGroups[stackId] = childGroup;
        } else {
          parentGroup.stackGroups[uniqueId("_stackId_")] = {
            numericAxisId,
            cateAxisId,
            items: [item]
          };
        }
        return _objectSpread$p(_objectSpread$p({}, result), {}, _defineProperty$s({}, axisId, parentGroup));
      }, parentStackGroupsInitialValue);
      var axisStackGroupsInitialValue = {};
      return Object.keys(stackGroups).reduce(function(result, axisId) {
        var group = stackGroups[axisId];
        if (group.hasStack) {
          var stackGroupsInitialValue = {};
          group.stackGroups = Object.keys(group.stackGroups).reduce(function(res, stackId) {
            var g = group.stackGroups[stackId];
            return _objectSpread$p(_objectSpread$p({}, res), {}, _defineProperty$s({}, stackId, {
              numericAxisId,
              cateAxisId,
              items: g.items,
              stackedData: getStackedData(data, g.items, offsetType)
            }));
          }, stackGroupsInitialValue);
        }
        return _objectSpread$p(_objectSpread$p({}, result), {}, _defineProperty$s({}, axisId, group));
      }, axisStackGroupsInitialValue);
    };
    var getTicksOfScale = function getTicksOfScale2(scale, opts) {
      var realScaleType = opts.realScaleType, type = opts.type, tickCount = opts.tickCount, originalDomain = opts.originalDomain, allowDecimals = opts.allowDecimals;
      var scaleType = realScaleType || opts.scale;
      if (scaleType !== "auto" && scaleType !== "linear") {
        return null;
      }
      if (tickCount && type === "number" && originalDomain && (originalDomain[0] === "auto" || originalDomain[1] === "auto")) {
        var domain = scale.domain();
        if (!domain.length) {
          return null;
        }
        var tickValues = getNiceTickValues(domain, tickCount, allowDecimals);
        scale.domain([min(tickValues), max(tickValues)]);
        return {
          niceTicks: tickValues
        };
      }
      if (tickCount && type === "number") {
        var _domain = scale.domain();
        var _tickValues = getTickValuesFixedDomain(_domain, tickCount, allowDecimals);
        return {
          niceTicks: _tickValues
        };
      }
      return null;
    };
    var getCateCoordinateOfBar = function getCateCoordinateOfBar2(_ref6) {
      var axis = _ref6.axis, ticks2 = _ref6.ticks, offset2 = _ref6.offset, bandSize = _ref6.bandSize, entry = _ref6.entry, index2 = _ref6.index;
      if (axis.type === "category") {
        return ticks2[index2] ? ticks2[index2].coordinate + offset2 : null;
      }
      var value = getValueByDataKey(entry, axis.dataKey, axis.domain[index2]);
      return !isNil(value) ? axis.scale(value) - bandSize / 2 + offset2 : null;
    };
    var getBaseValueOfBar = function getBaseValueOfBar2(_ref7) {
      var numericAxis = _ref7.numericAxis;
      var domain = numericAxis.scale.domain();
      if (numericAxis.type === "number") {
        var minValue = Math.min(domain[0], domain[1]);
        var maxValue = Math.max(domain[0], domain[1]);
        if (minValue <= 0 && maxValue >= 0) {
          return 0;
        }
        if (maxValue < 0) {
          return maxValue;
        }
        return minValue;
      }
      return domain[0];
    };
    var getStackedDataOfItem = function getStackedDataOfItem2(item, stackGroups) {
      var _item$type3;
      var defaultedProps = (_item$type3 = item.type) !== null && _item$type3 !== void 0 && _item$type3.defaultProps ? _objectSpread$p(_objectSpread$p({}, item.type.defaultProps), item.props) : item.props;
      var stackId = defaultedProps.stackId;
      if (isNumOrStr(stackId)) {
        var group = stackGroups[stackId];
        if (group) {
          var itemIndex = group.items.indexOf(item);
          return itemIndex >= 0 ? group.stackedData[itemIndex] : null;
        }
      }
      return null;
    };
    var getDomainOfSingle = function getDomainOfSingle2(data) {
      return data.reduce(function(result, entry) {
        return [min(entry.concat([result[0]]).filter(isNumber)), max(entry.concat([result[1]]).filter(isNumber))];
      }, [Infinity, -Infinity]);
    };
    var getDomainOfStackGroups = function getDomainOfStackGroups2(stackGroups, startIndex, endIndex) {
      return Object.keys(stackGroups).reduce(function(result, stackId) {
        var group = stackGroups[stackId];
        var stackedData = group.stackedData;
        var domain = stackedData.reduce(function(res, entry) {
          var s2 = getDomainOfSingle(entry.slice(startIndex, endIndex + 1));
          return [Math.min(res[0], s2[0]), Math.max(res[1], s2[1])];
        }, [Infinity, -Infinity]);
        return [Math.min(domain[0], result[0]), Math.max(domain[1], result[1])];
      }, [Infinity, -Infinity]).map(function(result) {
        return result === Infinity || result === -Infinity ? 0 : result;
      });
    };
    var MIN_VALUE_REG = /^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
    var MAX_VALUE_REG = /^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
    var parseSpecifiedDomain = function parseSpecifiedDomain2(specifiedDomain, dataDomain, allowDataOverflow) {
      if (isFunction(specifiedDomain)) {
        return specifiedDomain(dataDomain, allowDataOverflow);
      }
      if (!Array.isArray(specifiedDomain)) {
        return dataDomain;
      }
      var domain = [];
      if (isNumber(specifiedDomain[0])) {
        domain[0] = allowDataOverflow ? specifiedDomain[0] : Math.min(specifiedDomain[0], dataDomain[0]);
      } else if (MIN_VALUE_REG.test(specifiedDomain[0])) {
        var value = +MIN_VALUE_REG.exec(specifiedDomain[0])[1];
        domain[0] = dataDomain[0] - value;
      } else if (isFunction(specifiedDomain[0])) {
        domain[0] = specifiedDomain[0](dataDomain[0]);
      } else {
        domain[0] = dataDomain[0];
      }
      if (isNumber(specifiedDomain[1])) {
        domain[1] = allowDataOverflow ? specifiedDomain[1] : Math.max(specifiedDomain[1], dataDomain[1]);
      } else if (MAX_VALUE_REG.test(specifiedDomain[1])) {
        var _value = +MAX_VALUE_REG.exec(specifiedDomain[1])[1];
        domain[1] = dataDomain[1] + _value;
      } else if (isFunction(specifiedDomain[1])) {
        domain[1] = specifiedDomain[1](dataDomain[1]);
      } else {
        domain[1] = dataDomain[1];
      }
      return domain;
    };
    var getBandSizeOfAxis = function getBandSizeOfAxis2(axis, ticks2, isBar) {
      if (axis && axis.scale && axis.scale.bandwidth) {
        var bandWidth = axis.scale.bandwidth();
        if (!isBar || bandWidth > 0) {
          return bandWidth;
        }
      }
      if (axis && ticks2 && ticks2.length >= 2) {
        var orderedTicks = sortBy(ticks2, function(o2) {
          return o2.coordinate;
        });
        var bandSize = Infinity;
        for (var i2 = 1, len = orderedTicks.length; i2 < len; i2++) {
          var cur = orderedTicks[i2];
          var prev = orderedTicks[i2 - 1];
          bandSize = Math.min((cur.coordinate || 0) - (prev.coordinate || 0), bandSize);
        }
        return bandSize === Infinity ? 0 : bandSize;
      }
      return isBar ? void 0 : 0;
    };
    var parseDomainOfCategoryAxis = function parseDomainOfCategoryAxis2(specifiedDomain, calculatedDomain, axisChild) {
      if (!specifiedDomain || !specifiedDomain.length) {
        return calculatedDomain;
      }
      if (isEqual(specifiedDomain, get(axisChild, "type.defaultProps.domain"))) {
        return calculatedDomain;
      }
      return specifiedDomain;
    };
    var getTooltipItem = function getTooltipItem2(graphicalItem, payload) {
      var defaultedProps = graphicalItem.type.defaultProps ? _objectSpread$p(_objectSpread$p({}, graphicalItem.type.defaultProps), graphicalItem.props) : graphicalItem.props;
      var dataKey = defaultedProps.dataKey, name = defaultedProps.name, unit2 = defaultedProps.unit, formatter = defaultedProps.formatter, tooltipType = defaultedProps.tooltipType, chartType = defaultedProps.chartType, hide2 = defaultedProps.hide;
      return _objectSpread$p(_objectSpread$p({}, filterProps(graphicalItem, false)), {}, {
        dataKey,
        unit: unit2,
        formatter,
        name: name || dataKey,
        color: getMainColorOfGraphicItem(graphicalItem),
        value: getValueByDataKey(payload, dataKey),
        type: tooltipType,
        payload,
        chartType,
        hide: hide2
      });
    };
    function _typeof$s(o2) {
      "@babel/helpers - typeof";
      return _typeof$s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$s(o2);
    }
    function ownKeys$o(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$o(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$o(Object(t), true).forEach(function(r3) {
          _defineProperty$r(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$o(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$r(obj, key, value) {
      key = _toPropertyKey$r(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$r(t) {
      var i2 = _toPrimitive$r(t, "string");
      return "symbol" == _typeof$s(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$r(t, r2) {
      if ("object" != _typeof$s(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$s(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    var RADIAN = Math.PI / 180;
    var radianToDegree = function radianToDegree2(angleInRadian) {
      return angleInRadian * 180 / Math.PI;
    };
    var polarToCartesian = function polarToCartesian2(cx2, cy, radius, angle) {
      return {
        x: cx2 + Math.cos(-RADIAN * angle) * radius,
        y: cy + Math.sin(-RADIAN * angle) * radius
      };
    };
    var distanceBetweenPoints = function distanceBetweenPoints2(point2, anotherPoint) {
      var x1 = point2.x, y1 = point2.y;
      var x2 = anotherPoint.x, y2 = anotherPoint.y;
      return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    };
    var getAngleOfPoint = function getAngleOfPoint2(_ref, _ref2) {
      var x2 = _ref.x, y2 = _ref.y;
      var cx2 = _ref2.cx, cy = _ref2.cy;
      var radius = distanceBetweenPoints({
        x: x2,
        y: y2
      }, {
        x: cx2,
        y: cy
      });
      if (radius <= 0) {
        return {
          radius
        };
      }
      var cos2 = (x2 - cx2) / radius;
      var angleInRadian = Math.acos(cos2);
      if (y2 > cy) {
        angleInRadian = 2 * Math.PI - angleInRadian;
      }
      return {
        radius,
        angle: radianToDegree(angleInRadian),
        angleInRadian
      };
    };
    var formatAngleOfSector = function formatAngleOfSector2(_ref3) {
      var startAngle = _ref3.startAngle, endAngle = _ref3.endAngle;
      var startCnt = Math.floor(startAngle / 360);
      var endCnt = Math.floor(endAngle / 360);
      var min2 = Math.min(startCnt, endCnt);
      return {
        startAngle: startAngle - min2 * 360,
        endAngle: endAngle - min2 * 360
      };
    };
    var reverseFormatAngleOfSetor = function reverseFormatAngleOfSetor2(angle, _ref4) {
      var startAngle = _ref4.startAngle, endAngle = _ref4.endAngle;
      var startCnt = Math.floor(startAngle / 360);
      var endCnt = Math.floor(endAngle / 360);
      var min2 = Math.min(startCnt, endCnt);
      return angle + min2 * 360;
    };
    var inRangeOfSector = function inRangeOfSector2(_ref5, sector) {
      var x2 = _ref5.x, y2 = _ref5.y;
      var _getAngleOfPoint = getAngleOfPoint({
        x: x2,
        y: y2
      }, sector), radius = _getAngleOfPoint.radius, angle = _getAngleOfPoint.angle;
      var innerRadius = sector.innerRadius, outerRadius = sector.outerRadius;
      if (radius < innerRadius || radius > outerRadius) {
        return false;
      }
      if (radius === 0) {
        return true;
      }
      var _formatAngleOfSector = formatAngleOfSector(sector), startAngle = _formatAngleOfSector.startAngle, endAngle = _formatAngleOfSector.endAngle;
      var formatAngle = angle;
      var inRange;
      if (startAngle <= endAngle) {
        while (formatAngle > endAngle) {
          formatAngle -= 360;
        }
        while (formatAngle < startAngle) {
          formatAngle += 360;
        }
        inRange = formatAngle >= startAngle && formatAngle <= endAngle;
      } else {
        while (formatAngle > startAngle) {
          formatAngle -= 360;
        }
        while (formatAngle < endAngle) {
          formatAngle += 360;
        }
        inRange = formatAngle >= endAngle && formatAngle <= startAngle;
      }
      if (inRange) {
        return _objectSpread$o(_objectSpread$o({}, sector), {}, {
          radius,
          angle: reverseFormatAngleOfSetor(formatAngle, sector)
        });
      }
      return null;
    };
    function _typeof$r(o2) {
      "@babel/helpers - typeof";
      return _typeof$r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$r(o2);
    }
    var _excluded$9 = ["offset"];
    function _toConsumableArray$6(arr) {
      return _arrayWithoutHoles$6(arr) || _iterableToArray$7(arr) || _unsupportedIterableToArray$a(arr) || _nonIterableSpread$6();
    }
    function _nonIterableSpread$6() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$a(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$a(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$a(o2, minLen);
    }
    function _iterableToArray$7(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _arrayWithoutHoles$6(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray$a(arr);
    }
    function _arrayLikeToArray$a(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _objectWithoutProperties$9(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$9(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$9(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function ownKeys$n(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$n(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$n(Object(t), true).forEach(function(r3) {
          _defineProperty$q(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$n(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$q(obj, key, value) {
      key = _toPropertyKey$q(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$q(t) {
      var i2 = _toPrimitive$q(t, "string");
      return "symbol" == _typeof$r(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$q(t, r2) {
      if ("object" != _typeof$r(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$r(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function _extends$i() {
      _extends$i = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$i.apply(this, arguments);
    }
    var getLabel = function getLabel2(props) {
      var value = props.value, formatter = props.formatter;
      var label = isNil(props.children) ? value : props.children;
      if (isFunction(formatter)) {
        return formatter(label);
      }
      return label;
    };
    var getDeltaAngle$1 = function getDeltaAngle2(startAngle, endAngle) {
      var sign2 = mathSign(endAngle - startAngle);
      var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360);
      return sign2 * deltaAngle;
    };
    var renderRadialLabel = function renderRadialLabel2(labelProps, label, attrs) {
      var position = labelProps.position, viewBox = labelProps.viewBox, offset2 = labelProps.offset, className = labelProps.className;
      var _ref = viewBox, cx2 = _ref.cx, cy = _ref.cy, innerRadius = _ref.innerRadius, outerRadius = _ref.outerRadius, startAngle = _ref.startAngle, endAngle = _ref.endAngle, clockWise = _ref.clockWise;
      var radius = (innerRadius + outerRadius) / 2;
      var deltaAngle = getDeltaAngle$1(startAngle, endAngle);
      var sign2 = deltaAngle >= 0 ? 1 : -1;
      var labelAngle, direction;
      if (position === "insideStart") {
        labelAngle = startAngle + sign2 * offset2;
        direction = clockWise;
      } else if (position === "insideEnd") {
        labelAngle = endAngle - sign2 * offset2;
        direction = !clockWise;
      } else if (position === "end") {
        labelAngle = endAngle + sign2 * offset2;
        direction = clockWise;
      }
      direction = deltaAngle <= 0 ? direction : !direction;
      var startPoint = polarToCartesian(cx2, cy, radius, labelAngle);
      var endPoint = polarToCartesian(cx2, cy, radius, labelAngle + (direction ? 1 : -1) * 359);
      var path = "M".concat(startPoint.x, ",").concat(startPoint.y, "\n    A").concat(radius, ",").concat(radius, ",0,1,").concat(direction ? 0 : 1, ",\n    ").concat(endPoint.x, ",").concat(endPoint.y);
      var id = isNil(labelProps.id) ? uniqueId("recharts-radial-line-") : labelProps.id;
      return /* @__PURE__ */ React.createElement("text", _extends$i({}, attrs, {
        dominantBaseline: "central",
        className: clsx("recharts-radial-bar-label", className)
      }), /* @__PURE__ */ React.createElement("defs", null, /* @__PURE__ */ React.createElement("path", {
        id,
        d: path
      })), /* @__PURE__ */ React.createElement("textPath", {
        xlinkHref: "#".concat(id)
      }, label));
    };
    var getAttrsOfPolarLabel = function getAttrsOfPolarLabel2(props) {
      var viewBox = props.viewBox, offset2 = props.offset, position = props.position;
      var _ref2 = viewBox, cx2 = _ref2.cx, cy = _ref2.cy, innerRadius = _ref2.innerRadius, outerRadius = _ref2.outerRadius, startAngle = _ref2.startAngle, endAngle = _ref2.endAngle;
      var midAngle = (startAngle + endAngle) / 2;
      if (position === "outside") {
        var _polarToCartesian = polarToCartesian(cx2, cy, outerRadius + offset2, midAngle), _x = _polarToCartesian.x, _y = _polarToCartesian.y;
        return {
          x: _x,
          y: _y,
          textAnchor: _x >= cx2 ? "start" : "end",
          verticalAnchor: "middle"
        };
      }
      if (position === "center") {
        return {
          x: cx2,
          y: cy,
          textAnchor: "middle",
          verticalAnchor: "middle"
        };
      }
      if (position === "centerTop") {
        return {
          x: cx2,
          y: cy,
          textAnchor: "middle",
          verticalAnchor: "start"
        };
      }
      if (position === "centerBottom") {
        return {
          x: cx2,
          y: cy,
          textAnchor: "middle",
          verticalAnchor: "end"
        };
      }
      var r2 = (innerRadius + outerRadius) / 2;
      var _polarToCartesian2 = polarToCartesian(cx2, cy, r2, midAngle), x2 = _polarToCartesian2.x, y2 = _polarToCartesian2.y;
      return {
        x: x2,
        y: y2,
        textAnchor: "middle",
        verticalAnchor: "middle"
      };
    };
    var getAttrsOfCartesianLabel = function getAttrsOfCartesianLabel2(props) {
      var viewBox = props.viewBox, parentViewBox = props.parentViewBox, offset2 = props.offset, position = props.position;
      var _ref3 = viewBox, x2 = _ref3.x, y2 = _ref3.y, width = _ref3.width, height = _ref3.height;
      var verticalSign = height >= 0 ? 1 : -1;
      var verticalOffset = verticalSign * offset2;
      var verticalEnd = verticalSign > 0 ? "end" : "start";
      var verticalStart = verticalSign > 0 ? "start" : "end";
      var horizontalSign = width >= 0 ? 1 : -1;
      var horizontalOffset = horizontalSign * offset2;
      var horizontalEnd = horizontalSign > 0 ? "end" : "start";
      var horizontalStart = horizontalSign > 0 ? "start" : "end";
      if (position === "top") {
        var attrs = {
          x: x2 + width / 2,
          y: y2 - verticalSign * offset2,
          textAnchor: "middle",
          verticalAnchor: verticalEnd
        };
        return _objectSpread$n(_objectSpread$n({}, attrs), parentViewBox ? {
          height: Math.max(y2 - parentViewBox.y, 0),
          width
        } : {});
      }
      if (position === "bottom") {
        var _attrs = {
          x: x2 + width / 2,
          y: y2 + height + verticalOffset,
          textAnchor: "middle",
          verticalAnchor: verticalStart
        };
        return _objectSpread$n(_objectSpread$n({}, _attrs), parentViewBox ? {
          height: Math.max(parentViewBox.y + parentViewBox.height - (y2 + height), 0),
          width
        } : {});
      }
      if (position === "left") {
        var _attrs2 = {
          x: x2 - horizontalOffset,
          y: y2 + height / 2,
          textAnchor: horizontalEnd,
          verticalAnchor: "middle"
        };
        return _objectSpread$n(_objectSpread$n({}, _attrs2), parentViewBox ? {
          width: Math.max(_attrs2.x - parentViewBox.x, 0),
          height
        } : {});
      }
      if (position === "right") {
        var _attrs3 = {
          x: x2 + width + horizontalOffset,
          y: y2 + height / 2,
          textAnchor: horizontalStart,
          verticalAnchor: "middle"
        };
        return _objectSpread$n(_objectSpread$n({}, _attrs3), parentViewBox ? {
          width: Math.max(parentViewBox.x + parentViewBox.width - _attrs3.x, 0),
          height
        } : {});
      }
      var sizeAttrs = parentViewBox ? {
        width,
        height
      } : {};
      if (position === "insideLeft") {
        return _objectSpread$n({
          x: x2 + horizontalOffset,
          y: y2 + height / 2,
          textAnchor: horizontalStart,
          verticalAnchor: "middle"
        }, sizeAttrs);
      }
      if (position === "insideRight") {
        return _objectSpread$n({
          x: x2 + width - horizontalOffset,
          y: y2 + height / 2,
          textAnchor: horizontalEnd,
          verticalAnchor: "middle"
        }, sizeAttrs);
      }
      if (position === "insideTop") {
        return _objectSpread$n({
          x: x2 + width / 2,
          y: y2 + verticalOffset,
          textAnchor: "middle",
          verticalAnchor: verticalStart
        }, sizeAttrs);
      }
      if (position === "insideBottom") {
        return _objectSpread$n({
          x: x2 + width / 2,
          y: y2 + height - verticalOffset,
          textAnchor: "middle",
          verticalAnchor: verticalEnd
        }, sizeAttrs);
      }
      if (position === "insideTopLeft") {
        return _objectSpread$n({
          x: x2 + horizontalOffset,
          y: y2 + verticalOffset,
          textAnchor: horizontalStart,
          verticalAnchor: verticalStart
        }, sizeAttrs);
      }
      if (position === "insideTopRight") {
        return _objectSpread$n({
          x: x2 + width - horizontalOffset,
          y: y2 + verticalOffset,
          textAnchor: horizontalEnd,
          verticalAnchor: verticalStart
        }, sizeAttrs);
      }
      if (position === "insideBottomLeft") {
        return _objectSpread$n({
          x: x2 + horizontalOffset,
          y: y2 + height - verticalOffset,
          textAnchor: horizontalStart,
          verticalAnchor: verticalEnd
        }, sizeAttrs);
      }
      if (position === "insideBottomRight") {
        return _objectSpread$n({
          x: x2 + width - horizontalOffset,
          y: y2 + height - verticalOffset,
          textAnchor: horizontalEnd,
          verticalAnchor: verticalEnd
        }, sizeAttrs);
      }
      if (isObject(position) && (isNumber(position.x) || isPercent(position.x)) && (isNumber(position.y) || isPercent(position.y))) {
        return _objectSpread$n({
          x: x2 + getPercentValue(position.x, width),
          y: y2 + getPercentValue(position.y, height),
          textAnchor: "end",
          verticalAnchor: "end"
        }, sizeAttrs);
      }
      return _objectSpread$n({
        x: x2 + width / 2,
        y: y2 + height / 2,
        textAnchor: "middle",
        verticalAnchor: "middle"
      }, sizeAttrs);
    };
    var isPolar = function isPolar2(viewBox) {
      return "cx" in viewBox && isNumber(viewBox.cx);
    };
    function Label(_ref4) {
      var _ref4$offset = _ref4.offset, offset2 = _ref4$offset === void 0 ? 5 : _ref4$offset, restProps = _objectWithoutProperties$9(_ref4, _excluded$9);
      var props = _objectSpread$n({
        offset: offset2
      }, restProps);
      var viewBox = props.viewBox, position = props.position, value = props.value, children = props.children, content = props.content, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, textBreakAll = props.textBreakAll;
      if (!viewBox || isNil(value) && isNil(children) && !/* @__PURE__ */ reactExports.isValidElement(content) && !isFunction(content)) {
        return null;
      }
      if (/* @__PURE__ */ reactExports.isValidElement(content)) {
        return /* @__PURE__ */ reactExports.cloneElement(content, props);
      }
      var label;
      if (isFunction(content)) {
        label = /* @__PURE__ */ reactExports.createElement(content, props);
        if (/* @__PURE__ */ reactExports.isValidElement(label)) {
          return label;
        }
      } else {
        label = getLabel(props);
      }
      var isPolarLabel = isPolar(viewBox);
      var attrs = filterProps(props, true);
      if (isPolarLabel && (position === "insideStart" || position === "insideEnd" || position === "end")) {
        return renderRadialLabel(props, label, attrs);
      }
      var positionAttrs = isPolarLabel ? getAttrsOfPolarLabel(props) : getAttrsOfCartesianLabel(props);
      return /* @__PURE__ */ React.createElement(Text, _extends$i({
        className: clsx("recharts-label", className)
      }, attrs, positionAttrs, {
        breakAll: textBreakAll
      }), label);
    }
    Label.displayName = "Label";
    var parseViewBox = function parseViewBox2(props) {
      var cx2 = props.cx, cy = props.cy, angle = props.angle, startAngle = props.startAngle, endAngle = props.endAngle, r2 = props.r, radius = props.radius, innerRadius = props.innerRadius, outerRadius = props.outerRadius, x2 = props.x, y2 = props.y, top = props.top, left = props.left, width = props.width, height = props.height, clockWise = props.clockWise, labelViewBox = props.labelViewBox;
      if (labelViewBox) {
        return labelViewBox;
      }
      if (isNumber(width) && isNumber(height)) {
        if (isNumber(x2) && isNumber(y2)) {
          return {
            x: x2,
            y: y2,
            width,
            height
          };
        }
        if (isNumber(top) && isNumber(left)) {
          return {
            x: top,
            y: left,
            width,
            height
          };
        }
      }
      if (isNumber(x2) && isNumber(y2)) {
        return {
          x: x2,
          y: y2,
          width: 0,
          height: 0
        };
      }
      if (isNumber(cx2) && isNumber(cy)) {
        return {
          cx: cx2,
          cy,
          startAngle: startAngle || angle || 0,
          endAngle: endAngle || angle || 0,
          innerRadius: innerRadius || 0,
          outerRadius: outerRadius || radius || r2 || 0,
          clockWise
        };
      }
      if (props.viewBox) {
        return props.viewBox;
      }
      return {};
    };
    var parseLabel = function parseLabel2(label, viewBox) {
      if (!label) {
        return null;
      }
      if (label === true) {
        return /* @__PURE__ */ React.createElement(Label, {
          key: "label-implicit",
          viewBox
        });
      }
      if (isNumOrStr(label)) {
        return /* @__PURE__ */ React.createElement(Label, {
          key: "label-implicit",
          viewBox,
          value: label
        });
      }
      if (/* @__PURE__ */ reactExports.isValidElement(label)) {
        if (label.type === Label) {
          return /* @__PURE__ */ reactExports.cloneElement(label, {
            key: "label-implicit",
            viewBox
          });
        }
        return /* @__PURE__ */ React.createElement(Label, {
          key: "label-implicit",
          content: label,
          viewBox
        });
      }
      if (isFunction(label)) {
        return /* @__PURE__ */ React.createElement(Label, {
          key: "label-implicit",
          content: label,
          viewBox
        });
      }
      if (isObject(label)) {
        return /* @__PURE__ */ React.createElement(Label, _extends$i({
          viewBox
        }, label, {
          key: "label-implicit"
        }));
      }
      return null;
    };
    var renderCallByParent$1 = function renderCallByParent2(parentProps, viewBox) {
      var checkPropsLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (!parentProps || !parentProps.children && checkPropsLabel && !parentProps.label) {
        return null;
      }
      var children = parentProps.children;
      var parentViewBox = parseViewBox(parentProps);
      var explicitChildren = findAllByType(children, Label).map(function(child, index2) {
        return /* @__PURE__ */ reactExports.cloneElement(child, {
          viewBox: viewBox || parentViewBox,
          // eslint-disable-next-line react/no-array-index-key
          key: "label-".concat(index2)
        });
      });
      if (!checkPropsLabel) {
        return explicitChildren;
      }
      var implicitLabel = parseLabel(parentProps.label, viewBox || parentViewBox);
      return [implicitLabel].concat(_toConsumableArray$6(explicitChildren));
    };
    Label.parseViewBox = parseViewBox;
    Label.renderCallByParent = renderCallByParent$1;
    var last_1;
    var hasRequiredLast;
    function requireLast() {
      if (hasRequiredLast) return last_1;
      hasRequiredLast = 1;
      function last2(array2) {
        var length = array2 == null ? 0 : array2.length;
        return length ? array2[length - 1] : void 0;
      }
      last_1 = last2;
      return last_1;
    }
    var lastExports = requireLast();
    const last = /* @__PURE__ */ getDefaultExportFromCjs(lastExports);
    function _typeof$q(o2) {
      "@babel/helpers - typeof";
      return _typeof$q = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$q(o2);
    }
    var _excluded$8 = ["valueAccessor"], _excluded2$3 = ["data", "dataKey", "clockWise", "id", "textBreakAll"];
    function _toConsumableArray$5(arr) {
      return _arrayWithoutHoles$5(arr) || _iterableToArray$6(arr) || _unsupportedIterableToArray$9(arr) || _nonIterableSpread$5();
    }
    function _nonIterableSpread$5() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$9(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$9(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$9(o2, minLen);
    }
    function _iterableToArray$6(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _arrayWithoutHoles$5(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray$9(arr);
    }
    function _arrayLikeToArray$9(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _extends$h() {
      _extends$h = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$h.apply(this, arguments);
    }
    function ownKeys$m(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$m(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$m(Object(t), true).forEach(function(r3) {
          _defineProperty$p(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$m(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$p(obj, key, value) {
      key = _toPropertyKey$p(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$p(t) {
      var i2 = _toPrimitive$p(t, "string");
      return "symbol" == _typeof$q(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$p(t, r2) {
      if ("object" != _typeof$q(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$q(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function _objectWithoutProperties$8(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$8(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$8(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var defaultAccessor = function defaultAccessor2(entry) {
      return Array.isArray(entry.value) ? last(entry.value) : entry.value;
    };
    function LabelList(_ref) {
      var _ref$valueAccessor = _ref.valueAccessor, valueAccessor = _ref$valueAccessor === void 0 ? defaultAccessor : _ref$valueAccessor, restProps = _objectWithoutProperties$8(_ref, _excluded$8);
      var data = restProps.data, dataKey = restProps.dataKey, clockWise = restProps.clockWise, id = restProps.id, textBreakAll = restProps.textBreakAll, others = _objectWithoutProperties$8(restProps, _excluded2$3);
      if (!data || !data.length) {
        return null;
      }
      return /* @__PURE__ */ React.createElement(Layer, {
        className: "recharts-label-list"
      }, data.map(function(entry, index2) {
        var value = isNil(dataKey) ? valueAccessor(entry, index2) : getValueByDataKey(entry && entry.payload, dataKey);
        var idProps = isNil(id) ? {} : {
          id: "".concat(id, "-").concat(index2)
        };
        return /* @__PURE__ */ React.createElement(Label, _extends$h({}, filterProps(entry, true), others, idProps, {
          parentViewBox: entry.parentViewBox,
          value,
          textBreakAll,
          viewBox: Label.parseViewBox(isNil(clockWise) ? entry : _objectSpread$m(_objectSpread$m({}, entry), {}, {
            clockWise
          })),
          key: "label-".concat(index2),
          index: index2
        }));
      }));
    }
    LabelList.displayName = "LabelList";
    function parseLabelList(label, data) {
      if (!label) {
        return null;
      }
      if (label === true) {
        return /* @__PURE__ */ React.createElement(LabelList, {
          key: "labelList-implicit",
          data
        });
      }
      if (/* @__PURE__ */ React.isValidElement(label) || isFunction(label)) {
        return /* @__PURE__ */ React.createElement(LabelList, {
          key: "labelList-implicit",
          data,
          content: label
        });
      }
      if (isObject(label)) {
        return /* @__PURE__ */ React.createElement(LabelList, _extends$h({
          data
        }, label, {
          key: "labelList-implicit"
        }));
      }
      return null;
    }
    function renderCallByParent(parentProps, data) {
      var checkPropsLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (!parentProps || !parentProps.children && checkPropsLabel && !parentProps.label) {
        return null;
      }
      var children = parentProps.children;
      var explicitChildren = findAllByType(children, LabelList).map(function(child, index2) {
        return /* @__PURE__ */ reactExports.cloneElement(child, {
          data,
          // eslint-disable-next-line react/no-array-index-key
          key: "labelList-".concat(index2)
        });
      });
      if (!checkPropsLabel) {
        return explicitChildren;
      }
      var implicitLabelList = parseLabelList(parentProps.label, data);
      return [implicitLabelList].concat(_toConsumableArray$5(explicitChildren));
    }
    LabelList.renderCallByParent = renderCallByParent;
    function _typeof$p(o2) {
      "@babel/helpers - typeof";
      return _typeof$p = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$p(o2);
    }
    function _extends$g() {
      _extends$g = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$g.apply(this, arguments);
    }
    function ownKeys$l(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$l(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$l(Object(t), true).forEach(function(r3) {
          _defineProperty$o(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$l(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$o(obj, key, value) {
      key = _toPropertyKey$o(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$o(t) {
      var i2 = _toPrimitive$o(t, "string");
      return "symbol" == _typeof$p(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$o(t, r2) {
      if ("object" != _typeof$p(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$p(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    var getDeltaAngle = function getDeltaAngle2(startAngle, endAngle) {
      var sign2 = mathSign(endAngle - startAngle);
      var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 359.999);
      return sign2 * deltaAngle;
    };
    var getTangentCircle = function getTangentCircle2(_ref) {
      var cx2 = _ref.cx, cy = _ref.cy, radius = _ref.radius, angle = _ref.angle, sign2 = _ref.sign, isExternal = _ref.isExternal, cornerRadius = _ref.cornerRadius, cornerIsExternal = _ref.cornerIsExternal;
      var centerRadius = cornerRadius * (isExternal ? 1 : -1) + radius;
      var theta = Math.asin(cornerRadius / centerRadius) / RADIAN;
      var centerAngle = cornerIsExternal ? angle : angle + sign2 * theta;
      var center = polarToCartesian(cx2, cy, centerRadius, centerAngle);
      var circleTangency = polarToCartesian(cx2, cy, radius, centerAngle);
      var lineTangencyAngle = cornerIsExternal ? angle - sign2 * theta : angle;
      var lineTangency = polarToCartesian(cx2, cy, centerRadius * Math.cos(theta * RADIAN), lineTangencyAngle);
      return {
        center,
        circleTangency,
        lineTangency,
        theta
      };
    };
    var getSectorPath = function getSectorPath2(_ref2) {
      var cx2 = _ref2.cx, cy = _ref2.cy, innerRadius = _ref2.innerRadius, outerRadius = _ref2.outerRadius, startAngle = _ref2.startAngle, endAngle = _ref2.endAngle;
      var angle = getDeltaAngle(startAngle, endAngle);
      var tempEndAngle = startAngle + angle;
      var outerStartPoint = polarToCartesian(cx2, cy, outerRadius, startAngle);
      var outerEndPoint = polarToCartesian(cx2, cy, outerRadius, tempEndAngle);
      var path = "M ".concat(outerStartPoint.x, ",").concat(outerStartPoint.y, "\n    A ").concat(outerRadius, ",").concat(outerRadius, ",0,\n    ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle > tempEndAngle), ",\n    ").concat(outerEndPoint.x, ",").concat(outerEndPoint.y, "\n  ");
      if (innerRadius > 0) {
        var innerStartPoint = polarToCartesian(cx2, cy, innerRadius, startAngle);
        var innerEndPoint = polarToCartesian(cx2, cy, innerRadius, tempEndAngle);
        path += "L ".concat(innerEndPoint.x, ",").concat(innerEndPoint.y, "\n            A ").concat(innerRadius, ",").concat(innerRadius, ",0,\n            ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle <= tempEndAngle), ",\n            ").concat(innerStartPoint.x, ",").concat(innerStartPoint.y, " Z");
      } else {
        path += "L ".concat(cx2, ",").concat(cy, " Z");
      }
      return path;
    };
    var getSectorWithCorner = function getSectorWithCorner2(_ref3) {
      var cx2 = _ref3.cx, cy = _ref3.cy, innerRadius = _ref3.innerRadius, outerRadius = _ref3.outerRadius, cornerRadius = _ref3.cornerRadius, forceCornerRadius = _ref3.forceCornerRadius, cornerIsExternal = _ref3.cornerIsExternal, startAngle = _ref3.startAngle, endAngle = _ref3.endAngle;
      var sign2 = mathSign(endAngle - startAngle);
      var _getTangentCircle = getTangentCircle({
        cx: cx2,
        cy,
        radius: outerRadius,
        angle: startAngle,
        sign: sign2,
        cornerRadius,
        cornerIsExternal
      }), soct = _getTangentCircle.circleTangency, solt = _getTangentCircle.lineTangency, sot = _getTangentCircle.theta;
      var _getTangentCircle2 = getTangentCircle({
        cx: cx2,
        cy,
        radius: outerRadius,
        angle: endAngle,
        sign: -sign2,
        cornerRadius,
        cornerIsExternal
      }), eoct = _getTangentCircle2.circleTangency, eolt = _getTangentCircle2.lineTangency, eot = _getTangentCircle2.theta;
      var outerArcAngle = cornerIsExternal ? Math.abs(startAngle - endAngle) : Math.abs(startAngle - endAngle) - sot - eot;
      if (outerArcAngle < 0) {
        if (forceCornerRadius) {
          return "M ".concat(solt.x, ",").concat(solt.y, "\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(cornerRadius * 2, ",0\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(-cornerRadius * 2, ",0\n      ");
        }
        return getSectorPath({
          cx: cx2,
          cy,
          innerRadius,
          outerRadius,
          startAngle,
          endAngle
        });
      }
      var path = "M ".concat(solt.x, ",").concat(solt.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(soct.x, ",").concat(soct.y, "\n    A").concat(outerRadius, ",").concat(outerRadius, ",0,").concat(+(outerArcAngle > 180), ",").concat(+(sign2 < 0), ",").concat(eoct.x, ",").concat(eoct.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(eolt.x, ",").concat(eolt.y, "\n  ");
      if (innerRadius > 0) {
        var _getTangentCircle3 = getTangentCircle({
          cx: cx2,
          cy,
          radius: innerRadius,
          angle: startAngle,
          sign: sign2,
          isExternal: true,
          cornerRadius,
          cornerIsExternal
        }), sict = _getTangentCircle3.circleTangency, silt = _getTangentCircle3.lineTangency, sit = _getTangentCircle3.theta;
        var _getTangentCircle4 = getTangentCircle({
          cx: cx2,
          cy,
          radius: innerRadius,
          angle: endAngle,
          sign: -sign2,
          isExternal: true,
          cornerRadius,
          cornerIsExternal
        }), eict = _getTangentCircle4.circleTangency, eilt = _getTangentCircle4.lineTangency, eit = _getTangentCircle4.theta;
        var innerArcAngle = cornerIsExternal ? Math.abs(startAngle - endAngle) : Math.abs(startAngle - endAngle) - sit - eit;
        if (innerArcAngle < 0 && cornerRadius === 0) {
          return "".concat(path, "L").concat(cx2, ",").concat(cy, "Z");
        }
        path += "L".concat(eilt.x, ",").concat(eilt.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(eict.x, ",").concat(eict.y, "\n      A").concat(innerRadius, ",").concat(innerRadius, ",0,").concat(+(innerArcAngle > 180), ",").concat(+(sign2 > 0), ",").concat(sict.x, ",").concat(sict.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(silt.x, ",").concat(silt.y, "Z");
      } else {
        path += "L".concat(cx2, ",").concat(cy, "Z");
      }
      return path;
    };
    var defaultProps$3 = {
      cx: 0,
      cy: 0,
      innerRadius: 0,
      outerRadius: 0,
      startAngle: 0,
      endAngle: 0,
      cornerRadius: 0,
      forceCornerRadius: false,
      cornerIsExternal: false
    };
    var Sector = function Sector2(sectorProps) {
      var props = _objectSpread$l(_objectSpread$l({}, defaultProps$3), sectorProps);
      var cx2 = props.cx, cy = props.cy, innerRadius = props.innerRadius, outerRadius = props.outerRadius, cornerRadius = props.cornerRadius, forceCornerRadius = props.forceCornerRadius, cornerIsExternal = props.cornerIsExternal, startAngle = props.startAngle, endAngle = props.endAngle, className = props.className;
      if (outerRadius < innerRadius || startAngle === endAngle) {
        return null;
      }
      var layerClass = clsx("recharts-sector", className);
      var deltaRadius = outerRadius - innerRadius;
      var cr = getPercentValue(cornerRadius, deltaRadius, 0, true);
      var path;
      if (cr > 0 && Math.abs(startAngle - endAngle) < 360) {
        path = getSectorWithCorner({
          cx: cx2,
          cy,
          innerRadius,
          outerRadius,
          cornerRadius: Math.min(cr, deltaRadius / 2),
          forceCornerRadius,
          cornerIsExternal,
          startAngle,
          endAngle
        });
      } else {
        path = getSectorPath({
          cx: cx2,
          cy,
          innerRadius,
          outerRadius,
          startAngle,
          endAngle
        });
      }
      return /* @__PURE__ */ React.createElement("path", _extends$g({}, filterProps(props, true), {
        className: layerClass,
        d: path,
        role: "img"
      }));
    };
    function _typeof$o(o2) {
      "@babel/helpers - typeof";
      return _typeof$o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$o(o2);
    }
    function _extends$f() {
      _extends$f = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$f.apply(this, arguments);
    }
    function ownKeys$k(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$k(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$k(Object(t), true).forEach(function(r3) {
          _defineProperty$n(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$k(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$n(obj, key, value) {
      key = _toPropertyKey$n(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$n(t) {
      var i2 = _toPrimitive$n(t, "string");
      return "symbol" == _typeof$o(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$n(t, r2) {
      if ("object" != _typeof$o(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$o(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    var CURVE_FACTORIES = {
      curveBasisClosed,
      curveBasisOpen,
      curveBasis,
      curveBumpX: bumpX,
      curveBumpY: bumpY,
      curveLinearClosed,
      curveLinear,
      curveMonotoneX: monotoneX,
      curveMonotoneY: monotoneY,
      curveNatural,
      curveStep,
      curveStepAfter: stepAfter,
      curveStepBefore: stepBefore
    };
    var defined = function defined2(p2) {
      return p2.x === +p2.x && p2.y === +p2.y;
    };
    var getX = function getX2(p2) {
      return p2.x;
    };
    var getY = function getY2(p2) {
      return p2.y;
    };
    var getCurveFactory = function getCurveFactory2(type, layout) {
      if (isFunction(type)) {
        return type;
      }
      var name = "curve".concat(upperFirst(type));
      if ((name === "curveMonotone" || name === "curveBump") && layout) {
        return CURVE_FACTORIES["".concat(name).concat(layout === "vertical" ? "Y" : "X")];
      }
      return CURVE_FACTORIES[name] || curveLinear;
    };
    var getPath$1 = function getPath2(_ref) {
      var _ref$type = _ref.type, type = _ref$type === void 0 ? "linear" : _ref$type, _ref$points = _ref.points, points = _ref$points === void 0 ? [] : _ref$points, baseLine = _ref.baseLine, layout = _ref.layout, _ref$connectNulls = _ref.connectNulls, connectNulls = _ref$connectNulls === void 0 ? false : _ref$connectNulls;
      var curveFactory = getCurveFactory(type, layout);
      var formatPoints = connectNulls ? points.filter(function(entry) {
        return defined(entry);
      }) : points;
      var lineFunction;
      if (Array.isArray(baseLine)) {
        var formatBaseLine = connectNulls ? baseLine.filter(function(base) {
          return defined(base);
        }) : baseLine;
        var areaPoints = formatPoints.map(function(entry, index2) {
          return _objectSpread$k(_objectSpread$k({}, entry), {}, {
            base: formatBaseLine[index2]
          });
        });
        if (layout === "vertical") {
          lineFunction = shapeArea().y(getY).x1(getX).x0(function(d) {
            return d.base.x;
          });
        } else {
          lineFunction = shapeArea().x(getX).y1(getY).y0(function(d) {
            return d.base.y;
          });
        }
        lineFunction.defined(defined).curve(curveFactory);
        return lineFunction(areaPoints);
      }
      if (layout === "vertical" && isNumber(baseLine)) {
        lineFunction = shapeArea().y(getY).x1(getX).x0(baseLine);
      } else if (isNumber(baseLine)) {
        lineFunction = shapeArea().x(getX).y1(getY).y0(baseLine);
      } else {
        lineFunction = shapeLine().x(getX).y(getY);
      }
      lineFunction.defined(defined).curve(curveFactory);
      return lineFunction(formatPoints);
    };
    var Curve = function Curve2(props) {
      var className = props.className, points = props.points, path = props.path, pathRef = props.pathRef;
      if ((!points || !points.length) && !path) {
        return null;
      }
      var realPath = points && points.length ? getPath$1(props) : path;
      return /* @__PURE__ */ React.createElement("path", _extends$f({}, filterProps(props, false), adaptEventHandlers(props), {
        className: clsx("recharts-curve", className),
        d: realPath,
        ref: pathRef
      }));
    };
    var propTypes = { exports: {} };
    var ReactPropTypesSecret_1;
    var hasRequiredReactPropTypesSecret;
    function requireReactPropTypesSecret() {
      if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
      hasRequiredReactPropTypesSecret = 1;
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      ReactPropTypesSecret_1 = ReactPropTypesSecret;
      return ReactPropTypesSecret_1;
    }
    var factoryWithThrowingShims;
    var hasRequiredFactoryWithThrowingShims;
    function requireFactoryWithThrowingShims() {
      if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
      hasRequiredFactoryWithThrowingShims = 1;
      var ReactPropTypesSecret = /* @__PURE__ */ requireReactPropTypesSecret();
      function emptyFunction() {
      }
      function emptyFunctionWithReset() {
      }
      emptyFunctionWithReset.resetWarningCache = emptyFunction;
      factoryWithThrowingShims = function() {
        function shim(props, propName, componentName, location, propFullName, secret) {
          if (secret === ReactPropTypesSecret) {
            return;
          }
          var err = new Error(
            "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
          );
          err.name = "Invariant Violation";
          throw err;
        }
        shim.isRequired = shim;
        function getShim() {
          return shim;
        }
        var ReactPropTypes = {
          array: shim,
          bigint: shim,
          bool: shim,
          func: shim,
          number: shim,
          object: shim,
          string: shim,
          symbol: shim,
          any: shim,
          arrayOf: getShim,
          element: shim,
          elementType: shim,
          instanceOf: getShim,
          node: shim,
          objectOf: getShim,
          oneOf: getShim,
          oneOfType: getShim,
          shape: getShim,
          exact: getShim,
          checkPropTypes: emptyFunctionWithReset,
          resetWarningCache: emptyFunction
        };
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
      return factoryWithThrowingShims;
    }
    var hasRequiredPropTypes;
    function requirePropTypes() {
      if (hasRequiredPropTypes) return propTypes.exports;
      hasRequiredPropTypes = 1;
      {
        propTypes.exports = /* @__PURE__ */ requireFactoryWithThrowingShims()();
      }
      return propTypes.exports;
    }
    var propTypesExports = /* @__PURE__ */ requirePropTypes();
    const PropTypes = /* @__PURE__ */ getDefaultExportFromCjs(propTypesExports);
    var getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function combineComparators(comparatorA, comparatorB) {
      return function isEqual2(a2, b, state) {
        return comparatorA(a2, b, state) && comparatorB(a2, b, state);
      };
    }
    function createIsCircular(areItemsEqual) {
      return function isCircular(a2, b, state) {
        if (!a2 || !b || typeof a2 !== "object" || typeof b !== "object") {
          return areItemsEqual(a2, b, state);
        }
        var cache = state.cache;
        var cachedA = cache.get(a2);
        var cachedB = cache.get(b);
        if (cachedA && cachedB) {
          return cachedA === b && cachedB === a2;
        }
        cache.set(a2, b);
        cache.set(b, a2);
        var result = areItemsEqual(a2, b, state);
        cache.delete(a2);
        cache.delete(b);
        return result;
      };
    }
    function getStrictProperties(object2) {
      return getOwnPropertyNames(object2).concat(getOwnPropertySymbols(object2));
    }
    var hasOwn = Object.hasOwn || function(object2, property) {
      return hasOwnProperty.call(object2, property);
    };
    function sameValueZeroEqual(a2, b) {
      return a2 === b || !a2 && !b && a2 !== a2 && b !== b;
    }
    var PREACT_VNODE = "__v";
    var PREACT_OWNER = "__o";
    var REACT_OWNER = "_owner";
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, keys = Object.keys;
    function areArraysEqual(a2, b, state) {
      var index2 = a2.length;
      if (b.length !== index2) {
        return false;
      }
      while (index2-- > 0) {
        if (!state.equals(a2[index2], b[index2], index2, index2, a2, b, state)) {
          return false;
        }
      }
      return true;
    }
    function areDatesEqual(a2, b) {
      return sameValueZeroEqual(a2.getTime(), b.getTime());
    }
    function areErrorsEqual(a2, b) {
      return a2.name === b.name && a2.message === b.message && a2.cause === b.cause && a2.stack === b.stack;
    }
    function areFunctionsEqual(a2, b) {
      return a2 === b;
    }
    function areMapsEqual(a2, b, state) {
      var size2 = a2.size;
      if (size2 !== b.size) {
        return false;
      }
      if (!size2) {
        return true;
      }
      var matchedIndices = new Array(size2);
      var aIterable = a2.entries();
      var aResult;
      var bResult;
      var index2 = 0;
      while (aResult = aIterable.next()) {
        if (aResult.done) {
          break;
        }
        var bIterable = b.entries();
        var hasMatch = false;
        var matchIndex = 0;
        while (bResult = bIterable.next()) {
          if (bResult.done) {
            break;
          }
          if (matchedIndices[matchIndex]) {
            matchIndex++;
            continue;
          }
          var aEntry = aResult.value;
          var bEntry = bResult.value;
          if (state.equals(aEntry[0], bEntry[0], index2, matchIndex, a2, b, state) && state.equals(aEntry[1], bEntry[1], aEntry[0], bEntry[0], a2, b, state)) {
            hasMatch = matchedIndices[matchIndex] = true;
            break;
          }
          matchIndex++;
        }
        if (!hasMatch) {
          return false;
        }
        index2++;
      }
      return true;
    }
    var areNumbersEqual = sameValueZeroEqual;
    function areObjectsEqual(a2, b, state) {
      var properties = keys(a2);
      var index2 = properties.length;
      if (keys(b).length !== index2) {
        return false;
      }
      while (index2-- > 0) {
        if (!isPropertyEqual(a2, b, state, properties[index2])) {
          return false;
        }
      }
      return true;
    }
    function areObjectsEqualStrict(a2, b, state) {
      var properties = getStrictProperties(a2);
      var index2 = properties.length;
      if (getStrictProperties(b).length !== index2) {
        return false;
      }
      var property;
      var descriptorA;
      var descriptorB;
      while (index2-- > 0) {
        property = properties[index2];
        if (!isPropertyEqual(a2, b, state, property)) {
          return false;
        }
        descriptorA = getOwnPropertyDescriptor(a2, property);
        descriptorB = getOwnPropertyDescriptor(b, property);
        if ((descriptorA || descriptorB) && (!descriptorA || !descriptorB || descriptorA.configurable !== descriptorB.configurable || descriptorA.enumerable !== descriptorB.enumerable || descriptorA.writable !== descriptorB.writable)) {
          return false;
        }
      }
      return true;
    }
    function arePrimitiveWrappersEqual(a2, b) {
      return sameValueZeroEqual(a2.valueOf(), b.valueOf());
    }
    function areRegExpsEqual(a2, b) {
      return a2.source === b.source && a2.flags === b.flags;
    }
    function areSetsEqual(a2, b, state) {
      var size2 = a2.size;
      if (size2 !== b.size) {
        return false;
      }
      if (!size2) {
        return true;
      }
      var matchedIndices = new Array(size2);
      var aIterable = a2.values();
      var aResult;
      var bResult;
      while (aResult = aIterable.next()) {
        if (aResult.done) {
          break;
        }
        var bIterable = b.values();
        var hasMatch = false;
        var matchIndex = 0;
        while (bResult = bIterable.next()) {
          if (bResult.done) {
            break;
          }
          if (!matchedIndices[matchIndex] && state.equals(aResult.value, bResult.value, aResult.value, bResult.value, a2, b, state)) {
            hasMatch = matchedIndices[matchIndex] = true;
            break;
          }
          matchIndex++;
        }
        if (!hasMatch) {
          return false;
        }
      }
      return true;
    }
    function areTypedArraysEqual(a2, b) {
      var index2 = a2.length;
      if (b.length !== index2) {
        return false;
      }
      while (index2-- > 0) {
        if (a2[index2] !== b[index2]) {
          return false;
        }
      }
      return true;
    }
    function areUrlsEqual(a2, b) {
      return a2.hostname === b.hostname && a2.pathname === b.pathname && a2.protocol === b.protocol && a2.port === b.port && a2.hash === b.hash && a2.username === b.username && a2.password === b.password;
    }
    function isPropertyEqual(a2, b, state, property) {
      if ((property === REACT_OWNER || property === PREACT_OWNER || property === PREACT_VNODE) && (a2.$$typeof || b.$$typeof)) {
        return true;
      }
      return hasOwn(b, property) && state.equals(a2[property], b[property], property, property, a2, b, state);
    }
    var ARGUMENTS_TAG = "[object Arguments]";
    var BOOLEAN_TAG = "[object Boolean]";
    var DATE_TAG = "[object Date]";
    var ERROR_TAG = "[object Error]";
    var MAP_TAG = "[object Map]";
    var NUMBER_TAG = "[object Number]";
    var OBJECT_TAG = "[object Object]";
    var REG_EXP_TAG = "[object RegExp]";
    var SET_TAG = "[object Set]";
    var STRING_TAG = "[object String]";
    var URL_TAG = "[object URL]";
    var isArray = Array.isArray;
    var isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView ? ArrayBuffer.isView : null;
    var assign = Object.assign;
    var getTag = Object.prototype.toString.call.bind(Object.prototype.toString);
    function createEqualityComparator(_a2) {
      var areArraysEqual2 = _a2.areArraysEqual, areDatesEqual2 = _a2.areDatesEqual, areErrorsEqual2 = _a2.areErrorsEqual, areFunctionsEqual2 = _a2.areFunctionsEqual, areMapsEqual2 = _a2.areMapsEqual, areNumbersEqual2 = _a2.areNumbersEqual, areObjectsEqual2 = _a2.areObjectsEqual, arePrimitiveWrappersEqual2 = _a2.arePrimitiveWrappersEqual, areRegExpsEqual2 = _a2.areRegExpsEqual, areSetsEqual2 = _a2.areSetsEqual, areTypedArraysEqual2 = _a2.areTypedArraysEqual, areUrlsEqual2 = _a2.areUrlsEqual;
      return function comparator(a2, b, state) {
        if (a2 === b) {
          return true;
        }
        if (a2 == null || b == null) {
          return false;
        }
        var type = typeof a2;
        if (type !== typeof b) {
          return false;
        }
        if (type !== "object") {
          if (type === "number") {
            return areNumbersEqual2(a2, b, state);
          }
          if (type === "function") {
            return areFunctionsEqual2(a2, b, state);
          }
          return false;
        }
        var constructor = a2.constructor;
        if (constructor !== b.constructor) {
          return false;
        }
        if (constructor === Object) {
          return areObjectsEqual2(a2, b, state);
        }
        if (isArray(a2)) {
          return areArraysEqual2(a2, b, state);
        }
        if (isTypedArray != null && isTypedArray(a2)) {
          return areTypedArraysEqual2(a2, b, state);
        }
        if (constructor === Date) {
          return areDatesEqual2(a2, b, state);
        }
        if (constructor === RegExp) {
          return areRegExpsEqual2(a2, b, state);
        }
        if (constructor === Map) {
          return areMapsEqual2(a2, b, state);
        }
        if (constructor === Set) {
          return areSetsEqual2(a2, b, state);
        }
        var tag = getTag(a2);
        if (tag === DATE_TAG) {
          return areDatesEqual2(a2, b, state);
        }
        if (tag === REG_EXP_TAG) {
          return areRegExpsEqual2(a2, b, state);
        }
        if (tag === MAP_TAG) {
          return areMapsEqual2(a2, b, state);
        }
        if (tag === SET_TAG) {
          return areSetsEqual2(a2, b, state);
        }
        if (tag === OBJECT_TAG) {
          return typeof a2.then !== "function" && typeof b.then !== "function" && areObjectsEqual2(a2, b, state);
        }
        if (tag === URL_TAG) {
          return areUrlsEqual2(a2, b, state);
        }
        if (tag === ERROR_TAG) {
          return areErrorsEqual2(a2, b, state);
        }
        if (tag === ARGUMENTS_TAG) {
          return areObjectsEqual2(a2, b, state);
        }
        if (tag === BOOLEAN_TAG || tag === NUMBER_TAG || tag === STRING_TAG) {
          return arePrimitiveWrappersEqual2(a2, b, state);
        }
        return false;
      };
    }
    function createEqualityComparatorConfig(_a2) {
      var circular = _a2.circular, createCustomConfig = _a2.createCustomConfig, strict = _a2.strict;
      var config2 = {
        areArraysEqual: strict ? areObjectsEqualStrict : areArraysEqual,
        areDatesEqual,
        areErrorsEqual,
        areFunctionsEqual,
        areMapsEqual: strict ? combineComparators(areMapsEqual, areObjectsEqualStrict) : areMapsEqual,
        areNumbersEqual,
        areObjectsEqual: strict ? areObjectsEqualStrict : areObjectsEqual,
        arePrimitiveWrappersEqual,
        areRegExpsEqual,
        areSetsEqual: strict ? combineComparators(areSetsEqual, areObjectsEqualStrict) : areSetsEqual,
        areTypedArraysEqual: strict ? areObjectsEqualStrict : areTypedArraysEqual,
        areUrlsEqual
      };
      if (createCustomConfig) {
        config2 = assign({}, config2, createCustomConfig(config2));
      }
      if (circular) {
        var areArraysEqual$1 = createIsCircular(config2.areArraysEqual);
        var areMapsEqual$1 = createIsCircular(config2.areMapsEqual);
        var areObjectsEqual$1 = createIsCircular(config2.areObjectsEqual);
        var areSetsEqual$1 = createIsCircular(config2.areSetsEqual);
        config2 = assign({}, config2, {
          areArraysEqual: areArraysEqual$1,
          areMapsEqual: areMapsEqual$1,
          areObjectsEqual: areObjectsEqual$1,
          areSetsEqual: areSetsEqual$1
        });
      }
      return config2;
    }
    function createInternalEqualityComparator(compare) {
      return function(a2, b, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, state) {
        return compare(a2, b, state);
      };
    }
    function createIsEqual(_a2) {
      var circular = _a2.circular, comparator = _a2.comparator, createState = _a2.createState, equals2 = _a2.equals, strict = _a2.strict;
      if (createState) {
        return function isEqual2(a2, b) {
          var _a3 = createState(), _b2 = _a3.cache, cache = _b2 === void 0 ? circular ? /* @__PURE__ */ new WeakMap() : void 0 : _b2, meta = _a3.meta;
          return comparator(a2, b, {
            cache,
            equals: equals2,
            meta,
            strict
          });
        };
      }
      if (circular) {
        return function isEqual2(a2, b) {
          return comparator(a2, b, {
            cache: /* @__PURE__ */ new WeakMap(),
            equals: equals2,
            meta: void 0,
            strict
          });
        };
      }
      var state = {
        cache: void 0,
        equals: equals2,
        meta: void 0,
        strict
      };
      return function isEqual2(a2, b) {
        return comparator(a2, b, state);
      };
    }
    var deepEqual = createCustomEqual();
    createCustomEqual({ strict: true });
    createCustomEqual({ circular: true });
    createCustomEqual({
      circular: true,
      strict: true
    });
    createCustomEqual({
      createInternalComparator: function() {
        return sameValueZeroEqual;
      }
    });
    createCustomEqual({
      strict: true,
      createInternalComparator: function() {
        return sameValueZeroEqual;
      }
    });
    createCustomEqual({
      circular: true,
      createInternalComparator: function() {
        return sameValueZeroEqual;
      }
    });
    createCustomEqual({
      circular: true,
      createInternalComparator: function() {
        return sameValueZeroEqual;
      },
      strict: true
    });
    function createCustomEqual(options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      var _a2 = options2.circular, circular = _a2 === void 0 ? false : _a2, createCustomInternalComparator = options2.createInternalComparator, createState = options2.createState, _b2 = options2.strict, strict = _b2 === void 0 ? false : _b2;
      var config2 = createEqualityComparatorConfig(options2);
      var comparator = createEqualityComparator(config2);
      var equals2 = createCustomInternalComparator ? createCustomInternalComparator(comparator) : createInternalEqualityComparator(comparator);
      return createIsEqual({ circular, comparator, createState, equals: equals2, strict });
    }
    function safeRequestAnimationFrame(callback) {
      if (typeof requestAnimationFrame !== "undefined") requestAnimationFrame(callback);
    }
    function setRafTimeout(callback) {
      var timeout = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var currTime = -1;
      var shouldUpdate2 = function shouldUpdate3(now2) {
        if (currTime < 0) {
          currTime = now2;
        }
        if (now2 - currTime > timeout) {
          callback(now2);
          currTime = -1;
        } else {
          safeRequestAnimationFrame(shouldUpdate3);
        }
      };
      requestAnimationFrame(shouldUpdate2);
    }
    function _typeof$n(o2) {
      "@babel/helpers - typeof";
      return _typeof$n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$n(o2);
    }
    function _toArray(arr) {
      return _arrayWithHoles$6(arr) || _iterableToArray$5(arr) || _unsupportedIterableToArray$8(arr) || _nonIterableRest$6();
    }
    function _nonIterableRest$6() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$8(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$8(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$8(o2, minLen);
    }
    function _arrayLikeToArray$8(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArray$5(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _arrayWithHoles$6(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function createAnimateManager() {
      var currStyle = {};
      var handleChange = function handleChange2() {
        return null;
      };
      var shouldStop = false;
      var setStyle = function setStyle2(_style) {
        if (shouldStop) {
          return;
        }
        if (Array.isArray(_style)) {
          if (!_style.length) {
            return;
          }
          var styles = _style;
          var _styles = _toArray(styles), curr = _styles[0], restStyles = _styles.slice(1);
          if (typeof curr === "number") {
            setRafTimeout(setStyle2.bind(null, restStyles), curr);
            return;
          }
          setStyle2(curr);
          setRafTimeout(setStyle2.bind(null, restStyles));
          return;
        }
        if (_typeof$n(_style) === "object") {
          currStyle = _style;
          handleChange(currStyle);
        }
        if (typeof _style === "function") {
          _style();
        }
      };
      return {
        stop: function stop() {
          shouldStop = true;
        },
        start: function start(style) {
          shouldStop = false;
          setStyle(style);
        },
        subscribe: function subscribe(_handleChange) {
          handleChange = _handleChange;
          return function() {
            handleChange = function handleChange2() {
              return null;
            };
          };
        }
      };
    }
    function _typeof$m(o2) {
      "@babel/helpers - typeof";
      return _typeof$m = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o22) {
        return typeof o22;
      } : function(o22) {
        return o22 && "function" == typeof Symbol && o22.constructor === Symbol && o22 !== Symbol.prototype ? "symbol" : typeof o22;
      }, _typeof$m(o2);
    }
    function ownKeys$j(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r22) {
          return Object.getOwnPropertyDescriptor(e, r22).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$j(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$j(Object(t), true).forEach(function(r22) {
          _defineProperty$m(e, r22, t[r22]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$j(Object(t)).forEach(function(r22) {
          Object.defineProperty(e, r22, Object.getOwnPropertyDescriptor(t, r22));
        });
      }
      return e;
    }
    function _defineProperty$m(obj, key, value) {
      key = _toPropertyKey$m(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$m(arg) {
      var key = _toPrimitive$m(arg, "string");
      return _typeof$m(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive$m(input, hint) {
      if (_typeof$m(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint);
        if (_typeof$m(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var getIntersectionKeys = function getIntersectionKeys2(preObj, nextObj) {
      return [Object.keys(preObj), Object.keys(nextObj)].reduce(function(a2, b) {
        return a2.filter(function(c2) {
          return b.includes(c2);
        });
      });
    };
    var identity = function identity2(param) {
      return param;
    };
    var getDashCase = function getDashCase2(name) {
      return name.replace(/([A-Z])/g, function(v) {
        return "-".concat(v.toLowerCase());
      });
    };
    var mapObject = function mapObject2(fn, obj) {
      return Object.keys(obj).reduce(function(res, key) {
        return _objectSpread$j(_objectSpread$j({}, res), {}, _defineProperty$m({}, key, fn(key, obj[key])));
      }, {});
    };
    var getTransitionVal = function getTransitionVal2(props, duration, easing) {
      return props.map(function(prop) {
        return "".concat(getDashCase(prop), " ").concat(duration, "ms ").concat(easing);
      }).join(",");
    };
    function _slicedToArray$5(arr, i2) {
      return _arrayWithHoles$5(arr) || _iterableToArrayLimit$5(arr, i2) || _unsupportedIterableToArray$7(arr, i2) || _nonIterableRest$5();
    }
    function _nonIterableRest$5() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit$5(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n2, i2, u2, a2 = [], f = true, o2 = false;
        try {
          if (i2 = (t = t.call(r2)).next, 0 === l) ;
          else for (; !(f = (e = i2.call(t)).done) && (a2.push(e.value), a2.length !== l); f = true) ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f && null != t.return && (u2 = t.return(), Object(u2) !== u2)) return;
          } finally {
            if (o2) throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$5(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _toConsumableArray$4(arr) {
      return _arrayWithoutHoles$4(arr) || _iterableToArray$4(arr) || _unsupportedIterableToArray$7(arr) || _nonIterableSpread$4();
    }
    function _nonIterableSpread$4() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$7(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$7(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$7(o2, minLen);
    }
    function _iterableToArray$4(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _arrayWithoutHoles$4(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray$7(arr);
    }
    function _arrayLikeToArray$7(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    var ACCURACY = 1e-4;
    var cubicBezierFactor = function cubicBezierFactor2(c1, c2) {
      return [0, 3 * c1, 3 * c2 - 6 * c1, 3 * c1 - 3 * c2 + 1];
    };
    var multyTime = function multyTime2(params, t) {
      return params.map(function(param, i2) {
        return param * Math.pow(t, i2);
      }).reduce(function(pre, curr) {
        return pre + curr;
      });
    };
    var cubicBezier = function cubicBezier2(c1, c2) {
      return function(t) {
        var params = cubicBezierFactor(c1, c2);
        return multyTime(params, t);
      };
    };
    var derivativeCubicBezier = function derivativeCubicBezier2(c1, c2) {
      return function(t) {
        var params = cubicBezierFactor(c1, c2);
        var newParams = [].concat(_toConsumableArray$4(params.map(function(param, i2) {
          return param * i2;
        }).slice(1)), [0]);
        return multyTime(newParams, t);
      };
    };
    var configBezier = function configBezier2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var x1 = args[0], y1 = args[1], x2 = args[2], y2 = args[3];
      if (args.length === 1) {
        switch (args[0]) {
          case "linear":
            x1 = 0;
            y1 = 0;
            x2 = 1;
            y2 = 1;
            break;
          case "ease":
            x1 = 0.25;
            y1 = 0.1;
            x2 = 0.25;
            y2 = 1;
            break;
          case "ease-in":
            x1 = 0.42;
            y1 = 0;
            x2 = 1;
            y2 = 1;
            break;
          case "ease-out":
            x1 = 0.42;
            y1 = 0;
            x2 = 0.58;
            y2 = 1;
            break;
          case "ease-in-out":
            x1 = 0;
            y1 = 0;
            x2 = 0.58;
            y2 = 1;
            break;
          default: {
            var easing = args[0].split("(");
            if (easing[0] === "cubic-bezier" && easing[1].split(")")[0].split(",").length === 4) {
              var _easing$1$split$0$spl = easing[1].split(")")[0].split(",").map(function(x3) {
                return parseFloat(x3);
              });
              var _easing$1$split$0$spl2 = _slicedToArray$5(_easing$1$split$0$spl, 4);
              x1 = _easing$1$split$0$spl2[0];
              y1 = _easing$1$split$0$spl2[1];
              x2 = _easing$1$split$0$spl2[2];
              y2 = _easing$1$split$0$spl2[3];
            }
          }
        }
      }
      var curveX = cubicBezier(x1, x2);
      var curveY = cubicBezier(y1, y2);
      var derCurveX = derivativeCubicBezier(x1, x2);
      var rangeValue = function rangeValue2(value) {
        if (value > 1) {
          return 1;
        }
        if (value < 0) {
          return 0;
        }
        return value;
      };
      var bezier = function bezier2(_t) {
        var t = _t > 1 ? 1 : _t;
        var x3 = t;
        for (var i2 = 0; i2 < 8; ++i2) {
          var evalT = curveX(x3) - t;
          var derVal = derCurveX(x3);
          if (Math.abs(evalT - t) < ACCURACY || derVal < ACCURACY) {
            return curveY(x3);
          }
          x3 = rangeValue(x3 - evalT / derVal);
        }
        return curveY(x3);
      };
      bezier.isStepper = false;
      return bezier;
    };
    var configSpring = function configSpring2() {
      var config2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var _config$stiff = config2.stiff, stiff = _config$stiff === void 0 ? 100 : _config$stiff, _config$damping = config2.damping, damping = _config$damping === void 0 ? 8 : _config$damping, _config$dt = config2.dt, dt = _config$dt === void 0 ? 17 : _config$dt;
      var stepper = function stepper2(currX, destX, currV) {
        var FSpring = -(currX - destX) * stiff;
        var FDamping = currV * damping;
        var newV = currV + (FSpring - FDamping) * dt / 1e3;
        var newX = currV * dt / 1e3 + currX;
        if (Math.abs(newX - destX) < ACCURACY && Math.abs(newV) < ACCURACY) {
          return [destX, 0];
        }
        return [newX, newV];
      };
      stepper.isStepper = true;
      stepper.dt = dt;
      return stepper;
    };
    var configEasing = function configEasing2() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      var easing = args[0];
      if (typeof easing === "string") {
        switch (easing) {
          case "ease":
          case "ease-in-out":
          case "ease-out":
          case "ease-in":
          case "linear":
            return configBezier(easing);
          case "spring":
            return configSpring();
          default:
            if (easing.split("(")[0] === "cubic-bezier") {
              return configBezier(easing);
            }
        }
      }
      if (typeof easing === "function") {
        return easing;
      }
      return null;
    };
    function _typeof$l(o2) {
      "@babel/helpers - typeof";
      return _typeof$l = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$l(o2);
    }
    function _toConsumableArray$3(arr) {
      return _arrayWithoutHoles$3(arr) || _iterableToArray$3(arr) || _unsupportedIterableToArray$6(arr) || _nonIterableSpread$3();
    }
    function _nonIterableSpread$3() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArray$3(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _arrayWithoutHoles$3(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray$6(arr);
    }
    function ownKeys$i(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$i(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$i(Object(t), true).forEach(function(r3) {
          _defineProperty$l(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$i(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$l(obj, key, value) {
      key = _toPropertyKey$l(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$l(arg) {
      var key = _toPrimitive$l(arg, "string");
      return _typeof$l(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive$l(input, hint) {
      if (_typeof$l(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint);
        if (_typeof$l(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _slicedToArray$4(arr, i2) {
      return _arrayWithHoles$4(arr) || _iterableToArrayLimit$4(arr, i2) || _unsupportedIterableToArray$6(arr, i2) || _nonIterableRest$4();
    }
    function _nonIterableRest$4() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$6(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$6(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$6(o2, minLen);
    }
    function _arrayLikeToArray$6(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$4(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n2, i2, u2, a2 = [], f = true, o2 = false;
        try {
          if (i2 = (t = t.call(r2)).next, 0 === l) ;
          else for (; !(f = (e = i2.call(t)).done) && (a2.push(e.value), a2.length !== l); f = true) ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f && null != t.return && (u2 = t.return(), Object(u2) !== u2)) return;
          } finally {
            if (o2) throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$4(arr) {
      if (Array.isArray(arr)) return arr;
    }
    var alpha = function alpha2(begin, end, k2) {
      return begin + (end - begin) * k2;
    };
    var needContinue = function needContinue2(_ref) {
      var from2 = _ref.from, to2 = _ref.to;
      return from2 !== to2;
    };
    var calStepperVals = function calStepperVals2(easing, preVals, steps) {
      var nextStepVals = mapObject(function(key, val) {
        if (needContinue(val)) {
          var _easing = easing(val.from, val.to, val.velocity), _easing2 = _slicedToArray$4(_easing, 2), newX = _easing2[0], newV = _easing2[1];
          return _objectSpread$i(_objectSpread$i({}, val), {}, {
            from: newX,
            velocity: newV
          });
        }
        return val;
      }, preVals);
      if (steps < 1) {
        return mapObject(function(key, val) {
          if (needContinue(val)) {
            return _objectSpread$i(_objectSpread$i({}, val), {}, {
              velocity: alpha(val.velocity, nextStepVals[key].velocity, steps),
              from: alpha(val.from, nextStepVals[key].from, steps)
            });
          }
          return val;
        }, preVals);
      }
      return calStepperVals2(easing, nextStepVals, steps - 1);
    };
    const configUpdate = function(from2, to2, easing, duration, render) {
      var interKeys = getIntersectionKeys(from2, to2);
      var timingStyle = interKeys.reduce(function(res, key) {
        return _objectSpread$i(_objectSpread$i({}, res), {}, _defineProperty$l({}, key, [from2[key], to2[key]]));
      }, {});
      var stepperStyle = interKeys.reduce(function(res, key) {
        return _objectSpread$i(_objectSpread$i({}, res), {}, _defineProperty$l({}, key, {
          from: from2[key],
          velocity: 0,
          to: to2[key]
        }));
      }, {});
      var cafId = -1;
      var preTime;
      var beginTime;
      var update = function update2() {
        return null;
      };
      var getCurrStyle = function getCurrStyle2() {
        return mapObject(function(key, val) {
          return val.from;
        }, stepperStyle);
      };
      var shouldStopAnimation = function shouldStopAnimation2() {
        return !Object.values(stepperStyle).filter(needContinue).length;
      };
      var stepperUpdate = function stepperUpdate2(now2) {
        if (!preTime) {
          preTime = now2;
        }
        var deltaTime = now2 - preTime;
        var steps = deltaTime / easing.dt;
        stepperStyle = calStepperVals(easing, stepperStyle, steps);
        render(_objectSpread$i(_objectSpread$i(_objectSpread$i({}, from2), to2), getCurrStyle()));
        preTime = now2;
        if (!shouldStopAnimation()) {
          cafId = requestAnimationFrame(update);
        }
      };
      var timingUpdate = function timingUpdate2(now2) {
        if (!beginTime) {
          beginTime = now2;
        }
        var t = (now2 - beginTime) / duration;
        var currStyle = mapObject(function(key, val) {
          return alpha.apply(void 0, _toConsumableArray$3(val).concat([easing(t)]));
        }, timingStyle);
        render(_objectSpread$i(_objectSpread$i(_objectSpread$i({}, from2), to2), currStyle));
        if (t < 1) {
          cafId = requestAnimationFrame(update);
        } else {
          var finalStyle = mapObject(function(key, val) {
            return alpha.apply(void 0, _toConsumableArray$3(val).concat([easing(1)]));
          }, timingStyle);
          render(_objectSpread$i(_objectSpread$i(_objectSpread$i({}, from2), to2), finalStyle));
        }
      };
      update = easing.isStepper ? stepperUpdate : timingUpdate;
      return function() {
        requestAnimationFrame(update);
        return function() {
          cancelAnimationFrame(cafId);
        };
      };
    };
    function _typeof$k(o2) {
      "@babel/helpers - typeof";
      return _typeof$k = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$k(o2);
    }
    var _excluded$7 = ["children", "begin", "duration", "attributeName", "easing", "isActive", "steps", "from", "to", "canBegin", "onAnimationEnd", "shouldReAnimate", "onAnimationReStart"];
    function _objectWithoutProperties$7(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$7(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$7(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function _toConsumableArray$2(arr) {
      return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$5(arr) || _nonIterableSpread$2();
    }
    function _nonIterableSpread$2() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$5(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$5(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$5(o2, minLen);
    }
    function _iterableToArray$2(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _arrayWithoutHoles$2(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray$5(arr);
    }
    function _arrayLikeToArray$5(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function ownKeys$h(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$h(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$h(Object(t), true).forEach(function(r3) {
          _defineProperty$k(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$h(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$k(obj, key, value) {
      key = _toPropertyKey$k(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck$b(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$b(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$k(descriptor.key), descriptor);
      }
    }
    function _createClass$b(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$b(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey$k(arg) {
      var key = _toPrimitive$k(arg, "string");
      return _typeof$k(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive$k(input, hint) {
      if (_typeof$k(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint);
        if (_typeof$k(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _inherits$9(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$9(subClass, superClass);
    }
    function _setPrototypeOf$9(o2, p2) {
      _setPrototypeOf$9 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$9(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$9();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf$9(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf$9(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn$9(this, result);
      };
    }
    function _possibleConstructorReturn$9(self2, call) {
      if (call && (_typeof$k(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$9(self2);
    }
    function _assertThisInitialized$9(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$9() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf$9(o2) {
      _getPrototypeOf$9 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$9(o2);
    }
    var Animate = /* @__PURE__ */ function(_PureComponent) {
      _inherits$9(Animate2, _PureComponent);
      var _super = _createSuper(Animate2);
      function Animate2(props, context) {
        var _this;
        _classCallCheck$b(this, Animate2);
        _this = _super.call(this, props, context);
        var _this$props = _this.props, isActive = _this$props.isActive, attributeName = _this$props.attributeName, from2 = _this$props.from, to2 = _this$props.to, steps = _this$props.steps, children = _this$props.children, duration = _this$props.duration;
        _this.handleStyleChange = _this.handleStyleChange.bind(_assertThisInitialized$9(_this));
        _this.changeStyle = _this.changeStyle.bind(_assertThisInitialized$9(_this));
        if (!isActive || duration <= 0) {
          _this.state = {
            style: {}
          };
          if (typeof children === "function") {
            _this.state = {
              style: to2
            };
          }
          return _possibleConstructorReturn$9(_this);
        }
        if (steps && steps.length) {
          _this.state = {
            style: steps[0].style
          };
        } else if (from2) {
          if (typeof children === "function") {
            _this.state = {
              style: from2
            };
            return _possibleConstructorReturn$9(_this);
          }
          _this.state = {
            style: attributeName ? _defineProperty$k({}, attributeName, from2) : from2
          };
        } else {
          _this.state = {
            style: {}
          };
        }
        return _this;
      }
      _createClass$b(Animate2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this$props2 = this.props, isActive = _this$props2.isActive, canBegin = _this$props2.canBegin;
          this.mounted = true;
          if (!isActive || !canBegin) {
            return;
          }
          this.runAnimation(this.props);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this$props3 = this.props, isActive = _this$props3.isActive, canBegin = _this$props3.canBegin, attributeName = _this$props3.attributeName, shouldReAnimate = _this$props3.shouldReAnimate, to2 = _this$props3.to, currentFrom = _this$props3.from;
          var style = this.state.style;
          if (!canBegin) {
            return;
          }
          if (!isActive) {
            var newState = {
              style: attributeName ? _defineProperty$k({}, attributeName, to2) : to2
            };
            if (this.state && style) {
              if (attributeName && style[attributeName] !== to2 || !attributeName && style !== to2) {
                this.setState(newState);
              }
            }
            return;
          }
          if (deepEqual(prevProps.to, to2) && prevProps.canBegin && prevProps.isActive) {
            return;
          }
          var isTriggered = !prevProps.canBegin || !prevProps.isActive;
          if (this.manager) {
            this.manager.stop();
          }
          if (this.stopJSAnimation) {
            this.stopJSAnimation();
          }
          var from2 = isTriggered || shouldReAnimate ? currentFrom : prevProps.to;
          if (this.state && style) {
            var _newState = {
              style: attributeName ? _defineProperty$k({}, attributeName, from2) : from2
            };
            if (attributeName && style[attributeName] !== from2 || !attributeName && style !== from2) {
              this.setState(_newState);
            }
          }
          this.runAnimation(_objectSpread$h(_objectSpread$h({}, this.props), {}, {
            from: from2,
            begin: 0
          }));
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.mounted = false;
          var onAnimationEnd = this.props.onAnimationEnd;
          if (this.unSubscribe) {
            this.unSubscribe();
          }
          if (this.manager) {
            this.manager.stop();
            this.manager = null;
          }
          if (this.stopJSAnimation) {
            this.stopJSAnimation();
          }
          if (onAnimationEnd) {
            onAnimationEnd();
          }
        }
      }, {
        key: "handleStyleChange",
        value: function handleStyleChange(style) {
          this.changeStyle(style);
        }
      }, {
        key: "changeStyle",
        value: function changeStyle(style) {
          if (this.mounted) {
            this.setState({
              style
            });
          }
        }
      }, {
        key: "runJSAnimation",
        value: function runJSAnimation(props) {
          var _this2 = this;
          var from2 = props.from, to2 = props.to, duration = props.duration, easing = props.easing, begin = props.begin, onAnimationEnd = props.onAnimationEnd, onAnimationStart = props.onAnimationStart;
          var startAnimation = configUpdate(from2, to2, configEasing(easing), duration, this.changeStyle);
          var finalStartAnimation = function finalStartAnimation2() {
            _this2.stopJSAnimation = startAnimation();
          };
          this.manager.start([onAnimationStart, begin, finalStartAnimation, duration, onAnimationEnd]);
        }
      }, {
        key: "runStepAnimation",
        value: function runStepAnimation(props) {
          var _this3 = this;
          var steps = props.steps, begin = props.begin, onAnimationStart = props.onAnimationStart;
          var _steps$ = steps[0], initialStyle = _steps$.style, _steps$$duration = _steps$.duration, initialTime = _steps$$duration === void 0 ? 0 : _steps$$duration;
          var addStyle = function addStyle2(sequence, nextItem, index2) {
            if (index2 === 0) {
              return sequence;
            }
            var duration = nextItem.duration, _nextItem$easing = nextItem.easing, easing = _nextItem$easing === void 0 ? "ease" : _nextItem$easing, style = nextItem.style, nextProperties = nextItem.properties, onAnimationEnd = nextItem.onAnimationEnd;
            var preItem = index2 > 0 ? steps[index2 - 1] : nextItem;
            var properties = nextProperties || Object.keys(style);
            if (typeof easing === "function" || easing === "spring") {
              return [].concat(_toConsumableArray$2(sequence), [_this3.runJSAnimation.bind(_this3, {
                from: preItem.style,
                to: style,
                duration,
                easing
              }), duration]);
            }
            var transition = getTransitionVal(properties, duration, easing);
            var newStyle = _objectSpread$h(_objectSpread$h(_objectSpread$h({}, preItem.style), style), {}, {
              transition
            });
            return [].concat(_toConsumableArray$2(sequence), [newStyle, duration, onAnimationEnd]).filter(identity);
          };
          return this.manager.start([onAnimationStart].concat(_toConsumableArray$2(steps.reduce(addStyle, [initialStyle, Math.max(initialTime, begin)])), [props.onAnimationEnd]));
        }
      }, {
        key: "runAnimation",
        value: function runAnimation(props) {
          if (!this.manager) {
            this.manager = createAnimateManager();
          }
          var begin = props.begin, duration = props.duration, attributeName = props.attributeName, propsTo = props.to, easing = props.easing, onAnimationStart = props.onAnimationStart, onAnimationEnd = props.onAnimationEnd, steps = props.steps, children = props.children;
          var manager = this.manager;
          this.unSubscribe = manager.subscribe(this.handleStyleChange);
          if (typeof easing === "function" || typeof children === "function" || easing === "spring") {
            this.runJSAnimation(props);
            return;
          }
          if (steps.length > 1) {
            this.runStepAnimation(props);
            return;
          }
          var to2 = attributeName ? _defineProperty$k({}, attributeName, propsTo) : propsTo;
          var transition = getTransitionVal(Object.keys(to2), duration, easing);
          manager.start([onAnimationStart, begin, _objectSpread$h(_objectSpread$h({}, to2), {}, {
            transition
          }), duration, onAnimationEnd]);
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props4 = this.props, children = _this$props4.children;
          _this$props4.begin;
          var duration = _this$props4.duration;
          _this$props4.attributeName;
          _this$props4.easing;
          var isActive = _this$props4.isActive;
          _this$props4.steps;
          _this$props4.from;
          _this$props4.to;
          _this$props4.canBegin;
          _this$props4.onAnimationEnd;
          _this$props4.shouldReAnimate;
          _this$props4.onAnimationReStart;
          var others = _objectWithoutProperties$7(_this$props4, _excluded$7);
          var count2 = reactExports.Children.count(children);
          var stateStyle = this.state.style;
          if (typeof children === "function") {
            return children(stateStyle);
          }
          if (!isActive || count2 === 0 || duration <= 0) {
            return children;
          }
          var cloneContainer = function cloneContainer2(container) {
            var _container$props = container.props, _container$props$styl = _container$props.style, style = _container$props$styl === void 0 ? {} : _container$props$styl, className = _container$props.className;
            var res = /* @__PURE__ */ reactExports.cloneElement(container, _objectSpread$h(_objectSpread$h({}, others), {}, {
              style: _objectSpread$h(_objectSpread$h({}, style), stateStyle),
              className
            }));
            return res;
          };
          if (count2 === 1) {
            return cloneContainer(reactExports.Children.only(children));
          }
          return /* @__PURE__ */ React.createElement("div", null, reactExports.Children.map(children, function(child) {
            return cloneContainer(child);
          }));
        }
      }]);
      return Animate2;
    }(reactExports.PureComponent);
    Animate.displayName = "Animate";
    Animate.defaultProps = {
      begin: 0,
      duration: 1e3,
      from: "",
      to: "",
      attributeName: "",
      easing: "ease",
      isActive: true,
      canBegin: true,
      steps: [],
      onAnimationEnd: function onAnimationEnd() {
      },
      onAnimationStart: function onAnimationStart() {
      }
    };
    Animate.propTypes = {
      from: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
      to: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
      attributeName: PropTypes.string,
      // animation duration
      duration: PropTypes.number,
      begin: PropTypes.number,
      easing: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
      steps: PropTypes.arrayOf(PropTypes.shape({
        duration: PropTypes.number.isRequired,
        style: PropTypes.object.isRequired,
        easing: PropTypes.oneOfType([PropTypes.oneOf(["ease", "ease-in", "ease-out", "ease-in-out", "linear"]), PropTypes.func]),
        // transition css properties(dash case), optional
        properties: PropTypes.arrayOf("string"),
        onAnimationEnd: PropTypes.func
      })),
      children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
      isActive: PropTypes.bool,
      canBegin: PropTypes.bool,
      onAnimationEnd: PropTypes.func,
      // decide if it should reanimate with initial from style when props change
      shouldReAnimate: PropTypes.bool,
      onAnimationStart: PropTypes.func,
      onAnimationReStart: PropTypes.func
    };
    function _typeof$j(o2) {
      "@babel/helpers - typeof";
      return _typeof$j = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$j(o2);
    }
    function _extends$e() {
      _extends$e = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$e.apply(this, arguments);
    }
    function _slicedToArray$3(arr, i2) {
      return _arrayWithHoles$3(arr) || _iterableToArrayLimit$3(arr, i2) || _unsupportedIterableToArray$4(arr, i2) || _nonIterableRest$3();
    }
    function _nonIterableRest$3() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$4(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$4(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$4(o2, minLen);
    }
    function _arrayLikeToArray$4(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$3(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n2, i2, u2, a2 = [], f = true, o2 = false;
        try {
          if (i2 = (t = t.call(r2)).next, 0 === l) ;
          else for (; !(f = (e = i2.call(t)).done) && (a2.push(e.value), a2.length !== l); f = true) ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f && null != t["return"] && (u2 = t["return"](), Object(u2) !== u2)) return;
          } finally {
            if (o2) throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$3(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function ownKeys$g(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$g(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$g(Object(t), true).forEach(function(r3) {
          _defineProperty$j(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$g(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$j(obj, key, value) {
      key = _toPropertyKey$j(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$j(t) {
      var i2 = _toPrimitive$j(t, "string");
      return "symbol" == _typeof$j(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$j(t, r2) {
      if ("object" != _typeof$j(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$j(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    var getRectanglePath = function getRectanglePath2(x2, y2, width, height, radius) {
      var maxRadius = Math.min(Math.abs(width) / 2, Math.abs(height) / 2);
      var ySign = height >= 0 ? 1 : -1;
      var xSign = width >= 0 ? 1 : -1;
      var clockWise = height >= 0 && width >= 0 || height < 0 && width < 0 ? 1 : 0;
      var path;
      if (maxRadius > 0 && radius instanceof Array) {
        var newRadius = [0, 0, 0, 0];
        for (var i2 = 0, len = 4; i2 < len; i2++) {
          newRadius[i2] = radius[i2] > maxRadius ? maxRadius : radius[i2];
        }
        path = "M".concat(x2, ",").concat(y2 + ySign * newRadius[0]);
        if (newRadius[0] > 0) {
          path += "A ".concat(newRadius[0], ",").concat(newRadius[0], ",0,0,").concat(clockWise, ",").concat(x2 + xSign * newRadius[0], ",").concat(y2);
        }
        path += "L ".concat(x2 + width - xSign * newRadius[1], ",").concat(y2);
        if (newRadius[1] > 0) {
          path += "A ".concat(newRadius[1], ",").concat(newRadius[1], ",0,0,").concat(clockWise, ",\n        ").concat(x2 + width, ",").concat(y2 + ySign * newRadius[1]);
        }
        path += "L ".concat(x2 + width, ",").concat(y2 + height - ySign * newRadius[2]);
        if (newRadius[2] > 0) {
          path += "A ".concat(newRadius[2], ",").concat(newRadius[2], ",0,0,").concat(clockWise, ",\n        ").concat(x2 + width - xSign * newRadius[2], ",").concat(y2 + height);
        }
        path += "L ".concat(x2 + xSign * newRadius[3], ",").concat(y2 + height);
        if (newRadius[3] > 0) {
          path += "A ".concat(newRadius[3], ",").concat(newRadius[3], ",0,0,").concat(clockWise, ",\n        ").concat(x2, ",").concat(y2 + height - ySign * newRadius[3]);
        }
        path += "Z";
      } else if (maxRadius > 0 && radius === +radius && radius > 0) {
        var _newRadius = Math.min(maxRadius, radius);
        path = "M ".concat(x2, ",").concat(y2 + ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2 + xSign * _newRadius, ",").concat(y2, "\n            L ").concat(x2 + width - xSign * _newRadius, ",").concat(y2, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2 + width, ",").concat(y2 + ySign * _newRadius, "\n            L ").concat(x2 + width, ",").concat(y2 + height - ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2 + width - xSign * _newRadius, ",").concat(y2 + height, "\n            L ").concat(x2 + xSign * _newRadius, ",").concat(y2 + height, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2, ",").concat(y2 + height - ySign * _newRadius, " Z");
      } else {
        path = "M ".concat(x2, ",").concat(y2, " h ").concat(width, " v ").concat(height, " h ").concat(-width, " Z");
      }
      return path;
    };
    var isInRectangle = function isInRectangle2(point2, rect) {
      if (!point2 || !rect) {
        return false;
      }
      var px = point2.x, py = point2.y;
      var x2 = rect.x, y2 = rect.y, width = rect.width, height = rect.height;
      if (Math.abs(width) > 0 && Math.abs(height) > 0) {
        var minX = Math.min(x2, x2 + width);
        var maxX = Math.max(x2, x2 + width);
        var minY = Math.min(y2, y2 + height);
        var maxY = Math.max(y2, y2 + height);
        return px >= minX && px <= maxX && py >= minY && py <= maxY;
      }
      return false;
    };
    var defaultProps$2 = {
      x: 0,
      y: 0,
      width: 0,
      height: 0,
      // The radius of border
      // The radius of four corners when radius is a number
      // The radius of left-top, right-top, right-bottom, left-bottom when radius is an array
      radius: 0,
      isAnimationActive: false,
      isUpdateAnimationActive: false,
      animationBegin: 0,
      animationDuration: 1500,
      animationEasing: "ease"
    };
    var Rectangle = function Rectangle2(rectangleProps) {
      var props = _objectSpread$g(_objectSpread$g({}, defaultProps$2), rectangleProps);
      var pathRef = reactExports.useRef();
      var _useState = reactExports.useState(-1), _useState2 = _slicedToArray$3(_useState, 2), totalLength = _useState2[0], setTotalLength = _useState2[1];
      reactExports.useEffect(function() {
        if (pathRef.current && pathRef.current.getTotalLength) {
          try {
            var pathTotalLength = pathRef.current.getTotalLength();
            if (pathTotalLength) {
              setTotalLength(pathTotalLength);
            }
          } catch (err) {
          }
        }
      }, []);
      var x2 = props.x, y2 = props.y, width = props.width, height = props.height, radius = props.radius, className = props.className;
      var animationEasing = props.animationEasing, animationDuration = props.animationDuration, animationBegin = props.animationBegin, isAnimationActive = props.isAnimationActive, isUpdateAnimationActive = props.isUpdateAnimationActive;
      if (x2 !== +x2 || y2 !== +y2 || width !== +width || height !== +height || width === 0 || height === 0) {
        return null;
      }
      var layerClass = clsx("recharts-rectangle", className);
      if (!isUpdateAnimationActive) {
        return /* @__PURE__ */ React.createElement("path", _extends$e({}, filterProps(props, true), {
          className: layerClass,
          d: getRectanglePath(x2, y2, width, height, radius)
        }));
      }
      return /* @__PURE__ */ React.createElement(Animate, {
        canBegin: totalLength > 0,
        from: {
          width,
          height,
          x: x2,
          y: y2
        },
        to: {
          width,
          height,
          x: x2,
          y: y2
        },
        duration: animationDuration,
        animationEasing,
        isActive: isUpdateAnimationActive
      }, function(_ref) {
        var currWidth = _ref.width, currHeight = _ref.height, currX = _ref.x, currY = _ref.y;
        return /* @__PURE__ */ React.createElement(Animate, {
          canBegin: totalLength > 0,
          from: "0px ".concat(totalLength === -1 ? 1 : totalLength, "px"),
          to: "".concat(totalLength, "px 0px"),
          attributeName: "strokeDasharray",
          begin: animationBegin,
          duration: animationDuration,
          isActive: isAnimationActive,
          easing: animationEasing
        }, /* @__PURE__ */ React.createElement("path", _extends$e({}, filterProps(props, true), {
          className: layerClass,
          d: getRectanglePath(currX, currY, currWidth, currHeight, radius),
          ref: pathRef
        })));
      });
    };
    function _extends$d() {
      _extends$d = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$d.apply(this, arguments);
    }
    var Dot = function Dot2(props) {
      var cx2 = props.cx, cy = props.cy, r2 = props.r, className = props.className;
      var layerClass = clsx("recharts-dot", className);
      if (cx2 === +cx2 && cy === +cy && r2 === +r2) {
        return /* @__PURE__ */ React.createElement("circle", _extends$d({}, filterProps(props, false), adaptEventHandlers(props), {
          className: layerClass,
          cx: cx2,
          cy,
          r: r2
        }));
      }
      return null;
    };
    function _typeof$i(o2) {
      "@babel/helpers - typeof";
      return _typeof$i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$i(o2);
    }
    var _excluded$6 = ["x", "y", "top", "left", "width", "height", "className"];
    function _extends$c() {
      _extends$c = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$c.apply(this, arguments);
    }
    function ownKeys$f(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$f(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$f(Object(t), true).forEach(function(r3) {
          _defineProperty$i(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$f(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$i(obj, key, value) {
      key = _toPropertyKey$i(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$i(t) {
      var i2 = _toPrimitive$i(t, "string");
      return "symbol" == _typeof$i(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$i(t, r2) {
      if ("object" != _typeof$i(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$i(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function _objectWithoutProperties$6(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$6(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$6(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var getPath = function getPath2(x2, y2, width, height, top, left) {
      return "M".concat(x2, ",").concat(top, "v").concat(height, "M").concat(left, ",").concat(y2, "h").concat(width);
    };
    var Cross = function Cross2(_ref) {
      var _ref$x = _ref.x, x2 = _ref$x === void 0 ? 0 : _ref$x, _ref$y = _ref.y, y2 = _ref$y === void 0 ? 0 : _ref$y, _ref$top = _ref.top, top = _ref$top === void 0 ? 0 : _ref$top, _ref$left = _ref.left, left = _ref$left === void 0 ? 0 : _ref$left, _ref$width = _ref.width, width = _ref$width === void 0 ? 0 : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? 0 : _ref$height, className = _ref.className, rest = _objectWithoutProperties$6(_ref, _excluded$6);
      var props = _objectSpread$f({
        x: x2,
        y: y2,
        top,
        left,
        width,
        height
      }, rest);
      if (!isNumber(x2) || !isNumber(y2) || !isNumber(width) || !isNumber(height) || !isNumber(top) || !isNumber(left)) {
        return null;
      }
      return /* @__PURE__ */ React.createElement("path", _extends$c({}, filterProps(props, true), {
        className: clsx("recharts-cross", className),
        d: getPath(x2, y2, width, height, top, left)
      }));
    };
    var _getPrototype;
    var hasRequired_getPrototype;
    function require_getPrototype() {
      if (hasRequired_getPrototype) return _getPrototype;
      hasRequired_getPrototype = 1;
      var overArg = require_overArg();
      var getPrototype = overArg(Object.getPrototypeOf, Object);
      _getPrototype = getPrototype;
      return _getPrototype;
    }
    var isPlainObject_1;
    var hasRequiredIsPlainObject;
    function requireIsPlainObject() {
      if (hasRequiredIsPlainObject) return isPlainObject_1;
      hasRequiredIsPlainObject = 1;
      var baseGetTag = require_baseGetTag(), getPrototype = require_getPrototype(), isObjectLike = requireIsObjectLike();
      var objectTag = "[object Object]";
      var funcProto = Function.prototype, objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var objectCtorString = funcToString.call(Object);
      function isPlainObject2(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto2 = getPrototype(value);
        if (proto2 === null) {
          return true;
        }
        var Ctor = hasOwnProperty2.call(proto2, "constructor") && proto2.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      isPlainObject_1 = isPlainObject2;
      return isPlainObject_1;
    }
    var isPlainObjectExports = requireIsPlainObject();
    const isPlainObject = /* @__PURE__ */ getDefaultExportFromCjs(isPlainObjectExports);
    var isBoolean_1;
    var hasRequiredIsBoolean;
    function requireIsBoolean() {
      if (hasRequiredIsBoolean) return isBoolean_1;
      hasRequiredIsBoolean = 1;
      var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
      var boolTag = "[object Boolean]";
      function isBoolean2(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }
      isBoolean_1 = isBoolean2;
      return isBoolean_1;
    }
    var isBooleanExports = requireIsBoolean();
    const isBoolean = /* @__PURE__ */ getDefaultExportFromCjs(isBooleanExports);
    function _typeof$h(o2) {
      "@babel/helpers - typeof";
      return _typeof$h = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$h(o2);
    }
    function _extends$b() {
      _extends$b = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$b.apply(this, arguments);
    }
    function _slicedToArray$2(arr, i2) {
      return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i2) || _unsupportedIterableToArray$3(arr, i2) || _nonIterableRest$2();
    }
    function _nonIterableRest$2() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$3(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$3(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$3(o2, minLen);
    }
    function _arrayLikeToArray$3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$2(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n2, i2, u2, a2 = [], f = true, o2 = false;
        try {
          if (i2 = (t = t.call(r2)).next, 0 === l) ;
          else for (; !(f = (e = i2.call(t)).done) && (a2.push(e.value), a2.length !== l); f = true) ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f && null != t["return"] && (u2 = t["return"](), Object(u2) !== u2)) return;
          } finally {
            if (o2) throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$2(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function ownKeys$e(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$e(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$e(Object(t), true).forEach(function(r3) {
          _defineProperty$h(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$e(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$h(obj, key, value) {
      key = _toPropertyKey$h(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$h(t) {
      var i2 = _toPrimitive$h(t, "string");
      return "symbol" == _typeof$h(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$h(t, r2) {
      if ("object" != _typeof$h(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$h(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    var getTrapezoidPath = function getTrapezoidPath2(x2, y2, upperWidth, lowerWidth, height) {
      var widthGap = upperWidth - lowerWidth;
      var path;
      path = "M ".concat(x2, ",").concat(y2);
      path += "L ".concat(x2 + upperWidth, ",").concat(y2);
      path += "L ".concat(x2 + upperWidth - widthGap / 2, ",").concat(y2 + height);
      path += "L ".concat(x2 + upperWidth - widthGap / 2 - lowerWidth, ",").concat(y2 + height);
      path += "L ".concat(x2, ",").concat(y2, " Z");
      return path;
    };
    var defaultProps$1 = {
      x: 0,
      y: 0,
      upperWidth: 0,
      lowerWidth: 0,
      height: 0,
      isUpdateAnimationActive: false,
      animationBegin: 0,
      animationDuration: 1500,
      animationEasing: "ease"
    };
    var Trapezoid = function Trapezoid2(props) {
      var trapezoidProps = _objectSpread$e(_objectSpread$e({}, defaultProps$1), props);
      var pathRef = reactExports.useRef();
      var _useState = reactExports.useState(-1), _useState2 = _slicedToArray$2(_useState, 2), totalLength = _useState2[0], setTotalLength = _useState2[1];
      reactExports.useEffect(function() {
        if (pathRef.current && pathRef.current.getTotalLength) {
          try {
            var pathTotalLength = pathRef.current.getTotalLength();
            if (pathTotalLength) {
              setTotalLength(pathTotalLength);
            }
          } catch (err) {
          }
        }
      }, []);
      var x2 = trapezoidProps.x, y2 = trapezoidProps.y, upperWidth = trapezoidProps.upperWidth, lowerWidth = trapezoidProps.lowerWidth, height = trapezoidProps.height, className = trapezoidProps.className;
      var animationEasing = trapezoidProps.animationEasing, animationDuration = trapezoidProps.animationDuration, animationBegin = trapezoidProps.animationBegin, isUpdateAnimationActive = trapezoidProps.isUpdateAnimationActive;
      if (x2 !== +x2 || y2 !== +y2 || upperWidth !== +upperWidth || lowerWidth !== +lowerWidth || height !== +height || upperWidth === 0 && lowerWidth === 0 || height === 0) {
        return null;
      }
      var layerClass = clsx("recharts-trapezoid", className);
      if (!isUpdateAnimationActive) {
        return /* @__PURE__ */ React.createElement("g", null, /* @__PURE__ */ React.createElement("path", _extends$b({}, filterProps(trapezoidProps, true), {
          className: layerClass,
          d: getTrapezoidPath(x2, y2, upperWidth, lowerWidth, height)
        })));
      }
      return /* @__PURE__ */ React.createElement(Animate, {
        canBegin: totalLength > 0,
        from: {
          upperWidth: 0,
          lowerWidth: 0,
          height,
          x: x2,
          y: y2
        },
        to: {
          upperWidth,
          lowerWidth,
          height,
          x: x2,
          y: y2
        },
        duration: animationDuration,
        animationEasing,
        isActive: isUpdateAnimationActive
      }, function(_ref) {
        var currUpperWidth = _ref.upperWidth, currLowerWidth = _ref.lowerWidth, currHeight = _ref.height, currX = _ref.x, currY = _ref.y;
        return /* @__PURE__ */ React.createElement(Animate, {
          canBegin: totalLength > 0,
          from: "0px ".concat(totalLength === -1 ? 1 : totalLength, "px"),
          to: "".concat(totalLength, "px 0px"),
          attributeName: "strokeDasharray",
          begin: animationBegin,
          duration: animationDuration,
          easing: animationEasing
        }, /* @__PURE__ */ React.createElement("path", _extends$b({}, filterProps(trapezoidProps, true), {
          className: layerClass,
          d: getTrapezoidPath(currX, currY, currUpperWidth, currLowerWidth, currHeight),
          ref: pathRef
        })));
      });
    };
    var _excluded$5 = ["option", "shapeType", "propTransformer", "activeClassName", "isActive"];
    function _typeof$g(o2) {
      "@babel/helpers - typeof";
      return _typeof$g = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$g(o2);
    }
    function _objectWithoutProperties$5(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$5(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$5(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function ownKeys$d(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$d(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$d(Object(t), true).forEach(function(r3) {
          _defineProperty$g(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$d(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$g(obj, key, value) {
      key = _toPropertyKey$g(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$g(t) {
      var i2 = _toPrimitive$g(t, "string");
      return "symbol" == _typeof$g(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$g(t, r2) {
      if ("object" != _typeof$g(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$g(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function defaultPropTransformer(option, props) {
      return _objectSpread$d(_objectSpread$d({}, props), option);
    }
    function isSymbolsProps(shapeType, _elementProps) {
      return shapeType === "symbols";
    }
    function ShapeSelector(_ref) {
      var shapeType = _ref.shapeType, elementProps = _ref.elementProps;
      switch (shapeType) {
        case "rectangle":
          return /* @__PURE__ */ React.createElement(Rectangle, elementProps);
        case "trapezoid":
          return /* @__PURE__ */ React.createElement(Trapezoid, elementProps);
        case "sector":
          return /* @__PURE__ */ React.createElement(Sector, elementProps);
        case "symbols":
          if (isSymbolsProps(shapeType)) {
            return /* @__PURE__ */ React.createElement(Symbols, elementProps);
          }
          break;
        default:
          return null;
      }
    }
    function getPropsFromShapeOption(option) {
      if (/* @__PURE__ */ reactExports.isValidElement(option)) {
        return option.props;
      }
      return option;
    }
    function Shape(_ref2) {
      var option = _ref2.option, shapeType = _ref2.shapeType, _ref2$propTransformer = _ref2.propTransformer, propTransformer = _ref2$propTransformer === void 0 ? defaultPropTransformer : _ref2$propTransformer, _ref2$activeClassName = _ref2.activeClassName, activeClassName = _ref2$activeClassName === void 0 ? "recharts-active-shape" : _ref2$activeClassName, isActive = _ref2.isActive, props = _objectWithoutProperties$5(_ref2, _excluded$5);
      var shape;
      if (/* @__PURE__ */ reactExports.isValidElement(option)) {
        shape = /* @__PURE__ */ reactExports.cloneElement(option, _objectSpread$d(_objectSpread$d({}, props), getPropsFromShapeOption(option)));
      } else if (isFunction(option)) {
        shape = option(props);
      } else if (isPlainObject(option) && !isBoolean(option)) {
        var nextProps = propTransformer(option, props);
        shape = /* @__PURE__ */ React.createElement(ShapeSelector, {
          shapeType,
          elementProps: nextProps
        });
      } else {
        var elementProps = props;
        shape = /* @__PURE__ */ React.createElement(ShapeSelector, {
          shapeType,
          elementProps
        });
      }
      if (isActive) {
        return /* @__PURE__ */ React.createElement(Layer, {
          className: activeClassName
        }, shape);
      }
      return shape;
    }
    function isFunnel(graphicalItem, _item) {
      return _item != null && "trapezoids" in graphicalItem.props;
    }
    function isPie(graphicalItem, _item) {
      return _item != null && "sectors" in graphicalItem.props;
    }
    function isScatter(graphicalItem, _item) {
      return _item != null && "points" in graphicalItem.props;
    }
    function compareFunnel(shapeData, activeTooltipItem) {
      var _activeTooltipItem$la, _activeTooltipItem$la2;
      var xMatches = shapeData.x === (activeTooltipItem === null || activeTooltipItem === void 0 || (_activeTooltipItem$la = activeTooltipItem.labelViewBox) === null || _activeTooltipItem$la === void 0 ? void 0 : _activeTooltipItem$la.x) || shapeData.x === activeTooltipItem.x;
      var yMatches = shapeData.y === (activeTooltipItem === null || activeTooltipItem === void 0 || (_activeTooltipItem$la2 = activeTooltipItem.labelViewBox) === null || _activeTooltipItem$la2 === void 0 ? void 0 : _activeTooltipItem$la2.y) || shapeData.y === activeTooltipItem.y;
      return xMatches && yMatches;
    }
    function comparePie(shapeData, activeTooltipItem) {
      var startAngleMatches = shapeData.endAngle === activeTooltipItem.endAngle;
      var endAngleMatches = shapeData.startAngle === activeTooltipItem.startAngle;
      return startAngleMatches && endAngleMatches;
    }
    function compareScatter(shapeData, activeTooltipItem) {
      var xMatches = shapeData.x === activeTooltipItem.x;
      var yMatches = shapeData.y === activeTooltipItem.y;
      var zMatches = shapeData.z === activeTooltipItem.z;
      return xMatches && yMatches && zMatches;
    }
    function getComparisonFn(graphicalItem, activeItem) {
      var comparison;
      if (isFunnel(graphicalItem, activeItem)) {
        comparison = compareFunnel;
      } else if (isPie(graphicalItem, activeItem)) {
        comparison = comparePie;
      } else if (isScatter(graphicalItem, activeItem)) {
        comparison = compareScatter;
      }
      return comparison;
    }
    function getShapeDataKey(graphicalItem, activeItem) {
      var shapeKey;
      if (isFunnel(graphicalItem, activeItem)) {
        shapeKey = "trapezoids";
      } else if (isPie(graphicalItem, activeItem)) {
        shapeKey = "sectors";
      } else if (isScatter(graphicalItem, activeItem)) {
        shapeKey = "points";
      }
      return shapeKey;
    }
    function getActiveShapeTooltipPayload(graphicalItem, activeItem) {
      if (isFunnel(graphicalItem, activeItem)) {
        var _activeItem$tooltipPa;
        return (_activeItem$tooltipPa = activeItem.tooltipPayload) === null || _activeItem$tooltipPa === void 0 || (_activeItem$tooltipPa = _activeItem$tooltipPa[0]) === null || _activeItem$tooltipPa === void 0 || (_activeItem$tooltipPa = _activeItem$tooltipPa.payload) === null || _activeItem$tooltipPa === void 0 ? void 0 : _activeItem$tooltipPa.payload;
      }
      if (isPie(graphicalItem, activeItem)) {
        var _activeItem$tooltipPa2;
        return (_activeItem$tooltipPa2 = activeItem.tooltipPayload) === null || _activeItem$tooltipPa2 === void 0 || (_activeItem$tooltipPa2 = _activeItem$tooltipPa2[0]) === null || _activeItem$tooltipPa2 === void 0 || (_activeItem$tooltipPa2 = _activeItem$tooltipPa2.payload) === null || _activeItem$tooltipPa2 === void 0 ? void 0 : _activeItem$tooltipPa2.payload;
      }
      if (isScatter(graphicalItem, activeItem)) {
        return activeItem.payload;
      }
      return {};
    }
    function getActiveShapeIndexForTooltip(_ref3) {
      var activeTooltipItem = _ref3.activeTooltipItem, graphicalItem = _ref3.graphicalItem, itemData = _ref3.itemData;
      var shapeKey = getShapeDataKey(graphicalItem, activeTooltipItem);
      var tooltipPayload = getActiveShapeTooltipPayload(graphicalItem, activeTooltipItem);
      var activeItemMatches = itemData.filter(function(datum, dataIndex) {
        var valuesMatch = isEqual(tooltipPayload, datum);
        var mouseCoordinateMatches = graphicalItem.props[shapeKey].filter(function(shapeData) {
          var comparison = getComparisonFn(graphicalItem, activeTooltipItem);
          return comparison(shapeData, activeTooltipItem);
        });
        var indexOfMouseCoordinates = graphicalItem.props[shapeKey].indexOf(mouseCoordinateMatches[mouseCoordinateMatches.length - 1]);
        var coordinatesMatch = dataIndex === indexOfMouseCoordinates;
        return valuesMatch && coordinatesMatch;
      });
      var activeIndex = itemData.indexOf(activeItemMatches[activeItemMatches.length - 1]);
      return activeIndex;
    }
    var _baseRange;
    var hasRequired_baseRange;
    function require_baseRange() {
      if (hasRequired_baseRange) return _baseRange;
      hasRequired_baseRange = 1;
      var nativeCeil = Math.ceil, nativeMax = Math.max;
      function baseRange(start, end, step, fromRight) {
        var index2 = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
        while (length--) {
          result[fromRight ? length : ++index2] = start;
          start += step;
        }
        return result;
      }
      _baseRange = baseRange;
      return _baseRange;
    }
    var toFinite_1;
    var hasRequiredToFinite;
    function requireToFinite() {
      if (hasRequiredToFinite) return toFinite_1;
      hasRequiredToFinite = 1;
      var toNumber = requireToNumber();
      var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -Infinity) {
          var sign2 = value < 0 ? -1 : 1;
          return sign2 * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }
      toFinite_1 = toFinite;
      return toFinite_1;
    }
    var _createRange;
    var hasRequired_createRange;
    function require_createRange() {
      if (hasRequired_createRange) return _createRange;
      hasRequired_createRange = 1;
      var baseRange = require_baseRange(), isIterateeCall = require_isIterateeCall(), toFinite = requireToFinite();
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
            end = step = void 0;
          }
          start = toFinite(start);
          if (end === void 0) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === void 0 ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }
      _createRange = createRange;
      return _createRange;
    }
    var range_1;
    var hasRequiredRange;
    function requireRange() {
      if (hasRequiredRange) return range_1;
      hasRequiredRange = 1;
      var createRange = require_createRange();
      var range2 = createRange();
      range_1 = range2;
      return range_1;
    }
    var rangeExports = requireRange();
    const range = /* @__PURE__ */ getDefaultExportFromCjs(rangeExports);
    function _typeof$f(o2) {
      "@babel/helpers - typeof";
      return _typeof$f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$f(o2);
    }
    function ownKeys$c(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$c(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$c(Object(t), true).forEach(function(r3) {
          _defineProperty$f(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$c(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$f(obj, key, value) {
      key = _toPropertyKey$f(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$f(t) {
      var i2 = _toPrimitive$f(t, "string");
      return "symbol" == _typeof$f(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$f(t, r2) {
      if ("object" != _typeof$f(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$f(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    var PREFIX_LIST = ["Webkit", "Moz", "O", "ms"];
    var generatePrefixStyle = function generatePrefixStyle2(name, value) {
      var camelName = name.replace(/(\w)/, function(v) {
        return v.toUpperCase();
      });
      var result = PREFIX_LIST.reduce(function(res, entry) {
        return _objectSpread$c(_objectSpread$c({}, res), {}, _defineProperty$f({}, entry + camelName, value));
      }, {});
      result[name] = value;
      return result;
    };
    function _typeof$e(o2) {
      "@babel/helpers - typeof";
      return _typeof$e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$e(o2);
    }
    function _extends$a() {
      _extends$a = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$a.apply(this, arguments);
    }
    function ownKeys$b(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$b(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$b(Object(t), true).forEach(function(r3) {
          _defineProperty$e(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$b(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _classCallCheck$a(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$a(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$e(descriptor.key), descriptor);
      }
    }
    function _createClass$a(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$a(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties$a(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$8(t, o2, e) {
      return o2 = _getPrototypeOf$8(o2), _possibleConstructorReturn$8(t, _isNativeReflectConstruct$8() ? Reflect.construct(o2, e || [], _getPrototypeOf$8(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$8(self2, call) {
      if (call && (_typeof$e(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$8(self2);
    }
    function _assertThisInitialized$8(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$8() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$8 = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$8(o2) {
      _getPrototypeOf$8 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$8(o2);
    }
    function _inherits$8(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$8(subClass, superClass);
    }
    function _setPrototypeOf$8(o2, p2) {
      _setPrototypeOf$8 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$8(o2, p2);
    }
    function _defineProperty$e(obj, key, value) {
      key = _toPropertyKey$e(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$e(t) {
      var i2 = _toPrimitive$e(t, "string");
      return "symbol" == _typeof$e(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$e(t, r2) {
      if ("object" != _typeof$e(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$e(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    var createScale = function createScale2(_ref) {
      var data = _ref.data, startIndex = _ref.startIndex, endIndex = _ref.endIndex, x2 = _ref.x, width = _ref.width, travellerWidth = _ref.travellerWidth;
      if (!data || !data.length) {
        return {};
      }
      var len = data.length;
      var scale = point().domain(range(0, len)).range([x2, x2 + width - travellerWidth]);
      var scaleValues = scale.domain().map(function(entry) {
        return scale(entry);
      });
      return {
        isTextActive: false,
        isSlideMoving: false,
        isTravellerMoving: false,
        isTravellerFocused: false,
        startX: scale(startIndex),
        endX: scale(endIndex),
        scale,
        scaleValues
      };
    };
    var isTouch = function isTouch2(e) {
      return e.changedTouches && !!e.changedTouches.length;
    };
    var Brush = /* @__PURE__ */ function(_PureComponent) {
      function Brush2(props) {
        var _this;
        _classCallCheck$a(this, Brush2);
        _this = _callSuper$8(this, Brush2, [props]);
        _defineProperty$e(_this, "handleDrag", function(e) {
          if (_this.leaveTimer) {
            clearTimeout(_this.leaveTimer);
            _this.leaveTimer = null;
          }
          if (_this.state.isTravellerMoving) {
            _this.handleTravellerMove(e);
          } else if (_this.state.isSlideMoving) {
            _this.handleSlideDrag(e);
          }
        });
        _defineProperty$e(_this, "handleTouchMove", function(e) {
          if (e.changedTouches != null && e.changedTouches.length > 0) {
            _this.handleDrag(e.changedTouches[0]);
          }
        });
        _defineProperty$e(_this, "handleDragEnd", function() {
          _this.setState({
            isTravellerMoving: false,
            isSlideMoving: false
          }, function() {
            var _this$props = _this.props, endIndex = _this$props.endIndex, onDragEnd = _this$props.onDragEnd, startIndex = _this$props.startIndex;
            onDragEnd === null || onDragEnd === void 0 || onDragEnd({
              endIndex,
              startIndex
            });
          });
          _this.detachDragEndListener();
        });
        _defineProperty$e(_this, "handleLeaveWrapper", function() {
          if (_this.state.isTravellerMoving || _this.state.isSlideMoving) {
            _this.leaveTimer = window.setTimeout(_this.handleDragEnd, _this.props.leaveTimeOut);
          }
        });
        _defineProperty$e(_this, "handleEnterSlideOrTraveller", function() {
          _this.setState({
            isTextActive: true
          });
        });
        _defineProperty$e(_this, "handleLeaveSlideOrTraveller", function() {
          _this.setState({
            isTextActive: false
          });
        });
        _defineProperty$e(_this, "handleSlideDragStart", function(e) {
          var event = isTouch(e) ? e.changedTouches[0] : e;
          _this.setState({
            isTravellerMoving: false,
            isSlideMoving: true,
            slideMoveStartX: event.pageX
          });
          _this.attachDragEndListener();
        });
        _this.travellerDragStartHandlers = {
          startX: _this.handleTravellerDragStart.bind(_this, "startX"),
          endX: _this.handleTravellerDragStart.bind(_this, "endX")
        };
        _this.state = {};
        return _this;
      }
      _inherits$8(Brush2, _PureComponent);
      return _createClass$a(Brush2, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this.leaveTimer) {
            clearTimeout(this.leaveTimer);
            this.leaveTimer = null;
          }
          this.detachDragEndListener();
        }
      }, {
        key: "getIndex",
        value: function getIndex(_ref2) {
          var startX = _ref2.startX, endX = _ref2.endX;
          var scaleValues = this.state.scaleValues;
          var _this$props2 = this.props, gap = _this$props2.gap, data = _this$props2.data;
          var lastIndex = data.length - 1;
          var min2 = Math.min(startX, endX);
          var max2 = Math.max(startX, endX);
          var minIndex = Brush2.getIndexInRange(scaleValues, min2);
          var maxIndex = Brush2.getIndexInRange(scaleValues, max2);
          return {
            startIndex: minIndex - minIndex % gap,
            endIndex: maxIndex === lastIndex ? lastIndex : maxIndex - maxIndex % gap
          };
        }
      }, {
        key: "getTextOfTick",
        value: function getTextOfTick(index2) {
          var _this$props3 = this.props, data = _this$props3.data, tickFormatter = _this$props3.tickFormatter, dataKey = _this$props3.dataKey;
          var text2 = getValueByDataKey(data[index2], dataKey, index2);
          return isFunction(tickFormatter) ? tickFormatter(text2, index2) : text2;
        }
      }, {
        key: "attachDragEndListener",
        value: function attachDragEndListener() {
          window.addEventListener("mouseup", this.handleDragEnd, true);
          window.addEventListener("touchend", this.handleDragEnd, true);
          window.addEventListener("mousemove", this.handleDrag, true);
        }
      }, {
        key: "detachDragEndListener",
        value: function detachDragEndListener() {
          window.removeEventListener("mouseup", this.handleDragEnd, true);
          window.removeEventListener("touchend", this.handleDragEnd, true);
          window.removeEventListener("mousemove", this.handleDrag, true);
        }
      }, {
        key: "handleSlideDrag",
        value: function handleSlideDrag(e) {
          var _this$state = this.state, slideMoveStartX = _this$state.slideMoveStartX, startX = _this$state.startX, endX = _this$state.endX;
          var _this$props4 = this.props, x2 = _this$props4.x, width = _this$props4.width, travellerWidth = _this$props4.travellerWidth, startIndex = _this$props4.startIndex, endIndex = _this$props4.endIndex, onChange = _this$props4.onChange;
          var delta = e.pageX - slideMoveStartX;
          if (delta > 0) {
            delta = Math.min(delta, x2 + width - travellerWidth - endX, x2 + width - travellerWidth - startX);
          } else if (delta < 0) {
            delta = Math.max(delta, x2 - startX, x2 - endX);
          }
          var newIndex = this.getIndex({
            startX: startX + delta,
            endX: endX + delta
          });
          if ((newIndex.startIndex !== startIndex || newIndex.endIndex !== endIndex) && onChange) {
            onChange(newIndex);
          }
          this.setState({
            startX: startX + delta,
            endX: endX + delta,
            slideMoveStartX: e.pageX
          });
        }
      }, {
        key: "handleTravellerDragStart",
        value: function handleTravellerDragStart(id, e) {
          var event = isTouch(e) ? e.changedTouches[0] : e;
          this.setState({
            isSlideMoving: false,
            isTravellerMoving: true,
            movingTravellerId: id,
            brushMoveStartX: event.pageX
          });
          this.attachDragEndListener();
        }
      }, {
        key: "handleTravellerMove",
        value: function handleTravellerMove(e) {
          var _this$state2 = this.state, brushMoveStartX = _this$state2.brushMoveStartX, movingTravellerId = _this$state2.movingTravellerId, endX = _this$state2.endX, startX = _this$state2.startX;
          var prevValue = this.state[movingTravellerId];
          var _this$props5 = this.props, x2 = _this$props5.x, width = _this$props5.width, travellerWidth = _this$props5.travellerWidth, onChange = _this$props5.onChange, gap = _this$props5.gap, data = _this$props5.data;
          var params = {
            startX: this.state.startX,
            endX: this.state.endX
          };
          var delta = e.pageX - brushMoveStartX;
          if (delta > 0) {
            delta = Math.min(delta, x2 + width - travellerWidth - prevValue);
          } else if (delta < 0) {
            delta = Math.max(delta, x2 - prevValue);
          }
          params[movingTravellerId] = prevValue + delta;
          var newIndex = this.getIndex(params);
          var startIndex = newIndex.startIndex, endIndex = newIndex.endIndex;
          var isFullGap = function isFullGap2() {
            var lastIndex = data.length - 1;
            if (movingTravellerId === "startX" && (endX > startX ? startIndex % gap === 0 : endIndex % gap === 0) || endX < startX && endIndex === lastIndex || movingTravellerId === "endX" && (endX > startX ? endIndex % gap === 0 : startIndex % gap === 0) || endX > startX && endIndex === lastIndex) {
              return true;
            }
            return false;
          };
          this.setState(_defineProperty$e(_defineProperty$e({}, movingTravellerId, prevValue + delta), "brushMoveStartX", e.pageX), function() {
            if (onChange) {
              if (isFullGap()) {
                onChange(newIndex);
              }
            }
          });
        }
      }, {
        key: "handleTravellerMoveKeyboard",
        value: function handleTravellerMoveKeyboard(direction, id) {
          var _this2 = this;
          var _this$state3 = this.state, scaleValues = _this$state3.scaleValues, startX = _this$state3.startX, endX = _this$state3.endX;
          var currentScaleValue = this.state[id];
          var currentIndex = scaleValues.indexOf(currentScaleValue);
          if (currentIndex === -1) {
            return;
          }
          var newIndex = currentIndex + direction;
          if (newIndex === -1 || newIndex >= scaleValues.length) {
            return;
          }
          var newScaleValue = scaleValues[newIndex];
          if (id === "startX" && newScaleValue >= endX || id === "endX" && newScaleValue <= startX) {
            return;
          }
          this.setState(_defineProperty$e({}, id, newScaleValue), function() {
            _this2.props.onChange(_this2.getIndex({
              startX: _this2.state.startX,
              endX: _this2.state.endX
            }));
          });
        }
      }, {
        key: "renderBackground",
        value: function renderBackground() {
          var _this$props6 = this.props, x2 = _this$props6.x, y2 = _this$props6.y, width = _this$props6.width, height = _this$props6.height, fill = _this$props6.fill, stroke = _this$props6.stroke;
          return /* @__PURE__ */ React.createElement("rect", {
            stroke,
            fill,
            x: x2,
            y: y2,
            width,
            height
          });
        }
      }, {
        key: "renderPanorama",
        value: function renderPanorama() {
          var _this$props7 = this.props, x2 = _this$props7.x, y2 = _this$props7.y, width = _this$props7.width, height = _this$props7.height, data = _this$props7.data, children = _this$props7.children, padding = _this$props7.padding;
          var chartElement = reactExports.Children.only(children);
          if (!chartElement) {
            return null;
          }
          return /* @__PURE__ */ React.cloneElement(chartElement, {
            x: x2,
            y: y2,
            width,
            height,
            margin: padding,
            compact: true,
            data
          });
        }
      }, {
        key: "renderTravellerLayer",
        value: function renderTravellerLayer(travellerX, id) {
          var _data$startIndex, _data$endIndex, _this3 = this;
          var _this$props8 = this.props, y2 = _this$props8.y, travellerWidth = _this$props8.travellerWidth, height = _this$props8.height, traveller = _this$props8.traveller, ariaLabel = _this$props8.ariaLabel, data = _this$props8.data, startIndex = _this$props8.startIndex, endIndex = _this$props8.endIndex;
          var x2 = Math.max(travellerX, this.props.x);
          var travellerProps = _objectSpread$b(_objectSpread$b({}, filterProps(this.props, false)), {}, {
            x: x2,
            y: y2,
            width: travellerWidth,
            height
          });
          var ariaLabelBrush = ariaLabel || "Min value: ".concat((_data$startIndex = data[startIndex]) === null || _data$startIndex === void 0 ? void 0 : _data$startIndex.name, ", Max value: ").concat((_data$endIndex = data[endIndex]) === null || _data$endIndex === void 0 ? void 0 : _data$endIndex.name);
          return /* @__PURE__ */ React.createElement(Layer, {
            tabIndex: 0,
            role: "slider",
            "aria-label": ariaLabelBrush,
            "aria-valuenow": travellerX,
            className: "recharts-brush-traveller",
            onMouseEnter: this.handleEnterSlideOrTraveller,
            onMouseLeave: this.handleLeaveSlideOrTraveller,
            onMouseDown: this.travellerDragStartHandlers[id],
            onTouchStart: this.travellerDragStartHandlers[id],
            onKeyDown: function onKeyDown(e) {
              if (!["ArrowLeft", "ArrowRight"].includes(e.key)) {
                return;
              }
              e.preventDefault();
              e.stopPropagation();
              _this3.handleTravellerMoveKeyboard(e.key === "ArrowRight" ? 1 : -1, id);
            },
            onFocus: function onFocus() {
              _this3.setState({
                isTravellerFocused: true
              });
            },
            onBlur: function onBlur() {
              _this3.setState({
                isTravellerFocused: false
              });
            },
            style: {
              cursor: "col-resize"
            }
          }, Brush2.renderTraveller(traveller, travellerProps));
        }
      }, {
        key: "renderSlide",
        value: function renderSlide(startX, endX) {
          var _this$props9 = this.props, y2 = _this$props9.y, height = _this$props9.height, stroke = _this$props9.stroke, travellerWidth = _this$props9.travellerWidth;
          var x2 = Math.min(startX, endX) + travellerWidth;
          var width = Math.max(Math.abs(endX - startX) - travellerWidth, 0);
          return /* @__PURE__ */ React.createElement("rect", {
            className: "recharts-brush-slide",
            onMouseEnter: this.handleEnterSlideOrTraveller,
            onMouseLeave: this.handleLeaveSlideOrTraveller,
            onMouseDown: this.handleSlideDragStart,
            onTouchStart: this.handleSlideDragStart,
            style: {
              cursor: "move"
            },
            stroke: "none",
            fill: stroke,
            fillOpacity: 0.2,
            x: x2,
            y: y2,
            width,
            height
          });
        }
      }, {
        key: "renderText",
        value: function renderText() {
          var _this$props10 = this.props, startIndex = _this$props10.startIndex, endIndex = _this$props10.endIndex, y2 = _this$props10.y, height = _this$props10.height, travellerWidth = _this$props10.travellerWidth, stroke = _this$props10.stroke;
          var _this$state4 = this.state, startX = _this$state4.startX, endX = _this$state4.endX;
          var offset2 = 5;
          var attrs = {
            pointerEvents: "none",
            fill: stroke
          };
          return /* @__PURE__ */ React.createElement(Layer, {
            className: "recharts-brush-texts"
          }, /* @__PURE__ */ React.createElement(Text, _extends$a({
            textAnchor: "end",
            verticalAnchor: "middle",
            x: Math.min(startX, endX) - offset2,
            y: y2 + height / 2
          }, attrs), this.getTextOfTick(startIndex)), /* @__PURE__ */ React.createElement(Text, _extends$a({
            textAnchor: "start",
            verticalAnchor: "middle",
            x: Math.max(startX, endX) + travellerWidth + offset2,
            y: y2 + height / 2
          }, attrs), this.getTextOfTick(endIndex)));
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props11 = this.props, data = _this$props11.data, className = _this$props11.className, children = _this$props11.children, x2 = _this$props11.x, y2 = _this$props11.y, width = _this$props11.width, height = _this$props11.height, alwaysShowText = _this$props11.alwaysShowText;
          var _this$state5 = this.state, startX = _this$state5.startX, endX = _this$state5.endX, isTextActive = _this$state5.isTextActive, isSlideMoving = _this$state5.isSlideMoving, isTravellerMoving = _this$state5.isTravellerMoving, isTravellerFocused = _this$state5.isTravellerFocused;
          if (!data || !data.length || !isNumber(x2) || !isNumber(y2) || !isNumber(width) || !isNumber(height) || width <= 0 || height <= 0) {
            return null;
          }
          var layerClass = clsx("recharts-brush", className);
          var isPanoramic = React.Children.count(children) === 1;
          var style = generatePrefixStyle("userSelect", "none");
          return /* @__PURE__ */ React.createElement(Layer, {
            className: layerClass,
            onMouseLeave: this.handleLeaveWrapper,
            onTouchMove: this.handleTouchMove,
            style
          }, this.renderBackground(), isPanoramic && this.renderPanorama(), this.renderSlide(startX, endX), this.renderTravellerLayer(startX, "startX"), this.renderTravellerLayer(endX, "endX"), (isTextActive || isSlideMoving || isTravellerMoving || isTravellerFocused || alwaysShowText) && this.renderText());
        }
      }], [{
        key: "renderDefaultTraveller",
        value: function renderDefaultTraveller(props) {
          var x2 = props.x, y2 = props.y, width = props.width, height = props.height, stroke = props.stroke;
          var lineY = Math.floor(y2 + height / 2) - 1;
          return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("rect", {
            x: x2,
            y: y2,
            width,
            height,
            fill: stroke,
            stroke: "none"
          }), /* @__PURE__ */ React.createElement("line", {
            x1: x2 + 1,
            y1: lineY,
            x2: x2 + width - 1,
            y2: lineY,
            fill: "none",
            stroke: "#fff"
          }), /* @__PURE__ */ React.createElement("line", {
            x1: x2 + 1,
            y1: lineY + 2,
            x2: x2 + width - 1,
            y2: lineY + 2,
            fill: "none",
            stroke: "#fff"
          }));
        }
      }, {
        key: "renderTraveller",
        value: function renderTraveller(option, props) {
          var rectangle;
          if (/* @__PURE__ */ React.isValidElement(option)) {
            rectangle = /* @__PURE__ */ React.cloneElement(option, props);
          } else if (isFunction(option)) {
            rectangle = option(props);
          } else {
            rectangle = Brush2.renderDefaultTraveller(props);
          }
          return rectangle;
        }
      }, {
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          var data = nextProps.data, width = nextProps.width, x2 = nextProps.x, travellerWidth = nextProps.travellerWidth, updateId = nextProps.updateId, startIndex = nextProps.startIndex, endIndex = nextProps.endIndex;
          if (data !== prevState.prevData || updateId !== prevState.prevUpdateId) {
            return _objectSpread$b({
              prevData: data,
              prevTravellerWidth: travellerWidth,
              prevUpdateId: updateId,
              prevX: x2,
              prevWidth: width
            }, data && data.length ? createScale({
              data,
              width,
              x: x2,
              travellerWidth,
              startIndex,
              endIndex
            }) : {
              scale: null,
              scaleValues: null
            });
          }
          if (prevState.scale && (width !== prevState.prevWidth || x2 !== prevState.prevX || travellerWidth !== prevState.prevTravellerWidth)) {
            prevState.scale.range([x2, x2 + width - travellerWidth]);
            var scaleValues = prevState.scale.domain().map(function(entry) {
              return prevState.scale(entry);
            });
            return {
              prevData: data,
              prevTravellerWidth: travellerWidth,
              prevUpdateId: updateId,
              prevX: x2,
              prevWidth: width,
              startX: prevState.scale(nextProps.startIndex),
              endX: prevState.scale(nextProps.endIndex),
              scaleValues
            };
          }
          return null;
        }
      }, {
        key: "getIndexInRange",
        value: function getIndexInRange(valueRange, x2) {
          var len = valueRange.length;
          var start = 0;
          var end = len - 1;
          while (end - start > 1) {
            var middle = Math.floor((start + end) / 2);
            if (valueRange[middle] > x2) {
              end = middle;
            } else {
              start = middle;
            }
          }
          return x2 >= valueRange[end] ? end : start;
        }
      }]);
    }(reactExports.PureComponent);
    _defineProperty$e(Brush, "displayName", "Brush");
    _defineProperty$e(Brush, "defaultProps", {
      height: 40,
      travellerWidth: 5,
      gap: 1,
      fill: "#fff",
      stroke: "#666",
      padding: {
        top: 1,
        right: 1,
        bottom: 1,
        left: 1
      },
      leaveTimeOut: 1e3,
      alwaysShowText: false
    });
    var _baseSome;
    var hasRequired_baseSome;
    function require_baseSome() {
      if (hasRequired_baseSome) return _baseSome;
      hasRequired_baseSome = 1;
      var baseEach = require_baseEach();
      function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function(value, index2, collection2) {
          result = predicate(value, index2, collection2);
          return !result;
        });
        return !!result;
      }
      _baseSome = baseSome;
      return _baseSome;
    }
    var some_1;
    var hasRequiredSome;
    function requireSome() {
      if (hasRequiredSome) return some_1;
      hasRequiredSome = 1;
      var arraySome = require_arraySome(), baseIteratee = require_baseIteratee(), baseSome = require_baseSome(), isArray2 = requireIsArray(), isIterateeCall = require_isIterateeCall();
      function some2(collection, predicate, guard) {
        var func = isArray2(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = void 0;
        }
        return func(collection, baseIteratee(predicate, 3));
      }
      some_1 = some2;
      return some_1;
    }
    var someExports = requireSome();
    const some = /* @__PURE__ */ getDefaultExportFromCjs(someExports);
    var ifOverflowMatches = function ifOverflowMatches2(props, value) {
      var alwaysShow = props.alwaysShow;
      var ifOverflow = props.ifOverflow;
      if (alwaysShow) {
        ifOverflow = "extendDomain";
      }
      return ifOverflow === value;
    };
    var _baseAssignValue;
    var hasRequired_baseAssignValue;
    function require_baseAssignValue() {
      if (hasRequired_baseAssignValue) return _baseAssignValue;
      hasRequired_baseAssignValue = 1;
      var defineProperty = require_defineProperty();
      function baseAssignValue(object2, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object2, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object2[key] = value;
        }
      }
      _baseAssignValue = baseAssignValue;
      return _baseAssignValue;
    }
    var mapValues_1;
    var hasRequiredMapValues;
    function requireMapValues() {
      if (hasRequiredMapValues) return mapValues_1;
      hasRequiredMapValues = 1;
      var baseAssignValue = require_baseAssignValue(), baseForOwn = require_baseForOwn(), baseIteratee = require_baseIteratee();
      function mapValues2(object2, iteratee) {
        var result = {};
        iteratee = baseIteratee(iteratee, 3);
        baseForOwn(object2, function(value, key, object3) {
          baseAssignValue(result, key, iteratee(value, key, object3));
        });
        return result;
      }
      mapValues_1 = mapValues2;
      return mapValues_1;
    }
    var mapValuesExports = requireMapValues();
    const mapValues = /* @__PURE__ */ getDefaultExportFromCjs(mapValuesExports);
    var _arrayEvery;
    var hasRequired_arrayEvery;
    function require_arrayEvery() {
      if (hasRequired_arrayEvery) return _arrayEvery;
      hasRequired_arrayEvery = 1;
      function arrayEvery(array2, predicate) {
        var index2 = -1, length = array2 == null ? 0 : array2.length;
        while (++index2 < length) {
          if (!predicate(array2[index2], index2, array2)) {
            return false;
          }
        }
        return true;
      }
      _arrayEvery = arrayEvery;
      return _arrayEvery;
    }
    var _baseEvery;
    var hasRequired_baseEvery;
    function require_baseEvery() {
      if (hasRequired_baseEvery) return _baseEvery;
      hasRequired_baseEvery = 1;
      var baseEach = require_baseEach();
      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function(value, index2, collection2) {
          result = !!predicate(value, index2, collection2);
          return result;
        });
        return result;
      }
      _baseEvery = baseEvery;
      return _baseEvery;
    }
    var every_1;
    var hasRequiredEvery;
    function requireEvery() {
      if (hasRequiredEvery) return every_1;
      hasRequiredEvery = 1;
      var arrayEvery = require_arrayEvery(), baseEvery = require_baseEvery(), baseIteratee = require_baseIteratee(), isArray2 = requireIsArray(), isIterateeCall = require_isIterateeCall();
      function every2(collection, predicate, guard) {
        var func = isArray2(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = void 0;
        }
        return func(collection, baseIteratee(predicate, 3));
      }
      every_1 = every2;
      return every_1;
    }
    var everyExports = requireEvery();
    const every = /* @__PURE__ */ getDefaultExportFromCjs(everyExports);
    var _excluded$4 = ["x", "y"];
    function _typeof$d(o2) {
      "@babel/helpers - typeof";
      return _typeof$d = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o22) {
        return typeof o22;
      } : function(o22) {
        return o22 && "function" == typeof Symbol && o22.constructor === Symbol && o22 !== Symbol.prototype ? "symbol" : typeof o22;
      }, _typeof$d(o2);
    }
    function _extends$9() {
      _extends$9 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$9.apply(this, arguments);
    }
    function ownKeys$a(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r22) {
          return Object.getOwnPropertyDescriptor(e, r22).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$a(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$a(Object(t), true).forEach(function(r22) {
          _defineProperty$d(e, r22, t[r22]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$a(Object(t)).forEach(function(r22) {
          Object.defineProperty(e, r22, Object.getOwnPropertyDescriptor(t, r22));
        });
      }
      return e;
    }
    function _defineProperty$d(obj, key, value) {
      key = _toPropertyKey$d(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$d(t) {
      var i2 = _toPrimitive$d(t, "string");
      return "symbol" == _typeof$d(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$d(t, r2) {
      if ("object" != _typeof$d(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$d(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function _objectWithoutProperties$4(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$4(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$4(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function typeguardBarRectangleProps(_ref, props) {
      var xProp = _ref.x, yProp = _ref.y, option = _objectWithoutProperties$4(_ref, _excluded$4);
      var xValue = "".concat(xProp);
      var x2 = parseInt(xValue, 10);
      var yValue = "".concat(yProp);
      var y2 = parseInt(yValue, 10);
      var heightValue = "".concat(props.height || option.height);
      var height = parseInt(heightValue, 10);
      var widthValue = "".concat(props.width || option.width);
      var width = parseInt(widthValue, 10);
      return _objectSpread$a(_objectSpread$a(_objectSpread$a(_objectSpread$a(_objectSpread$a({}, props), option), x2 ? {
        x: x2
      } : {}), y2 ? {
        y: y2
      } : {}), {}, {
        height,
        width,
        name: props.name,
        radius: props.radius
      });
    }
    function BarRectangle(props) {
      return /* @__PURE__ */ React.createElement(Shape, _extends$9({
        shapeType: "rectangle",
        propTransformer: typeguardBarRectangleProps,
        activeClassName: "recharts-active-bar"
      }, props));
    }
    var minPointSizeCallback = function minPointSizeCallback2(minPointSize) {
      var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      return function(value, index2) {
        if (typeof minPointSize === "number") return minPointSize;
        var isValueNumber = typeof value === "number";
        if (isValueNumber) {
          return minPointSize(value, index2);
        }
        !isValueNumber ? invariant() : void 0;
        return defaultValue;
      };
    };
    var _excluded$3 = ["value", "background"];
    var _Bar;
    function _typeof$c(o2) {
      "@babel/helpers - typeof";
      return _typeof$c = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$c(o2);
    }
    function _objectWithoutProperties$3(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$3(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$3(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _extends$8() {
      _extends$8 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$8.apply(this, arguments);
    }
    function ownKeys$9(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$9(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$9(Object(t), true).forEach(function(r3) {
          _defineProperty$c(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$9(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _classCallCheck$9(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$9(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$c(descriptor.key), descriptor);
      }
    }
    function _createClass$9(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$9(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties$9(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$7(t, o2, e) {
      return o2 = _getPrototypeOf$7(o2), _possibleConstructorReturn$7(t, _isNativeReflectConstruct$7() ? Reflect.construct(o2, e || [], _getPrototypeOf$7(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$7(self2, call) {
      if (call && (_typeof$c(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$7(self2);
    }
    function _assertThisInitialized$7(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$7() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$7 = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$7(o2) {
      _getPrototypeOf$7 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$7(o2);
    }
    function _inherits$7(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$7(subClass, superClass);
    }
    function _setPrototypeOf$7(o2, p2) {
      _setPrototypeOf$7 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$7(o2, p2);
    }
    function _defineProperty$c(obj, key, value) {
      key = _toPropertyKey$c(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$c(t) {
      var i2 = _toPrimitive$c(t, "string");
      return "symbol" == _typeof$c(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$c(t, r2) {
      if ("object" != _typeof$c(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$c(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    var Bar = /* @__PURE__ */ function(_PureComponent) {
      function Bar2() {
        var _this;
        _classCallCheck$9(this, Bar2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper$7(this, Bar2, [].concat(args));
        _defineProperty$c(_this, "state", {
          isAnimationFinished: false
        });
        _defineProperty$c(_this, "id", uniqueId("recharts-bar-"));
        _defineProperty$c(_this, "handleAnimationEnd", function() {
          var onAnimationEnd = _this.props.onAnimationEnd;
          _this.setState({
            isAnimationFinished: true
          });
          if (onAnimationEnd) {
            onAnimationEnd();
          }
        });
        _defineProperty$c(_this, "handleAnimationStart", function() {
          var onAnimationStart = _this.props.onAnimationStart;
          _this.setState({
            isAnimationFinished: false
          });
          if (onAnimationStart) {
            onAnimationStart();
          }
        });
        return _this;
      }
      _inherits$7(Bar2, _PureComponent);
      return _createClass$9(Bar2, [{
        key: "renderRectanglesStatically",
        value: function renderRectanglesStatically(data) {
          var _this2 = this;
          var _this$props = this.props, shape = _this$props.shape, dataKey = _this$props.dataKey, activeIndex = _this$props.activeIndex, activeBar = _this$props.activeBar;
          var baseProps = filterProps(this.props, false);
          return data && data.map(function(entry, i2) {
            var isActive = i2 === activeIndex;
            var option = isActive ? activeBar : shape;
            var props = _objectSpread$9(_objectSpread$9(_objectSpread$9({}, baseProps), entry), {}, {
              isActive,
              option,
              index: i2,
              dataKey,
              onAnimationStart: _this2.handleAnimationStart,
              onAnimationEnd: _this2.handleAnimationEnd
            });
            return /* @__PURE__ */ React.createElement(Layer, _extends$8({
              className: "recharts-bar-rectangle"
            }, adaptEventsOfChild(_this2.props, entry, i2), {
              // https://github.com/recharts/recharts/issues/5415
              // eslint-disable-next-line react/no-array-index-key
              key: "rectangle-".concat(entry === null || entry === void 0 ? void 0 : entry.x, "-").concat(entry === null || entry === void 0 ? void 0 : entry.y, "-").concat(entry === null || entry === void 0 ? void 0 : entry.value, "-").concat(i2)
            }), /* @__PURE__ */ React.createElement(BarRectangle, props));
          });
        }
      }, {
        key: "renderRectanglesWithAnimation",
        value: function renderRectanglesWithAnimation() {
          var _this3 = this;
          var _this$props2 = this.props, data = _this$props2.data, layout = _this$props2.layout, isAnimationActive = _this$props2.isAnimationActive, animationBegin = _this$props2.animationBegin, animationDuration = _this$props2.animationDuration, animationEasing = _this$props2.animationEasing, animationId = _this$props2.animationId;
          var prevData = this.state.prevData;
          return /* @__PURE__ */ React.createElement(Animate, {
            begin: animationBegin,
            duration: animationDuration,
            isActive: isAnimationActive,
            easing: animationEasing,
            from: {
              t: 0
            },
            to: {
              t: 1
            },
            key: "bar-".concat(animationId),
            onAnimationEnd: this.handleAnimationEnd,
            onAnimationStart: this.handleAnimationStart
          }, function(_ref) {
            var t = _ref.t;
            var stepData = data.map(function(entry, index2) {
              var prev = prevData && prevData[index2];
              if (prev) {
                var interpolatorX = interpolateNumber$2(prev.x, entry.x);
                var interpolatorY = interpolateNumber$2(prev.y, entry.y);
                var interpolatorWidth = interpolateNumber$2(prev.width, entry.width);
                var interpolatorHeight = interpolateNumber$2(prev.height, entry.height);
                return _objectSpread$9(_objectSpread$9({}, entry), {}, {
                  x: interpolatorX(t),
                  y: interpolatorY(t),
                  width: interpolatorWidth(t),
                  height: interpolatorHeight(t)
                });
              }
              if (layout === "horizontal") {
                var _interpolatorHeight = interpolateNumber$2(0, entry.height);
                var h = _interpolatorHeight(t);
                return _objectSpread$9(_objectSpread$9({}, entry), {}, {
                  y: entry.y + entry.height - h,
                  height: h
                });
              }
              var interpolator = interpolateNumber$2(0, entry.width);
              var w = interpolator(t);
              return _objectSpread$9(_objectSpread$9({}, entry), {}, {
                width: w
              });
            });
            return /* @__PURE__ */ React.createElement(Layer, null, _this3.renderRectanglesStatically(stepData));
          });
        }
      }, {
        key: "renderRectangles",
        value: function renderRectangles() {
          var _this$props3 = this.props, data = _this$props3.data, isAnimationActive = _this$props3.isAnimationActive;
          var prevData = this.state.prevData;
          if (isAnimationActive && data && data.length && (!prevData || !isEqual(prevData, data))) {
            return this.renderRectanglesWithAnimation();
          }
          return this.renderRectanglesStatically(data);
        }
      }, {
        key: "renderBackground",
        value: function renderBackground() {
          var _this4 = this;
          var _this$props4 = this.props, data = _this$props4.data, dataKey = _this$props4.dataKey, activeIndex = _this$props4.activeIndex;
          var backgroundProps = filterProps(this.props.background, false);
          return data.map(function(entry, i2) {
            entry.value;
            var background = entry.background, rest = _objectWithoutProperties$3(entry, _excluded$3);
            if (!background) {
              return null;
            }
            var props = _objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9({}, rest), {}, {
              fill: "#eee"
            }, background), backgroundProps), adaptEventsOfChild(_this4.props, entry, i2)), {}, {
              onAnimationStart: _this4.handleAnimationStart,
              onAnimationEnd: _this4.handleAnimationEnd,
              dataKey,
              index: i2,
              className: "recharts-bar-background-rectangle"
            });
            return /* @__PURE__ */ React.createElement(BarRectangle, _extends$8({
              key: "background-bar-".concat(i2),
              option: _this4.props.background,
              isActive: i2 === activeIndex
            }, props));
          });
        }
      }, {
        key: "renderErrorBar",
        value: function renderErrorBar(needClip, clipPathId) {
          if (this.props.isAnimationActive && !this.state.isAnimationFinished) {
            return null;
          }
          var _this$props5 = this.props, data = _this$props5.data, xAxis = _this$props5.xAxis, yAxis = _this$props5.yAxis, layout = _this$props5.layout, children = _this$props5.children;
          var errorBarItems = findAllByType(children, ErrorBar);
          if (!errorBarItems) {
            return null;
          }
          var offset2 = layout === "vertical" ? data[0].height / 2 : data[0].width / 2;
          var dataPointFormatter = function dataPointFormatter2(dataPoint, dataKey) {
            var value = Array.isArray(dataPoint.value) ? dataPoint.value[1] : dataPoint.value;
            return {
              x: dataPoint.x,
              y: dataPoint.y,
              value,
              errorVal: getValueByDataKey(dataPoint, dataKey)
            };
          };
          var errorBarProps = {
            clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
          };
          return /* @__PURE__ */ React.createElement(Layer, errorBarProps, errorBarItems.map(function(item) {
            return /* @__PURE__ */ React.cloneElement(item, {
              key: "error-bar-".concat(clipPathId, "-").concat(item.props.dataKey),
              data,
              xAxis,
              yAxis,
              layout,
              offset: offset2,
              dataPointFormatter
            });
          }));
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props6 = this.props, hide2 = _this$props6.hide, data = _this$props6.data, className = _this$props6.className, xAxis = _this$props6.xAxis, yAxis = _this$props6.yAxis, left = _this$props6.left, top = _this$props6.top, width = _this$props6.width, height = _this$props6.height, isAnimationActive = _this$props6.isAnimationActive, background = _this$props6.background, id = _this$props6.id;
          if (hide2 || !data || !data.length) {
            return null;
          }
          var isAnimationFinished = this.state.isAnimationFinished;
          var layerClass = clsx("recharts-bar", className);
          var needClipX = xAxis && xAxis.allowDataOverflow;
          var needClipY = yAxis && yAxis.allowDataOverflow;
          var needClip = needClipX || needClipY;
          var clipPathId = isNil(id) ? this.id : id;
          return /* @__PURE__ */ React.createElement(Layer, {
            className: layerClass
          }, needClipX || needClipY ? /* @__PURE__ */ React.createElement("defs", null, /* @__PURE__ */ React.createElement("clipPath", {
            id: "clipPath-".concat(clipPathId)
          }, /* @__PURE__ */ React.createElement("rect", {
            x: needClipX ? left : left - width / 2,
            y: needClipY ? top : top - height / 2,
            width: needClipX ? width : width * 2,
            height: needClipY ? height : height * 2
          }))) : null, /* @__PURE__ */ React.createElement(Layer, {
            className: "recharts-bar-rectangles",
            clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
          }, background ? this.renderBackground() : null, this.renderRectangles()), this.renderErrorBar(needClip, clipPathId), (!isAnimationActive || isAnimationFinished) && LabelList.renderCallByParent(this.props, data));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          if (nextProps.animationId !== prevState.prevAnimationId) {
            return {
              prevAnimationId: nextProps.animationId,
              curData: nextProps.data,
              prevData: prevState.curData
            };
          }
          if (nextProps.data !== prevState.curData) {
            return {
              curData: nextProps.data
            };
          }
          return null;
        }
      }]);
    }(reactExports.PureComponent);
    _Bar = Bar;
    _defineProperty$c(Bar, "displayName", "Bar");
    _defineProperty$c(Bar, "defaultProps", {
      xAxisId: 0,
      yAxisId: 0,
      legendType: "rect",
      minPointSize: 0,
      hide: false,
      data: [],
      layout: "vertical",
      activeBar: false,
      isAnimationActive: !Global.isSsr,
      animationBegin: 0,
      animationDuration: 400,
      animationEasing: "ease"
    });
    _defineProperty$c(Bar, "getComposedData", function(_ref2) {
      var props = _ref2.props, item = _ref2.item, barPosition = _ref2.barPosition, bandSize = _ref2.bandSize, xAxis = _ref2.xAxis, yAxis = _ref2.yAxis, xAxisTicks = _ref2.xAxisTicks, yAxisTicks = _ref2.yAxisTicks, stackedData = _ref2.stackedData, dataStartIndex = _ref2.dataStartIndex, displayedData = _ref2.displayedData, offset2 = _ref2.offset;
      var pos = findPositionOfBar(barPosition, item);
      if (!pos) {
        return null;
      }
      var layout = props.layout;
      var itemDefaultProps = item.type.defaultProps;
      var itemProps = itemDefaultProps !== void 0 ? _objectSpread$9(_objectSpread$9({}, itemDefaultProps), item.props) : item.props;
      var dataKey = itemProps.dataKey, children = itemProps.children, minPointSizeProp = itemProps.minPointSize;
      var numericAxis = layout === "horizontal" ? yAxis : xAxis;
      var stackedDomain = stackedData ? numericAxis.scale.domain() : null;
      var baseValue = getBaseValueOfBar({
        numericAxis
      });
      var cells = findAllByType(children, Cell);
      var rects = displayedData.map(function(entry, index2) {
        var value, x2, y2, width, height, background;
        if (stackedData) {
          value = truncateByDomain(stackedData[dataStartIndex + index2], stackedDomain);
        } else {
          value = getValueByDataKey(entry, dataKey);
          if (!Array.isArray(value)) {
            value = [baseValue, value];
          }
        }
        var minPointSize = minPointSizeCallback(minPointSizeProp, _Bar.defaultProps.minPointSize)(value[1], index2);
        if (layout === "horizontal") {
          var _ref4;
          var _ref3 = [yAxis.scale(value[0]), yAxis.scale(value[1])], baseValueScale = _ref3[0], currentValueScale = _ref3[1];
          x2 = getCateCoordinateOfBar({
            axis: xAxis,
            ticks: xAxisTicks,
            bandSize,
            offset: pos.offset,
            entry,
            index: index2
          });
          y2 = (_ref4 = currentValueScale !== null && currentValueScale !== void 0 ? currentValueScale : baseValueScale) !== null && _ref4 !== void 0 ? _ref4 : void 0;
          width = pos.size;
          var computedHeight = baseValueScale - currentValueScale;
          height = Number.isNaN(computedHeight) ? 0 : computedHeight;
          background = {
            x: x2,
            y: yAxis.y,
            width,
            height: yAxis.height
          };
          if (Math.abs(minPointSize) > 0 && Math.abs(height) < Math.abs(minPointSize)) {
            var delta = mathSign(height || minPointSize) * (Math.abs(minPointSize) - Math.abs(height));
            y2 -= delta;
            height += delta;
          }
        } else {
          var _ref5 = [xAxis.scale(value[0]), xAxis.scale(value[1])], _baseValueScale = _ref5[0], _currentValueScale = _ref5[1];
          x2 = _baseValueScale;
          y2 = getCateCoordinateOfBar({
            axis: yAxis,
            ticks: yAxisTicks,
            bandSize,
            offset: pos.offset,
            entry,
            index: index2
          });
          width = _currentValueScale - _baseValueScale;
          height = pos.size;
          background = {
            x: xAxis.x,
            y: y2,
            width: xAxis.width,
            height
          };
          if (Math.abs(minPointSize) > 0 && Math.abs(width) < Math.abs(minPointSize)) {
            var _delta = mathSign(width || minPointSize) * (Math.abs(minPointSize) - Math.abs(width));
            width += _delta;
          }
        }
        return _objectSpread$9(_objectSpread$9(_objectSpread$9({}, entry), {}, {
          x: x2,
          y: y2,
          width,
          height,
          value: stackedData ? value : value[1],
          payload: entry,
          background
        }, cells && cells[index2] && cells[index2].props), {}, {
          tooltipPayload: [getTooltipItem(item, entry)],
          tooltipPosition: {
            x: x2 + width / 2,
            y: y2 + height / 2
          }
        });
      });
      return _objectSpread$9({
        data: rects,
        layout
      }, offset2);
    });
    function _typeof$b(o2) {
      "@babel/helpers - typeof";
      return _typeof$b = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$b(o2);
    }
    function _classCallCheck$8(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$8(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$b(descriptor.key), descriptor);
      }
    }
    function _createClass$8(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$8(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties$8(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function ownKeys$8(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$8(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$8(Object(t), true).forEach(function(r3) {
          _defineProperty$b(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$8(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$b(obj, key, value) {
      key = _toPropertyKey$b(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$b(t) {
      var i2 = _toPrimitive$b(t, "string");
      return "symbol" == _typeof$b(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$b(t, r2) {
      if ("object" != _typeof$b(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$b(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    var formatAxisMap = function formatAxisMap2(props, axisMap, offset2, axisType, chartName) {
      var width = props.width, height = props.height, layout = props.layout, children = props.children;
      var ids = Object.keys(axisMap);
      var steps = {
        left: offset2.left,
        leftMirror: offset2.left,
        right: width - offset2.right,
        rightMirror: width - offset2.right,
        top: offset2.top,
        topMirror: offset2.top,
        bottom: height - offset2.bottom,
        bottomMirror: height - offset2.bottom
      };
      var hasBar = !!findChildByType(children, Bar);
      return ids.reduce(function(result, id) {
        var axis = axisMap[id];
        var orientation = axis.orientation, domain = axis.domain, _axis$padding = axis.padding, padding = _axis$padding === void 0 ? {} : _axis$padding, mirror = axis.mirror, reversed = axis.reversed;
        var offsetKey = "".concat(orientation).concat(mirror ? "Mirror" : "");
        var calculatedPadding, range2, x2, y2, needSpace;
        if (axis.type === "number" && (axis.padding === "gap" || axis.padding === "no-gap")) {
          var diff2 = domain[1] - domain[0];
          var smallestDistanceBetweenValues = Infinity;
          var sortedValues = axis.categoricalDomain.sort(compareValues);
          sortedValues.forEach(function(value, index2) {
            if (index2 > 0) {
              smallestDistanceBetweenValues = Math.min((value || 0) - (sortedValues[index2 - 1] || 0), smallestDistanceBetweenValues);
            }
          });
          if (Number.isFinite(smallestDistanceBetweenValues)) {
            var smallestDistanceInPercent = smallestDistanceBetweenValues / diff2;
            var rangeWidth = axis.layout === "vertical" ? offset2.height : offset2.width;
            if (axis.padding === "gap") {
              calculatedPadding = smallestDistanceInPercent * rangeWidth / 2;
            }
            if (axis.padding === "no-gap") {
              var gap = getPercentValue(props.barCategoryGap, smallestDistanceInPercent * rangeWidth);
              var halfBand = smallestDistanceInPercent * rangeWidth / 2;
              calculatedPadding = halfBand - gap - (halfBand - gap) / rangeWidth * gap;
            }
          }
        }
        if (axisType === "xAxis") {
          range2 = [offset2.left + (padding.left || 0) + (calculatedPadding || 0), offset2.left + offset2.width - (padding.right || 0) - (calculatedPadding || 0)];
        } else if (axisType === "yAxis") {
          range2 = layout === "horizontal" ? [offset2.top + offset2.height - (padding.bottom || 0), offset2.top + (padding.top || 0)] : [offset2.top + (padding.top || 0) + (calculatedPadding || 0), offset2.top + offset2.height - (padding.bottom || 0) - (calculatedPadding || 0)];
        } else {
          range2 = axis.range;
        }
        if (reversed) {
          range2 = [range2[1], range2[0]];
        }
        var _parseScale = parseScale(axis, chartName, hasBar), scale = _parseScale.scale, realScaleType = _parseScale.realScaleType;
        scale.domain(domain).range(range2);
        checkDomainOfScale(scale);
        var ticks2 = getTicksOfScale(scale, _objectSpread$8(_objectSpread$8({}, axis), {}, {
          realScaleType
        }));
        if (axisType === "xAxis") {
          needSpace = orientation === "top" && !mirror || orientation === "bottom" && mirror;
          x2 = offset2.left;
          y2 = steps[offsetKey] - needSpace * axis.height;
        } else if (axisType === "yAxis") {
          needSpace = orientation === "left" && !mirror || orientation === "right" && mirror;
          x2 = steps[offsetKey] - needSpace * axis.width;
          y2 = offset2.top;
        }
        var finalAxis = _objectSpread$8(_objectSpread$8(_objectSpread$8({}, axis), ticks2), {}, {
          realScaleType,
          x: x2,
          y: y2,
          scale,
          width: axisType === "xAxis" ? offset2.width : axis.width,
          height: axisType === "yAxis" ? offset2.height : axis.height
        });
        finalAxis.bandSize = getBandSizeOfAxis(finalAxis, ticks2);
        if (!axis.hide && axisType === "xAxis") {
          steps[offsetKey] += (needSpace ? -1 : 1) * finalAxis.height;
        } else if (!axis.hide) {
          steps[offsetKey] += (needSpace ? -1 : 1) * finalAxis.width;
        }
        return _objectSpread$8(_objectSpread$8({}, result), {}, _defineProperty$b({}, id, finalAxis));
      }, {});
    };
    var rectWithPoints = function rectWithPoints2(_ref, _ref2) {
      var x1 = _ref.x, y1 = _ref.y;
      var x2 = _ref2.x, y2 = _ref2.y;
      return {
        x: Math.min(x1, x2),
        y: Math.min(y1, y2),
        width: Math.abs(x2 - x1),
        height: Math.abs(y2 - y1)
      };
    };
    var rectWithCoords = function rectWithCoords2(_ref3) {
      var x1 = _ref3.x1, y1 = _ref3.y1, x2 = _ref3.x2, y2 = _ref3.y2;
      return rectWithPoints({
        x: x1,
        y: y1
      }, {
        x: x2,
        y: y2
      });
    };
    var ScaleHelper = /* @__PURE__ */ function() {
      function ScaleHelper2(scale) {
        _classCallCheck$8(this, ScaleHelper2);
        this.scale = scale;
      }
      return _createClass$8(ScaleHelper2, [{
        key: "domain",
        get: function get2() {
          return this.scale.domain;
        }
      }, {
        key: "range",
        get: function get2() {
          return this.scale.range;
        }
      }, {
        key: "rangeMin",
        get: function get2() {
          return this.range()[0];
        }
      }, {
        key: "rangeMax",
        get: function get2() {
          return this.range()[1];
        }
      }, {
        key: "bandwidth",
        get: function get2() {
          return this.scale.bandwidth;
        }
      }, {
        key: "apply",
        value: function apply(value) {
          var _ref4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, bandAware = _ref4.bandAware, position = _ref4.position;
          if (value === void 0) {
            return void 0;
          }
          if (position) {
            switch (position) {
              case "start": {
                return this.scale(value);
              }
              case "middle": {
                var offset2 = this.bandwidth ? this.bandwidth() / 2 : 0;
                return this.scale(value) + offset2;
              }
              case "end": {
                var _offset = this.bandwidth ? this.bandwidth() : 0;
                return this.scale(value) + _offset;
              }
              default: {
                return this.scale(value);
              }
            }
          }
          if (bandAware) {
            var _offset2 = this.bandwidth ? this.bandwidth() / 2 : 0;
            return this.scale(value) + _offset2;
          }
          return this.scale(value);
        }
      }, {
        key: "isInRange",
        value: function isInRange(value) {
          var range2 = this.range();
          var first = range2[0];
          var last2 = range2[range2.length - 1];
          return first <= last2 ? value >= first && value <= last2 : value >= last2 && value <= first;
        }
      }], [{
        key: "create",
        value: function create2(obj) {
          return new ScaleHelper2(obj);
        }
      }]);
    }();
    _defineProperty$b(ScaleHelper, "EPS", 1e-4);
    var createLabeledScales = function createLabeledScales2(options2) {
      var scales = Object.keys(options2).reduce(function(res, key) {
        return _objectSpread$8(_objectSpread$8({}, res), {}, _defineProperty$b({}, key, ScaleHelper.create(options2[key])));
      }, {});
      return _objectSpread$8(_objectSpread$8({}, scales), {}, {
        apply: function apply(coord) {
          var _ref5 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, bandAware = _ref5.bandAware, position = _ref5.position;
          return mapValues(coord, function(value, label) {
            return scales[label].apply(value, {
              bandAware,
              position
            });
          });
        },
        isInRange: function isInRange(coord) {
          return every(coord, function(value, label) {
            return scales[label].isInRange(value);
          });
        }
      });
    };
    function normalizeAngle(angle) {
      return (angle % 180 + 180) % 180;
    }
    var getAngledRectangleWidth = function getAngledRectangleWidth2(_ref6) {
      var width = _ref6.width, height = _ref6.height;
      var angle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var normalizedAngle = normalizeAngle(angle);
      var angleRadians = normalizedAngle * Math.PI / 180;
      var angleThreshold = Math.atan(height / width);
      var angledWidth = angleRadians > angleThreshold && angleRadians < Math.PI - angleThreshold ? height / Math.sin(angleRadians) : width / Math.cos(angleRadians);
      return Math.abs(angledWidth);
    };
    var _createFind;
    var hasRequired_createFind;
    function require_createFind() {
      if (hasRequired_createFind) return _createFind;
      hasRequired_createFind = 1;
      var baseIteratee = require_baseIteratee(), isArrayLike = requireIsArrayLike(), keys2 = requireKeys();
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object(collection);
          if (!isArrayLike(collection)) {
            var iteratee = baseIteratee(predicate, 3);
            collection = keys2(collection);
            predicate = function(key) {
              return iteratee(iterable[key], key, iterable);
            };
          }
          var index2 = findIndexFunc(collection, predicate, fromIndex);
          return index2 > -1 ? iterable[iteratee ? collection[index2] : index2] : void 0;
        };
      }
      _createFind = createFind;
      return _createFind;
    }
    var toInteger_1;
    var hasRequiredToInteger;
    function requireToInteger() {
      if (hasRequiredToInteger) return toInteger_1;
      hasRequiredToInteger = 1;
      var toFinite = requireToFinite();
      function toInteger(value) {
        var result = toFinite(value), remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }
      toInteger_1 = toInteger;
      return toInteger_1;
    }
    var findIndex_1;
    var hasRequiredFindIndex;
    function requireFindIndex() {
      if (hasRequiredFindIndex) return findIndex_1;
      hasRequiredFindIndex = 1;
      var baseFindIndex = require_baseFindIndex(), baseIteratee = require_baseIteratee(), toInteger = requireToInteger();
      var nativeMax = Math.max;
      function findIndex(array2, predicate, fromIndex) {
        var length = array2 == null ? 0 : array2.length;
        if (!length) {
          return -1;
        }
        var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index2 < 0) {
          index2 = nativeMax(length + index2, 0);
        }
        return baseFindIndex(array2, baseIteratee(predicate, 3), index2);
      }
      findIndex_1 = findIndex;
      return findIndex_1;
    }
    var find_1;
    var hasRequiredFind;
    function requireFind() {
      if (hasRequiredFind) return find_1;
      hasRequiredFind = 1;
      var createFind = require_createFind(), findIndex = requireFindIndex();
      var find2 = createFind(findIndex);
      find_1 = find2;
      return find_1;
    }
    var findExports = requireFind();
    const find = /* @__PURE__ */ getDefaultExportFromCjs(findExports);
    var memoizeExports = requireMemoize();
    const memoize = /* @__PURE__ */ getDefaultExportFromCjs(memoizeExports);
    var calculateViewBox = memoize(function(offset2) {
      return {
        x: offset2.left,
        y: offset2.top,
        width: offset2.width,
        height: offset2.height
      };
    }, function(offset2) {
      return ["l", offset2.left, "t", offset2.top, "w", offset2.width, "h", offset2.height].join("");
    });
    var XAxisContext = /* @__PURE__ */ reactExports.createContext(void 0);
    var YAxisContext = /* @__PURE__ */ reactExports.createContext(void 0);
    var ViewBoxContext = /* @__PURE__ */ reactExports.createContext(void 0);
    var OffsetContext = /* @__PURE__ */ reactExports.createContext({});
    var ClipPathIdContext = /* @__PURE__ */ reactExports.createContext(void 0);
    var ChartHeightContext = /* @__PURE__ */ reactExports.createContext(0);
    var ChartWidthContext = /* @__PURE__ */ reactExports.createContext(0);
    var ChartLayoutContextProvider = function ChartLayoutContextProvider2(props) {
      var _props$state = props.state, xAxisMap = _props$state.xAxisMap, yAxisMap = _props$state.yAxisMap, offset2 = _props$state.offset, clipPathId = props.clipPathId, children = props.children, width = props.width, height = props.height;
      var viewBox = calculateViewBox(offset2);
      return /* @__PURE__ */ React.createElement(XAxisContext.Provider, {
        value: xAxisMap
      }, /* @__PURE__ */ React.createElement(YAxisContext.Provider, {
        value: yAxisMap
      }, /* @__PURE__ */ React.createElement(OffsetContext.Provider, {
        value: offset2
      }, /* @__PURE__ */ React.createElement(ViewBoxContext.Provider, {
        value: viewBox
      }, /* @__PURE__ */ React.createElement(ClipPathIdContext.Provider, {
        value: clipPathId
      }, /* @__PURE__ */ React.createElement(ChartHeightContext.Provider, {
        value: height
      }, /* @__PURE__ */ React.createElement(ChartWidthContext.Provider, {
        value: width
      }, children)))))));
    };
    var useClipPathId = function useClipPathId2() {
      return reactExports.useContext(ClipPathIdContext);
    };
    var useXAxisOrThrow = function useXAxisOrThrow2(xAxisId) {
      var xAxisMap = reactExports.useContext(XAxisContext);
      !(xAxisMap != null) ? invariant() : void 0;
      var xAxis = xAxisMap[xAxisId];
      !(xAxis != null) ? invariant() : void 0;
      return xAxis;
    };
    var useArbitraryXAxis = function useArbitraryXAxis2() {
      var xAxisMap = reactExports.useContext(XAxisContext);
      return getAnyElementOfObject(xAxisMap);
    };
    var useYAxisWithFiniteDomainOrRandom = function useYAxisWithFiniteDomainOrRandom2() {
      var yAxisMap = reactExports.useContext(YAxisContext);
      var yAxisWithFiniteDomain = find(yAxisMap, function(axis) {
        return every(axis.domain, Number.isFinite);
      });
      return yAxisWithFiniteDomain || getAnyElementOfObject(yAxisMap);
    };
    var useYAxisOrThrow = function useYAxisOrThrow2(yAxisId) {
      var yAxisMap = reactExports.useContext(YAxisContext);
      !(yAxisMap != null) ? invariant() : void 0;
      var yAxis = yAxisMap[yAxisId];
      !(yAxis != null) ? invariant() : void 0;
      return yAxis;
    };
    var useViewBox = function useViewBox2() {
      var viewBox = reactExports.useContext(ViewBoxContext);
      return viewBox;
    };
    var useOffset = function useOffset2() {
      return reactExports.useContext(OffsetContext);
    };
    var useChartWidth = function useChartWidth2() {
      return reactExports.useContext(ChartWidthContext);
    };
    var useChartHeight = function useChartHeight2() {
      return reactExports.useContext(ChartHeightContext);
    };
    function _typeof$a(o2) {
      "@babel/helpers - typeof";
      return _typeof$a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$a(o2);
    }
    function _classCallCheck$7(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$7(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$a(descriptor.key), descriptor);
      }
    }
    function _createClass$7(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$7(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$6(t, o2, e) {
      return o2 = _getPrototypeOf$6(o2), _possibleConstructorReturn$6(t, _isNativeReflectConstruct$6() ? Reflect.construct(o2, e || [], _getPrototypeOf$6(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$6(self2, call) {
      if (call && (_typeof$a(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$6(self2);
    }
    function _assertThisInitialized$6(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$6() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$6 = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$6(o2) {
      _getPrototypeOf$6 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$6(o2);
    }
    function _inherits$6(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$6(subClass, superClass);
    }
    function _setPrototypeOf$6(o2, p2) {
      _setPrototypeOf$6 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$6(o2, p2);
    }
    function ownKeys$7(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$7(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$7(Object(t), true).forEach(function(r3) {
          _defineProperty$a(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$7(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$a(obj, key, value) {
      key = _toPropertyKey$a(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$a(t) {
      var i2 = _toPrimitive$a(t, "string");
      return "symbol" == _typeof$a(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$a(t, r2) {
      if ("object" != _typeof$a(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$a(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    function _slicedToArray$1(arr, i2) {
      return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i2) || _unsupportedIterableToArray$2(arr, i2) || _nonIterableRest$1();
    }
    function _nonIterableRest$1() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$2(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$2(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$2(o2, minLen);
    }
    function _arrayLikeToArray$2(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$1(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n2, i2, u2, a2 = [], f = true, o2 = false;
        try {
          if (i2 = (t = t.call(r2)).next, 0 === l) ;
          else for (; !(f = (e = i2.call(t)).done) && (a2.push(e.value), a2.length !== l); f = true) ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f && null != t["return"] && (u2 = t["return"](), Object(u2) !== u2)) return;
          } finally {
            if (o2) throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$1(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _extends$7() {
      _extends$7 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$7.apply(this, arguments);
    }
    var renderLine = function renderLine2(option, props) {
      var line;
      if (/* @__PURE__ */ React.isValidElement(option)) {
        line = /* @__PURE__ */ React.cloneElement(option, props);
      } else if (isFunction(option)) {
        line = option(props);
      } else {
        line = /* @__PURE__ */ React.createElement("line", _extends$7({}, props, {
          className: "recharts-reference-line-line"
        }));
      }
      return line;
    };
    var getEndPoints = function getEndPoints2(scales, isFixedX, isFixedY, isSegment, viewBox, position, xAxisOrientation, yAxisOrientation, props) {
      var x2 = viewBox.x, y2 = viewBox.y, width = viewBox.width, height = viewBox.height;
      if (isFixedY) {
        var yCoord = props.y;
        var coord = scales.y.apply(yCoord, {
          position
        });
        if (ifOverflowMatches(props, "discard") && !scales.y.isInRange(coord)) {
          return null;
        }
        var points = [{
          x: x2 + width,
          y: coord
        }, {
          x: x2,
          y: coord
        }];
        return yAxisOrientation === "left" ? points.reverse() : points;
      }
      if (isFixedX) {
        var xCoord = props.x;
        var _coord = scales.x.apply(xCoord, {
          position
        });
        if (ifOverflowMatches(props, "discard") && !scales.x.isInRange(_coord)) {
          return null;
        }
        var _points = [{
          x: _coord,
          y: y2 + height
        }, {
          x: _coord,
          y: y2
        }];
        return xAxisOrientation === "top" ? _points.reverse() : _points;
      }
      if (isSegment) {
        var segment = props.segment;
        var _points2 = segment.map(function(p2) {
          return scales.apply(p2, {
            position
          });
        });
        if (ifOverflowMatches(props, "discard") && some(_points2, function(p2) {
          return !scales.isInRange(p2);
        })) {
          return null;
        }
        return _points2;
      }
      return null;
    };
    function ReferenceLineImpl(props) {
      var fixedX = props.x, fixedY = props.y, segment = props.segment, xAxisId = props.xAxisId, yAxisId = props.yAxisId, shape = props.shape, className = props.className, alwaysShow = props.alwaysShow;
      var clipPathId = useClipPathId();
      var xAxis = useXAxisOrThrow(xAxisId);
      var yAxis = useYAxisOrThrow(yAxisId);
      var viewBox = useViewBox();
      if (!clipPathId || !viewBox) {
        return null;
      }
      warn(alwaysShow === void 0, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
      var scales = createLabeledScales({
        x: xAxis.scale,
        y: yAxis.scale
      });
      var isX = isNumOrStr(fixedX);
      var isY = isNumOrStr(fixedY);
      var isSegment = segment && segment.length === 2;
      var endPoints = getEndPoints(scales, isX, isY, isSegment, viewBox, props.position, xAxis.orientation, yAxis.orientation, props);
      if (!endPoints) {
        return null;
      }
      var _endPoints = _slicedToArray$1(endPoints, 2), _endPoints$ = _endPoints[0], x1 = _endPoints$.x, y1 = _endPoints$.y, _endPoints$2 = _endPoints[1], x2 = _endPoints$2.x, y2 = _endPoints$2.y;
      var clipPath = ifOverflowMatches(props, "hidden") ? "url(#".concat(clipPathId, ")") : void 0;
      var lineProps = _objectSpread$7(_objectSpread$7({
        clipPath
      }, filterProps(props, true)), {}, {
        x1,
        y1,
        x2,
        y2
      });
      return /* @__PURE__ */ React.createElement(Layer, {
        className: clsx("recharts-reference-line", className)
      }, renderLine(shape, lineProps), Label.renderCallByParent(props, rectWithCoords({
        x1,
        y1,
        x2,
        y2
      })));
    }
    var ReferenceLine = /* @__PURE__ */ function(_React$Component) {
      function ReferenceLine2() {
        _classCallCheck$7(this, ReferenceLine2);
        return _callSuper$6(this, ReferenceLine2, arguments);
      }
      _inherits$6(ReferenceLine2, _React$Component);
      return _createClass$7(ReferenceLine2, [{
        key: "render",
        value: function render() {
          return /* @__PURE__ */ React.createElement(ReferenceLineImpl, this.props);
        }
      }]);
    }(React.Component);
    _defineProperty$a(ReferenceLine, "displayName", "ReferenceLine");
    _defineProperty$a(ReferenceLine, "defaultProps", {
      isFront: false,
      ifOverflow: "discard",
      xAxisId: 0,
      yAxisId: 0,
      fill: "none",
      stroke: "#ccc",
      fillOpacity: 1,
      strokeWidth: 1,
      position: "middle"
    });
    function _extends$6() {
      _extends$6 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$6.apply(this, arguments);
    }
    function _typeof$9(o2) {
      "@babel/helpers - typeof";
      return _typeof$9 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$9(o2);
    }
    function ownKeys$6(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$6(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$6(Object(t), true).forEach(function(r3) {
          _defineProperty$9(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _classCallCheck$6(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$6(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$9(descriptor.key), descriptor);
      }
    }
    function _createClass$6(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$6(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$5(t, o2, e) {
      return o2 = _getPrototypeOf$5(o2), _possibleConstructorReturn$5(t, _isNativeReflectConstruct$5() ? Reflect.construct(o2, e || [], _getPrototypeOf$5(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$5(self2, call) {
      if (call && (_typeof$9(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$5(self2);
    }
    function _assertThisInitialized$5(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$5() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$5 = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$5(o2) {
      _getPrototypeOf$5 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$5(o2);
    }
    function _inherits$5(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$5(subClass, superClass);
    }
    function _setPrototypeOf$5(o2, p2) {
      _setPrototypeOf$5 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$5(o2, p2);
    }
    function _defineProperty$9(obj, key, value) {
      key = _toPropertyKey$9(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$9(t) {
      var i2 = _toPrimitive$9(t, "string");
      return "symbol" == _typeof$9(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$9(t, r2) {
      if ("object" != _typeof$9(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$9(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    var getCoordinate = function getCoordinate2(props) {
      var x2 = props.x, y2 = props.y, xAxis = props.xAxis, yAxis = props.yAxis;
      var scales = createLabeledScales({
        x: xAxis.scale,
        y: yAxis.scale
      });
      var result = scales.apply({
        x: x2,
        y: y2
      }, {
        bandAware: true
      });
      if (ifOverflowMatches(props, "discard") && !scales.isInRange(result)) {
        return null;
      }
      return result;
    };
    var ReferenceDot = /* @__PURE__ */ function(_React$Component) {
      function ReferenceDot2() {
        _classCallCheck$6(this, ReferenceDot2);
        return _callSuper$5(this, ReferenceDot2, arguments);
      }
      _inherits$5(ReferenceDot2, _React$Component);
      return _createClass$6(ReferenceDot2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, x2 = _this$props.x, y2 = _this$props.y, r2 = _this$props.r, alwaysShow = _this$props.alwaysShow, clipPathId = _this$props.clipPathId;
          var isX = isNumOrStr(x2);
          var isY = isNumOrStr(y2);
          warn(alwaysShow === void 0, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
          if (!isX || !isY) {
            return null;
          }
          var coordinate = getCoordinate(this.props);
          if (!coordinate) {
            return null;
          }
          var cx2 = coordinate.x, cy = coordinate.y;
          var _this$props2 = this.props, shape = _this$props2.shape, className = _this$props2.className;
          var clipPath = ifOverflowMatches(this.props, "hidden") ? "url(#".concat(clipPathId, ")") : void 0;
          var dotProps = _objectSpread$6(_objectSpread$6({
            clipPath
          }, filterProps(this.props, true)), {}, {
            cx: cx2,
            cy
          });
          return /* @__PURE__ */ React.createElement(Layer, {
            className: clsx("recharts-reference-dot", className)
          }, ReferenceDot2.renderDot(shape, dotProps), Label.renderCallByParent(this.props, {
            x: cx2 - r2,
            y: cy - r2,
            width: 2 * r2,
            height: 2 * r2
          }));
        }
      }]);
    }(React.Component);
    _defineProperty$9(ReferenceDot, "displayName", "ReferenceDot");
    _defineProperty$9(ReferenceDot, "defaultProps", {
      isFront: false,
      ifOverflow: "discard",
      xAxisId: 0,
      yAxisId: 0,
      r: 10,
      fill: "#fff",
      stroke: "#ccc",
      fillOpacity: 1,
      strokeWidth: 1
    });
    _defineProperty$9(ReferenceDot, "renderDot", function(option, props) {
      var dot;
      if (/* @__PURE__ */ React.isValidElement(option)) {
        dot = /* @__PURE__ */ React.cloneElement(option, props);
      } else if (isFunction(option)) {
        dot = option(props);
      } else {
        dot = /* @__PURE__ */ React.createElement(Dot, _extends$6({}, props, {
          cx: props.cx,
          cy: props.cy,
          className: "recharts-reference-dot-dot"
        }));
      }
      return dot;
    });
    function _extends$5() {
      _extends$5 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$5.apply(this, arguments);
    }
    function _typeof$8(o2) {
      "@babel/helpers - typeof";
      return _typeof$8 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$8(o2);
    }
    function ownKeys$5(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$5(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$5(Object(t), true).forEach(function(r3) {
          _defineProperty$8(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _classCallCheck$5(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$5(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$8(descriptor.key), descriptor);
      }
    }
    function _createClass$5(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$5(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$4(t, o2, e) {
      return o2 = _getPrototypeOf$4(o2), _possibleConstructorReturn$4(t, _isNativeReflectConstruct$4() ? Reflect.construct(o2, e || [], _getPrototypeOf$4(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$4(self2, call) {
      if (call && (_typeof$8(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$4(self2);
    }
    function _assertThisInitialized$4(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$4() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$4 = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$4(o2) {
      _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$4(o2);
    }
    function _inherits$4(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$4(subClass, superClass);
    }
    function _setPrototypeOf$4(o2, p2) {
      _setPrototypeOf$4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$4(o2, p2);
    }
    function _defineProperty$8(obj, key, value) {
      key = _toPropertyKey$8(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$8(t) {
      var i2 = _toPrimitive$8(t, "string");
      return "symbol" == _typeof$8(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$8(t, r2) {
      if ("object" != _typeof$8(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$8(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    var getRect = function getRect2(hasX1, hasX2, hasY1, hasY2, props) {
      var xValue1 = props.x1, xValue2 = props.x2, yValue1 = props.y1, yValue2 = props.y2, xAxis = props.xAxis, yAxis = props.yAxis;
      if (!xAxis || !yAxis) return null;
      var scales = createLabeledScales({
        x: xAxis.scale,
        y: yAxis.scale
      });
      var p1 = {
        x: hasX1 ? scales.x.apply(xValue1, {
          position: "start"
        }) : scales.x.rangeMin,
        y: hasY1 ? scales.y.apply(yValue1, {
          position: "start"
        }) : scales.y.rangeMin
      };
      var p2 = {
        x: hasX2 ? scales.x.apply(xValue2, {
          position: "end"
        }) : scales.x.rangeMax,
        y: hasY2 ? scales.y.apply(yValue2, {
          position: "end"
        }) : scales.y.rangeMax
      };
      if (ifOverflowMatches(props, "discard") && (!scales.isInRange(p1) || !scales.isInRange(p2))) {
        return null;
      }
      return rectWithPoints(p1, p2);
    };
    var ReferenceArea = /* @__PURE__ */ function(_React$Component) {
      function ReferenceArea2() {
        _classCallCheck$5(this, ReferenceArea2);
        return _callSuper$4(this, ReferenceArea2, arguments);
      }
      _inherits$4(ReferenceArea2, _React$Component);
      return _createClass$5(ReferenceArea2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, x1 = _this$props.x1, x2 = _this$props.x2, y1 = _this$props.y1, y2 = _this$props.y2, className = _this$props.className, alwaysShow = _this$props.alwaysShow, clipPathId = _this$props.clipPathId;
          warn(alwaysShow === void 0, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
          var hasX1 = isNumOrStr(x1);
          var hasX2 = isNumOrStr(x2);
          var hasY1 = isNumOrStr(y1);
          var hasY2 = isNumOrStr(y2);
          var shape = this.props.shape;
          if (!hasX1 && !hasX2 && !hasY1 && !hasY2 && !shape) {
            return null;
          }
          var rect = getRect(hasX1, hasX2, hasY1, hasY2, this.props);
          if (!rect && !shape) {
            return null;
          }
          var clipPath = ifOverflowMatches(this.props, "hidden") ? "url(#".concat(clipPathId, ")") : void 0;
          return /* @__PURE__ */ React.createElement(Layer, {
            className: clsx("recharts-reference-area", className)
          }, ReferenceArea2.renderRect(shape, _objectSpread$5(_objectSpread$5({
            clipPath
          }, filterProps(this.props, true)), rect)), Label.renderCallByParent(this.props, rect));
        }
      }]);
    }(React.Component);
    _defineProperty$8(ReferenceArea, "displayName", "ReferenceArea");
    _defineProperty$8(ReferenceArea, "defaultProps", {
      isFront: false,
      ifOverflow: "discard",
      xAxisId: 0,
      yAxisId: 0,
      r: 10,
      fill: "#ccc",
      fillOpacity: 0.5,
      stroke: "none",
      strokeWidth: 1
    });
    _defineProperty$8(ReferenceArea, "renderRect", function(option, props) {
      var rect;
      if (/* @__PURE__ */ React.isValidElement(option)) {
        rect = /* @__PURE__ */ React.cloneElement(option, props);
      } else if (isFunction(option)) {
        rect = option(props);
      } else {
        rect = /* @__PURE__ */ React.createElement(Rectangle, _extends$5({}, props, {
          className: "recharts-reference-area-rect"
        }));
      }
      return rect;
    });
    function getEveryNthWithCondition(array2, n2, isValid2) {
      if (n2 < 1) {
        return [];
      }
      if (n2 === 1 && isValid2 === void 0) {
        return array2;
      }
      var result = [];
      for (var i2 = 0; i2 < array2.length; i2 += n2) {
        {
          result.push(array2[i2]);
        }
      }
      return result;
    }
    function getAngledTickWidth(contentSize, unitSize, angle) {
      var size2 = {
        width: contentSize.width + unitSize.width,
        height: contentSize.height + unitSize.height
      };
      return getAngledRectangleWidth(size2, angle);
    }
    function getTickBoundaries(viewBox, sign2, sizeKey) {
      var isWidth = sizeKey === "width";
      var x2 = viewBox.x, y2 = viewBox.y, width = viewBox.width, height = viewBox.height;
      if (sign2 === 1) {
        return {
          start: isWidth ? x2 : y2,
          end: isWidth ? x2 + width : y2 + height
        };
      }
      return {
        start: isWidth ? x2 + width : y2 + height,
        end: isWidth ? x2 : y2
      };
    }
    function isVisible(sign2, tickPosition, getSize, start, end) {
      if (sign2 * tickPosition < sign2 * start || sign2 * tickPosition > sign2 * end) {
        return false;
      }
      var size2 = getSize();
      return sign2 * (tickPosition - sign2 * size2 / 2 - start) >= 0 && sign2 * (tickPosition + sign2 * size2 / 2 - end) <= 0;
    }
    function getNumberIntervalTicks(ticks2, interval) {
      return getEveryNthWithCondition(ticks2, interval + 1);
    }
    function getEquidistantTicks(sign2, boundaries, getTickSize, ticks2, minTickGap) {
      var result = (ticks2 || []).slice();
      var initialStart = boundaries.start, end = boundaries.end;
      var index2 = 0;
      var stepsize = 1;
      var start = initialStart;
      var _loop = function _loop2() {
        var entry = ticks2 === null || ticks2 === void 0 ? void 0 : ticks2[index2];
        if (entry === void 0) {
          return {
            v: getEveryNthWithCondition(ticks2, stepsize)
          };
        }
        var i2 = index2;
        var size2;
        var getSize = function getSize2() {
          if (size2 === void 0) {
            size2 = getTickSize(entry, i2);
          }
          return size2;
        };
        var tickCoord = entry.coordinate;
        var isShow = index2 === 0 || isVisible(sign2, tickCoord, getSize, start, end);
        if (!isShow) {
          index2 = 0;
          start = initialStart;
          stepsize += 1;
        }
        if (isShow) {
          start = tickCoord + sign2 * (getSize() / 2 + minTickGap);
          index2 += stepsize;
        }
      }, _ret;
      while (stepsize <= result.length) {
        _ret = _loop();
        if (_ret) return _ret.v;
      }
      return [];
    }
    function _typeof$7(o2) {
      "@babel/helpers - typeof";
      return _typeof$7 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$7(o2);
    }
    function ownKeys$4(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$4(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$4(Object(t), true).forEach(function(r3) {
          _defineProperty$7(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$7(obj, key, value) {
      key = _toPropertyKey$7(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$7(t) {
      var i2 = _toPrimitive$7(t, "string");
      return "symbol" == _typeof$7(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$7(t, r2) {
      if ("object" != _typeof$7(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$7(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function getTicksEnd(sign2, boundaries, getTickSize, ticks2, minTickGap) {
      var result = (ticks2 || []).slice();
      var len = result.length;
      var start = boundaries.start;
      var end = boundaries.end;
      var _loop = function _loop2(i3) {
        var entry = result[i3];
        var size2;
        var getSize = function getSize2() {
          if (size2 === void 0) {
            size2 = getTickSize(entry, i3);
          }
          return size2;
        };
        if (i3 === len - 1) {
          var gap = sign2 * (entry.coordinate + sign2 * getSize() / 2 - end);
          result[i3] = entry = _objectSpread$4(_objectSpread$4({}, entry), {}, {
            tickCoord: gap > 0 ? entry.coordinate - gap * sign2 : entry.coordinate
          });
        } else {
          result[i3] = entry = _objectSpread$4(_objectSpread$4({}, entry), {}, {
            tickCoord: entry.coordinate
          });
        }
        var isShow = isVisible(sign2, entry.tickCoord, getSize, start, end);
        if (isShow) {
          end = entry.tickCoord - sign2 * (getSize() / 2 + minTickGap);
          result[i3] = _objectSpread$4(_objectSpread$4({}, entry), {}, {
            isShow: true
          });
        }
      };
      for (var i2 = len - 1; i2 >= 0; i2--) {
        _loop(i2);
      }
      return result;
    }
    function getTicksStart(sign2, boundaries, getTickSize, ticks2, minTickGap, preserveEnd) {
      var result = (ticks2 || []).slice();
      var len = result.length;
      var start = boundaries.start, end = boundaries.end;
      if (preserveEnd) {
        var tail = ticks2[len - 1];
        var tailSize = getTickSize(tail, len - 1);
        var tailGap = sign2 * (tail.coordinate + sign2 * tailSize / 2 - end);
        result[len - 1] = tail = _objectSpread$4(_objectSpread$4({}, tail), {}, {
          tickCoord: tailGap > 0 ? tail.coordinate - tailGap * sign2 : tail.coordinate
        });
        var isTailShow = isVisible(sign2, tail.tickCoord, function() {
          return tailSize;
        }, start, end);
        if (isTailShow) {
          end = tail.tickCoord - sign2 * (tailSize / 2 + minTickGap);
          result[len - 1] = _objectSpread$4(_objectSpread$4({}, tail), {}, {
            isShow: true
          });
        }
      }
      var count2 = preserveEnd ? len - 1 : len;
      var _loop2 = function _loop22(i3) {
        var entry = result[i3];
        var size2;
        var getSize = function getSize2() {
          if (size2 === void 0) {
            size2 = getTickSize(entry, i3);
          }
          return size2;
        };
        if (i3 === 0) {
          var gap = sign2 * (entry.coordinate - sign2 * getSize() / 2 - start);
          result[i3] = entry = _objectSpread$4(_objectSpread$4({}, entry), {}, {
            tickCoord: gap < 0 ? entry.coordinate - gap * sign2 : entry.coordinate
          });
        } else {
          result[i3] = entry = _objectSpread$4(_objectSpread$4({}, entry), {}, {
            tickCoord: entry.coordinate
          });
        }
        var isShow = isVisible(sign2, entry.tickCoord, getSize, start, end);
        if (isShow) {
          start = entry.tickCoord + sign2 * (getSize() / 2 + minTickGap);
          result[i3] = _objectSpread$4(_objectSpread$4({}, entry), {}, {
            isShow: true
          });
        }
      };
      for (var i2 = 0; i2 < count2; i2++) {
        _loop2(i2);
      }
      return result;
    }
    function getTicks(props, fontSize, letterSpacing) {
      var tick = props.tick, ticks2 = props.ticks, viewBox = props.viewBox, minTickGap = props.minTickGap, orientation = props.orientation, interval = props.interval, tickFormatter = props.tickFormatter, unit2 = props.unit, angle = props.angle;
      if (!ticks2 || !ticks2.length || !tick) {
        return [];
      }
      if (isNumber(interval) || Global.isSsr) {
        return getNumberIntervalTicks(ticks2, typeof interval === "number" && isNumber(interval) ? interval : 0);
      }
      var candidates = [];
      var sizeKey = orientation === "top" || orientation === "bottom" ? "width" : "height";
      var unitSize = unit2 && sizeKey === "width" ? getStringSize(unit2, {
        fontSize,
        letterSpacing
      }) : {
        width: 0,
        height: 0
      };
      var getTickSize = function getTickSize2(content, index2) {
        var value = isFunction(tickFormatter) ? tickFormatter(content.value, index2) : content.value;
        return sizeKey === "width" ? getAngledTickWidth(getStringSize(value, {
          fontSize,
          letterSpacing
        }), unitSize, angle) : getStringSize(value, {
          fontSize,
          letterSpacing
        })[sizeKey];
      };
      var sign2 = ticks2.length >= 2 ? mathSign(ticks2[1].coordinate - ticks2[0].coordinate) : 1;
      var boundaries = getTickBoundaries(viewBox, sign2, sizeKey);
      if (interval === "equidistantPreserveStart") {
        return getEquidistantTicks(sign2, boundaries, getTickSize, ticks2, minTickGap);
      }
      if (interval === "preserveStart" || interval === "preserveStartEnd") {
        candidates = getTicksStart(sign2, boundaries, getTickSize, ticks2, minTickGap, interval === "preserveStartEnd");
      } else {
        candidates = getTicksEnd(sign2, boundaries, getTickSize, ticks2, minTickGap);
      }
      return candidates.filter(function(entry) {
        return entry.isShow;
      });
    }
    var _excluded$2 = ["viewBox"], _excluded2$2 = ["viewBox"], _excluded3 = ["ticks"];
    function _typeof$6(o2) {
      "@babel/helpers - typeof";
      return _typeof$6 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$6(o2);
    }
    function _extends$4() {
      _extends$4 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$4.apply(this, arguments);
    }
    function ownKeys$3(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$3(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$3(Object(t), true).forEach(function(r3) {
          _defineProperty$6(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _objectWithoutProperties$2(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$2(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$2(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _classCallCheck$4(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$4(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$6(descriptor.key), descriptor);
      }
    }
    function _createClass$4(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$4(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties$4(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$3(t, o2, e) {
      return o2 = _getPrototypeOf$3(o2), _possibleConstructorReturn$3(t, _isNativeReflectConstruct$3() ? Reflect.construct(o2, e || [], _getPrototypeOf$3(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$3(self2, call) {
      if (call && (_typeof$6(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$3(self2);
    }
    function _assertThisInitialized$3(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$3() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$3 = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$3(o2) {
      _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$3(o2);
    }
    function _inherits$3(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$3(subClass, superClass);
    }
    function _setPrototypeOf$3(o2, p2) {
      _setPrototypeOf$3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$3(o2, p2);
    }
    function _defineProperty$6(obj, key, value) {
      key = _toPropertyKey$6(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$6(t) {
      var i2 = _toPrimitive$6(t, "string");
      return "symbol" == _typeof$6(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$6(t, r2) {
      if ("object" != _typeof$6(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$6(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    var CartesianAxis = /* @__PURE__ */ function(_Component) {
      function CartesianAxis2(props) {
        var _this;
        _classCallCheck$4(this, CartesianAxis2);
        _this = _callSuper$3(this, CartesianAxis2, [props]);
        _this.state = {
          fontSize: "",
          letterSpacing: ""
        };
        return _this;
      }
      _inherits$3(CartesianAxis2, _Component);
      return _createClass$4(CartesianAxis2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(_ref, nextState) {
          var viewBox = _ref.viewBox, restProps = _objectWithoutProperties$2(_ref, _excluded$2);
          var _this$props = this.props, viewBoxOld = _this$props.viewBox, restPropsOld = _objectWithoutProperties$2(_this$props, _excluded2$2);
          return !shallowEqual(viewBox, viewBoxOld) || !shallowEqual(restProps, restPropsOld) || !shallowEqual(nextState, this.state);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var htmlLayer = this.layerReference;
          if (!htmlLayer) return;
          var tick = htmlLayer.getElementsByClassName("recharts-cartesian-axis-tick-value")[0];
          if (tick) {
            this.setState({
              fontSize: window.getComputedStyle(tick).fontSize,
              letterSpacing: window.getComputedStyle(tick).letterSpacing
            });
          }
        }
        /**
         * Calculate the coordinates of endpoints in ticks
         * @param  {Object} data The data of a simple tick
         * @return {Object} (x1, y1): The coordinate of endpoint close to tick text
         *  (x2, y2): The coordinate of endpoint close to axis
         */
      }, {
        key: "getTickLineCoord",
        value: function getTickLineCoord(data) {
          var _this$props2 = this.props, x2 = _this$props2.x, y2 = _this$props2.y, width = _this$props2.width, height = _this$props2.height, orientation = _this$props2.orientation, tickSize = _this$props2.tickSize, mirror = _this$props2.mirror, tickMargin = _this$props2.tickMargin;
          var x1, x22, y1, y22, tx, ty;
          var sign2 = mirror ? -1 : 1;
          var finalTickSize = data.tickSize || tickSize;
          var tickCoord = isNumber(data.tickCoord) ? data.tickCoord : data.coordinate;
          switch (orientation) {
            case "top":
              x1 = x22 = data.coordinate;
              y22 = y2 + +!mirror * height;
              y1 = y22 - sign2 * finalTickSize;
              ty = y1 - sign2 * tickMargin;
              tx = tickCoord;
              break;
            case "left":
              y1 = y22 = data.coordinate;
              x22 = x2 + +!mirror * width;
              x1 = x22 - sign2 * finalTickSize;
              tx = x1 - sign2 * tickMargin;
              ty = tickCoord;
              break;
            case "right":
              y1 = y22 = data.coordinate;
              x22 = x2 + +mirror * width;
              x1 = x22 + sign2 * finalTickSize;
              tx = x1 + sign2 * tickMargin;
              ty = tickCoord;
              break;
            default:
              x1 = x22 = data.coordinate;
              y22 = y2 + +mirror * height;
              y1 = y22 + sign2 * finalTickSize;
              ty = y1 + sign2 * tickMargin;
              tx = tickCoord;
              break;
          }
          return {
            line: {
              x1,
              y1,
              x2: x22,
              y2: y22
            },
            tick: {
              x: tx,
              y: ty
            }
          };
        }
      }, {
        key: "getTickTextAnchor",
        value: function getTickTextAnchor() {
          var _this$props3 = this.props, orientation = _this$props3.orientation, mirror = _this$props3.mirror;
          var textAnchor;
          switch (orientation) {
            case "left":
              textAnchor = mirror ? "start" : "end";
              break;
            case "right":
              textAnchor = mirror ? "end" : "start";
              break;
            default:
              textAnchor = "middle";
              break;
          }
          return textAnchor;
        }
      }, {
        key: "getTickVerticalAnchor",
        value: function getTickVerticalAnchor() {
          var _this$props4 = this.props, orientation = _this$props4.orientation, mirror = _this$props4.mirror;
          var verticalAnchor = "end";
          switch (orientation) {
            case "left":
            case "right":
              verticalAnchor = "middle";
              break;
            case "top":
              verticalAnchor = mirror ? "start" : "end";
              break;
            default:
              verticalAnchor = mirror ? "end" : "start";
              break;
          }
          return verticalAnchor;
        }
      }, {
        key: "renderAxisLine",
        value: function renderAxisLine() {
          var _this$props5 = this.props, x2 = _this$props5.x, y2 = _this$props5.y, width = _this$props5.width, height = _this$props5.height, orientation = _this$props5.orientation, mirror = _this$props5.mirror, axisLine = _this$props5.axisLine;
          var props = _objectSpread$3(_objectSpread$3(_objectSpread$3({}, filterProps(this.props, false)), filterProps(axisLine, false)), {}, {
            fill: "none"
          });
          if (orientation === "top" || orientation === "bottom") {
            var needHeight = +(orientation === "top" && !mirror || orientation === "bottom" && mirror);
            props = _objectSpread$3(_objectSpread$3({}, props), {}, {
              x1: x2,
              y1: y2 + needHeight * height,
              x2: x2 + width,
              y2: y2 + needHeight * height
            });
          } else {
            var needWidth = +(orientation === "left" && !mirror || orientation === "right" && mirror);
            props = _objectSpread$3(_objectSpread$3({}, props), {}, {
              x1: x2 + needWidth * width,
              y1: y2,
              x2: x2 + needWidth * width,
              y2: y2 + height
            });
          }
          return /* @__PURE__ */ React.createElement("line", _extends$4({}, props, {
            className: clsx("recharts-cartesian-axis-line", get(axisLine, "className"))
          }));
        }
      }, {
        key: "renderTicks",
        value: (
          /**
           * render the ticks
           * @param {Array} ticks The ticks to actually render (overrides what was passed in props)
           * @param {string} fontSize Fontsize to consider for tick spacing
           * @param {string} letterSpacing Letterspacing to consider for tick spacing
           * @return {ReactComponent} renderedTicks
           */
          function renderTicks(ticks2, fontSize, letterSpacing) {
            var _this2 = this;
            var _this$props6 = this.props, tickLine = _this$props6.tickLine, stroke = _this$props6.stroke, tick = _this$props6.tick, tickFormatter = _this$props6.tickFormatter, unit2 = _this$props6.unit;
            var finalTicks = getTicks(_objectSpread$3(_objectSpread$3({}, this.props), {}, {
              ticks: ticks2
            }), fontSize, letterSpacing);
            var textAnchor = this.getTickTextAnchor();
            var verticalAnchor = this.getTickVerticalAnchor();
            var axisProps = filterProps(this.props, false);
            var customTickProps = filterProps(tick, false);
            var tickLineProps = _objectSpread$3(_objectSpread$3({}, axisProps), {}, {
              fill: "none"
            }, filterProps(tickLine, false));
            var items = finalTicks.map(function(entry, i2) {
              var _this2$getTickLineCoo = _this2.getTickLineCoord(entry), lineCoord = _this2$getTickLineCoo.line, tickCoord = _this2$getTickLineCoo.tick;
              var tickProps = _objectSpread$3(_objectSpread$3(_objectSpread$3(_objectSpread$3({
                textAnchor,
                verticalAnchor
              }, axisProps), {}, {
                stroke: "none",
                fill: stroke
              }, customTickProps), tickCoord), {}, {
                index: i2,
                payload: entry,
                visibleTicksCount: finalTicks.length,
                tickFormatter
              });
              return /* @__PURE__ */ React.createElement(Layer, _extends$4({
                className: "recharts-cartesian-axis-tick",
                key: "tick-".concat(entry.value, "-").concat(entry.coordinate, "-").concat(entry.tickCoord)
              }, adaptEventsOfChild(_this2.props, entry, i2)), tickLine && /* @__PURE__ */ React.createElement("line", _extends$4({}, tickLineProps, lineCoord, {
                className: clsx("recharts-cartesian-axis-tick-line", get(tickLine, "className"))
              })), tick && CartesianAxis2.renderTickItem(tick, tickProps, "".concat(isFunction(tickFormatter) ? tickFormatter(entry.value, i2) : entry.value).concat(unit2 || "")));
            });
            return /* @__PURE__ */ React.createElement("g", {
              className: "recharts-cartesian-axis-ticks"
            }, items);
          }
        )
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;
          var _this$props7 = this.props, axisLine = _this$props7.axisLine, width = _this$props7.width, height = _this$props7.height, ticksGenerator = _this$props7.ticksGenerator, className = _this$props7.className, hide2 = _this$props7.hide;
          if (hide2) {
            return null;
          }
          var _this$props8 = this.props, ticks2 = _this$props8.ticks, noTicksProps = _objectWithoutProperties$2(_this$props8, _excluded3);
          var finalTicks = ticks2;
          if (isFunction(ticksGenerator)) {
            finalTicks = ticks2 && ticks2.length > 0 ? ticksGenerator(this.props) : ticksGenerator(noTicksProps);
          }
          if (width <= 0 || height <= 0 || !finalTicks || !finalTicks.length) {
            return null;
          }
          return /* @__PURE__ */ React.createElement(Layer, {
            className: clsx("recharts-cartesian-axis", className),
            ref: function ref(_ref2) {
              _this3.layerReference = _ref2;
            }
          }, axisLine && this.renderAxisLine(), this.renderTicks(finalTicks, this.state.fontSize, this.state.letterSpacing), Label.renderCallByParent(this.props));
        }
      }], [{
        key: "renderTickItem",
        value: function renderTickItem(option, props, value) {
          var tickItem;
          if (/* @__PURE__ */ React.isValidElement(option)) {
            tickItem = /* @__PURE__ */ React.cloneElement(option, props);
          } else if (isFunction(option)) {
            tickItem = option(props);
          } else {
            tickItem = /* @__PURE__ */ React.createElement(Text, _extends$4({}, props, {
              className: "recharts-cartesian-axis-tick-value"
            }), value);
          }
          return tickItem;
        }
      }]);
    }(reactExports.Component);
    _defineProperty$6(CartesianAxis, "displayName", "CartesianAxis");
    _defineProperty$6(CartesianAxis, "defaultProps", {
      x: 0,
      y: 0,
      width: 0,
      height: 0,
      viewBox: {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      },
      // The orientation of axis
      orientation: "bottom",
      // The ticks
      ticks: [],
      stroke: "#666",
      tickLine: true,
      axisLine: true,
      tick: true,
      mirror: false,
      minTickGap: 5,
      // The width or height of tick
      tickSize: 6,
      tickMargin: 2,
      interval: "preserveEnd"
    });
    var _excluded$1 = ["x1", "y1", "x2", "y2", "key"], _excluded2$1 = ["offset"];
    function _typeof$5(o2) {
      "@babel/helpers - typeof";
      return _typeof$5 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$5(o2);
    }
    function ownKeys$2(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$2(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$2(Object(t), true).forEach(function(r3) {
          _defineProperty$5(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$5(obj, key, value) {
      key = _toPropertyKey$5(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$5(t) {
      var i2 = _toPrimitive$5(t, "string");
      return "symbol" == _typeof$5(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$5(t, r2) {
      if ("object" != _typeof$5(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$5(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function _extends$3() {
      _extends$3 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$3.apply(this, arguments);
    }
    function _objectWithoutProperties$1(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose$1(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$1(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var Background = function Background2(props) {
      var fill = props.fill;
      if (!fill || fill === "none") {
        return null;
      }
      var fillOpacity = props.fillOpacity, x2 = props.x, y2 = props.y, width = props.width, height = props.height, ry = props.ry;
      return /* @__PURE__ */ React.createElement("rect", {
        x: x2,
        y: y2,
        ry,
        width,
        height,
        stroke: "none",
        fill,
        fillOpacity,
        className: "recharts-cartesian-grid-bg"
      });
    };
    function renderLineItem(option, props) {
      var lineItem;
      if (/* @__PURE__ */ React.isValidElement(option)) {
        lineItem = /* @__PURE__ */ React.cloneElement(option, props);
      } else if (isFunction(option)) {
        lineItem = option(props);
      } else {
        var x1 = props.x1, y1 = props.y1, x2 = props.x2, y2 = props.y2, key = props.key, others = _objectWithoutProperties$1(props, _excluded$1);
        var _filterProps = filterProps(others, false);
        _filterProps.offset;
        var restOfFilteredProps = _objectWithoutProperties$1(_filterProps, _excluded2$1);
        lineItem = /* @__PURE__ */ React.createElement("line", _extends$3({}, restOfFilteredProps, {
          x1,
          y1,
          x2,
          y2,
          fill: "none",
          key
        }));
      }
      return lineItem;
    }
    function HorizontalGridLines(props) {
      var x2 = props.x, width = props.width, _props$horizontal = props.horizontal, horizontal = _props$horizontal === void 0 ? true : _props$horizontal, horizontalPoints = props.horizontalPoints;
      if (!horizontal || !horizontalPoints || !horizontalPoints.length) {
        return null;
      }
      var items = horizontalPoints.map(function(entry, i2) {
        var lineItemProps = _objectSpread$2(_objectSpread$2({}, props), {}, {
          x1: x2,
          y1: entry,
          x2: x2 + width,
          y2: entry,
          key: "line-".concat(i2),
          index: i2
        });
        return renderLineItem(horizontal, lineItemProps);
      });
      return /* @__PURE__ */ React.createElement("g", {
        className: "recharts-cartesian-grid-horizontal"
      }, items);
    }
    function VerticalGridLines(props) {
      var y2 = props.y, height = props.height, _props$vertical = props.vertical, vertical = _props$vertical === void 0 ? true : _props$vertical, verticalPoints = props.verticalPoints;
      if (!vertical || !verticalPoints || !verticalPoints.length) {
        return null;
      }
      var items = verticalPoints.map(function(entry, i2) {
        var lineItemProps = _objectSpread$2(_objectSpread$2({}, props), {}, {
          x1: entry,
          y1: y2,
          x2: entry,
          y2: y2 + height,
          key: "line-".concat(i2),
          index: i2
        });
        return renderLineItem(vertical, lineItemProps);
      });
      return /* @__PURE__ */ React.createElement("g", {
        className: "recharts-cartesian-grid-vertical"
      }, items);
    }
    function HorizontalStripes(props) {
      var horizontalFill = props.horizontalFill, fillOpacity = props.fillOpacity, x2 = props.x, y2 = props.y, width = props.width, height = props.height, horizontalPoints = props.horizontalPoints, _props$horizontal2 = props.horizontal, horizontal = _props$horizontal2 === void 0 ? true : _props$horizontal2;
      if (!horizontal || !horizontalFill || !horizontalFill.length) {
        return null;
      }
      var roundedSortedHorizontalPoints = horizontalPoints.map(function(e) {
        return Math.round(e + y2 - y2);
      }).sort(function(a2, b) {
        return a2 - b;
      });
      if (y2 !== roundedSortedHorizontalPoints[0]) {
        roundedSortedHorizontalPoints.unshift(0);
      }
      var items = roundedSortedHorizontalPoints.map(function(entry, i2) {
        var lastStripe = !roundedSortedHorizontalPoints[i2 + 1];
        var lineHeight = lastStripe ? y2 + height - entry : roundedSortedHorizontalPoints[i2 + 1] - entry;
        if (lineHeight <= 0) {
          return null;
        }
        var colorIndex = i2 % horizontalFill.length;
        return /* @__PURE__ */ React.createElement("rect", {
          key: "react-".concat(i2),
          y: entry,
          x: x2,
          height: lineHeight,
          width,
          stroke: "none",
          fill: horizontalFill[colorIndex],
          fillOpacity,
          className: "recharts-cartesian-grid-bg"
        });
      });
      return /* @__PURE__ */ React.createElement("g", {
        className: "recharts-cartesian-gridstripes-horizontal"
      }, items);
    }
    function VerticalStripes(props) {
      var _props$vertical2 = props.vertical, vertical = _props$vertical2 === void 0 ? true : _props$vertical2, verticalFill = props.verticalFill, fillOpacity = props.fillOpacity, x2 = props.x, y2 = props.y, width = props.width, height = props.height, verticalPoints = props.verticalPoints;
      if (!vertical || !verticalFill || !verticalFill.length) {
        return null;
      }
      var roundedSortedVerticalPoints = verticalPoints.map(function(e) {
        return Math.round(e + x2 - x2);
      }).sort(function(a2, b) {
        return a2 - b;
      });
      if (x2 !== roundedSortedVerticalPoints[0]) {
        roundedSortedVerticalPoints.unshift(0);
      }
      var items = roundedSortedVerticalPoints.map(function(entry, i2) {
        var lastStripe = !roundedSortedVerticalPoints[i2 + 1];
        var lineWidth = lastStripe ? x2 + width - entry : roundedSortedVerticalPoints[i2 + 1] - entry;
        if (lineWidth <= 0) {
          return null;
        }
        var colorIndex = i2 % verticalFill.length;
        return /* @__PURE__ */ React.createElement("rect", {
          key: "react-".concat(i2),
          x: entry,
          y: y2,
          width: lineWidth,
          height,
          stroke: "none",
          fill: verticalFill[colorIndex],
          fillOpacity,
          className: "recharts-cartesian-grid-bg"
        });
      });
      return /* @__PURE__ */ React.createElement("g", {
        className: "recharts-cartesian-gridstripes-vertical"
      }, items);
    }
    var defaultVerticalCoordinatesGenerator = function defaultVerticalCoordinatesGenerator2(_ref, syncWithTicks) {
      var xAxis = _ref.xAxis, width = _ref.width, height = _ref.height, offset2 = _ref.offset;
      return getCoordinatesOfGrid(getTicks(_objectSpread$2(_objectSpread$2(_objectSpread$2({}, CartesianAxis.defaultProps), xAxis), {}, {
        ticks: getTicksOfAxis(xAxis, true),
        viewBox: {
          x: 0,
          y: 0,
          width,
          height
        }
      })), offset2.left, offset2.left + offset2.width, syncWithTicks);
    };
    var defaultHorizontalCoordinatesGenerator = function defaultHorizontalCoordinatesGenerator2(_ref2, syncWithTicks) {
      var yAxis = _ref2.yAxis, width = _ref2.width, height = _ref2.height, offset2 = _ref2.offset;
      return getCoordinatesOfGrid(getTicks(_objectSpread$2(_objectSpread$2(_objectSpread$2({}, CartesianAxis.defaultProps), yAxis), {}, {
        ticks: getTicksOfAxis(yAxis, true),
        viewBox: {
          x: 0,
          y: 0,
          width,
          height
        }
      })), offset2.top, offset2.top + offset2.height, syncWithTicks);
    };
    var defaultProps = {
      horizontal: true,
      vertical: true,
      stroke: "#ccc",
      fill: "none",
      // The fill of colors of grid lines
      verticalFill: [],
      horizontalFill: []
    };
    function CartesianGrid(props) {
      var _props$stroke, _props$fill, _props$horizontal3, _props$horizontalFill, _props$vertical3, _props$verticalFill;
      var chartWidth = useChartWidth();
      var chartHeight = useChartHeight();
      var offset2 = useOffset();
      var propsIncludingDefaults = _objectSpread$2(_objectSpread$2({}, props), {}, {
        stroke: (_props$stroke = props.stroke) !== null && _props$stroke !== void 0 ? _props$stroke : defaultProps.stroke,
        fill: (_props$fill = props.fill) !== null && _props$fill !== void 0 ? _props$fill : defaultProps.fill,
        horizontal: (_props$horizontal3 = props.horizontal) !== null && _props$horizontal3 !== void 0 ? _props$horizontal3 : defaultProps.horizontal,
        horizontalFill: (_props$horizontalFill = props.horizontalFill) !== null && _props$horizontalFill !== void 0 ? _props$horizontalFill : defaultProps.horizontalFill,
        vertical: (_props$vertical3 = props.vertical) !== null && _props$vertical3 !== void 0 ? _props$vertical3 : defaultProps.vertical,
        verticalFill: (_props$verticalFill = props.verticalFill) !== null && _props$verticalFill !== void 0 ? _props$verticalFill : defaultProps.verticalFill,
        x: isNumber(props.x) ? props.x : offset2.left,
        y: isNumber(props.y) ? props.y : offset2.top,
        width: isNumber(props.width) ? props.width : offset2.width,
        height: isNumber(props.height) ? props.height : offset2.height
      });
      var x2 = propsIncludingDefaults.x, y2 = propsIncludingDefaults.y, width = propsIncludingDefaults.width, height = propsIncludingDefaults.height, syncWithTicks = propsIncludingDefaults.syncWithTicks, horizontalValues = propsIncludingDefaults.horizontalValues, verticalValues = propsIncludingDefaults.verticalValues;
      var xAxis = useArbitraryXAxis();
      var yAxis = useYAxisWithFiniteDomainOrRandom();
      if (!isNumber(width) || width <= 0 || !isNumber(height) || height <= 0 || !isNumber(x2) || x2 !== +x2 || !isNumber(y2) || y2 !== +y2) {
        return null;
      }
      var verticalCoordinatesGenerator = propsIncludingDefaults.verticalCoordinatesGenerator || defaultVerticalCoordinatesGenerator;
      var horizontalCoordinatesGenerator = propsIncludingDefaults.horizontalCoordinatesGenerator || defaultHorizontalCoordinatesGenerator;
      var horizontalPoints = propsIncludingDefaults.horizontalPoints, verticalPoints = propsIncludingDefaults.verticalPoints;
      if ((!horizontalPoints || !horizontalPoints.length) && isFunction(horizontalCoordinatesGenerator)) {
        var isHorizontalValues = horizontalValues && horizontalValues.length;
        var generatorResult = horizontalCoordinatesGenerator({
          yAxis: yAxis ? _objectSpread$2(_objectSpread$2({}, yAxis), {}, {
            ticks: isHorizontalValues ? horizontalValues : yAxis.ticks
          }) : void 0,
          width: chartWidth,
          height: chartHeight,
          offset: offset2
        }, isHorizontalValues ? true : syncWithTicks);
        warn(Array.isArray(generatorResult), "horizontalCoordinatesGenerator should return Array but instead it returned [".concat(_typeof$5(generatorResult), "]"));
        if (Array.isArray(generatorResult)) {
          horizontalPoints = generatorResult;
        }
      }
      if ((!verticalPoints || !verticalPoints.length) && isFunction(verticalCoordinatesGenerator)) {
        var isVerticalValues = verticalValues && verticalValues.length;
        var _generatorResult = verticalCoordinatesGenerator({
          xAxis: xAxis ? _objectSpread$2(_objectSpread$2({}, xAxis), {}, {
            ticks: isVerticalValues ? verticalValues : xAxis.ticks
          }) : void 0,
          width: chartWidth,
          height: chartHeight,
          offset: offset2
        }, isVerticalValues ? true : syncWithTicks);
        warn(Array.isArray(_generatorResult), "verticalCoordinatesGenerator should return Array but instead it returned [".concat(_typeof$5(_generatorResult), "]"));
        if (Array.isArray(_generatorResult)) {
          verticalPoints = _generatorResult;
        }
      }
      return /* @__PURE__ */ React.createElement("g", {
        className: "recharts-cartesian-grid"
      }, /* @__PURE__ */ React.createElement(Background, {
        fill: propsIncludingDefaults.fill,
        fillOpacity: propsIncludingDefaults.fillOpacity,
        x: propsIncludingDefaults.x,
        y: propsIncludingDefaults.y,
        width: propsIncludingDefaults.width,
        height: propsIncludingDefaults.height,
        ry: propsIncludingDefaults.ry
      }), /* @__PURE__ */ React.createElement(HorizontalGridLines, _extends$3({}, propsIncludingDefaults, {
        offset: offset2,
        horizontalPoints,
        xAxis,
        yAxis
      })), /* @__PURE__ */ React.createElement(VerticalGridLines, _extends$3({}, propsIncludingDefaults, {
        offset: offset2,
        verticalPoints,
        xAxis,
        yAxis
      })), /* @__PURE__ */ React.createElement(HorizontalStripes, _extends$3({}, propsIncludingDefaults, {
        horizontalPoints
      })), /* @__PURE__ */ React.createElement(VerticalStripes, _extends$3({}, propsIncludingDefaults, {
        verticalPoints
      })));
    }
    CartesianGrid.displayName = "CartesianGrid";
    function _typeof$4(o2) {
      "@babel/helpers - typeof";
      return _typeof$4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$4(o2);
    }
    function _classCallCheck$3(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$3(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$4(descriptor.key), descriptor);
      }
    }
    function _createClass$3(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$3(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$2(t, o2, e) {
      return o2 = _getPrototypeOf$2(o2), _possibleConstructorReturn$2(t, _isNativeReflectConstruct$2() ? Reflect.construct(o2, e || [], _getPrototypeOf$2(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$2(self2, call) {
      if (call && (_typeof$4(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$2(self2);
    }
    function _assertThisInitialized$2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$2() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$2 = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$2(o2) {
      _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$2(o2);
    }
    function _inherits$2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$2(subClass, superClass);
    }
    function _setPrototypeOf$2(o2, p2) {
      _setPrototypeOf$2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$2(o2, p2);
    }
    function _defineProperty$4(obj, key, value) {
      key = _toPropertyKey$4(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$4(t) {
      var i2 = _toPrimitive$4(t, "string");
      return "symbol" == _typeof$4(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$4(t, r2) {
      if ("object" != _typeof$4(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$4(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    function _extends$2() {
      _extends$2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$2.apply(this, arguments);
    }
    function XAxisImpl(_ref) {
      var xAxisId = _ref.xAxisId;
      var width = useChartWidth();
      var height = useChartHeight();
      var axisOptions = useXAxisOrThrow(xAxisId);
      if (axisOptions == null) {
        return null;
      }
      return (
        // @ts-expect-error the axisOptions type is not exactly what CartesianAxis is expecting.
        /* @__PURE__ */ React.createElement(CartesianAxis, _extends$2({}, axisOptions, {
          className: clsx("recharts-".concat(axisOptions.axisType, " ").concat(axisOptions.axisType), axisOptions.className),
          viewBox: {
            x: 0,
            y: 0,
            width,
            height
          },
          ticksGenerator: function ticksGenerator(axis) {
            return getTicksOfAxis(axis, true);
          }
        }))
      );
    }
    var XAxis = /* @__PURE__ */ function(_React$Component) {
      function XAxis2() {
        _classCallCheck$3(this, XAxis2);
        return _callSuper$2(this, XAxis2, arguments);
      }
      _inherits$2(XAxis2, _React$Component);
      return _createClass$3(XAxis2, [{
        key: "render",
        value: function render() {
          return /* @__PURE__ */ React.createElement(XAxisImpl, this.props);
        }
      }]);
    }(React.Component);
    _defineProperty$4(XAxis, "displayName", "XAxis");
    _defineProperty$4(XAxis, "defaultProps", {
      allowDecimals: true,
      hide: false,
      orientation: "bottom",
      width: 0,
      height: 30,
      mirror: false,
      xAxisId: 0,
      tickCount: 5,
      type: "category",
      padding: {
        left: 0,
        right: 0
      },
      allowDataOverflow: false,
      scale: "auto",
      reversed: false,
      allowDuplicatedCategory: true
    });
    function _typeof$3(o2) {
      "@babel/helpers - typeof";
      return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$3(o2);
    }
    function _classCallCheck$2(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$2(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$3(descriptor.key), descriptor);
      }
    }
    function _createClass$2(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$2(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$1(t, o2, e) {
      return o2 = _getPrototypeOf$1(o2), _possibleConstructorReturn$1(t, _isNativeReflectConstruct$1() ? Reflect.construct(o2, e || [], _getPrototypeOf$1(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn$1(self2, call) {
      if (call && (_typeof$3(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$1(self2);
    }
    function _assertThisInitialized$1(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$1() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf$1(o2) {
      _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$1(o2);
    }
    function _inherits$1(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf$1(subClass, superClass);
    }
    function _setPrototypeOf$1(o2, p2) {
      _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$1(o2, p2);
    }
    function _defineProperty$3(obj, key, value) {
      key = _toPropertyKey$3(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$3(t) {
      var i2 = _toPrimitive$3(t, "string");
      return "symbol" == _typeof$3(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$3(t, r2) {
      if ("object" != _typeof$3(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$3(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function _extends$1() {
      _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$1.apply(this, arguments);
    }
    var YAxisImpl = function YAxisImpl2(_ref) {
      var yAxisId = _ref.yAxisId;
      var width = useChartWidth();
      var height = useChartHeight();
      var axisOptions = useYAxisOrThrow(yAxisId);
      if (axisOptions == null) {
        return null;
      }
      return (
        // @ts-expect-error the axisOptions type is not exactly what CartesianAxis is expecting.
        /* @__PURE__ */ React.createElement(CartesianAxis, _extends$1({}, axisOptions, {
          className: clsx("recharts-".concat(axisOptions.axisType, " ").concat(axisOptions.axisType), axisOptions.className),
          viewBox: {
            x: 0,
            y: 0,
            width,
            height
          },
          ticksGenerator: function ticksGenerator(axis) {
            return getTicksOfAxis(axis, true);
          }
        }))
      );
    };
    var YAxis = /* @__PURE__ */ function(_React$Component) {
      function YAxis2() {
        _classCallCheck$2(this, YAxis2);
        return _callSuper$1(this, YAxis2, arguments);
      }
      _inherits$1(YAxis2, _React$Component);
      return _createClass$2(YAxis2, [{
        key: "render",
        value: function render() {
          return /* @__PURE__ */ React.createElement(YAxisImpl, this.props);
        }
      }]);
    }(React.Component);
    _defineProperty$3(YAxis, "displayName", "YAxis");
    _defineProperty$3(YAxis, "defaultProps", {
      allowDuplicatedCategory: true,
      allowDecimals: true,
      hide: false,
      orientation: "left",
      width: 60,
      height: 0,
      mirror: false,
      yAxisId: 0,
      tickCount: 5,
      type: "number",
      padding: {
        top: 0,
        bottom: 0
      },
      allowDataOverflow: false,
      scale: "auto",
      reversed: false
    });
    function _toConsumableArray$1(arr) {
      return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
    }
    function _nonIterableSpread$1() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$1(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray$1(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$1(o2, minLen);
    }
    function _iterableToArray$1(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _arrayWithoutHoles$1(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
    }
    function _arrayLikeToArray$1(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    var detectReferenceElementsDomain = function detectReferenceElementsDomain2(children, domain, axisId, axisType, specifiedTicks) {
      var lines = findAllByType(children, ReferenceLine);
      var dots = findAllByType(children, ReferenceDot);
      var elements = [].concat(_toConsumableArray$1(lines), _toConsumableArray$1(dots));
      var areas = findAllByType(children, ReferenceArea);
      var idKey = "".concat(axisType, "Id");
      var valueKey = axisType[0];
      var finalDomain = domain;
      if (elements.length) {
        finalDomain = elements.reduce(function(result, el) {
          if (el.props[idKey] === axisId && ifOverflowMatches(el.props, "extendDomain") && isNumber(el.props[valueKey])) {
            var value = el.props[valueKey];
            return [Math.min(result[0], value), Math.max(result[1], value)];
          }
          return result;
        }, finalDomain);
      }
      if (areas.length) {
        var key1 = "".concat(valueKey, "1");
        var key2 = "".concat(valueKey, "2");
        finalDomain = areas.reduce(function(result, el) {
          if (el.props[idKey] === axisId && ifOverflowMatches(el.props, "extendDomain") && isNumber(el.props[key1]) && isNumber(el.props[key2])) {
            var value1 = el.props[key1];
            var value2 = el.props[key2];
            return [Math.min(result[0], value1, value2), Math.max(result[1], value1, value2)];
          }
          return result;
        }, finalDomain);
      }
      if (specifiedTicks && specifiedTicks.length) {
        finalDomain = specifiedTicks.reduce(function(result, tick) {
          if (isNumber(tick)) {
            return [Math.min(result[0], tick), Math.max(result[1], tick)];
          }
          return result;
        }, finalDomain);
      }
      return finalDomain;
    };
    var eventemitter3 = { exports: {} };
    var hasRequiredEventemitter3;
    function requireEventemitter3() {
      if (hasRequiredEventemitter3) return eventemitter3.exports;
      hasRequiredEventemitter3 = 1;
      (function(module2) {
        var has = Object.prototype.hasOwnProperty, prefix2 = "~";
        function Events() {
        }
        if (Object.create) {
          Events.prototype = /* @__PURE__ */ Object.create(null);
          if (!new Events().__proto__) prefix2 = false;
        }
        function EE(fn, context, once) {
          this.fn = fn;
          this.context = context;
          this.once = once || false;
        }
        function addListener(emitter, event, fn, context, once) {
          if (typeof fn !== "function") {
            throw new TypeError("The listener must be a function");
          }
          var listener = new EE(fn, context || emitter, once), evt = prefix2 ? prefix2 + event : event;
          if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
          else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
          else emitter._events[evt] = [emitter._events[evt], listener];
          return emitter;
        }
        function clearEvent(emitter, evt) {
          if (--emitter._eventsCount === 0) emitter._events = new Events();
          else delete emitter._events[evt];
        }
        function EventEmitter2() {
          this._events = new Events();
          this._eventsCount = 0;
        }
        EventEmitter2.prototype.eventNames = function eventNames() {
          var names = [], events, name;
          if (this._eventsCount === 0) return names;
          for (name in events = this._events) {
            if (has.call(events, name)) names.push(prefix2 ? name.slice(1) : name);
          }
          if (Object.getOwnPropertySymbols) {
            return names.concat(Object.getOwnPropertySymbols(events));
          }
          return names;
        };
        EventEmitter2.prototype.listeners = function listeners(event) {
          var evt = prefix2 ? prefix2 + event : event, handlers = this._events[evt];
          if (!handlers) return [];
          if (handlers.fn) return [handlers.fn];
          for (var i2 = 0, l = handlers.length, ee2 = new Array(l); i2 < l; i2++) {
            ee2[i2] = handlers[i2].fn;
          }
          return ee2;
        };
        EventEmitter2.prototype.listenerCount = function listenerCount(event) {
          var evt = prefix2 ? prefix2 + event : event, listeners = this._events[evt];
          if (!listeners) return 0;
          if (listeners.fn) return 1;
          return listeners.length;
        };
        EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
          var evt = prefix2 ? prefix2 + event : event;
          if (!this._events[evt]) return false;
          var listeners = this._events[evt], len = arguments.length, args, i2;
          if (listeners.fn) {
            if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
            switch (len) {
              case 1:
                return listeners.fn.call(listeners.context), true;
              case 2:
                return listeners.fn.call(listeners.context, a1), true;
              case 3:
                return listeners.fn.call(listeners.context, a1, a2), true;
              case 4:
                return listeners.fn.call(listeners.context, a1, a2, a3), true;
              case 5:
                return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
              case 6:
                return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
            }
            for (i2 = 1, args = new Array(len - 1); i2 < len; i2++) {
              args[i2 - 1] = arguments[i2];
            }
            listeners.fn.apply(listeners.context, args);
          } else {
            var length = listeners.length, j;
            for (i2 = 0; i2 < length; i2++) {
              if (listeners[i2].once) this.removeListener(event, listeners[i2].fn, void 0, true);
              switch (len) {
                case 1:
                  listeners[i2].fn.call(listeners[i2].context);
                  break;
                case 2:
                  listeners[i2].fn.call(listeners[i2].context, a1);
                  break;
                case 3:
                  listeners[i2].fn.call(listeners[i2].context, a1, a2);
                  break;
                case 4:
                  listeners[i2].fn.call(listeners[i2].context, a1, a2, a3);
                  break;
                default:
                  if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                    args[j - 1] = arguments[j];
                  }
                  listeners[i2].fn.apply(listeners[i2].context, args);
              }
            }
          }
          return true;
        };
        EventEmitter2.prototype.on = function on(event, fn, context) {
          return addListener(this, event, fn, context, false);
        };
        EventEmitter2.prototype.once = function once(event, fn, context) {
          return addListener(this, event, fn, context, true);
        };
        EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
          var evt = prefix2 ? prefix2 + event : event;
          if (!this._events[evt]) return this;
          if (!fn) {
            clearEvent(this, evt);
            return this;
          }
          var listeners = this._events[evt];
          if (listeners.fn) {
            if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
              clearEvent(this, evt);
            }
          } else {
            for (var i2 = 0, events = [], length = listeners.length; i2 < length; i2++) {
              if (listeners[i2].fn !== fn || once && !listeners[i2].once || context && listeners[i2].context !== context) {
                events.push(listeners[i2]);
              }
            }
            if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
            else clearEvent(this, evt);
          }
          return this;
        };
        EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
          var evt;
          if (event) {
            evt = prefix2 ? prefix2 + event : event;
            if (this._events[evt]) clearEvent(this, evt);
          } else {
            this._events = new Events();
            this._eventsCount = 0;
          }
          return this;
        };
        EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
        EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
        EventEmitter2.prefixed = prefix2;
        EventEmitter2.EventEmitter = EventEmitter2;
        {
          module2.exports = EventEmitter2;
        }
      })(eventemitter3);
      return eventemitter3.exports;
    }
    var eventemitter3Exports = requireEventemitter3();
    const EventEmitter = /* @__PURE__ */ getDefaultExportFromCjs(eventemitter3Exports);
    var eventCenter = new EventEmitter();
    var SYNC_EVENT = "recharts.syncMouseEvents";
    function _typeof$2(o2) {
      "@babel/helpers - typeof";
      return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$2(o2);
    }
    function _classCallCheck$1(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$1(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$2(descriptor.key), descriptor);
      }
    }
    function _createClass$1(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _defineProperty$2(obj, key, value) {
      key = _toPropertyKey$2(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$2(t) {
      var i2 = _toPrimitive$2(t, "string");
      return "symbol" == _typeof$2(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$2(t, r2) {
      if ("object" != _typeof$2(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$2(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return String(t);
    }
    var AccessibilityManager = /* @__PURE__ */ function() {
      function AccessibilityManager2() {
        _classCallCheck$1(this, AccessibilityManager2);
        _defineProperty$2(this, "activeIndex", 0);
        _defineProperty$2(this, "coordinateList", []);
        _defineProperty$2(this, "layout", "horizontal");
      }
      return _createClass$1(AccessibilityManager2, [{
        key: "setDetails",
        value: function setDetails(_ref) {
          var _ref2;
          var _ref$coordinateList = _ref.coordinateList, coordinateList = _ref$coordinateList === void 0 ? null : _ref$coordinateList, _ref$container = _ref.container, container = _ref$container === void 0 ? null : _ref$container, _ref$layout = _ref.layout, layout = _ref$layout === void 0 ? null : _ref$layout, _ref$offset = _ref.offset, offset2 = _ref$offset === void 0 ? null : _ref$offset, _ref$mouseHandlerCall = _ref.mouseHandlerCallback, mouseHandlerCallback = _ref$mouseHandlerCall === void 0 ? null : _ref$mouseHandlerCall;
          this.coordinateList = (_ref2 = coordinateList !== null && coordinateList !== void 0 ? coordinateList : this.coordinateList) !== null && _ref2 !== void 0 ? _ref2 : [];
          this.container = container !== null && container !== void 0 ? container : this.container;
          this.layout = layout !== null && layout !== void 0 ? layout : this.layout;
          this.offset = offset2 !== null && offset2 !== void 0 ? offset2 : this.offset;
          this.mouseHandlerCallback = mouseHandlerCallback !== null && mouseHandlerCallback !== void 0 ? mouseHandlerCallback : this.mouseHandlerCallback;
          this.activeIndex = Math.min(Math.max(this.activeIndex, 0), this.coordinateList.length - 1);
        }
      }, {
        key: "focus",
        value: function focus2() {
          this.spoofMouse();
        }
      }, {
        key: "keyboardEvent",
        value: function keyboardEvent(e) {
          if (this.coordinateList.length === 0) {
            return;
          }
          switch (e.key) {
            case "ArrowRight": {
              if (this.layout !== "horizontal") {
                return;
              }
              this.activeIndex = Math.min(this.activeIndex + 1, this.coordinateList.length - 1);
              this.spoofMouse();
              break;
            }
            case "ArrowLeft": {
              if (this.layout !== "horizontal") {
                return;
              }
              this.activeIndex = Math.max(this.activeIndex - 1, 0);
              this.spoofMouse();
              break;
            }
          }
        }
      }, {
        key: "setIndex",
        value: function setIndex(newIndex) {
          this.activeIndex = newIndex;
        }
      }, {
        key: "spoofMouse",
        value: function spoofMouse() {
          var _window, _window2;
          if (this.layout !== "horizontal") {
            return;
          }
          if (this.coordinateList.length === 0) {
            return;
          }
          var _this$container$getBo = this.container.getBoundingClientRect(), x2 = _this$container$getBo.x, y2 = _this$container$getBo.y, height = _this$container$getBo.height;
          var coordinate = this.coordinateList[this.activeIndex].coordinate;
          var scrollOffsetX = ((_window = window) === null || _window === void 0 ? void 0 : _window.scrollX) || 0;
          var scrollOffsetY = ((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.scrollY) || 0;
          var pageX = x2 + coordinate + scrollOffsetX;
          var pageY = y2 + this.offset.top + height / 2 + scrollOffsetY;
          this.mouseHandlerCallback({
            pageX,
            pageY
          });
        }
      }]);
    }();
    function isDomainSpecifiedByUser(domain, allowDataOverflow, axisType) {
      if (axisType === "number" && allowDataOverflow === true && Array.isArray(domain)) {
        var domainStart = domain === null || domain === void 0 ? void 0 : domain[0];
        var domainEnd = domain === null || domain === void 0 ? void 0 : domain[1];
        if (!!domainStart && !!domainEnd && isNumber(domainStart) && isNumber(domainEnd)) {
          return true;
        }
      }
      return false;
    }
    function getCursorRectangle(layout, activeCoordinate, offset2, tooltipAxisBandSize) {
      var halfSize = tooltipAxisBandSize / 2;
      return {
        stroke: "none",
        fill: "#ccc",
        x: layout === "horizontal" ? activeCoordinate.x - halfSize : offset2.left + 0.5,
        y: layout === "horizontal" ? offset2.top + 0.5 : activeCoordinate.y - halfSize,
        width: layout === "horizontal" ? tooltipAxisBandSize : offset2.width - 1,
        height: layout === "horizontal" ? offset2.height - 1 : tooltipAxisBandSize
      };
    }
    function getRadialCursorPoints(activeCoordinate) {
      var cx2 = activeCoordinate.cx, cy = activeCoordinate.cy, radius = activeCoordinate.radius, startAngle = activeCoordinate.startAngle, endAngle = activeCoordinate.endAngle;
      var startPoint = polarToCartesian(cx2, cy, radius, startAngle);
      var endPoint = polarToCartesian(cx2, cy, radius, endAngle);
      return {
        points: [startPoint, endPoint],
        cx: cx2,
        cy,
        radius,
        startAngle,
        endAngle
      };
    }
    function getCursorPoints(layout, activeCoordinate, offset2) {
      var x1, y1, x2, y2;
      if (layout === "horizontal") {
        x1 = activeCoordinate.x;
        x2 = x1;
        y1 = offset2.top;
        y2 = offset2.top + offset2.height;
      } else if (layout === "vertical") {
        y1 = activeCoordinate.y;
        y2 = y1;
        x1 = offset2.left;
        x2 = offset2.left + offset2.width;
      } else if (activeCoordinate.cx != null && activeCoordinate.cy != null) {
        if (layout === "centric") {
          var cx2 = activeCoordinate.cx, cy = activeCoordinate.cy, innerRadius = activeCoordinate.innerRadius, outerRadius = activeCoordinate.outerRadius, angle = activeCoordinate.angle;
          var innerPoint = polarToCartesian(cx2, cy, innerRadius, angle);
          var outerPoint = polarToCartesian(cx2, cy, outerRadius, angle);
          x1 = innerPoint.x;
          y1 = innerPoint.y;
          x2 = outerPoint.x;
          y2 = outerPoint.y;
        } else {
          return getRadialCursorPoints(activeCoordinate);
        }
      }
      return [{
        x: x1,
        y: y1
      }, {
        x: x2,
        y: y2
      }];
    }
    function _typeof$1(o2) {
      "@babel/helpers - typeof";
      return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$1(o2);
    }
    function ownKeys$1(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread$1(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$1(Object(t), true).forEach(function(r3) {
          _defineProperty$1(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty$1(obj, key, value) {
      key = _toPropertyKey$1(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey$1(t) {
      var i2 = _toPrimitive$1(t, "string");
      return "symbol" == _typeof$1(i2) ? i2 : i2 + "";
    }
    function _toPrimitive$1(t, r2) {
      if ("object" != _typeof$1(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof$1(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    function Cursor(props) {
      var _element$props$cursor, _defaultProps;
      var element = props.element, tooltipEventType = props.tooltipEventType, isActive = props.isActive, activeCoordinate = props.activeCoordinate, activePayload = props.activePayload, offset2 = props.offset, activeTooltipIndex = props.activeTooltipIndex, tooltipAxisBandSize = props.tooltipAxisBandSize, layout = props.layout, chartName = props.chartName;
      var elementPropsCursor = (_element$props$cursor = element.props.cursor) !== null && _element$props$cursor !== void 0 ? _element$props$cursor : (_defaultProps = element.type.defaultProps) === null || _defaultProps === void 0 ? void 0 : _defaultProps.cursor;
      if (!element || !elementPropsCursor || !isActive || !activeCoordinate || chartName !== "ScatterChart" && tooltipEventType !== "axis") {
        return null;
      }
      var restProps;
      var cursorComp = Curve;
      if (chartName === "ScatterChart") {
        restProps = activeCoordinate;
        cursorComp = Cross;
      } else if (chartName === "BarChart") {
        restProps = getCursorRectangle(layout, activeCoordinate, offset2, tooltipAxisBandSize);
        cursorComp = Rectangle;
      } else if (layout === "radial") {
        var _getRadialCursorPoint = getRadialCursorPoints(activeCoordinate), cx2 = _getRadialCursorPoint.cx, cy = _getRadialCursorPoint.cy, radius = _getRadialCursorPoint.radius, startAngle = _getRadialCursorPoint.startAngle, endAngle = _getRadialCursorPoint.endAngle;
        restProps = {
          cx: cx2,
          cy,
          startAngle,
          endAngle,
          innerRadius: radius,
          outerRadius: radius
        };
        cursorComp = Sector;
      } else {
        restProps = {
          points: getCursorPoints(layout, activeCoordinate, offset2)
        };
        cursorComp = Curve;
      }
      var cursorProps = _objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1({
        stroke: "#ccc",
        pointerEvents: "none"
      }, offset2), restProps), filterProps(elementPropsCursor, false)), {}, {
        payload: activePayload,
        payloadIndex: activeTooltipIndex,
        className: clsx("recharts-tooltip-cursor", elementPropsCursor.className)
      });
      return /* @__PURE__ */ reactExports.isValidElement(elementPropsCursor) ? /* @__PURE__ */ reactExports.cloneElement(elementPropsCursor, cursorProps) : /* @__PURE__ */ reactExports.createElement(cursorComp, cursorProps);
    }
    var _excluded = ["item"], _excluded2 = ["children", "className", "width", "height", "style", "compact", "title", "desc"];
    function _typeof(o2) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o22) {
        return typeof o22;
      } : function(o22) {
        return o22 && "function" == typeof Symbol && o22.constructor === Symbol && o22 !== Symbol.prototype ? "symbol" : typeof o22;
      }, _typeof(o2);
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _slicedToArray(arr, i2) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n2, i2, u2, a2 = [], f = true, o2 = false;
        try {
          if (i2 = (t = t.call(r2)).next, 0 === l) ;
          else for (; !(f = (e = i2.call(t)).done) && (a2.push(e.value), a2.length !== l); f = true) ;
        } catch (r22) {
          o2 = true, n2 = r22;
        } finally {
          try {
            if (!f && null != t["return"] && (u2 = t["return"](), Object(u2) !== u2)) return;
          } finally {
            if (o2) throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper(t, o2, e) {
      return o2 = _getPrototypeOf(o2), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o2, e || [], _getPrototypeOf(t).constructor) : o2.apply(t, e));
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      })();
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o22) {
        return o22.__proto__ || Object.getPrototypeOf(o22);
      };
      return _getPrototypeOf(o2);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o22, p22) {
        o22.__proto__ = p22;
        return o22;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o2, minLen) {
      if (!o2) return;
      if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
      return arr2;
    }
    function ownKeys(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e);
        r2 && (o2 = o2.filter(function(r22) {
          return Object.getOwnPropertyDescriptor(e, r22).enumerable;
        })), t.push.apply(t, o2);
      }
      return t;
    }
    function _objectSpread(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys(Object(t), true).forEach(function(r22) {
          _defineProperty(e, r22, t[r22]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r22) {
          Object.defineProperty(e, r22, Object.getOwnPropertyDescriptor(t, r22));
        });
      }
      return e;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(t) {
      var i2 = _toPrimitive(t, "string");
      return "symbol" == _typeof(i2) ? i2 : i2 + "";
    }
    function _toPrimitive(t, r2) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i2 = e.call(t, r2);
        if ("object" != _typeof(i2)) return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    var ORIENT_MAP = {
      xAxis: ["bottom", "top"],
      yAxis: ["left", "right"]
    };
    var FULL_WIDTH_AND_HEIGHT = {
      width: "100%",
      height: "100%"
    };
    var originCoordinate = {
      x: 0,
      y: 0
    };
    function renderAsIs(element) {
      return element;
    }
    var calculateTooltipPos = function calculateTooltipPos2(rangeObj, layout) {
      if (layout === "horizontal") {
        return rangeObj.x;
      }
      if (layout === "vertical") {
        return rangeObj.y;
      }
      if (layout === "centric") {
        return rangeObj.angle;
      }
      return rangeObj.radius;
    };
    var getActiveCoordinate = function getActiveCoordinate2(layout, tooltipTicks, activeIndex, rangeObj) {
      var entry = tooltipTicks.find(function(tick) {
        return tick && tick.index === activeIndex;
      });
      if (entry) {
        if (layout === "horizontal") {
          return {
            x: entry.coordinate,
            y: rangeObj.y
          };
        }
        if (layout === "vertical") {
          return {
            x: rangeObj.x,
            y: entry.coordinate
          };
        }
        if (layout === "centric") {
          var _angle = entry.coordinate;
          var _radius = rangeObj.radius;
          return _objectSpread(_objectSpread(_objectSpread({}, rangeObj), polarToCartesian(rangeObj.cx, rangeObj.cy, _radius, _angle)), {}, {
            angle: _angle,
            radius: _radius
          });
        }
        var radius = entry.coordinate;
        var angle = rangeObj.angle;
        return _objectSpread(_objectSpread(_objectSpread({}, rangeObj), polarToCartesian(rangeObj.cx, rangeObj.cy, radius, angle)), {}, {
          angle,
          radius
        });
      }
      return originCoordinate;
    };
    var getDisplayedData = function getDisplayedData2(data, _ref) {
      var graphicalItems = _ref.graphicalItems, dataStartIndex = _ref.dataStartIndex, dataEndIndex = _ref.dataEndIndex;
      var itemsData = (graphicalItems !== null && graphicalItems !== void 0 ? graphicalItems : []).reduce(function(result, child) {
        var itemData = child.props.data;
        if (itemData && itemData.length) {
          return [].concat(_toConsumableArray(result), _toConsumableArray(itemData));
        }
        return result;
      }, []);
      if (itemsData.length > 0) {
        return itemsData;
      }
      if (data && data.length && isNumber(dataStartIndex) && isNumber(dataEndIndex)) {
        return data.slice(dataStartIndex, dataEndIndex + 1);
      }
      return [];
    };
    function getDefaultDomainByAxisType(axisType) {
      return axisType === "number" ? [0, "auto"] : void 0;
    }
    var getTooltipContent = function getTooltipContent2(state, chartData, activeIndex, activeLabel) {
      var graphicalItems = state.graphicalItems, tooltipAxis = state.tooltipAxis;
      var displayedData = getDisplayedData(chartData, state);
      if (activeIndex < 0 || !graphicalItems || !graphicalItems.length || activeIndex >= displayedData.length) {
        return null;
      }
      return graphicalItems.reduce(function(result, child) {
        var _child$props$data;
        var data = (_child$props$data = child.props.data) !== null && _child$props$data !== void 0 ? _child$props$data : chartData;
        if (data && state.dataStartIndex + state.dataEndIndex !== 0 && // https://github.com/recharts/recharts/issues/4717
        // The data is sliced only when the active index is within the start/end index range.
        state.dataEndIndex - state.dataStartIndex >= activeIndex) {
          data = data.slice(state.dataStartIndex, state.dataEndIndex + 1);
        }
        var payload;
        if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {
          var entries = data === void 0 ? displayedData : data;
          payload = findEntryInArray(entries, tooltipAxis.dataKey, activeLabel);
        } else {
          payload = data && data[activeIndex] || displayedData[activeIndex];
        }
        if (!payload) {
          return result;
        }
        return [].concat(_toConsumableArray(result), [getTooltipItem(child, payload)]);
      }, []);
    };
    var getTooltipData = function getTooltipData2(state, chartData, layout, rangeObj) {
      var rangeData = rangeObj || {
        x: state.chartX,
        y: state.chartY
      };
      var pos = calculateTooltipPos(rangeData, layout);
      var ticks2 = state.orderedTooltipTicks, axis = state.tooltipAxis, tooltipTicks = state.tooltipTicks;
      var activeIndex = calculateActiveTickIndex(pos, ticks2, tooltipTicks, axis);
      if (activeIndex >= 0 && tooltipTicks) {
        var activeLabel = tooltipTicks[activeIndex] && tooltipTicks[activeIndex].value;
        var activePayload = getTooltipContent(state, chartData, activeIndex, activeLabel);
        var activeCoordinate = getActiveCoordinate(layout, ticks2, activeIndex, rangeData);
        return {
          activeTooltipIndex: activeIndex,
          activeLabel,
          activePayload,
          activeCoordinate
        };
      }
      return null;
    };
    var getAxisMapByAxes = function getAxisMapByAxes2(props, _ref2) {
      var axes = _ref2.axes, graphicalItems = _ref2.graphicalItems, axisType = _ref2.axisType, axisIdKey = _ref2.axisIdKey, stackGroups = _ref2.stackGroups, dataStartIndex = _ref2.dataStartIndex, dataEndIndex = _ref2.dataEndIndex;
      var layout = props.layout, children = props.children, stackOffset = props.stackOffset;
      var isCategorical = isCategoricalAxis(layout, axisType);
      return axes.reduce(function(result, child) {
        var _childProps$domain2;
        var childProps = child.type.defaultProps !== void 0 ? _objectSpread(_objectSpread({}, child.type.defaultProps), child.props) : child.props;
        var type = childProps.type, dataKey = childProps.dataKey, allowDataOverflow = childProps.allowDataOverflow, allowDuplicatedCategory = childProps.allowDuplicatedCategory, scale = childProps.scale, ticks2 = childProps.ticks, includeHidden = childProps.includeHidden;
        var axisId = childProps[axisIdKey];
        if (result[axisId]) {
          return result;
        }
        var displayedData = getDisplayedData(props.data, {
          graphicalItems: graphicalItems.filter(function(item) {
            var _defaultProps;
            var itemAxisId = axisIdKey in item.props ? item.props[axisIdKey] : (_defaultProps = item.type.defaultProps) === null || _defaultProps === void 0 ? void 0 : _defaultProps[axisIdKey];
            return itemAxisId === axisId;
          }),
          dataStartIndex,
          dataEndIndex
        });
        var len = displayedData.length;
        var domain, duplicateDomain, categoricalDomain;
        if (isDomainSpecifiedByUser(childProps.domain, allowDataOverflow, type)) {
          domain = parseSpecifiedDomain(childProps.domain, null, allowDataOverflow);
          if (isCategorical && (type === "number" || scale !== "auto")) {
            categoricalDomain = getDomainOfDataByKey(displayedData, dataKey, "category");
          }
        }
        var defaultDomain = getDefaultDomainByAxisType(type);
        if (!domain || domain.length === 0) {
          var _childProps$domain;
          var childDomain = (_childProps$domain = childProps.domain) !== null && _childProps$domain !== void 0 ? _childProps$domain : defaultDomain;
          if (dataKey) {
            domain = getDomainOfDataByKey(displayedData, dataKey, type);
            if (type === "category" && isCategorical) {
              var duplicate = hasDuplicate(domain);
              if (allowDuplicatedCategory && duplicate) {
                duplicateDomain = domain;
                domain = range(0, len);
              } else if (!allowDuplicatedCategory) {
                domain = parseDomainOfCategoryAxis(childDomain, domain, child).reduce(function(finalDomain, entry) {
                  return finalDomain.indexOf(entry) >= 0 ? finalDomain : [].concat(_toConsumableArray(finalDomain), [entry]);
                }, []);
              }
            } else if (type === "category") {
              if (!allowDuplicatedCategory) {
                domain = parseDomainOfCategoryAxis(childDomain, domain, child).reduce(function(finalDomain, entry) {
                  return finalDomain.indexOf(entry) >= 0 || entry === "" || isNil(entry) ? finalDomain : [].concat(_toConsumableArray(finalDomain), [entry]);
                }, []);
              } else {
                domain = domain.filter(function(entry) {
                  return entry !== "" && !isNil(entry);
                });
              }
            } else if (type === "number") {
              var errorBarsDomain = parseErrorBarsOfAxis(displayedData, graphicalItems.filter(function(item) {
                var _defaultProps2, _defaultProps3;
                var itemAxisId = axisIdKey in item.props ? item.props[axisIdKey] : (_defaultProps2 = item.type.defaultProps) === null || _defaultProps2 === void 0 ? void 0 : _defaultProps2[axisIdKey];
                var itemHide = "hide" in item.props ? item.props.hide : (_defaultProps3 = item.type.defaultProps) === null || _defaultProps3 === void 0 ? void 0 : _defaultProps3.hide;
                return itemAxisId === axisId && (includeHidden || !itemHide);
              }), dataKey, axisType, layout);
              if (errorBarsDomain) {
                domain = errorBarsDomain;
              }
            }
            if (isCategorical && (type === "number" || scale !== "auto")) {
              categoricalDomain = getDomainOfDataByKey(displayedData, dataKey, "category");
            }
          } else if (isCategorical) {
            domain = range(0, len);
          } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack && type === "number") {
            domain = stackOffset === "expand" ? [0, 1] : getDomainOfStackGroups(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);
          } else {
            domain = getDomainOfItemsWithSameAxis(displayedData, graphicalItems.filter(function(item) {
              var itemAxisId = axisIdKey in item.props ? item.props[axisIdKey] : item.type.defaultProps[axisIdKey];
              var itemHide = "hide" in item.props ? item.props.hide : item.type.defaultProps.hide;
              return itemAxisId === axisId && (includeHidden || !itemHide);
            }), type, layout, true);
          }
          if (type === "number") {
            domain = detectReferenceElementsDomain(children, domain, axisId, axisType, ticks2);
            if (childDomain) {
              domain = parseSpecifiedDomain(childDomain, domain, allowDataOverflow);
            }
          } else if (type === "category" && childDomain) {
            var axisDomain = childDomain;
            var isDomainValid = domain.every(function(entry) {
              return axisDomain.indexOf(entry) >= 0;
            });
            if (isDomainValid) {
              domain = axisDomain;
            }
          }
        }
        return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, axisId, _objectSpread(_objectSpread({}, childProps), {}, {
          axisType,
          domain,
          categoricalDomain,
          duplicateDomain,
          originalDomain: (_childProps$domain2 = childProps.domain) !== null && _childProps$domain2 !== void 0 ? _childProps$domain2 : defaultDomain,
          isCategorical,
          layout
        })));
      }, {});
    };
    var getAxisMapByItems = function getAxisMapByItems2(props, _ref3) {
      var graphicalItems = _ref3.graphicalItems, Axis = _ref3.Axis, axisType = _ref3.axisType, axisIdKey = _ref3.axisIdKey, stackGroups = _ref3.stackGroups, dataStartIndex = _ref3.dataStartIndex, dataEndIndex = _ref3.dataEndIndex;
      var layout = props.layout, children = props.children;
      var displayedData = getDisplayedData(props.data, {
        graphicalItems,
        dataStartIndex,
        dataEndIndex
      });
      var len = displayedData.length;
      var isCategorical = isCategoricalAxis(layout, axisType);
      var index2 = -1;
      return graphicalItems.reduce(function(result, child) {
        var childProps = child.type.defaultProps !== void 0 ? _objectSpread(_objectSpread({}, child.type.defaultProps), child.props) : child.props;
        var axisId = childProps[axisIdKey];
        var originalDomain = getDefaultDomainByAxisType("number");
        if (!result[axisId]) {
          index2++;
          var domain;
          if (isCategorical) {
            domain = range(0, len);
          } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack) {
            domain = getDomainOfStackGroups(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);
            domain = detectReferenceElementsDomain(children, domain, axisId, axisType);
          } else {
            domain = parseSpecifiedDomain(originalDomain, getDomainOfItemsWithSameAxis(displayedData, graphicalItems.filter(function(item) {
              var _defaultProps4, _defaultProps5;
              var itemAxisId = axisIdKey in item.props ? item.props[axisIdKey] : (_defaultProps4 = item.type.defaultProps) === null || _defaultProps4 === void 0 ? void 0 : _defaultProps4[axisIdKey];
              var itemHide = "hide" in item.props ? item.props.hide : (_defaultProps5 = item.type.defaultProps) === null || _defaultProps5 === void 0 ? void 0 : _defaultProps5.hide;
              return itemAxisId === axisId && !itemHide;
            }), "number", layout), Axis.defaultProps.allowDataOverflow);
            domain = detectReferenceElementsDomain(children, domain, axisId, axisType);
          }
          return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, axisId, _objectSpread(_objectSpread({
            axisType
          }, Axis.defaultProps), {}, {
            hide: true,
            orientation: get(ORIENT_MAP, "".concat(axisType, ".").concat(index2 % 2), null),
            domain,
            originalDomain,
            isCategorical,
            layout
            // specify scale when no Axis
            // scale: isCategorical ? 'band' : 'linear',
          })));
        }
        return result;
      }, {});
    };
    var getAxisMap = function getAxisMap2(props, _ref4) {
      var _ref4$axisType = _ref4.axisType, axisType = _ref4$axisType === void 0 ? "xAxis" : _ref4$axisType, AxisComp = _ref4.AxisComp, graphicalItems = _ref4.graphicalItems, stackGroups = _ref4.stackGroups, dataStartIndex = _ref4.dataStartIndex, dataEndIndex = _ref4.dataEndIndex;
      var children = props.children;
      var axisIdKey = "".concat(axisType, "Id");
      var axes = findAllByType(children, AxisComp);
      var axisMap = {};
      if (axes && axes.length) {
        axisMap = getAxisMapByAxes(props, {
          axes,
          graphicalItems,
          axisType,
          axisIdKey,
          stackGroups,
          dataStartIndex,
          dataEndIndex
        });
      } else if (graphicalItems && graphicalItems.length) {
        axisMap = getAxisMapByItems(props, {
          Axis: AxisComp,
          graphicalItems,
          axisType,
          axisIdKey,
          stackGroups,
          dataStartIndex,
          dataEndIndex
        });
      }
      return axisMap;
    };
    var tooltipTicksGenerator = function tooltipTicksGenerator2(axisMap) {
      var axis = getAnyElementOfObject(axisMap);
      var tooltipTicks = getTicksOfAxis(axis, false, true);
      return {
        tooltipTicks,
        orderedTooltipTicks: sortBy(tooltipTicks, function(o2) {
          return o2.coordinate;
        }),
        tooltipAxis: axis,
        tooltipAxisBandSize: getBandSizeOfAxis(axis, tooltipTicks)
      };
    };
    var createDefaultState = function createDefaultState2(props) {
      var children = props.children, defaultShowTooltip = props.defaultShowTooltip;
      var brushItem = findChildByType(children, Brush);
      var startIndex = 0;
      var endIndex = 0;
      if (props.data && props.data.length !== 0) {
        endIndex = props.data.length - 1;
      }
      if (brushItem && brushItem.props) {
        if (brushItem.props.startIndex >= 0) {
          startIndex = brushItem.props.startIndex;
        }
        if (brushItem.props.endIndex >= 0) {
          endIndex = brushItem.props.endIndex;
        }
      }
      return {
        chartX: 0,
        chartY: 0,
        dataStartIndex: startIndex,
        dataEndIndex: endIndex,
        activeTooltipIndex: -1,
        isTooltipActive: Boolean(defaultShowTooltip)
      };
    };
    var hasGraphicalBarItem = function hasGraphicalBarItem2(graphicalItems) {
      if (!graphicalItems || !graphicalItems.length) {
        return false;
      }
      return graphicalItems.some(function(item) {
        var name = getDisplayName(item && item.type);
        return name && name.indexOf("Bar") >= 0;
      });
    };
    var getAxisNameByLayout = function getAxisNameByLayout2(layout) {
      if (layout === "horizontal") {
        return {
          numericAxisName: "yAxis",
          cateAxisName: "xAxis"
        };
      }
      if (layout === "vertical") {
        return {
          numericAxisName: "xAxis",
          cateAxisName: "yAxis"
        };
      }
      if (layout === "centric") {
        return {
          numericAxisName: "radiusAxis",
          cateAxisName: "angleAxis"
        };
      }
      return {
        numericAxisName: "angleAxis",
        cateAxisName: "radiusAxis"
      };
    };
    var calculateOffset = function calculateOffset2(_ref5, prevLegendBBox) {
      var props = _ref5.props, graphicalItems = _ref5.graphicalItems, _ref5$xAxisMap = _ref5.xAxisMap, xAxisMap = _ref5$xAxisMap === void 0 ? {} : _ref5$xAxisMap, _ref5$yAxisMap = _ref5.yAxisMap, yAxisMap = _ref5$yAxisMap === void 0 ? {} : _ref5$yAxisMap;
      var width = props.width, height = props.height, children = props.children;
      var margin = props.margin || {};
      var brushItem = findChildByType(children, Brush);
      var legendItem = findChildByType(children, Legend);
      var offsetH = Object.keys(yAxisMap).reduce(function(result, id) {
        var entry = yAxisMap[id];
        var orientation = entry.orientation;
        if (!entry.mirror && !entry.hide) {
          return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, orientation, result[orientation] + entry.width));
        }
        return result;
      }, {
        left: margin.left || 0,
        right: margin.right || 0
      });
      var offsetV = Object.keys(xAxisMap).reduce(function(result, id) {
        var entry = xAxisMap[id];
        var orientation = entry.orientation;
        if (!entry.mirror && !entry.hide) {
          return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, orientation, get(result, "".concat(orientation)) + entry.height));
        }
        return result;
      }, {
        top: margin.top || 0,
        bottom: margin.bottom || 0
      });
      var offset2 = _objectSpread(_objectSpread({}, offsetV), offsetH);
      var brushBottom = offset2.bottom;
      if (brushItem) {
        offset2.bottom += brushItem.props.height || Brush.defaultProps.height;
      }
      if (legendItem && prevLegendBBox) {
        offset2 = appendOffsetOfLegend(offset2, graphicalItems, props, prevLegendBBox);
      }
      var offsetWidth = width - offset2.left - offset2.right;
      var offsetHeight = height - offset2.top - offset2.bottom;
      return _objectSpread(_objectSpread({
        brushBottom
      }, offset2), {}, {
        // never return negative values for height and width
        width: Math.max(offsetWidth, 0),
        height: Math.max(offsetHeight, 0)
      });
    };
    var getCartesianAxisSize = function getCartesianAxisSize2(axisObj, axisName) {
      if (axisName === "xAxis") {
        return axisObj[axisName].width;
      }
      if (axisName === "yAxis") {
        return axisObj[axisName].height;
      }
      return void 0;
    };
    var generateCategoricalChart = function generateCategoricalChart2(_ref6) {
      var chartName = _ref6.chartName, GraphicalChild = _ref6.GraphicalChild, _ref6$defaultTooltipE = _ref6.defaultTooltipEventType, defaultTooltipEventType = _ref6$defaultTooltipE === void 0 ? "axis" : _ref6$defaultTooltipE, _ref6$validateTooltip = _ref6.validateTooltipEventTypes, validateTooltipEventTypes = _ref6$validateTooltip === void 0 ? ["axis"] : _ref6$validateTooltip, axisComponents = _ref6.axisComponents, legendContent = _ref6.legendContent, formatAxisMap2 = _ref6.formatAxisMap, defaultProps2 = _ref6.defaultProps;
      var getFormatItems = function getFormatItems2(props, currentState) {
        var graphicalItems = currentState.graphicalItems, stackGroups = currentState.stackGroups, offset2 = currentState.offset, updateId = currentState.updateId, dataStartIndex = currentState.dataStartIndex, dataEndIndex = currentState.dataEndIndex;
        var barSize = props.barSize, layout = props.layout, barGap = props.barGap, barCategoryGap = props.barCategoryGap, globalMaxBarSize = props.maxBarSize;
        var _getAxisNameByLayout = getAxisNameByLayout(layout), numericAxisName = _getAxisNameByLayout.numericAxisName, cateAxisName = _getAxisNameByLayout.cateAxisName;
        var hasBar = hasGraphicalBarItem(graphicalItems);
        var formattedItems = [];
        graphicalItems.forEach(function(item, index2) {
          var displayedData = getDisplayedData(props.data, {
            graphicalItems: [item],
            dataStartIndex,
            dataEndIndex
          });
          var itemProps = item.type.defaultProps !== void 0 ? _objectSpread(_objectSpread({}, item.type.defaultProps), item.props) : item.props;
          var dataKey = itemProps.dataKey, childMaxBarSize = itemProps.maxBarSize;
          var numericAxisId = itemProps["".concat(numericAxisName, "Id")];
          var cateAxisId = itemProps["".concat(cateAxisName, "Id")];
          var axisObjInitialValue = {};
          var axisObj = axisComponents.reduce(function(result, entry) {
            var axisMap = currentState["".concat(entry.axisType, "Map")];
            var id = itemProps["".concat(entry.axisType, "Id")];
            !(axisMap && axisMap[id] || entry.axisType === "zAxis") ? invariant() : void 0;
            var axis = axisMap[id];
            return _objectSpread(_objectSpread({}, result), {}, _defineProperty(_defineProperty({}, entry.axisType, axis), "".concat(entry.axisType, "Ticks"), getTicksOfAxis(axis)));
          }, axisObjInitialValue);
          var cateAxis = axisObj[cateAxisName];
          var cateTicks = axisObj["".concat(cateAxisName, "Ticks")];
          var stackedData = stackGroups && stackGroups[numericAxisId] && stackGroups[numericAxisId].hasStack && getStackedDataOfItem(item, stackGroups[numericAxisId].stackGroups);
          var itemIsBar = getDisplayName(item.type).indexOf("Bar") >= 0;
          var bandSize = getBandSizeOfAxis(cateAxis, cateTicks);
          var barPosition = [];
          var sizeList = hasBar && getBarSizeList({
            barSize,
            stackGroups,
            totalSize: getCartesianAxisSize(axisObj, cateAxisName)
          });
          if (itemIsBar) {
            var _ref7, _getBandSizeOfAxis;
            var maxBarSize = isNil(childMaxBarSize) ? globalMaxBarSize : childMaxBarSize;
            var barBandSize = (_ref7 = (_getBandSizeOfAxis = getBandSizeOfAxis(cateAxis, cateTicks, true)) !== null && _getBandSizeOfAxis !== void 0 ? _getBandSizeOfAxis : maxBarSize) !== null && _ref7 !== void 0 ? _ref7 : 0;
            barPosition = getBarPosition({
              barGap,
              barCategoryGap,
              bandSize: barBandSize !== bandSize ? barBandSize : bandSize,
              sizeList: sizeList[cateAxisId],
              maxBarSize
            });
            if (barBandSize !== bandSize) {
              barPosition = barPosition.map(function(pos) {
                return _objectSpread(_objectSpread({}, pos), {}, {
                  position: _objectSpread(_objectSpread({}, pos.position), {}, {
                    offset: pos.position.offset - barBandSize / 2
                  })
                });
              });
            }
          }
          var composedFn = item && item.type && item.type.getComposedData;
          if (composedFn) {
            formattedItems.push({
              props: _objectSpread(_objectSpread({}, composedFn(_objectSpread(_objectSpread({}, axisObj), {}, {
                displayedData,
                props,
                dataKey,
                item,
                bandSize,
                barPosition,
                offset: offset2,
                stackedData,
                layout,
                dataStartIndex,
                dataEndIndex
              }))), {}, _defineProperty(_defineProperty(_defineProperty({
                key: item.key || "item-".concat(index2)
              }, numericAxisName, axisObj[numericAxisName]), cateAxisName, axisObj[cateAxisName]), "animationId", updateId)),
              childIndex: parseChildIndex(item, props.children),
              item
            });
          }
        });
        return formattedItems;
      };
      var updateStateOfAxisMapsOffsetAndStackGroups = function updateStateOfAxisMapsOffsetAndStackGroups2(_ref8, prevState) {
        var props = _ref8.props, dataStartIndex = _ref8.dataStartIndex, dataEndIndex = _ref8.dataEndIndex, updateId = _ref8.updateId;
        if (!validateWidthHeight({
          props
        })) {
          return null;
        }
        var children = props.children, layout = props.layout, stackOffset = props.stackOffset, data = props.data, reverseStackOrder = props.reverseStackOrder;
        var _getAxisNameByLayout2 = getAxisNameByLayout(layout), numericAxisName = _getAxisNameByLayout2.numericAxisName, cateAxisName = _getAxisNameByLayout2.cateAxisName;
        var graphicalItems = findAllByType(children, GraphicalChild);
        var stackGroups = getStackGroupsByAxisId(data, graphicalItems, "".concat(numericAxisName, "Id"), "".concat(cateAxisName, "Id"), stackOffset, reverseStackOrder);
        var axisObj = axisComponents.reduce(function(result, entry) {
          var name = "".concat(entry.axisType, "Map");
          return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, name, getAxisMap(props, _objectSpread(_objectSpread({}, entry), {}, {
            graphicalItems,
            stackGroups: entry.axisType === numericAxisName && stackGroups,
            dataStartIndex,
            dataEndIndex
          }))));
        }, {});
        var offset2 = calculateOffset(_objectSpread(_objectSpread({}, axisObj), {}, {
          props,
          graphicalItems
        }), prevState === null || prevState === void 0 ? void 0 : prevState.legendBBox);
        Object.keys(axisObj).forEach(function(key) {
          axisObj[key] = formatAxisMap2(props, axisObj[key], offset2, key.replace("Map", ""), chartName);
        });
        var cateAxisMap = axisObj["".concat(cateAxisName, "Map")];
        var ticksObj = tooltipTicksGenerator(cateAxisMap);
        var formattedGraphicalItems = getFormatItems(props, _objectSpread(_objectSpread({}, axisObj), {}, {
          dataStartIndex,
          dataEndIndex,
          updateId,
          graphicalItems,
          stackGroups,
          offset: offset2
        }));
        return _objectSpread(_objectSpread({
          formattedGraphicalItems,
          graphicalItems,
          offset: offset2,
          stackGroups
        }, ticksObj), axisObj);
      };
      var CategoricalChartWrapper = /* @__PURE__ */ function(_Component) {
        function CategoricalChartWrapper2(_props) {
          var _props$id, _props$throttleDelay;
          var _this;
          _classCallCheck(this, CategoricalChartWrapper2);
          _this = _callSuper(this, CategoricalChartWrapper2, [_props]);
          _defineProperty(_this, "eventEmitterSymbol", Symbol("rechartsEventEmitter"));
          _defineProperty(_this, "accessibilityManager", new AccessibilityManager());
          _defineProperty(_this, "handleLegendBBoxUpdate", function(box) {
            if (box) {
              var _this$state = _this.state, dataStartIndex = _this$state.dataStartIndex, dataEndIndex = _this$state.dataEndIndex, updateId = _this$state.updateId;
              _this.setState(_objectSpread({
                legendBBox: box
              }, updateStateOfAxisMapsOffsetAndStackGroups({
                props: _this.props,
                dataStartIndex,
                dataEndIndex,
                updateId
              }, _objectSpread(_objectSpread({}, _this.state), {}, {
                legendBBox: box
              }))));
            }
          });
          _defineProperty(_this, "handleReceiveSyncEvent", function(cId, data, emitter) {
            if (_this.props.syncId === cId) {
              if (emitter === _this.eventEmitterSymbol && typeof _this.props.syncMethod !== "function") {
                return;
              }
              _this.applySyncEvent(data);
            }
          });
          _defineProperty(_this, "handleBrushChange", function(_ref9) {
            var startIndex = _ref9.startIndex, endIndex = _ref9.endIndex;
            if (startIndex !== _this.state.dataStartIndex || endIndex !== _this.state.dataEndIndex) {
              var updateId = _this.state.updateId;
              _this.setState(function() {
                return _objectSpread({
                  dataStartIndex: startIndex,
                  dataEndIndex: endIndex
                }, updateStateOfAxisMapsOffsetAndStackGroups({
                  props: _this.props,
                  dataStartIndex: startIndex,
                  dataEndIndex: endIndex,
                  updateId
                }, _this.state));
              });
              _this.triggerSyncEvent({
                dataStartIndex: startIndex,
                dataEndIndex: endIndex
              });
            }
          });
          _defineProperty(_this, "handleMouseEnter", function(e) {
            var mouse = _this.getMouseInfo(e);
            if (mouse) {
              var _nextState = _objectSpread(_objectSpread({}, mouse), {}, {
                isTooltipActive: true
              });
              _this.setState(_nextState);
              _this.triggerSyncEvent(_nextState);
              var onMouseEnter = _this.props.onMouseEnter;
              if (isFunction(onMouseEnter)) {
                onMouseEnter(_nextState, e);
              }
            }
          });
          _defineProperty(_this, "triggeredAfterMouseMove", function(e) {
            var mouse = _this.getMouseInfo(e);
            var nextState = mouse ? _objectSpread(_objectSpread({}, mouse), {}, {
              isTooltipActive: true
            }) : {
              isTooltipActive: false
            };
            _this.setState(nextState);
            _this.triggerSyncEvent(nextState);
            var onMouseMove = _this.props.onMouseMove;
            if (isFunction(onMouseMove)) {
              onMouseMove(nextState, e);
            }
          });
          _defineProperty(_this, "handleItemMouseEnter", function(el) {
            _this.setState(function() {
              return {
                isTooltipActive: true,
                activeItem: el,
                activePayload: el.tooltipPayload,
                activeCoordinate: el.tooltipPosition || {
                  x: el.cx,
                  y: el.cy
                }
              };
            });
          });
          _defineProperty(_this, "handleItemMouseLeave", function() {
            _this.setState(function() {
              return {
                isTooltipActive: false
              };
            });
          });
          _defineProperty(_this, "handleMouseMove", function(e) {
            e.persist();
            _this.throttleTriggeredAfterMouseMove(e);
          });
          _defineProperty(_this, "handleMouseLeave", function(e) {
            _this.throttleTriggeredAfterMouseMove.cancel();
            var nextState = {
              isTooltipActive: false
            };
            _this.setState(nextState);
            _this.triggerSyncEvent(nextState);
            var onMouseLeave = _this.props.onMouseLeave;
            if (isFunction(onMouseLeave)) {
              onMouseLeave(nextState, e);
            }
          });
          _defineProperty(_this, "handleOuterEvent", function(e) {
            var eventName = getReactEventByType(e);
            var event = get(_this.props, "".concat(eventName));
            if (eventName && isFunction(event)) {
              var _mouse;
              var mouse;
              if (/.*touch.*/i.test(eventName)) {
                mouse = _this.getMouseInfo(e.changedTouches[0]);
              } else {
                mouse = _this.getMouseInfo(e);
              }
              event((_mouse = mouse) !== null && _mouse !== void 0 ? _mouse : {}, e);
            }
          });
          _defineProperty(_this, "handleClick", function(e) {
            var mouse = _this.getMouseInfo(e);
            if (mouse) {
              var _nextState2 = _objectSpread(_objectSpread({}, mouse), {}, {
                isTooltipActive: true
              });
              _this.setState(_nextState2);
              _this.triggerSyncEvent(_nextState2);
              var onClick = _this.props.onClick;
              if (isFunction(onClick)) {
                onClick(_nextState2, e);
              }
            }
          });
          _defineProperty(_this, "handleMouseDown", function(e) {
            var onMouseDown = _this.props.onMouseDown;
            if (isFunction(onMouseDown)) {
              var _nextState3 = _this.getMouseInfo(e);
              onMouseDown(_nextState3, e);
            }
          });
          _defineProperty(_this, "handleMouseUp", function(e) {
            var onMouseUp = _this.props.onMouseUp;
            if (isFunction(onMouseUp)) {
              var _nextState4 = _this.getMouseInfo(e);
              onMouseUp(_nextState4, e);
            }
          });
          _defineProperty(_this, "handleTouchMove", function(e) {
            if (e.changedTouches != null && e.changedTouches.length > 0) {
              _this.throttleTriggeredAfterMouseMove(e.changedTouches[0]);
            }
          });
          _defineProperty(_this, "handleTouchStart", function(e) {
            if (e.changedTouches != null && e.changedTouches.length > 0) {
              _this.handleMouseDown(e.changedTouches[0]);
            }
          });
          _defineProperty(_this, "handleTouchEnd", function(e) {
            if (e.changedTouches != null && e.changedTouches.length > 0) {
              _this.handleMouseUp(e.changedTouches[0]);
            }
          });
          _defineProperty(_this, "handleDoubleClick", function(e) {
            var onDoubleClick = _this.props.onDoubleClick;
            if (isFunction(onDoubleClick)) {
              var _nextState5 = _this.getMouseInfo(e);
              onDoubleClick(_nextState5, e);
            }
          });
          _defineProperty(_this, "handleContextMenu", function(e) {
            var onContextMenu = _this.props.onContextMenu;
            if (isFunction(onContextMenu)) {
              var _nextState6 = _this.getMouseInfo(e);
              onContextMenu(_nextState6, e);
            }
          });
          _defineProperty(_this, "triggerSyncEvent", function(data) {
            if (_this.props.syncId !== void 0) {
              eventCenter.emit(SYNC_EVENT, _this.props.syncId, data, _this.eventEmitterSymbol);
            }
          });
          _defineProperty(_this, "applySyncEvent", function(data) {
            var _this$props = _this.props, layout = _this$props.layout, syncMethod = _this$props.syncMethod;
            var updateId = _this.state.updateId;
            var dataStartIndex = data.dataStartIndex, dataEndIndex = data.dataEndIndex;
            if (data.dataStartIndex !== void 0 || data.dataEndIndex !== void 0) {
              _this.setState(_objectSpread({
                dataStartIndex,
                dataEndIndex
              }, updateStateOfAxisMapsOffsetAndStackGroups({
                props: _this.props,
                dataStartIndex,
                dataEndIndex,
                updateId
              }, _this.state)));
            } else if (data.activeTooltipIndex !== void 0) {
              var chartX = data.chartX, chartY = data.chartY;
              var activeTooltipIndex = data.activeTooltipIndex;
              var _this$state2 = _this.state, offset2 = _this$state2.offset, tooltipTicks = _this$state2.tooltipTicks;
              if (!offset2) {
                return;
              }
              if (typeof syncMethod === "function") {
                activeTooltipIndex = syncMethod(tooltipTicks, data);
              } else if (syncMethod === "value") {
                activeTooltipIndex = -1;
                for (var i2 = 0; i2 < tooltipTicks.length; i2++) {
                  if (tooltipTicks[i2].value === data.activeLabel) {
                    activeTooltipIndex = i2;
                    break;
                  }
                }
              }
              var viewBox = _objectSpread(_objectSpread({}, offset2), {}, {
                x: offset2.left,
                y: offset2.top
              });
              var validateChartX = Math.min(chartX, viewBox.x + viewBox.width);
              var validateChartY = Math.min(chartY, viewBox.y + viewBox.height);
              var activeLabel = tooltipTicks[activeTooltipIndex] && tooltipTicks[activeTooltipIndex].value;
              var activePayload = getTooltipContent(_this.state, _this.props.data, activeTooltipIndex);
              var activeCoordinate = tooltipTicks[activeTooltipIndex] ? {
                x: layout === "horizontal" ? tooltipTicks[activeTooltipIndex].coordinate : validateChartX,
                y: layout === "horizontal" ? validateChartY : tooltipTicks[activeTooltipIndex].coordinate
              } : originCoordinate;
              _this.setState(_objectSpread(_objectSpread({}, data), {}, {
                activeLabel,
                activeCoordinate,
                activePayload,
                activeTooltipIndex
              }));
            } else {
              _this.setState(data);
            }
          });
          _defineProperty(_this, "renderCursor", function(element) {
            var _element$props$active;
            var _this$state3 = _this.state, isTooltipActive = _this$state3.isTooltipActive, activeCoordinate = _this$state3.activeCoordinate, activePayload = _this$state3.activePayload, offset2 = _this$state3.offset, activeTooltipIndex = _this$state3.activeTooltipIndex, tooltipAxisBandSize = _this$state3.tooltipAxisBandSize;
            var tooltipEventType = _this.getTooltipEventType();
            var isActive = (_element$props$active = element.props.active) !== null && _element$props$active !== void 0 ? _element$props$active : isTooltipActive;
            var layout = _this.props.layout;
            var key = element.key || "_recharts-cursor";
            return /* @__PURE__ */ React.createElement(Cursor, {
              key,
              activeCoordinate,
              activePayload,
              activeTooltipIndex,
              chartName,
              element,
              isActive,
              layout,
              offset: offset2,
              tooltipAxisBandSize,
              tooltipEventType
            });
          });
          _defineProperty(_this, "renderPolarAxis", function(element, displayName, index2) {
            var axisType = get(element, "type.axisType");
            var axisMap = get(_this.state, "".concat(axisType, "Map"));
            var elementDefaultProps = element.type.defaultProps;
            var elementProps = elementDefaultProps !== void 0 ? _objectSpread(_objectSpread({}, elementDefaultProps), element.props) : element.props;
            var axisOption = axisMap && axisMap[elementProps["".concat(axisType, "Id")]];
            return /* @__PURE__ */ reactExports.cloneElement(element, _objectSpread(_objectSpread({}, axisOption), {}, {
              className: clsx(axisType, axisOption.className),
              key: element.key || "".concat(displayName, "-").concat(index2),
              ticks: getTicksOfAxis(axisOption, true)
            }));
          });
          _defineProperty(_this, "renderPolarGrid", function(element) {
            var _element$props = element.props, radialLines = _element$props.radialLines, polarAngles = _element$props.polarAngles, polarRadius = _element$props.polarRadius;
            var _this$state4 = _this.state, radiusAxisMap = _this$state4.radiusAxisMap, angleAxisMap = _this$state4.angleAxisMap;
            var radiusAxis = getAnyElementOfObject(radiusAxisMap);
            var angleAxis = getAnyElementOfObject(angleAxisMap);
            var cx2 = angleAxis.cx, cy = angleAxis.cy, innerRadius = angleAxis.innerRadius, outerRadius = angleAxis.outerRadius;
            return /* @__PURE__ */ reactExports.cloneElement(element, {
              polarAngles: Array.isArray(polarAngles) ? polarAngles : getTicksOfAxis(angleAxis, true).map(function(entry) {
                return entry.coordinate;
              }),
              polarRadius: Array.isArray(polarRadius) ? polarRadius : getTicksOfAxis(radiusAxis, true).map(function(entry) {
                return entry.coordinate;
              }),
              cx: cx2,
              cy,
              innerRadius,
              outerRadius,
              key: element.key || "polar-grid",
              radialLines
            });
          });
          _defineProperty(_this, "renderLegend", function() {
            var formattedGraphicalItems = _this.state.formattedGraphicalItems;
            var _this$props2 = _this.props, children = _this$props2.children, width = _this$props2.width, height = _this$props2.height;
            var margin = _this.props.margin || {};
            var legendWidth = width - (margin.left || 0) - (margin.right || 0);
            var props = getLegendProps({
              children,
              formattedGraphicalItems,
              legendWidth,
              legendContent
            });
            if (!props) {
              return null;
            }
            var item = props.item, otherProps = _objectWithoutProperties(props, _excluded);
            return /* @__PURE__ */ reactExports.cloneElement(item, _objectSpread(_objectSpread({}, otherProps), {}, {
              chartWidth: width,
              chartHeight: height,
              margin,
              onBBoxUpdate: _this.handleLegendBBoxUpdate
            }));
          });
          _defineProperty(_this, "renderTooltip", function() {
            var _tooltipItem$props$ac;
            var _this$props3 = _this.props, children = _this$props3.children, accessibilityLayer = _this$props3.accessibilityLayer;
            var tooltipItem = findChildByType(children, Tooltip);
            if (!tooltipItem) {
              return null;
            }
            var _this$state5 = _this.state, isTooltipActive = _this$state5.isTooltipActive, activeCoordinate = _this$state5.activeCoordinate, activePayload = _this$state5.activePayload, activeLabel = _this$state5.activeLabel, offset2 = _this$state5.offset;
            var isActive = (_tooltipItem$props$ac = tooltipItem.props.active) !== null && _tooltipItem$props$ac !== void 0 ? _tooltipItem$props$ac : isTooltipActive;
            return /* @__PURE__ */ reactExports.cloneElement(tooltipItem, {
              viewBox: _objectSpread(_objectSpread({}, offset2), {}, {
                x: offset2.left,
                y: offset2.top
              }),
              active: isActive,
              label: activeLabel,
              payload: isActive ? activePayload : [],
              coordinate: activeCoordinate,
              accessibilityLayer
            });
          });
          _defineProperty(_this, "renderBrush", function(element) {
            var _this$props4 = _this.props, margin = _this$props4.margin, data = _this$props4.data;
            var _this$state6 = _this.state, offset2 = _this$state6.offset, dataStartIndex = _this$state6.dataStartIndex, dataEndIndex = _this$state6.dataEndIndex, updateId = _this$state6.updateId;
            return /* @__PURE__ */ reactExports.cloneElement(element, {
              key: element.key || "_recharts-brush",
              onChange: combineEventHandlers(_this.handleBrushChange, element.props.onChange),
              data,
              x: isNumber(element.props.x) ? element.props.x : offset2.left,
              y: isNumber(element.props.y) ? element.props.y : offset2.top + offset2.height + offset2.brushBottom - (margin.bottom || 0),
              width: isNumber(element.props.width) ? element.props.width : offset2.width,
              startIndex: dataStartIndex,
              endIndex: dataEndIndex,
              updateId: "brush-".concat(updateId)
            });
          });
          _defineProperty(_this, "renderReferenceElement", function(element, displayName, index2) {
            if (!element) {
              return null;
            }
            var _this2 = _this, clipPathId = _this2.clipPathId;
            var _this$state7 = _this.state, xAxisMap = _this$state7.xAxisMap, yAxisMap = _this$state7.yAxisMap, offset2 = _this$state7.offset;
            var elementDefaultProps = element.type.defaultProps || {};
            var _element$props2 = element.props, _element$props2$xAxis = _element$props2.xAxisId, xAxisId = _element$props2$xAxis === void 0 ? elementDefaultProps.xAxisId : _element$props2$xAxis, _element$props2$yAxis = _element$props2.yAxisId, yAxisId = _element$props2$yAxis === void 0 ? elementDefaultProps.yAxisId : _element$props2$yAxis;
            return /* @__PURE__ */ reactExports.cloneElement(element, {
              key: element.key || "".concat(displayName, "-").concat(index2),
              xAxis: xAxisMap[xAxisId],
              yAxis: yAxisMap[yAxisId],
              viewBox: {
                x: offset2.left,
                y: offset2.top,
                width: offset2.width,
                height: offset2.height
              },
              clipPathId
            });
          });
          _defineProperty(_this, "renderActivePoints", function(_ref10) {
            var item = _ref10.item, activePoint = _ref10.activePoint, basePoint = _ref10.basePoint, childIndex = _ref10.childIndex, isRange = _ref10.isRange;
            var result = [];
            var key = item.props.key;
            var itemItemProps = item.item.type.defaultProps !== void 0 ? _objectSpread(_objectSpread({}, item.item.type.defaultProps), item.item.props) : item.item.props;
            var activeDot = itemItemProps.activeDot, dataKey = itemItemProps.dataKey;
            var dotProps = _objectSpread(_objectSpread({
              index: childIndex,
              dataKey,
              cx: activePoint.x,
              cy: activePoint.y,
              r: 4,
              fill: getMainColorOfGraphicItem(item.item),
              strokeWidth: 2,
              stroke: "#fff",
              payload: activePoint.payload,
              value: activePoint.value
            }, filterProps(activeDot, false)), adaptEventHandlers(activeDot));
            result.push(CategoricalChartWrapper2.renderActiveDot(activeDot, dotProps, "".concat(key, "-activePoint-").concat(childIndex)));
            if (basePoint) {
              result.push(CategoricalChartWrapper2.renderActiveDot(activeDot, _objectSpread(_objectSpread({}, dotProps), {}, {
                cx: basePoint.x,
                cy: basePoint.y
              }), "".concat(key, "-basePoint-").concat(childIndex)));
            } else if (isRange) {
              result.push(null);
            }
            return result;
          });
          _defineProperty(_this, "renderGraphicChild", function(element, displayName, index2) {
            var item = _this.filterFormatItem(element, displayName, index2);
            if (!item) {
              return null;
            }
            var tooltipEventType = _this.getTooltipEventType();
            var _this$state8 = _this.state, isTooltipActive = _this$state8.isTooltipActive, tooltipAxis = _this$state8.tooltipAxis, activeTooltipIndex = _this$state8.activeTooltipIndex, activeLabel = _this$state8.activeLabel;
            var children = _this.props.children;
            var tooltipItem = findChildByType(children, Tooltip);
            var _item$props = item.props, points = _item$props.points, isRange = _item$props.isRange, baseLine = _item$props.baseLine;
            var itemItemProps = item.item.type.defaultProps !== void 0 ? _objectSpread(_objectSpread({}, item.item.type.defaultProps), item.item.props) : item.item.props;
            var activeDot = itemItemProps.activeDot, hide2 = itemItemProps.hide, activeBar = itemItemProps.activeBar, activeShape = itemItemProps.activeShape;
            var hasActive = Boolean(!hide2 && isTooltipActive && tooltipItem && (activeDot || activeBar || activeShape));
            var itemEvents = {};
            if (tooltipEventType !== "axis" && tooltipItem && tooltipItem.props.trigger === "click") {
              itemEvents = {
                onClick: combineEventHandlers(_this.handleItemMouseEnter, element.props.onClick)
              };
            } else if (tooltipEventType !== "axis") {
              itemEvents = {
                onMouseLeave: combineEventHandlers(_this.handleItemMouseLeave, element.props.onMouseLeave),
                onMouseEnter: combineEventHandlers(_this.handleItemMouseEnter, element.props.onMouseEnter)
              };
            }
            var graphicalItem = /* @__PURE__ */ reactExports.cloneElement(element, _objectSpread(_objectSpread({}, item.props), itemEvents));
            function findWithPayload(entry) {
              return typeof tooltipAxis.dataKey === "function" ? tooltipAxis.dataKey(entry.payload) : null;
            }
            if (hasActive) {
              if (activeTooltipIndex >= 0) {
                var activePoint, basePoint;
                if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {
                  var specifiedKey = typeof tooltipAxis.dataKey === "function" ? findWithPayload : "payload.".concat(tooltipAxis.dataKey.toString());
                  activePoint = findEntryInArray(points, specifiedKey, activeLabel);
                  basePoint = isRange && baseLine && findEntryInArray(baseLine, specifiedKey, activeLabel);
                } else {
                  activePoint = points === null || points === void 0 ? void 0 : points[activeTooltipIndex];
                  basePoint = isRange && baseLine && baseLine[activeTooltipIndex];
                }
                if (activeShape || activeBar) {
                  var activeIndex = element.props.activeIndex !== void 0 ? element.props.activeIndex : activeTooltipIndex;
                  return [/* @__PURE__ */ reactExports.cloneElement(element, _objectSpread(_objectSpread(_objectSpread({}, item.props), itemEvents), {}, {
                    activeIndex
                  })), null, null];
                }
                if (!isNil(activePoint)) {
                  return [graphicalItem].concat(_toConsumableArray(_this.renderActivePoints({
                    item,
                    activePoint,
                    basePoint,
                    childIndex: activeTooltipIndex,
                    isRange
                  })));
                }
              } else {
                var _this$getItemByXY;
                var _ref11 = (_this$getItemByXY = _this.getItemByXY(_this.state.activeCoordinate)) !== null && _this$getItemByXY !== void 0 ? _this$getItemByXY : {
                  graphicalItem
                }, _ref11$graphicalItem = _ref11.graphicalItem, _ref11$graphicalItem$ = _ref11$graphicalItem.item, xyItem = _ref11$graphicalItem$ === void 0 ? element : _ref11$graphicalItem$, childIndex = _ref11$graphicalItem.childIndex;
                var elementProps = _objectSpread(_objectSpread(_objectSpread({}, item.props), itemEvents), {}, {
                  activeIndex: childIndex
                });
                return [/* @__PURE__ */ reactExports.cloneElement(xyItem, elementProps), null, null];
              }
            }
            if (isRange) {
              return [graphicalItem, null, null];
            }
            return [graphicalItem, null];
          });
          _defineProperty(_this, "renderCustomized", function(element, displayName, index2) {
            return /* @__PURE__ */ reactExports.cloneElement(element, _objectSpread(_objectSpread({
              key: "recharts-customized-".concat(index2)
            }, _this.props), _this.state));
          });
          _defineProperty(_this, "renderMap", {
            CartesianGrid: {
              handler: renderAsIs,
              once: true
            },
            ReferenceArea: {
              handler: _this.renderReferenceElement
            },
            ReferenceLine: {
              handler: renderAsIs
            },
            ReferenceDot: {
              handler: _this.renderReferenceElement
            },
            XAxis: {
              handler: renderAsIs
            },
            YAxis: {
              handler: renderAsIs
            },
            Brush: {
              handler: _this.renderBrush,
              once: true
            },
            Bar: {
              handler: _this.renderGraphicChild
            },
            Line: {
              handler: _this.renderGraphicChild
            },
            Area: {
              handler: _this.renderGraphicChild
            },
            Radar: {
              handler: _this.renderGraphicChild
            },
            RadialBar: {
              handler: _this.renderGraphicChild
            },
            Scatter: {
              handler: _this.renderGraphicChild
            },
            Pie: {
              handler: _this.renderGraphicChild
            },
            Funnel: {
              handler: _this.renderGraphicChild
            },
            Tooltip: {
              handler: _this.renderCursor,
              once: true
            },
            PolarGrid: {
              handler: _this.renderPolarGrid,
              once: true
            },
            PolarAngleAxis: {
              handler: _this.renderPolarAxis
            },
            PolarRadiusAxis: {
              handler: _this.renderPolarAxis
            },
            Customized: {
              handler: _this.renderCustomized
            }
          });
          _this.clipPathId = "".concat((_props$id = _props.id) !== null && _props$id !== void 0 ? _props$id : uniqueId("recharts"), "-clip");
          _this.throttleTriggeredAfterMouseMove = throttle(_this.triggeredAfterMouseMove, (_props$throttleDelay = _props.throttleDelay) !== null && _props$throttleDelay !== void 0 ? _props$throttleDelay : 1e3 / 60);
          _this.state = {};
          return _this;
        }
        _inherits(CategoricalChartWrapper2, _Component);
        return _createClass(CategoricalChartWrapper2, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            var _this$props$margin$le, _this$props$margin$to;
            this.addListener();
            this.accessibilityManager.setDetails({
              container: this.container,
              offset: {
                left: (_this$props$margin$le = this.props.margin.left) !== null && _this$props$margin$le !== void 0 ? _this$props$margin$le : 0,
                top: (_this$props$margin$to = this.props.margin.top) !== null && _this$props$margin$to !== void 0 ? _this$props$margin$to : 0
              },
              coordinateList: this.state.tooltipTicks,
              mouseHandlerCallback: this.triggeredAfterMouseMove,
              layout: this.props.layout
            });
            this.displayDefaultTooltip();
          }
        }, {
          key: "displayDefaultTooltip",
          value: function displayDefaultTooltip() {
            var _this$props5 = this.props, children = _this$props5.children, data = _this$props5.data, height = _this$props5.height, layout = _this$props5.layout;
            var tooltipElem = findChildByType(children, Tooltip);
            if (!tooltipElem) {
              return;
            }
            var defaultIndex = tooltipElem.props.defaultIndex;
            if (typeof defaultIndex !== "number" || defaultIndex < 0 || defaultIndex > this.state.tooltipTicks.length - 1) {
              return;
            }
            var activeLabel = this.state.tooltipTicks[defaultIndex] && this.state.tooltipTicks[defaultIndex].value;
            var activePayload = getTooltipContent(this.state, data, defaultIndex, activeLabel);
            var independentAxisCoord = this.state.tooltipTicks[defaultIndex].coordinate;
            var dependentAxisCoord = (this.state.offset.top + height) / 2;
            var isHorizontal = layout === "horizontal";
            var activeCoordinate = isHorizontal ? {
              x: independentAxisCoord,
              y: dependentAxisCoord
            } : {
              y: independentAxisCoord,
              x: dependentAxisCoord
            };
            var scatterPlotElement = this.state.formattedGraphicalItems.find(function(_ref12) {
              var item = _ref12.item;
              return item.type.name === "Scatter";
            });
            if (scatterPlotElement) {
              activeCoordinate = _objectSpread(_objectSpread({}, activeCoordinate), scatterPlotElement.props.points[defaultIndex].tooltipPosition);
              activePayload = scatterPlotElement.props.points[defaultIndex].tooltipPayload;
            }
            var nextState = {
              activeTooltipIndex: defaultIndex,
              isTooltipActive: true,
              activeLabel,
              activePayload,
              activeCoordinate
            };
            this.setState(nextState);
            this.renderCursor(tooltipElem);
            this.accessibilityManager.setIndex(defaultIndex);
          }
        }, {
          key: "getSnapshotBeforeUpdate",
          value: function getSnapshotBeforeUpdate(prevProps, prevState) {
            if (!this.props.accessibilityLayer) {
              return null;
            }
            if (this.state.tooltipTicks !== prevState.tooltipTicks) {
              this.accessibilityManager.setDetails({
                coordinateList: this.state.tooltipTicks
              });
            }
            if (this.props.layout !== prevProps.layout) {
              this.accessibilityManager.setDetails({
                layout: this.props.layout
              });
            }
            if (this.props.margin !== prevProps.margin) {
              var _this$props$margin$le2, _this$props$margin$to2;
              this.accessibilityManager.setDetails({
                offset: {
                  left: (_this$props$margin$le2 = this.props.margin.left) !== null && _this$props$margin$le2 !== void 0 ? _this$props$margin$le2 : 0,
                  top: (_this$props$margin$to2 = this.props.margin.top) !== null && _this$props$margin$to2 !== void 0 ? _this$props$margin$to2 : 0
                }
              });
            }
            return null;
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            if (!isChildrenEqual([findChildByType(prevProps.children, Tooltip)], [findChildByType(this.props.children, Tooltip)])) {
              this.displayDefaultTooltip();
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.removeListener();
            this.throttleTriggeredAfterMouseMove.cancel();
          }
        }, {
          key: "getTooltipEventType",
          value: function getTooltipEventType() {
            var tooltipItem = findChildByType(this.props.children, Tooltip);
            if (tooltipItem && typeof tooltipItem.props.shared === "boolean") {
              var eventType = tooltipItem.props.shared ? "axis" : "item";
              return validateTooltipEventTypes.indexOf(eventType) >= 0 ? eventType : defaultTooltipEventType;
            }
            return defaultTooltipEventType;
          }
          /**
           * Get the information of mouse in chart, return null when the mouse is not in the chart
           * @param  {MousePointer} event    The event object
           * @return {Object}          Mouse data
           */
        }, {
          key: "getMouseInfo",
          value: function getMouseInfo(event) {
            if (!this.container) {
              return null;
            }
            var element = this.container;
            var boundingRect = element.getBoundingClientRect();
            var containerOffset = getOffset(boundingRect);
            var e = {
              chartX: Math.round(event.pageX - containerOffset.left),
              chartY: Math.round(event.pageY - containerOffset.top)
            };
            var scale = boundingRect.width / element.offsetWidth || 1;
            var rangeObj = this.inRange(e.chartX, e.chartY, scale);
            if (!rangeObj) {
              return null;
            }
            var _this$state9 = this.state, xAxisMap = _this$state9.xAxisMap, yAxisMap = _this$state9.yAxisMap;
            var tooltipEventType = this.getTooltipEventType();
            var toolTipData = getTooltipData(this.state, this.props.data, this.props.layout, rangeObj);
            if (tooltipEventType !== "axis" && xAxisMap && yAxisMap) {
              var xScale = getAnyElementOfObject(xAxisMap).scale;
              var yScale = getAnyElementOfObject(yAxisMap).scale;
              var xValue = xScale && xScale.invert ? xScale.invert(e.chartX) : null;
              var yValue = yScale && yScale.invert ? yScale.invert(e.chartY) : null;
              return _objectSpread(_objectSpread({}, e), {}, {
                xValue,
                yValue
              }, toolTipData);
            }
            if (toolTipData) {
              return _objectSpread(_objectSpread({}, e), toolTipData);
            }
            return null;
          }
        }, {
          key: "inRange",
          value: function inRange(x2, y2) {
            var scale = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
            var layout = this.props.layout;
            var scaledX = x2 / scale, scaledY = y2 / scale;
            if (layout === "horizontal" || layout === "vertical") {
              var offset2 = this.state.offset;
              var isInRange = scaledX >= offset2.left && scaledX <= offset2.left + offset2.width && scaledY >= offset2.top && scaledY <= offset2.top + offset2.height;
              return isInRange ? {
                x: scaledX,
                y: scaledY
              } : null;
            }
            var _this$state10 = this.state, angleAxisMap = _this$state10.angleAxisMap, radiusAxisMap = _this$state10.radiusAxisMap;
            if (angleAxisMap && radiusAxisMap) {
              var angleAxis = getAnyElementOfObject(angleAxisMap);
              return inRangeOfSector({
                x: scaledX,
                y: scaledY
              }, angleAxis);
            }
            return null;
          }
        }, {
          key: "parseEventsOfWrapper",
          value: function parseEventsOfWrapper() {
            var children = this.props.children;
            var tooltipEventType = this.getTooltipEventType();
            var tooltipItem = findChildByType(children, Tooltip);
            var tooltipEvents = {};
            if (tooltipItem && tooltipEventType === "axis") {
              if (tooltipItem.props.trigger === "click") {
                tooltipEvents = {
                  onClick: this.handleClick
                };
              } else {
                tooltipEvents = {
                  onMouseEnter: this.handleMouseEnter,
                  onDoubleClick: this.handleDoubleClick,
                  onMouseMove: this.handleMouseMove,
                  onMouseLeave: this.handleMouseLeave,
                  onTouchMove: this.handleTouchMove,
                  onTouchStart: this.handleTouchStart,
                  onTouchEnd: this.handleTouchEnd,
                  onContextMenu: this.handleContextMenu
                };
              }
            }
            var outerEvents = adaptEventHandlers(this.props, this.handleOuterEvent);
            return _objectSpread(_objectSpread({}, outerEvents), tooltipEvents);
          }
        }, {
          key: "addListener",
          value: function addListener() {
            eventCenter.on(SYNC_EVENT, this.handleReceiveSyncEvent);
          }
        }, {
          key: "removeListener",
          value: function removeListener() {
            eventCenter.removeListener(SYNC_EVENT, this.handleReceiveSyncEvent);
          }
        }, {
          key: "filterFormatItem",
          value: function filterFormatItem(item, displayName, childIndex) {
            var formattedGraphicalItems = this.state.formattedGraphicalItems;
            for (var i2 = 0, len = formattedGraphicalItems.length; i2 < len; i2++) {
              var entry = formattedGraphicalItems[i2];
              if (entry.item === item || entry.props.key === item.key || displayName === getDisplayName(entry.item.type) && childIndex === entry.childIndex) {
                return entry;
              }
            }
            return null;
          }
        }, {
          key: "renderClipPath",
          value: function renderClipPath() {
            var clipPathId = this.clipPathId;
            var _this$state$offset = this.state.offset, left = _this$state$offset.left, top = _this$state$offset.top, height = _this$state$offset.height, width = _this$state$offset.width;
            return /* @__PURE__ */ React.createElement("defs", null, /* @__PURE__ */ React.createElement("clipPath", {
              id: clipPathId
            }, /* @__PURE__ */ React.createElement("rect", {
              x: left,
              y: top,
              height,
              width
            })));
          }
        }, {
          key: "getXScales",
          value: function getXScales() {
            var xAxisMap = this.state.xAxisMap;
            return xAxisMap ? Object.entries(xAxisMap).reduce(function(res, _ref13) {
              var _ref14 = _slicedToArray(_ref13, 2), axisId = _ref14[0], axisProps = _ref14[1];
              return _objectSpread(_objectSpread({}, res), {}, _defineProperty({}, axisId, axisProps.scale));
            }, {}) : null;
          }
        }, {
          key: "getYScales",
          value: function getYScales() {
            var yAxisMap = this.state.yAxisMap;
            return yAxisMap ? Object.entries(yAxisMap).reduce(function(res, _ref15) {
              var _ref16 = _slicedToArray(_ref15, 2), axisId = _ref16[0], axisProps = _ref16[1];
              return _objectSpread(_objectSpread({}, res), {}, _defineProperty({}, axisId, axisProps.scale));
            }, {}) : null;
          }
        }, {
          key: "getXScaleByAxisId",
          value: function getXScaleByAxisId(axisId) {
            var _this$state$xAxisMap;
            return (_this$state$xAxisMap = this.state.xAxisMap) === null || _this$state$xAxisMap === void 0 || (_this$state$xAxisMap = _this$state$xAxisMap[axisId]) === null || _this$state$xAxisMap === void 0 ? void 0 : _this$state$xAxisMap.scale;
          }
        }, {
          key: "getYScaleByAxisId",
          value: function getYScaleByAxisId(axisId) {
            var _this$state$yAxisMap;
            return (_this$state$yAxisMap = this.state.yAxisMap) === null || _this$state$yAxisMap === void 0 || (_this$state$yAxisMap = _this$state$yAxisMap[axisId]) === null || _this$state$yAxisMap === void 0 ? void 0 : _this$state$yAxisMap.scale;
          }
        }, {
          key: "getItemByXY",
          value: function getItemByXY(chartXY) {
            var _this$state11 = this.state, formattedGraphicalItems = _this$state11.formattedGraphicalItems, activeItem = _this$state11.activeItem;
            if (formattedGraphicalItems && formattedGraphicalItems.length) {
              for (var i2 = 0, len = formattedGraphicalItems.length; i2 < len; i2++) {
                var graphicalItem = formattedGraphicalItems[i2];
                var props = graphicalItem.props, item = graphicalItem.item;
                var itemProps = item.type.defaultProps !== void 0 ? _objectSpread(_objectSpread({}, item.type.defaultProps), item.props) : item.props;
                var itemDisplayName = getDisplayName(item.type);
                if (itemDisplayName === "Bar") {
                  var activeBarItem = (props.data || []).find(function(entry) {
                    return isInRectangle(chartXY, entry);
                  });
                  if (activeBarItem) {
                    return {
                      graphicalItem,
                      payload: activeBarItem
                    };
                  }
                } else if (itemDisplayName === "RadialBar") {
                  var _activeBarItem = (props.data || []).find(function(entry) {
                    return inRangeOfSector(chartXY, entry);
                  });
                  if (_activeBarItem) {
                    return {
                      graphicalItem,
                      payload: _activeBarItem
                    };
                  }
                } else if (isFunnel(graphicalItem, activeItem) || isPie(graphicalItem, activeItem) || isScatter(graphicalItem, activeItem)) {
                  var activeIndex = getActiveShapeIndexForTooltip({
                    graphicalItem,
                    activeTooltipItem: activeItem,
                    itemData: itemProps.data
                  });
                  var childIndex = itemProps.activeIndex === void 0 ? activeIndex : itemProps.activeIndex;
                  return {
                    graphicalItem: _objectSpread(_objectSpread({}, graphicalItem), {}, {
                      childIndex
                    }),
                    payload: isScatter(graphicalItem, activeItem) ? itemProps.data[activeIndex] : graphicalItem.props.data[activeIndex]
                  };
                }
              }
            }
            return null;
          }
        }, {
          key: "render",
          value: function render() {
            var _this3 = this;
            if (!validateWidthHeight(this)) {
              return null;
            }
            var _this$props6 = this.props, children = _this$props6.children, className = _this$props6.className, width = _this$props6.width, height = _this$props6.height, style = _this$props6.style, compact2 = _this$props6.compact, title = _this$props6.title, desc = _this$props6.desc, others = _objectWithoutProperties(_this$props6, _excluded2);
            var attrs = filterProps(others, false);
            if (compact2) {
              return /* @__PURE__ */ React.createElement(ChartLayoutContextProvider, {
                state: this.state,
                width: this.props.width,
                height: this.props.height,
                clipPathId: this.clipPathId
              }, /* @__PURE__ */ React.createElement(Surface, _extends({}, attrs, {
                width,
                height,
                title,
                desc
              }), this.renderClipPath(), renderByOrder(children, this.renderMap)));
            }
            if (this.props.accessibilityLayer) {
              var _this$props$tabIndex, _this$props$role;
              attrs.tabIndex = (_this$props$tabIndex = this.props.tabIndex) !== null && _this$props$tabIndex !== void 0 ? _this$props$tabIndex : 0;
              attrs.role = (_this$props$role = this.props.role) !== null && _this$props$role !== void 0 ? _this$props$role : "application";
              attrs.onKeyDown = function(e) {
                _this3.accessibilityManager.keyboardEvent(e);
              };
              attrs.onFocus = function() {
                _this3.accessibilityManager.focus();
              };
            }
            var events = this.parseEventsOfWrapper();
            return /* @__PURE__ */ React.createElement(ChartLayoutContextProvider, {
              state: this.state,
              width: this.props.width,
              height: this.props.height,
              clipPathId: this.clipPathId
            }, /* @__PURE__ */ React.createElement("div", _extends({
              className: clsx("recharts-wrapper", className),
              style: _objectSpread({
                position: "relative",
                cursor: "default",
                width,
                height
              }, style)
            }, events, {
              ref: function ref(node) {
                _this3.container = node;
              }
            }), /* @__PURE__ */ React.createElement(Surface, _extends({}, attrs, {
              width,
              height,
              title,
              desc,
              style: FULL_WIDTH_AND_HEIGHT
            }), this.renderClipPath(), renderByOrder(children, this.renderMap)), this.renderLegend(), this.renderTooltip()));
          }
        }]);
      }(reactExports.Component);
      _defineProperty(CategoricalChartWrapper, "displayName", chartName);
      _defineProperty(CategoricalChartWrapper, "defaultProps", _objectSpread({
        layout: "horizontal",
        stackOffset: "none",
        barCategoryGap: "10%",
        barGap: 4,
        margin: {
          top: 5,
          right: 5,
          bottom: 5,
          left: 5
        },
        reverseStackOrder: false,
        syncMethod: "index"
      }, defaultProps2));
      _defineProperty(CategoricalChartWrapper, "getDerivedStateFromProps", function(nextProps, prevState) {
        var dataKey = nextProps.dataKey, data = nextProps.data, children = nextProps.children, width = nextProps.width, height = nextProps.height, layout = nextProps.layout, stackOffset = nextProps.stackOffset, margin = nextProps.margin;
        var dataStartIndex = prevState.dataStartIndex, dataEndIndex = prevState.dataEndIndex;
        if (prevState.updateId === void 0) {
          var defaultState = createDefaultState(nextProps);
          return _objectSpread(_objectSpread(_objectSpread({}, defaultState), {}, {
            updateId: 0
          }, updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread(_objectSpread({
            props: nextProps
          }, defaultState), {}, {
            updateId: 0
          }), prevState)), {}, {
            prevDataKey: dataKey,
            prevData: data,
            prevWidth: width,
            prevHeight: height,
            prevLayout: layout,
            prevStackOffset: stackOffset,
            prevMargin: margin,
            prevChildren: children
          });
        }
        if (dataKey !== prevState.prevDataKey || data !== prevState.prevData || width !== prevState.prevWidth || height !== prevState.prevHeight || layout !== prevState.prevLayout || stackOffset !== prevState.prevStackOffset || !shallowEqual(margin, prevState.prevMargin)) {
          var _defaultState = createDefaultState(nextProps);
          var keepFromPrevState = {
            // (chartX, chartY) are (0,0) in default state, but we want to keep the last mouse position to avoid
            // any flickering
            chartX: prevState.chartX,
            chartY: prevState.chartY,
            // The tooltip should stay active when it was active in the previous render. If this is not
            // the case, the tooltip disappears and immediately re-appears, causing a flickering effect
            isTooltipActive: prevState.isTooltipActive
          };
          var updatesToState = _objectSpread(_objectSpread({}, getTooltipData(prevState, data, layout)), {}, {
            updateId: prevState.updateId + 1
          });
          var newState = _objectSpread(_objectSpread(_objectSpread({}, _defaultState), keepFromPrevState), updatesToState);
          return _objectSpread(_objectSpread(_objectSpread({}, newState), updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread({
            props: nextProps
          }, newState), prevState)), {}, {
            prevDataKey: dataKey,
            prevData: data,
            prevWidth: width,
            prevHeight: height,
            prevLayout: layout,
            prevStackOffset: stackOffset,
            prevMargin: margin,
            prevChildren: children
          });
        }
        if (!isChildrenEqual(children, prevState.prevChildren)) {
          var _brush$props$startInd, _brush$props, _brush$props$endIndex, _brush$props2;
          var brush = findChildByType(children, Brush);
          var startIndex = brush ? (_brush$props$startInd = (_brush$props = brush.props) === null || _brush$props === void 0 ? void 0 : _brush$props.startIndex) !== null && _brush$props$startInd !== void 0 ? _brush$props$startInd : dataStartIndex : dataStartIndex;
          var endIndex = brush ? (_brush$props$endIndex = (_brush$props2 = brush.props) === null || _brush$props2 === void 0 ? void 0 : _brush$props2.endIndex) !== null && _brush$props$endIndex !== void 0 ? _brush$props$endIndex : dataEndIndex : dataEndIndex;
          var hasDifferentStartOrEndIndex = startIndex !== dataStartIndex || endIndex !== dataEndIndex;
          var hasGlobalData = !isNil(data);
          var newUpdateId = hasGlobalData && !hasDifferentStartOrEndIndex ? prevState.updateId : prevState.updateId + 1;
          return _objectSpread(_objectSpread({
            updateId: newUpdateId
          }, updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread(_objectSpread({
            props: nextProps
          }, prevState), {}, {
            updateId: newUpdateId,
            dataStartIndex: startIndex,
            dataEndIndex: endIndex
          }), prevState)), {}, {
            prevChildren: children,
            dataStartIndex: startIndex,
            dataEndIndex: endIndex
          });
        }
        return null;
      });
      _defineProperty(CategoricalChartWrapper, "renderActiveDot", function(option, props, key) {
        var dot;
        if (/* @__PURE__ */ reactExports.isValidElement(option)) {
          dot = /* @__PURE__ */ reactExports.cloneElement(option, props);
        } else if (isFunction(option)) {
          dot = option(props);
        } else {
          dot = /* @__PURE__ */ React.createElement(Dot, props);
        }
        return /* @__PURE__ */ React.createElement(Layer, {
          className: "recharts-active-dot",
          key
        }, dot);
      });
      var CategoricalChart = /* @__PURE__ */ reactExports.forwardRef(function CategoricalChart2(props, ref) {
        return /* @__PURE__ */ React.createElement(CategoricalChartWrapper, _extends({}, props, {
          ref
        }));
      });
      CategoricalChart.displayName = CategoricalChartWrapper.displayName;
      return CategoricalChart;
    };
    var BarChart = generateCategoricalChart({
      chartName: "BarChart",
      GraphicalChild: Bar,
      defaultTooltipEventType: "axis",
      validateTooltipEventTypes: ["axis", "item"],
      axisComponents: [{
        axisType: "xAxis",
        AxisComp: XAxis
      }, {
        axisType: "yAxis",
        AxisComp: YAxis
      }],
      formatAxisMap
    });
    const THEMES = { light: "", dark: ".dark" };
    const ChartContext = reactExports.createContext(null);
    function useChart() {
      const context = reactExports.useContext(ChartContext);
      if (!context) {
        throw new Error("useChart must be used within a <ChartContainer />");
      }
      return context;
    }
    function ChartContainer({
      id,
      className,
      children,
      config: config2,
      ...props
    }) {
      const uniqueId2 = reactExports.useId();
      const chartId = `chart-${id || uniqueId2.replace(/:/g, "")}`;
      return /* @__PURE__ */ jsxRuntimeExports.jsx(ChartContext.Provider, { value: { config: config2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          "data-slot": "chart",
          "data-chart": chartId,
          className: cn$1(
            "[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden",
            className
          ),
          ...props,
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(ChartStyle, { id: chartId, config: config2 }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { children })
          ]
        }
      ) });
    }
    const ChartStyle = ({ id, config: config2 }) => {
      const colorConfig = Object.entries(config2).filter(
        ([, config22]) => config22.theme || config22.color
      );
      if (!colorConfig.length) {
        return null;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "style",
        {
          dangerouslySetInnerHTML: {
            __html: Object.entries(THEMES).map(
              ([theme, prefix2]) => `
${prefix2} [data-chart=${id}] {
${colorConfig.map(([key, itemConfig]) => {
                var _a2;
                const color2 = ((_a2 = itemConfig.theme) == null ? void 0 : _a2[theme]) || itemConfig.color;
                return color2 ? `  --color-${key}: ${color2};` : null;
              }).join("\n")}
}
`
            ).join("\n")
          }
        }
      );
    };
    const ChartTooltip = Tooltip;
    function ChartTooltipContent({
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color: color2,
      nameKey,
      labelKey
    }) {
      const { config: config2 } = useChart();
      const tooltipLabel = reactExports.useMemo(() => {
        var _a2;
        if (hideLabel || !(payload == null ? void 0 : payload.length)) {
          return null;
        }
        const [item] = payload;
        const key = `${labelKey || (item == null ? void 0 : item.dataKey) || (item == null ? void 0 : item.name) || "value"}`;
        const itemConfig = getPayloadConfigFromPayload(config2, item, key);
        const value = !labelKey && typeof label === "string" ? ((_a2 = config2[label]) == null ? void 0 : _a2.label) || label : itemConfig == null ? void 0 : itemConfig.label;
        if (labelFormatter) {
          return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: cn$1("font-medium", labelClassName), children: labelFormatter(value, payload) });
        }
        if (!value) {
          return null;
        }
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: cn$1("font-medium", labelClassName), children: value });
      }, [
        label,
        labelFormatter,
        payload,
        hideLabel,
        labelClassName,
        config2,
        labelKey
      ]);
      if (!active || !(payload == null ? void 0 : payload.length)) {
        return null;
      }
      const nestLabel = payload.length === 1 && indicator !== "dot";
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "div",
        {
          className: cn$1(
            "border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl",
            className
          ),
          children: [
            !nestLabel ? tooltipLabel : null,
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid gap-1.5", children: payload.map((item, index2) => {
              const key = `${nameKey || item.name || item.dataKey || "value"}`;
              const itemConfig = getPayloadConfigFromPayload(config2, item, key);
              const indicatorColor = color2 || item.payload.fill || item.color;
              return /* @__PURE__ */ jsxRuntimeExports.jsx(
                "div",
                {
                  className: cn$1(
                    "[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5",
                    indicator === "dot" && "items-center"
                  ),
                  children: formatter && (item == null ? void 0 : item.value) !== void 0 && item.name ? formatter(item.value, item.name, item, index2, item.payload) : /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    (itemConfig == null ? void 0 : itemConfig.icon) ? /* @__PURE__ */ jsxRuntimeExports.jsx(itemConfig.icon, {}) : !hideIndicator && /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "div",
                      {
                        className: cn$1(
                          "shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)",
                          {
                            "h-2.5 w-2.5": indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-[1.5px] border-dashed bg-transparent": indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed"
                          }
                        ),
                        style: {
                          "--color-bg": indicatorColor,
                          "--color-border": indicatorColor
                        }
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        className: cn$1(
                          "flex flex-1 justify-between leading-none",
                          nestLabel ? "items-end" : "items-center"
                        ),
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid gap-1.5", children: [
                            nestLabel ? tooltipLabel : null,
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-muted-foreground", children: (itemConfig == null ? void 0 : itemConfig.label) || item.name })
                          ] }),
                          item.value && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-foreground font-mono font-medium tabular-nums", children: item.value.toLocaleString() })
                        ]
                      }
                    )
                  ] })
                },
                item.dataKey
              );
            }) })
          ]
        }
      );
    }
    const ChartLegend = Legend;
    function ChartLegendContent({
      className,
      hideIcon = false,
      payload,
      verticalAlign = "bottom",
      nameKey
    }) {
      const { config: config2 } = useChart();
      if (!(payload == null ? void 0 : payload.length)) {
        return null;
      }
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          className: cn$1(
            "flex items-center justify-center gap-4",
            verticalAlign === "top" ? "pb-3" : "pt-3",
            className
          ),
          children: payload.map((item) => {
            const key = `${nameKey || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config2, item, key);
            return /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "div",
              {
                className: cn$1(
                  "[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3"
                ),
                children: [
                  (itemConfig == null ? void 0 : itemConfig.icon) && !hideIcon ? /* @__PURE__ */ jsxRuntimeExports.jsx(itemConfig.icon, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "div",
                    {
                      className: "h-2 w-2 shrink-0 rounded-[2px]",
                      style: {
                        backgroundColor: item.color
                      }
                    }
                  ),
                  itemConfig == null ? void 0 : itemConfig.label
                ]
              },
              item.value
            );
          })
        }
      );
    }
    function getPayloadConfigFromPayload(config2, payload, key) {
      if (typeof payload !== "object" || payload === null) {
        return void 0;
      }
      const payloadPayload = "payload" in payload && typeof payload.payload === "object" && payload.payload !== null ? payload.payload : void 0;
      let configLabelKey = key;
      if (key in payload && typeof payload[key] === "string") {
        configLabelKey = payload[key];
      } else if (payloadPayload && key in payloadPayload && typeof payloadPayload[key] === "string") {
        configLabelKey = payloadPayload[key];
      }
      return configLabelKey in config2 ? config2[configLabelKey] : config2[key];
    }
    const chartConfig = {
      allCount: {
        label: "Semua",
        color: "#2563eb"
      },
      resolvedCount: {
        label: "Selesai",
        color: "#60a5fa"
      }
    };
    function Dashboard() {
      var _a2, _b2, _c2;
      const setPage = useLayoutState((state) => state.set);
      const stats = useQuery({
        queryKey: ["stats"],
        queryFn: getStats
      });
      reactExports.useEffect(() => {
        setPage({
          title: "Dashboard",
          active: "Dashboard"
        });
      }, []);
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-5 flex items-stretch space-x-5", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 p-5 border rounded-md border-blue-600 bg-blue-500", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: "font-bold text-xl text-white", children: "Selamat Datang 👋" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-gray-200", children: "Ini adalah halaman admin untuk pemantauan laporan pengaduan pelanggan PLN ULP SUKARAMI" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "grid grid-cols-2 gap-5 flex-1", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-5 border rounded-md flex flex-col justify-center relative overflow-hidden", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "font-bold text-neutral-700 text-2xl", children: ((_a2 = stats.data) == null ? void 0 : _a2.usersCount) || 0 }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Pengguna" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                User,
                {
                  className: "absolute -bottom-5 -right-5 text-neutral-200",
                  size: 100
                }
              )
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "p-5 border rounded-md flex flex-col justify-center relative overflow-hidden", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "font-bold text-neutral-700 text-2xl", children: (_b2 = stats.data) == null ? void 0 : _b2.complaintsCount }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: "Pengaduan" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                File,
                {
                  className: "absolute -bottom-5 -right-5 text-neutral-200",
                  size: 100
                }
              )
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 relative", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "absolute top-0 left-0 w-full h-full p-5 pt-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          ChartContainer,
          {
            config: chartConfig,
            className: "border p-5 h-full w-full rounded-md",
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
              BarChart,
              {
                accessibilityLayer: true,
                data: (((_c2 = stats.data) == null ? void 0 : _c2.charts) || []).map((item) => ({
                  ...item,
                  date: hooks(item.date).format("DD MMM YYYY")
                })),
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, { vertical: false }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    XAxis,
                    {
                      dataKey: "date",
                      tickLine: false,
                      tickMargin: 10,
                      axisLine: false,
                      tickFormatter: (value) => value.slice(0, 3)
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(ChartTooltip, { content: /* @__PURE__ */ jsxRuntimeExports.jsx(ChartTooltipContent, {}) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(ChartLegend, { content: /* @__PURE__ */ jsxRuntimeExports.jsx(ChartLegendContent, {}) }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { dataKey: "allCount", fill: "var(--color-allCount)", radius: 4 }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    Bar,
                    {
                      dataKey: "resolvedCount",
                      fill: "var(--color-resolvedCount)",
                      radius: 4
                    }
                  )
                ]
              }
            )
          }
        ) }) })
      ] });
    }
    const router = createBrowserRouter(
      [
        {
          path: "/auth/login",
          element: /* @__PURE__ */ jsxRuntimeExports.jsx(Login, {})
        },
        {
          path: "/",
          element: /* @__PURE__ */ jsxRuntimeExports.jsx(Layout, {}),
          children: [
            {
              path: "",
              element: /* @__PURE__ */ jsxRuntimeExports.jsx(Dashboard, {})
            },
            {
              path: "complaint",
              element: /* @__PURE__ */ jsxRuntimeExports.jsx(Complaint, {})
            },
            {
              path: "complaint/:id",
              element: /* @__PURE__ */ jsxRuntimeExports.jsx(ComplaintDetail, {})
            }
          ]
        }
      ],
      {
        basename: "/admin"
      }
    );
    var M = (e, i2, s2, u2, m2, a2, l, h) => {
      let d = document.documentElement, w = ["light", "dark"];
      function p2(n2) {
        (Array.isArray(e) ? e : [e]).forEach((y2) => {
          let k2 = y2 === "class", S = k2 && a2 ? m2.map((f) => a2[f] || f) : m2;
          k2 ? (d.classList.remove(...S), d.classList.add(a2 && a2[n2] ? a2[n2] : n2)) : d.setAttribute(y2, n2);
        }), R(n2);
      }
      function R(n2) {
        h && w.includes(n2) && (d.style.colorScheme = n2);
      }
      function c2() {
        return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
      }
      if (u2) p2(u2);
      else try {
        let n2 = localStorage.getItem(i2) || s2, y2 = l && n2 === "system" ? c2() : n2;
        p2(y2);
      } catch (n2) {
      }
    };
    var x = reactExports.createContext(void 0), U = { setTheme: (e) => {
    }, themes: [] }, z = () => {
      var e;
      return (e = reactExports.useContext(x)) != null ? e : U;
    };
    reactExports.memo(({ forcedTheme: e, storageKey: i2, attribute: s2, enableSystem: u2, enableColorScheme: m2, defaultTheme: a2, value: l, themes: h, nonce: d, scriptProps: w }) => {
      let p2 = JSON.stringify([s2, i2, a2, e, h, l, u2, m2]).slice(1, -1);
      return reactExports.createElement("script", { ...w, suppressHydrationWarning: true, nonce: typeof window == "undefined" ? d : "", dangerouslySetInnerHTML: { __html: `(${M.toString()})(${p2})` } });
    });
    const Toaster = ({ ...props }) => {
      const { theme = "system" } = z();
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        Toaster$1,
        {
          theme,
          className: "toaster group",
          style: {
            "--normal-bg": "var(--popover)",
            "--normal-text": "var(--popover-foreground)",
            "--normal-border": "var(--border)"
          },
          ...props
        }
      );
    };
    const queryClient = new QueryClient();
    clientExports.createRoot(document.getElementById("root")).render(
      /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(CookiesProvider, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(QueryClientProvider, { client: queryClient, children: /* @__PURE__ */ jsxRuntimeExports.jsx(RouterProvider, { router }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Toaster, {})
      ] }) })
    );
  }
});
export default require_index_001();
